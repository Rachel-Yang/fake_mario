/**
 * Name: fake_mario_top
 * Description: top level of fake_mario
**/
module fake_mario_top(	
	   	input         CLK_50, 		//		clk.clk
		// PIO Interface
		input  [3:0]  KEY,  		//   	key_wire.export
		output [7:0]  LEDG, 		//  	ledg_wire.export
		output [15:0] LEDR, 		//  	ledr_wire.export
		input  [15:0] SW,   	  	//    	sw_wire.export
		output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7,
									// 		hex display on board for debug
		// DRAM Interface
		output        DRAM_CLK,		//  	sdram_clk.clk
		output [12:0] DRAM_ADDR,	// 		sdram_wire.addr
		output [1:0]  DRAM_BA,    	//           .ba
		output        DRAM_CAS_N, 	//           .cas_n
		output        DRAM_CKE,   	//           .cke
		output        DRAM_CS_N,  	//           .cs_n
		inout  [31:0] DRAM_DQ,    	//           .dq
		output [3:0]  DRAM_DQM,   	//           .dqm
		output        DRAM_RAS_N, 	//           .ras_n
		output        DRAM_WE_N,  	//           .we_n
		// CY7C67200 Interface
		inout  wire  [15:0] OTG_DATA,     //CY7C67200 Data bus 16 Bits
		output logic [1:0]  OTG_ADDR,     //CY7C67200 Address 2 Bits
		output logic        OTG_CS_N,     //CY7C67200 Chip Select
							OTG_RD_N,     //CY7C67200 Write
							OTG_WR_N,     //CY7C67200 Read
							OTG_RST_N,    //CY7C67200 Reset
		input               OTG_INT,      //CY7C67200 Interrupt
		// VGA Interface 
		output logic [7:0]  VGA_R,        //VGA Red
							VGA_G,        //VGA Green
							VGA_B,        //VGA Blue
		output logic        VGA_CLK,      //VGA Clock
							VGA_SYNC_N,   //VGA Sync signal
							VGA_BLANK_N,  //VGA Blank signal
							VGA_VS,       //VGA virtical sync signal
							VGA_HS       //VGA horizontal sync signal
		//SRAM Interface
		output logic [19:0] SRAM_ADDR,
        output logic SRAM_CE, SRAM_UB, SRAM_LB, SRAM_OE, SRAM_WE,
        inout  wire  [15:0] SRAM_DATA
);

/* Clock and Reset */
logic Reset_h, Clk;
assign Clk = CLK_50;
always_ff @ (posedge Clk) begin
	Reset_h <= ~(KEY[0]);        // The push buttons are active low
end

/**
 * Hex Drivers
 * Description: for debug use
**/
logic[31:0] HEX_DEBUG;

HexDriver Hex0(.In0(HEX_DEBUG[ 3: 0]), .Out0(HEX0));
HexDriver Hex1(.In0(HEX_DEBUG[ 7: 4]), .Out0(HEX1));
HexDriver Hex2(.In0(HEX_DEBUG[11: 8]), .Out0(HEX2));
HexDriver Hex3(.In0(HEX_DEBUG[15:12]), .Out0(HEX3));
HexDriver Hex4(.In0(HEX_DEBUG[19:16]), .Out0(HEX4));
HexDriver Hex5(.In0(HEX_DEBUG[23:20]), .Out0(HEX5));
HexDriver Hex6(.In0(HEX_DEBUG[27:24]), .Out0(HEX6));
HexDriver Hex7(.In0(HEX_DEBUG[31:28]), .Out0(HEX7));


/**
 * SRAM Interface
**/
SRAM_Interface sprites_instance(
    .Clk,
    .CE(SRAM_CE), .UB(SRAM_UB), .LB(SRAM_LB), .OE(SRAM_OE), .WE(SRAM_WE),
    .ADDR(), 
    .Data_from_SRAM(SRAM_DATA),
    .Data_to_Drawing_Engine(ram_color_index)
);


/**
 * HPI interface
 * Description: EZ-OTG HPI Interface
**/
logic [1:0] hpi_addr;
logic [15:0] hpi_data_in, hpi_data_out;
logic hpi_r, hpi_w, hpi_cs, hpi_reset;
logic [7:0] keycode;
hpi_io_intf hpi_io_instance(
						.Clk(Clk),
						.Reset(Reset_h),
						// signals connected to NIOS II
						.from_sw_address(hpi_addr),
						.from_sw_data_in(hpi_data_in),
						.from_sw_data_out(hpi_data_out),
						.from_sw_r(hpi_r),
						.from_sw_w(hpi_w),
						.from_sw_cs(hpi_cs),
						.from_sw_reset(hpi_reset),
						// signals connected to EZ-OTG chip
						.OTG_DATA(OTG_DATA),    
						.OTG_ADDR(OTG_ADDR),    
						.OTG_RD_N(OTG_RD_N),    
						.OTG_WR_N(OTG_WR_N),    
						.OTG_CS_N(OTG_CS_N),
						.OTG_RST_N(OTG_RST_N)
);

/**
 * VGA
 * Description:
**/
logic [ 9:0] DrawX, DrawY;
vga_clk vga_clk_instance(.inclk0(Clk), .c0(VGA_CLK));

VGA_controller vga_controller_instance(
	.Clk, .Reset(Reset_h),     
	.VGA_HS, .VGA_VS, .VGA_CLK,     
	.VGA_BLANK_N, .VGA_SYNC_N,
	.DrawX, .DrawY
);

display_engine display_engine_instance(
	.DrawX, .DrawY, .Clk, 	// input index
	.VGA_R, .VGA_G, .VGA_B, // output RGB
	.

);

assign HEX_DEBUG = {VGA_R, VGA_G, VGA_B, 8'b0};

/**
 * Name: fake_mario_soc
 * Description: connected to fake_mario_soc
**/
fake_mario fake_mario_soc
(
	.clk_clk(CLK_50),
	.reset_reset_n(1'b1),
	.key_wire_export(KEY), 
	.ledg_wire_export(LEDG),
	.ledr_wire_export(LEDR), 
	.sw_wire_export(SW), 
	//sdram
	.sdram_clk_clk(DRAM_CLK),
	.sdram_wire_addr(DRAM_ADDR), 
	.sdram_wire_ba(DRAM_BA), 
	.sdram_wire_cas_n(DRAM_CAS_N), 
	.sdram_wire_cke(DRAM_CKE), 
	.sdram_wire_cs_n(DRAM_CS_N), 
	.sdram_wire_dq(DRAM_DQ),
	.sdram_wire_dqm(DRAM_DQM), 
	.sdram_wire_ras_n(DRAM_RAS_N), 
	.sdram_wire_we_n(DRAM_WE_N),
	//otg_hpi
	.keycode_export(keycode),
	.otg_hpi_address_export(hpi_addr),
	.otg_hpi_data_in_port(hpi_data_in),
	.otg_hpi_data_out_port(hpi_data_out),
	.otg_hpi_cs_export(hpi_cs),
	.otg_hpi_r_export(hpi_r),
	.otg_hpi_w_export(hpi_w),
	.otg_hpi_reset_export(hpi_reset)
);

endmodule
