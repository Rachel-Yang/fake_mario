
fake_mario_app.elf:     file format elf32-littlenios2
fake_mario_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014050 memsz 0x00014050 flags r-x
    LOAD off    0x00015070 vaddr 0x10014070 paddr 0x10015b5c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00017648 vaddr 0x10017648 paddr 0x10017648 align 2**12
         filesz 0x00000000 memsz 0x000004bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000133e8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a58  10013618  10013618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10014070  10015b5c  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004bc  10017648  10017648  00017648  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00016b5c  2**0
                  CONTENTS
  7 .sdram        00000000  10017b04  10017b04  00016b5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016b5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fb8  00000000  00000000  00016b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000243b1  00000000  00000000  00017b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000095a4  00000000  00000000  0003bee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bd7b  00000000  00000000  0004548d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002728  00000000  00000000  00051208  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d1b  00000000  00000000  00053930  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  0005764b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006eeb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001908  00000000  00000000  0006eef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00073f22  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00073f25  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00073f31  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00073f32  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00073f33  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00073f37  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00073f3b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00073f3f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00073f4a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00073f55  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00073f60  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  00073f6a  2**0
                  CONTENTS, READONLY
 30 .jdi          00005568  00000000  00000000  00073f96  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008c681  00000000  00000000  000794fe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10013618 l    d  .rodata	00000000 .rodata
10014070 l    d  .rwdata	00000000 .rwdata
10017648 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10017b04 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../fake_mario_app_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 block.c
1001768c l     O .bss	00000300 level_block_info
00000000 l    df *ABS*	00000000 draw_screen.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_util.c
10017648 l     O .bss	00000001 data_size
1001764a l     O .bss	00000002 ctl_reg
1001764c l     O .bss	00000002 no_device
1001764e l     O .bss	00000001 toggle
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mario_move.c
100030d0 l     F .text	00000058 face_to
10003128 l     F .text	00000278 get_speed
00000000 l    df *ABS*	00000000 spike.c
1001798c l     O .bss	00000050 level_spike_info
10017650 l     O .bss	00000004 spike_num
10003968 l     F .text	000000f0 level2_is_spike
10003a58 l     F .text	00000178 point_is_spike
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10013db6 l     O .rodata	00000010 zeroes.4404
10006664 l     F .text	000000bc __sbprintf
10013dc6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10006874 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100083cc l     F .text	00000008 __fp_unlock
100083e0 l     F .text	0000019c __sinit.part.1
1000857c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10014070 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100144b4 l     O .rwdata	00000020 lc_ctype_charset
10014494 l     O .rwdata	00000020 lc_message_charset
100144d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10013df8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000b928 l     F .text	000000fc __sprint_r.part.0
10013f1c l     O .rodata	00000010 zeroes.4349
1000cf64 l     F .text	000000bc __sbprintf
10013f2c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10010df8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10010f0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010f38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1001102c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10011114 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10011200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100113dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10015b4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10011680 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100117bc l     F .text	00000034 alt_dev_reg
10014abc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10011a98 l     F .text	0000020c altera_avalon_jtag_uart_irq
10011ca4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10012580 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100129e0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10012b40 l     F .text	0000003c alt_get_errno
10012b7c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017688 g     O .bss	00000004 alt_instruction_exception_handler
1000af6c g     F .text	00000074 _mprec_log10
1000b058 g     F .text	0000008c __any_on
1000d518 g     F .text	00000054 _isatty_r
10013e04 g     O .rodata	00000028 __mprec_tinytens
10011318 g     F .text	0000007c alt_main
10004200 g     F .text	000000c0 _puts_r
10017a04 g     O .bss	00000100 alt_irq
1000d56c g     F .text	00000060 _lseek_r
10015b5c g       *ABS*	00000000 __flash_rwdata_start
1000f7d0 g     F .text	00000088 .hidden __eqdf2
10017b04 g       *ABS*	00000000 __alt_heap_start
100041c4 g     F .text	0000003c printf
1000d784 g     F .text	0000009c _wcrtomb_r
1000b7e8 g     F .text	0000005c __sseek
1000872c g     F .text	00000010 __sinit
1000d62c g     F .text	00000140 __swbuf_r
10009200 g     F .text	0000007c _setlocale_r
10008584 g     F .text	00000078 __sfmoreglue
100113b8 g     F .text	00000024 __malloc_unlock
10002894 g     F .text	00000080 UsbGetRetryCnt
10000664 g     F .text	0000020c level_block_info_init
10009ed0 g     F .text	0000015c memmove
10000938 g     F .text	00000088 IO_init
10008714 g     F .text	00000018 _cleanup
1000a02c g     F .text	000000a8 _Balloc
1000f858 g     F .text	000000dc .hidden __gtdf2
10012f68 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
100033a0 g     F .text	000001b4 mario_move_init
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000d4bc g     F .text	0000005c _fstat_r
1001766c g     O .bss	00000004 errno
1000b764 g     F .text	00000008 __seofread
10000a98 g     F .text	000002dc get_keycode
10017674 g     O .bss	00000004 alt_argv
1001db1c g       *ABS*	00000000 _gp
10011650 g     F .text	00000030 usleep
1001493c g     O .rwdata	00000180 alt_fd_list
10012f8c g     F .text	00000090 alt_find_dev
10009d88 g     F .text	00000148 memcpy
100083d4 g     F .text	0000000c _cleanup_r
10010c10 g     F .text	000000dc .hidden __floatsidf
10012ac4 g     F .text	0000007c alt_io_redirect
1000f934 g     F .text	000000f4 .hidden __ltdf2
10013618 g       *ABS*	00000000 __DTOR_END__
100042c0 g     F .text	00000014 puts
100131e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000b648 g     F .text	00000074 __fpclassifyd
1000aec8 g     F .text	000000a4 __ratio
1000cf48 g     F .text	0000001c __vfiprintf_internal
10011e9c g     F .text	0000021c altera_avalon_jtag_uart_read
10004194 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003fb0 g     F .text	00000064 .hidden __udivsi3
10000d74 g     F .text	00000aac keyboard_init
10011068 g     F .text	000000ac isatty
10013e54 g     O .rodata	000000c8 __mprec_tens
1000927c g     F .text	0000000c __locale_charset
10017668 g     O .bss	00000004 __malloc_top_pad
10001f20 g     F .text	00000268 UsbGetConfigDesc2
10015b24 g     O .rwdata	00000004 __mb_cur_max
100092ac g     F .text	0000000c _localeconv_r
1000a460 g     F .text	0000003c __i2b
10008bb0 g     F .text	000004c8 __sfvwrite_r
1000b6bc g     F .text	00000054 _sbrk_r
1000d5cc g     F .text	00000060 _read_r
10015b44 g     O .rwdata	00000004 alt_max_fd
1000d1b0 g     F .text	000000f0 _fclose_r
1000839c g     F .text	00000030 fflush
10017664 g     O .bss	00000004 __malloc_max_sbrked_mem
1000e554 g     F .text	000008ac .hidden __adddf3
1000ac70 g     F .text	0000010c __b2d
1000df68 g     F .text	000005c4 .hidden __umoddi3
1001123c g     F .text	000000dc lseek
10015b1c g     O .rwdata	00000004 _global_impure_ptr
1000b0e4 g     F .text	00000564 _realloc_r
10017b04 g       *ABS*	00000000 __bss_end
100128f0 g     F .text	000000f0 alt_iic_isr_register
10012e60 g     F .text	00000108 alt_tick
1000d96c g     F .text	000005fc .hidden __udivdi3
1000d418 g     F .text	00000024 _fputwc_r
10013e2c g     O .rodata	00000028 __mprec_bigtens
1000a244 g     F .text	00000104 __s2b
10010cec g     F .text	000000a8 .hidden __floatunsidf
100004a0 g     F .text	0000007c is_ground
1000a9b0 g     F .text	00000060 __mcmp
10000870 g     F .text	000000c8 draw_screen
10001970 g     F .text	00000100 UsbSetAddress
1000874c g     F .text	00000018 __fp_lock_all
100128a4 g     F .text	0000004c alt_ic_irq_enabled
10012dc4 g     F .text	0000009c alt_alarm_stop
1001767c g     O .bss	00000004 alt_irq_active
10002994 g     F .text	000001fc handle_level
100000fc g     F .exceptions	000000d4 alt_irq_handler
10014914 g     O .rwdata	00000028 alt_dev_null
10012560 g     F .text	00000020 alt_dcache_flush_all
1000a348 g     F .text	00000068 __hi0bits
10000a30 g     F .text	00000068 IO_read
10010b90 g     F .text	00000080 .hidden __fixdfsi
10015b5c g       *ABS*	00000000 __ram_rwdata_end
10015b3c g     O .rwdata	00000008 alt_dev_list
100116bc g     F .text	00000100 write
10014070 g       *ABS*	00000000 __ram_rodata_end
10010f74 g     F .text	000000b8 fstat
1000f934 g     F .text	000000f4 .hidden __ledf2
10002914 g     F .text	00000080 UsbPrintMem
1000a728 g     F .text	00000140 __pow5mult
1000ba3c g     F .text	0000150c ___vfiprintf_internal_r
1001765c g     O .bss	00000004 __nlocale_changed
10004014 g     F .text	00000058 .hidden __umodsi3
10017b04 g       *ABS*	00000000 end
100119d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10013618 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10010d94 g     F .text	00000064 .hidden __clzsi2
100120b8 g     F .text	00000224 altera_avalon_jtag_uart_write
1000873c g     F .text	00000004 __sfp_lock_acquire
10009ca4 g     F .text	000000e4 memchr
1000436c g     F .text	000022dc ___vfprintf_internal_r
10002288 g     F .text	00000100 UsbClassRequest
100088a0 g     F .text	00000310 _free_r
10009288 g     F .text	00000010 __locale_mb_cur_max
10013464 g     F .text	00000180 __call_exitprocs
10017658 g     O .bss	00000004 __mlocale_changed
10015b28 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10017680 g     O .bss	00000004 _alt_tick_rate
1000a868 g     F .text	00000148 __lshift
10017684 g     O .bss	00000004 _alt_nticks
10011418 g     F .text	00000104 read
10011828 g     F .text	0000004c alt_sys_init
1001334c g     F .text	00000118 __register_exitproc
1000a49c g     F .text	0000028c __multiply
10011d44 g     F .text	00000068 altera_avalon_jtag_uart_close
1000e52c g     F .text	00000028 .hidden __mulsi3
10014070 g       *ABS*	00000000 __ram_rwdata_start
10013618 g       *ABS*	00000000 __ram_rodata_start
100179dc g     O .bss	00000028 __malloc_current_mallinfo
1000ad7c g     F .text	0000014c __d2b
10001a70 g     F .text	00000148 UsbGetDeviceDesc1
10011874 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10013124 g     F .text	000000c4 alt_get_fd
10012408 g     F .text	00000158 alt_busy_sleep
1000d080 g     F .text	00000054 _close_r
100003b4 g     F .text	000000ec is_wall
100132d0 g     F .text	0000007c memcmp
10011934 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10017b04 g       *ABS*	00000000 __alt_stack_base
10011984 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10006720 g     F .text	00000154 __swsetup_r
1000032c g     F .text	00000088 is_block
1000ee00 g     F .text	000009d0 .hidden __divdf3
100085fc g     F .text	00000118 __sfp
1000afe0 g     F .text	00000078 __copybits
1001450c g     O .rwdata	00000408 __malloc_av_
10008748 g     F .text	00000004 __sinit_lock_release
10003cc4 g     F .text	00000128 set_spike
1000fa28 g     F .text	0000086c .hidden __muldf3
1000b710 g     F .text	00000054 __sread
10002810 g     F .text	00000084 UsbWaitTDListDone
1001301c g     F .text	00000108 alt_find_file
100125bc g     F .text	000000a4 alt_dev_llist_insert
10011394 g     F .text	00000024 __malloc_lock
100115a0 g     F .text	000000b0 sbrk
10008340 g     F .text	0000005c _fflush_r
1000d0d4 g     F .text	000000dc _calloc_r
10017648 g       *ABS*	00000000 __bss_start
1000406c g     F .text	00000128 memset
10002cb4 g     F .text	0000041c main
10017678 g     O .bss	00000004 alt_envp
10017660 g     O .bss	00000004 __malloc_max_total_mem
100118d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002188 g     F .text	00000100 UsbSetConfig
1000d76c g     F .text	00000018 __swbuf
1000b844 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000d2a0 g     F .text	00000014 fclose
10006a9c g     F .text	00001688 _dtoa_r
10009498 g     F .text	0000080c _malloc_r
1000d8e0 g     F .text	00000030 __ascii_wctomb
10015b48 g     O .rwdata	00000004 alt_errno
10009078 g     F .text	000000c4 _fwalk
10003eb8 g     F .text	00000084 .hidden __divsi3
1000877c g     F .text	00000124 _malloc_trim_r
10002388 g     F .text	00000148 UsbGetHidDesc
10013618 g       *ABS*	00000000 __CTOR_END__
100002bc g     F .text	00000070 level2_set_block
1000b84c g     F .text	000000dc strcmp
10013618 g       *ABS*	00000000 __flash_rodata_start
10013618 g       *ABS*	00000000 __DTOR_LIST__
1000f7d0 g     F .text	00000088 .hidden __nedf2
10001878 g     F .text	00000044 UsbRead
100117f0 g     F .text	00000038 alt_irq_init
1001151c g     F .text	00000084 alt_release_fd
10013f3c g     O .rodata	00000100 .hidden __clz_tab
10017654 g     O .bss	00000004 _PathLocale
10013284 g     F .text	00000014 atexit
1000d020 g     F .text	00000060 _write_r
100092b8 g     F .text	00000018 setlocale
10003dec g     F .text	000000cc level_spike_info_init
10015b20 g     O .rwdata	00000004 _impure_ptr
10017670 g     O .bss	00000004 alt_argc
10008124 g     F .text	0000021c __sflush_r
100126c0 g     F .text	00000060 _do_dtors
100092a4 g     F .text	00000008 __locale_cjk_lang
10003bd0 g     F .text	000000f4 is_spike
10000020 g       .exceptions	00000000 alt_irq_entry
1000ac0c g     F .text	00000064 __ulp
10008764 g     F .text	00000018 __fp_unlock_all
1000026c g     F .text	00000050 out_screen
10015b34 g     O .rwdata	00000008 alt_fs_list
100024d0 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100092d0 g     F .text	0000000c localeconv
10012740 g     F .text	00000050 alt_ic_isr_register
10015b5c g       *ABS*	00000000 _edata
10017b04 g       *ABS*	00000000 _end
100005b0 g     F .text	000000b4 set_block
10001820 g     F .text	00000058 UsbWrite
1000d2b4 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10011dac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10012818 g     F .text	0000008c alt_ic_irq_disable
1000b76c g     F .text	0000007c __swrite
10015b2c g     O .rwdata	00000004 __malloc_trim_threshold
10009298 g     F .text	0000000c __locale_msgcharset
10013298 g     F .text	00000038 exit
1000913c g     F .text	000000c4 _fwalk_reent
1000aa10 g     F .text	000001fc __mdiff
10002b90 g     F .text	00000124 handle_keycode
10003f3c g     F .text	00000074 .hidden __modsi3
1000051c g     F .text	00000094 can_move
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10008740 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100009c0 g     F .text	00000070 IO_write
100135e4 g     F .text	00000034 _exit
100122dc g     F .text	0000012c alt_alarm_start
100092dc g     F .text	000001bc __smakebuf_r
100042d4 g     F .text	00000098 strlen
10012c68 g     F .text	0000015c open
1000f858 g     F .text	000000dc .hidden __gedf2
10015b30 g     O .rwdata	00000004 __wctomb
10003554 g     F .text	00000414 mario_move_update
1000ba24 g     F .text	00000018 __sprint_r
10012720 g     F .text	00000020 alt_icache_flush_all
10015b50 g     O .rwdata	00000004 alt_priority_mask
10012790 g     F .text	00000088 alt_ic_irq_enable
10006648 g     F .text	0000001c __vfprintf_internal
1000d910 g     F .text	0000005c _wctomb_r
10010294 g     F .text	000008fc .hidden __subdf3
1000a3b0 g     F .text	000000b0 __lo0bits
10001d90 g     F .text	00000190 UsbGetConfigDesc1
10015b54 g     O .rwdata	00000008 alt_alarm_list
10012660 g     F .text	00000060 _do_ctors
100018bc g     F .text	000000b4 UsbSoftReset
1000d820 g     F .text	000000c0 wcrtomb
10010e34 g     F .text	000000d8 close
10001bb8 g     F .text	000001d8 UsbGetDeviceDesc2
1001117c g     F .text	00000084 alt_load
1000d43c g     F .text	00000080 fputwc
10008744 g     F .text	00000004 __sinit_lock_acquire
1000a0fc g     F .text	00000148 __multadd
1000a0d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109e8104 	addi	r2,r2,31236
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109e8104 	addi	r2,r2,31236
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6db17 	ldw	r2,-25748(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6db17 	ldw	r2,-25748(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b6c714 	ori	gp,gp,56092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109d9214 	ori	r2,r2,30280

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18dec114 	ori	r3,r3,31492

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	001117c0 	call	1001117c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00113180 	call	10011318 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <out_screen>:
#include <string.h>

static char level_block_info[BLOCK_NUM];

int out_screen(int pos_x, int pos_y)
{
1000026c:	defffc04 	addi	sp,sp,-16
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
10000278:	e13ffe15 	stw	r4,-8(fp)
1000027c:	e17fff15 	stw	r5,-4(fp)
    int flag = 0;
10000280:	e03ffd15 	stw	zero,-12(fp)
    if (pos_y < MARIO_LOWER_LIMIT
10000284:	e0bfff17 	ldw	r2,-4(fp)
10000288:	10800290 	cmplti	r2,r2,10
1000028c:	1000041e 	bne	r2,zero,100002a0 <out_screen+0x34>
     || pos_y + MARIO_Y > MARIO_UPPER_LIMIT)
10000290:	e0bfff17 	ldw	r2,-4(fp)
10000294:	10800604 	addi	r2,r2,24
10000298:	108075d0 	cmplti	r2,r2,471
1000029c:	1000021e 	bne	r2,zero,100002a8 <out_screen+0x3c>
        flag = 1;
100002a0:	00800044 	movi	r2,1
100002a4:	e0bffd15 	stw	r2,-12(fp)
    return flag;
100002a8:	e0bffd17 	ldw	r2,-12(fp)
}
100002ac:	e037883a 	mov	sp,fp
100002b0:	df000017 	ldw	fp,0(sp)
100002b4:	dec00104 	addi	sp,sp,4
100002b8:	f800283a 	ret

100002bc <level2_set_block>:

void level2_set_block()
{
100002bc:	defffc04 	addi	sp,sp,-16
100002c0:	dfc00315 	stw	ra,12(sp)
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
    volatile unsigned int *INFO = (unsigned int*)0x80;
100002cc:	00802004 	movi	r2,128
100002d0:	e0bfff15 	stw	r2,-4(fp)
    if (*INFO >> 31 == 0)
100002d4:	e0bfff17 	ldw	r2,-4(fp)
100002d8:	10800017 	ldw	r2,0(r2)
100002dc:	10000716 	blt	r2,zero,100002fc <level2_set_block+0x40>
    {
        set_block(0, 5, 7, 1, BLOCK_UNSET);
100002e0:	d8000015 	stw	zero,0(sp)
100002e4:	01c00044 	movi	r7,1
100002e8:	018001c4 	movi	r6,7
100002ec:	01400144 	movi	r5,5
100002f0:	0009883a 	mov	r4,zero
100002f4:	00005b00 	call	100005b0 <set_block>
    }
    else
    {
        set_block(0, 5, 7, 1, BLOCK_UNSET);
    }
}
100002f8:	00000606 	br	10000314 <level2_set_block+0x58>
    {
        set_block(0, 5, 7, 1, BLOCK_UNSET);
    }
    else
    {
        set_block(0, 5, 7, 1, BLOCK_UNSET);
100002fc:	d8000015 	stw	zero,0(sp)
10000300:	01c00044 	movi	r7,1
10000304:	018001c4 	movi	r6,7
10000308:	01400144 	movi	r5,5
1000030c:	0009883a 	mov	r4,zero
10000310:	00005b00 	call	100005b0 <set_block>
    }
}
10000314:	0001883a 	nop
10000318:	e037883a 	mov	sp,fp
1000031c:	dfc00117 	ldw	ra,4(sp)
10000320:	df000017 	ldw	fp,0(sp)
10000324:	dec00204 	addi	sp,sp,8
10000328:	f800283a 	ret

1000032c <is_block>:

int is_block(int pos_x, int pos_y)
{
1000032c:	defffa04 	addi	sp,sp,-24
10000330:	dfc00515 	stw	ra,20(sp)
10000334:	df000415 	stw	fp,16(sp)
10000338:	df000404 	addi	fp,sp,16
1000033c:	e13ffe15 	stw	r4,-8(fp)
10000340:	e17fff15 	stw	r5,-4(fp)
    int x = pos_x / BLOCK_WIDTH;
10000344:	e0bffe17 	ldw	r2,-8(fp)
10000348:	01400504 	movi	r5,20
1000034c:	1009883a 	mov	r4,r2
10000350:	0003eb80 	call	10003eb8 <__divsi3>
10000354:	e0bffc15 	stw	r2,-16(fp)
    int y = pos_y / BLOCK_WIDTH;
10000358:	e0bfff17 	ldw	r2,-4(fp)
1000035c:	01400504 	movi	r5,20
10000360:	1009883a 	mov	r4,r2
10000364:	0003eb80 	call	10003eb8 <__divsi3>
10000368:	e0bffd15 	stw	r2,-12(fp)
    return (level_block_info[y * BLOCK_X_NUM + x] == 1);
1000036c:	e0bffd17 	ldw	r2,-12(fp)
10000370:	1006917a 	slli	r3,r2,5
10000374:	e0bffc17 	ldw	r2,-16(fp)
10000378:	1887883a 	add	r3,r3,r2
1000037c:	00840074 	movhi	r2,4097
10000380:	109da304 	addi	r2,r2,30348
10000384:	10c5883a 	add	r2,r2,r3
10000388:	10800003 	ldbu	r2,0(r2)
1000038c:	10803fcc 	andi	r2,r2,255
10000390:	1080201c 	xori	r2,r2,128
10000394:	10bfe004 	addi	r2,r2,-128
10000398:	10800060 	cmpeqi	r2,r2,1
1000039c:	10803fcc 	andi	r2,r2,255
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	dfc00117 	ldw	ra,4(sp)
100003a8:	df000017 	ldw	fp,0(sp)
100003ac:	dec00204 	addi	sp,sp,8
100003b0:	f800283a 	ret

100003b4 <is_wall>:

int is_wall(int pos_x, int pos_y)
{
100003b4:	defffb04 	addi	sp,sp,-20
100003b8:	dfc00415 	stw	ra,16(sp)
100003bc:	df000315 	stw	fp,12(sp)
100003c0:	df000304 	addi	fp,sp,12
100003c4:	e13ffe15 	stw	r4,-8(fp)
100003c8:	e17fff15 	stw	r5,-4(fp)
    int flag = 0;
100003cc:	e03ffd15 	stw	zero,-12(fp)
    if ((1 == is_block(pos_x, pos_y))
100003d0:	e17fff17 	ldw	r5,-4(fp)
100003d4:	e13ffe17 	ldw	r4,-8(fp)
100003d8:	000032c0 	call	1000032c <is_block>
100003dc:	10800060 	cmpeqi	r2,r2,1
100003e0:	1000271e 	bne	r2,zero,10000480 <is_wall+0xcc>
     || (1 == is_block(pos_x, pos_y + MARIO_Y))
100003e4:	e0bfff17 	ldw	r2,-4(fp)
100003e8:	10800604 	addi	r2,r2,24
100003ec:	100b883a 	mov	r5,r2
100003f0:	e13ffe17 	ldw	r4,-8(fp)
100003f4:	000032c0 	call	1000032c <is_block>
100003f8:	10800060 	cmpeqi	r2,r2,1
100003fc:	1000201e 	bne	r2,zero,10000480 <is_wall+0xcc>
     || (1 == is_block(pos_x + MARIO_X, pos_y))
10000400:	e0bffe17 	ldw	r2,-8(fp)
10000404:	10800504 	addi	r2,r2,20
10000408:	e17fff17 	ldw	r5,-4(fp)
1000040c:	1009883a 	mov	r4,r2
10000410:	000032c0 	call	1000032c <is_block>
10000414:	10800060 	cmpeqi	r2,r2,1
10000418:	1000191e 	bne	r2,zero,10000480 <is_wall+0xcc>
     || (1 == is_block(pos_x + MARIO_X, pos_y + MARIO_Y))
1000041c:	e0bffe17 	ldw	r2,-8(fp)
10000420:	10c00504 	addi	r3,r2,20
10000424:	e0bfff17 	ldw	r2,-4(fp)
10000428:	10800604 	addi	r2,r2,24
1000042c:	100b883a 	mov	r5,r2
10000430:	1809883a 	mov	r4,r3
10000434:	000032c0 	call	1000032c <is_block>
10000438:	10800060 	cmpeqi	r2,r2,1
1000043c:	1000101e 	bne	r2,zero,10000480 <is_wall+0xcc>
     || (1 == is_block(pos_x, pos_y + MARIO_Y / 2))
10000440:	e0bfff17 	ldw	r2,-4(fp)
10000444:	10800304 	addi	r2,r2,12
10000448:	100b883a 	mov	r5,r2
1000044c:	e13ffe17 	ldw	r4,-8(fp)
10000450:	000032c0 	call	1000032c <is_block>
10000454:	10800060 	cmpeqi	r2,r2,1
10000458:	1000091e 	bne	r2,zero,10000480 <is_wall+0xcc>
     || (1 == is_block(pos_x + MARIO_X, pos_y + MARIO_Y / 2))
1000045c:	e0bffe17 	ldw	r2,-8(fp)
10000460:	10c00504 	addi	r3,r2,20
10000464:	e0bfff17 	ldw	r2,-4(fp)
10000468:	10800304 	addi	r2,r2,12
1000046c:	100b883a 	mov	r5,r2
10000470:	1809883a 	mov	r4,r3
10000474:	000032c0 	call	1000032c <is_block>
10000478:	10800058 	cmpnei	r2,r2,1
1000047c:	1000021e 	bne	r2,zero,10000488 <is_wall+0xd4>
    )
        flag = 1;
10000480:	00800044 	movi	r2,1
10000484:	e0bffd15 	stw	r2,-12(fp)
    return flag;
10000488:	e0bffd17 	ldw	r2,-12(fp)
}
1000048c:	e037883a 	mov	sp,fp
10000490:	dfc00117 	ldw	ra,4(sp)
10000494:	df000017 	ldw	fp,0(sp)
10000498:	dec00204 	addi	sp,sp,8
1000049c:	f800283a 	ret

100004a0 <is_ground>:

int is_ground(int pos_x, int pos_y)
{
100004a0:	defffb04 	addi	sp,sp,-20
100004a4:	dfc00415 	stw	ra,16(sp)
100004a8:	df000315 	stw	fp,12(sp)
100004ac:	df000304 	addi	fp,sp,12
100004b0:	e13ffe15 	stw	r4,-8(fp)
100004b4:	e17fff15 	stw	r5,-4(fp)
    int flag = 0;
100004b8:	e03ffd15 	stw	zero,-12(fp)
    if ((1 == is_block(pos_x, pos_y + MARIO_Y + 1))
100004bc:	e0bfff17 	ldw	r2,-4(fp)
100004c0:	10800644 	addi	r2,r2,25
100004c4:	100b883a 	mov	r5,r2
100004c8:	e13ffe17 	ldw	r4,-8(fp)
100004cc:	000032c0 	call	1000032c <is_block>
100004d0:	10800060 	cmpeqi	r2,r2,1
100004d4:	1000091e 	bne	r2,zero,100004fc <is_ground+0x5c>
     || (1 == is_block(pos_x + MARIO_X, pos_y + MARIO_Y + 1))
100004d8:	e0bffe17 	ldw	r2,-8(fp)
100004dc:	10c00504 	addi	r3,r2,20
100004e0:	e0bfff17 	ldw	r2,-4(fp)
100004e4:	10800644 	addi	r2,r2,25
100004e8:	100b883a 	mov	r5,r2
100004ec:	1809883a 	mov	r4,r3
100004f0:	000032c0 	call	1000032c <is_block>
100004f4:	10800058 	cmpnei	r2,r2,1
100004f8:	1000021e 	bne	r2,zero,10000504 <is_ground+0x64>
    )
        flag = 1;
100004fc:	00800044 	movi	r2,1
10000500:	e0bffd15 	stw	r2,-12(fp)
    return flag;
10000504:	e0bffd17 	ldw	r2,-12(fp)
}
10000508:	e037883a 	mov	sp,fp
1000050c:	dfc00117 	ldw	ra,4(sp)
10000510:	df000017 	ldw	fp,0(sp)
10000514:	dec00204 	addi	sp,sp,8
10000518:	f800283a 	ret

1000051c <can_move>:

int can_move(int pos_x, int pos_y, int level)
{
1000051c:	defffa04 	addi	sp,sp,-24
10000520:	dfc00515 	stw	ra,20(sp)
10000524:	df000415 	stw	fp,16(sp)
10000528:	df000404 	addi	fp,sp,16
1000052c:	e13ffd15 	stw	r4,-12(fp)
10000530:	e17ffe15 	stw	r5,-8(fp)
10000534:	e1bfff15 	stw	r6,-4(fp)
    int flag = 1;
10000538:	00800044 	movi	r2,1
1000053c:	e0bffc15 	stw	r2,-16(fp)
    if (level == 2)
10000540:	e0bfff17 	ldw	r2,-4(fp)
10000544:	10800098 	cmpnei	r2,r2,2
10000548:	1000011e 	bne	r2,zero,10000550 <can_move+0x34>
        level2_set_block();
1000054c:	00002bc0 	call	100002bc <level2_set_block>
    if (X_LOWER > pos_x
10000550:	e0bffd17 	ldw	r2,-12(fp)
10000554:	10000a16 	blt	r2,zero,10000580 <can_move+0x64>
     || X_UPPER < pos_x + MARIO_X
10000558:	e0bffd17 	ldw	r2,-12(fp)
1000055c:	10800504 	addi	r2,r2,20
10000560:	1080a048 	cmpgei	r2,r2,641
10000564:	1000061e 	bne	r2,zero,10000580 <can_move+0x64>
     || Y_LOWER > pos_y
10000568:	e0bffe17 	ldw	r2,-8(fp)
1000056c:	10000416 	blt	r2,zero,10000580 <can_move+0x64>
     || Y_UPPER < pos_y + MARIO_Y)
10000570:	e0bffe17 	ldw	r2,-8(fp)
10000574:	10800604 	addi	r2,r2,24
10000578:	10807850 	cmplti	r2,r2,481
1000057c:	1000011e 	bne	r2,zero,10000584 <can_move+0x68>
        flag = 0;
10000580:	e03ffc15 	stw	zero,-16(fp)
    if (is_wall(pos_x, pos_y))
10000584:	e17ffe17 	ldw	r5,-8(fp)
10000588:	e13ffd17 	ldw	r4,-12(fp)
1000058c:	00003b40 	call	100003b4 <is_wall>
10000590:	10000126 	beq	r2,zero,10000598 <can_move+0x7c>
        flag = 0;
10000594:	e03ffc15 	stw	zero,-16(fp)
    
    return flag;
10000598:	e0bffc17 	ldw	r2,-16(fp)
}
1000059c:	e037883a 	mov	sp,fp
100005a0:	dfc00117 	ldw	ra,4(sp)
100005a4:	df000017 	ldw	fp,0(sp)
100005a8:	dec00204 	addi	sp,sp,8
100005ac:	f800283a 	ret

100005b0 <set_block>:

void set_block(int x_start, int x_num, int y_start, int y_num, char set)
{
100005b0:	defff804 	addi	sp,sp,-32
100005b4:	df000715 	stw	fp,28(sp)
100005b8:	df000704 	addi	fp,sp,28
100005bc:	e13ffb15 	stw	r4,-20(fp)
100005c0:	e17ffc15 	stw	r5,-16(fp)
100005c4:	e1bffd15 	stw	r6,-12(fp)
100005c8:	e1fffe15 	stw	r7,-8(fp)
100005cc:	e0800117 	ldw	r2,4(fp)
100005d0:	e0bfff05 	stb	r2,-4(fp)
    for (int y = y_start; y < y_start + y_num; y++)
100005d4:	e0bffd17 	ldw	r2,-12(fp)
100005d8:	e0bff915 	stw	r2,-28(fp)
100005dc:	00001706 	br	1000063c <set_block+0x8c>
        for (int x = x_start; x < x_start + x_num; x++) 
100005e0:	e0bffb17 	ldw	r2,-20(fp)
100005e4:	e0bffa15 	stw	r2,-24(fp)
100005e8:	00000c06 	br	1000061c <set_block+0x6c>
            level_block_info[y * BLOCK_X_NUM + x] = set;   
100005ec:	e0bff917 	ldw	r2,-28(fp)
100005f0:	1006917a 	slli	r3,r2,5
100005f4:	e0bffa17 	ldw	r2,-24(fp)
100005f8:	1887883a 	add	r3,r3,r2
100005fc:	00840074 	movhi	r2,4097
10000600:	109da304 	addi	r2,r2,30348
10000604:	10c5883a 	add	r2,r2,r3
10000608:	e0ffff03 	ldbu	r3,-4(fp)
1000060c:	10c00005 	stb	r3,0(r2)
}

void set_block(int x_start, int x_num, int y_start, int y_num, char set)
{
    for (int y = y_start; y < y_start + y_num; y++)
        for (int x = x_start; x < x_start + x_num; x++) 
10000610:	e0bffa17 	ldw	r2,-24(fp)
10000614:	10800044 	addi	r2,r2,1
10000618:	e0bffa15 	stw	r2,-24(fp)
1000061c:	e0fffb17 	ldw	r3,-20(fp)
10000620:	e0bffc17 	ldw	r2,-16(fp)
10000624:	1885883a 	add	r2,r3,r2
10000628:	e0fffa17 	ldw	r3,-24(fp)
1000062c:	18bfef16 	blt	r3,r2,100005ec <__alt_data_end+0xf80005ec>
    return flag;
}

void set_block(int x_start, int x_num, int y_start, int y_num, char set)
{
    for (int y = y_start; y < y_start + y_num; y++)
10000630:	e0bff917 	ldw	r2,-28(fp)
10000634:	10800044 	addi	r2,r2,1
10000638:	e0bff915 	stw	r2,-28(fp)
1000063c:	e0fffd17 	ldw	r3,-12(fp)
10000640:	e0bffe17 	ldw	r2,-8(fp)
10000644:	1885883a 	add	r2,r3,r2
10000648:	e0fff917 	ldw	r3,-28(fp)
1000064c:	18bfe416 	blt	r3,r2,100005e0 <__alt_data_end+0xf80005e0>
        for (int x = x_start; x < x_start + x_num; x++) 
            level_block_info[y * BLOCK_X_NUM + x] = set;   
}
10000650:	0001883a 	nop
10000654:	e037883a 	mov	sp,fp
10000658:	df000017 	ldw	fp,0(sp)
1000065c:	dec00104 	addi	sp,sp,4
10000660:	f800283a 	ret

10000664 <level_block_info_init>:

void level_block_info_init(int level)
{
10000664:	defffc04 	addi	sp,sp,-16
10000668:	dfc00315 	stw	ra,12(sp)
1000066c:	df000215 	stw	fp,8(sp)
10000670:	df000204 	addi	fp,sp,8
10000674:	e13fff15 	stw	r4,-4(fp)
    memset(level_block_info, BLOCK_UNSET, sizeof(char) * BLOCK_NUM);
10000678:	0180c004 	movi	r6,768
1000067c:	000b883a 	mov	r5,zero
10000680:	01040074 	movhi	r4,4097
10000684:	211da304 	addi	r4,r4,30348
10000688:	000406c0 	call	1000406c <memset>
    switch (level)
1000068c:	e0bfff17 	ldw	r2,-4(fp)
10000690:	10c00060 	cmpeqi	r3,r2,1
10000694:	1800041e 	bne	r3,zero,100006a8 <level_block_info_init+0x44>
10000698:	10c000a0 	cmpeqi	r3,r2,2
1000069c:	18003b1e 	bne	r3,zero,1000078c <level_block_info_init+0x128>
100006a0:	10006c26 	beq	r2,zero,10000854 <level_block_info_init+0x1f0>
            set_block(24,  2, 13, 1, BLOCK_SET);
            set_block(24,  8, 16, 1, BLOCK_SET);
            set_block(28,  4, 10, 1, BLOCK_SET);
            break;
        default:
            break;
100006a4:	00006c06 	br	10000858 <level_block_info_init+0x1f4>
    switch (level)
    {
        case 0:
            break;
        case 1:
            set_block( 0, 2, 18, 6, BLOCK_SET);
100006a8:	00800044 	movi	r2,1
100006ac:	d8800015 	stw	r2,0(sp)
100006b0:	01c00184 	movi	r7,6
100006b4:	01800484 	movi	r6,18
100006b8:	01400084 	movi	r5,2
100006bc:	0009883a 	mov	r4,zero
100006c0:	00005b00 	call	100005b0 <set_block>
            set_block( 2, 6, 21, 3, BLOCK_SET);
100006c4:	00800044 	movi	r2,1
100006c8:	d8800015 	stw	r2,0(sp)
100006cc:	01c000c4 	movi	r7,3
100006d0:	01800544 	movi	r6,21
100006d4:	01400184 	movi	r5,6
100006d8:	01000084 	movi	r4,2
100006dc:	00005b00 	call	100005b0 <set_block>
            set_block( 8, 2, 20, 4, BLOCK_SET);
100006e0:	00800044 	movi	r2,1
100006e4:	d8800015 	stw	r2,0(sp)
100006e8:	01c00104 	movi	r7,4
100006ec:	01800504 	movi	r6,20
100006f0:	01400084 	movi	r5,2
100006f4:	01000204 	movi	r4,8
100006f8:	00005b00 	call	100005b0 <set_block>
            set_block(12, 2, 20, 4, BLOCK_SET);
100006fc:	00800044 	movi	r2,1
10000700:	d8800015 	stw	r2,0(sp)
10000704:	01c00104 	movi	r7,4
10000708:	01800504 	movi	r6,20
1000070c:	01400084 	movi	r5,2
10000710:	01000304 	movi	r4,12
10000714:	00005b00 	call	100005b0 <set_block>
            set_block(16, 3, 20, 4, BLOCK_SET);
10000718:	00800044 	movi	r2,1
1000071c:	d8800015 	stw	r2,0(sp)
10000720:	01c00104 	movi	r7,4
10000724:	01800504 	movi	r6,20
10000728:	014000c4 	movi	r5,3
1000072c:	01000404 	movi	r4,16
10000730:	00005b00 	call	100005b0 <set_block>
            set_block(19, 6, 21, 3, BLOCK_SET);
10000734:	00800044 	movi	r2,1
10000738:	d8800015 	stw	r2,0(sp)
1000073c:	01c000c4 	movi	r7,3
10000740:	01800544 	movi	r6,21
10000744:	01400184 	movi	r5,6
10000748:	010004c4 	movi	r4,19
1000074c:	00005b00 	call	100005b0 <set_block>
            set_block(25, 4, 18, 6, BLOCK_SET);
10000750:	00800044 	movi	r2,1
10000754:	d8800015 	stw	r2,0(sp)
10000758:	01c00184 	movi	r7,6
1000075c:	01800484 	movi	r6,18
10000760:	01400104 	movi	r5,4
10000764:	01000644 	movi	r4,25
10000768:	00005b00 	call	100005b0 <set_block>
            set_block(29, 3, 17, 7, BLOCK_SET);
1000076c:	00800044 	movi	r2,1
10000770:	d8800015 	stw	r2,0(sp)
10000774:	01c001c4 	movi	r7,7
10000778:	01800444 	movi	r6,17
1000077c:	014000c4 	movi	r5,3
10000780:	01000744 	movi	r4,29
10000784:	00005b00 	call	100005b0 <set_block>
            break;
10000788:	00003306 	br	10000858 <level_block_info_init+0x1f4>
        case 2:
            set_block( 5, 21,  7, 1, BLOCK_SET);
1000078c:	00800044 	movi	r2,1
10000790:	d8800015 	stw	r2,0(sp)
10000794:	01c00044 	movi	r7,1
10000798:	018001c4 	movi	r6,7
1000079c:	01400544 	movi	r5,21
100007a0:	01000144 	movi	r4,5
100007a4:	00005b00 	call	100005b0 <set_block>
            set_block( 0, 18, 13, 1, BLOCK_SET);
100007a8:	00800044 	movi	r2,1
100007ac:	d8800015 	stw	r2,0(sp)
100007b0:	01c00044 	movi	r7,1
100007b4:	01800344 	movi	r6,13
100007b8:	01400484 	movi	r5,18
100007bc:	0009883a 	mov	r4,zero
100007c0:	00005b00 	call	100005b0 <set_block>
            set_block( 0, 18, 18, 6, BLOCK_SET);
100007c4:	00800044 	movi	r2,1
100007c8:	d8800015 	stw	r2,0(sp)
100007cc:	01c00184 	movi	r7,6
100007d0:	01800484 	movi	r6,18
100007d4:	01400484 	movi	r5,18
100007d8:	0009883a 	mov	r4,zero
100007dc:	00005b00 	call	100005b0 <set_block>
            set_block(23,  1,  8, 9, BLOCK_SET);
100007e0:	00800044 	movi	r2,1
100007e4:	d8800015 	stw	r2,0(sp)
100007e8:	01c00244 	movi	r7,9
100007ec:	01800204 	movi	r6,8
100007f0:	01400044 	movi	r5,1
100007f4:	010005c4 	movi	r4,23
100007f8:	00005b00 	call	100005b0 <set_block>
            set_block(24,  2, 13, 1, BLOCK_SET);
100007fc:	00800044 	movi	r2,1
10000800:	d8800015 	stw	r2,0(sp)
10000804:	01c00044 	movi	r7,1
10000808:	01800344 	movi	r6,13
1000080c:	01400084 	movi	r5,2
10000810:	01000604 	movi	r4,24
10000814:	00005b00 	call	100005b0 <set_block>
            set_block(24,  8, 16, 1, BLOCK_SET);
10000818:	00800044 	movi	r2,1
1000081c:	d8800015 	stw	r2,0(sp)
10000820:	01c00044 	movi	r7,1
10000824:	01800404 	movi	r6,16
10000828:	01400204 	movi	r5,8
1000082c:	01000604 	movi	r4,24
10000830:	00005b00 	call	100005b0 <set_block>
            set_block(28,  4, 10, 1, BLOCK_SET);
10000834:	00800044 	movi	r2,1
10000838:	d8800015 	stw	r2,0(sp)
1000083c:	01c00044 	movi	r7,1
10000840:	01800284 	movi	r6,10
10000844:	01400104 	movi	r5,4
10000848:	01000704 	movi	r4,28
1000084c:	00005b00 	call	100005b0 <set_block>
            break;
10000850:	00000106 	br	10000858 <level_block_info_init+0x1f4>
{
    memset(level_block_info, BLOCK_UNSET, sizeof(char) * BLOCK_NUM);
    switch (level)
    {
        case 0:
            break;
10000854:	0001883a 	nop
            set_block(28,  4, 10, 1, BLOCK_SET);
            break;
        default:
            break;
    }
}
10000858:	0001883a 	nop
1000085c:	e037883a 	mov	sp,fp
10000860:	dfc00117 	ldw	ra,4(sp)
10000864:	df000017 	ldw	fp,0(sp)
10000868:	dec00204 	addi	sp,sp,8
1000086c:	f800283a 	ret

10000870 <draw_screen>:
#include "draw_screen.h"

void draw_screen(int bg_idx, int level, mario_move_t* mario){
10000870:	defffb04 	addi	sp,sp,-20
10000874:	df000415 	stw	fp,16(sp)
10000878:	df000404 	addi	fp,sp,16
1000087c:	e13ffd15 	stw	r4,-12(fp)
10000880:	e17ffe15 	stw	r5,-8(fp)
10000884:	e1bfff15 	stw	r6,-4(fp)
    volatile unsigned int *GPIO = (unsigned int*)0x90;
10000888:	00802404 	movi	r2,144
1000088c:	e0bffc15 	stw	r2,-16(fp)
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
| 31:30  | 29:27     | 26:24     | 23:21         | 20          | 19:10       | 9:0         |
| bg_idx | mario_idx | level_idx | level2_active | mario_alive | mario_pos_x | mario_pos_y |
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
10000890:	e0bfff17 	ldw	r2,-4(fp)
10000894:	10800317 	ldw	r2,12(r2)
10000898:	10c0ffcc 	andi	r3,r2,1023
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
1000089c:	e0bfff17 	ldw	r2,-4(fp)
100008a0:	10800217 	ldw	r2,8(r2)
100008a4:	100892ba 	slli	r4,r2,10
100008a8:	00800434 	movhi	r2,16
100008ac:	10bf0004 	addi	r2,r2,-1024
100008b0:	2084703a 	and	r2,r4,r2
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
| 31:30  | 29:27     | 26:24     | 23:21         | 20          | 19:10       | 9:0         |
| bg_idx | mario_idx | level_idx | level2_active | mario_alive | mario_pos_x | mario_pos_y |
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
100008b4:	1887883a 	add	r3,r3,r2
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
             (((MARIO_ALIVE - mario->alive) << 20) & MARIO_ALIVE_MASK) +
100008b8:	e0bfff17 	ldw	r2,-4(fp)
100008bc:	10800617 	ldw	r2,24(r2)
100008c0:	01000044 	movi	r4,1
100008c4:	2085c83a 	sub	r2,r4,r2
100008c8:	1004953a 	slli	r2,r2,20
100008cc:	1080042c 	andhi	r2,r2,16
| 31:30  | 29:27     | 26:24     | 23:21         | 20          | 19:10       | 9:0         |
| bg_idx | mario_idx | level_idx | level2_active | mario_alive | mario_pos_x | mario_pos_y |
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
100008d0:	1887883a 	add	r3,r3,r2
             (((MARIO_ALIVE - mario->alive) << 20) & MARIO_ALIVE_MASK) +
             ((mario->level2_active << 21) & MARIO_LV2_MASK) +
100008d4:	e0bfff17 	ldw	r2,-4(fp)
100008d8:	10800d17 	ldw	r2,52(r2)
100008dc:	1004957a 	slli	r2,r2,21
100008e0:	1080382c 	andhi	r2,r2,224
| bg_idx | mario_idx | level_idx | level2_active | mario_alive | mario_pos_x | mario_pos_y |
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
             (((MARIO_ALIVE - mario->alive) << 20) & MARIO_ALIVE_MASK) +
100008e4:	1887883a 	add	r3,r3,r2
             ((mario->level2_active << 21) & MARIO_LV2_MASK) +
             ((level << 24) & LEVEL_MASK) +
100008e8:	e0bffe17 	ldw	r2,-8(fp)
100008ec:	1004963a 	slli	r2,r2,24
100008f0:	1081c02c 	andhi	r2,r2,1792
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
             (((MARIO_ALIVE - mario->alive) << 20) & MARIO_ALIVE_MASK) +
             ((mario->level2_active << 21) & MARIO_LV2_MASK) +
100008f4:	1887883a 	add	r3,r3,r2
             ((level << 24) & LEVEL_MASK) +
             ((mario->idx << 27) & MARIO_IDX_MASK) +
100008f8:	e0bfff17 	ldw	r2,-4(fp)
100008fc:	10800517 	ldw	r2,20(r2)
10000900:	100496fa 	slli	r2,r2,27
10000904:	108e002c 	andhi	r2,r2,14336

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
             (((MARIO_ALIVE - mario->alive) << 20) & MARIO_ALIVE_MASK) +
             ((mario->level2_active << 21) & MARIO_LV2_MASK) +
             ((level << 24) & LEVEL_MASK) +
10000908:	1885883a 	add	r2,r3,r2
             ((mario->idx << 27) & MARIO_IDX_MASK) +
1000090c:	1007883a 	mov	r3,r2
             ((bg_idx <<30) & BG_IDX_MASK);
10000910:	e0bffd17 	ldw	r2,-12(fp)
10000914:	100497ba 	slli	r2,r2,30
    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
             ((mario->pos_x_curr << 10) & MARIO_POS_X_MASK) +
             (((MARIO_ALIVE - mario->alive) << 20) & MARIO_ALIVE_MASK) +
             ((mario->level2_active << 21) & MARIO_LV2_MASK) +
             ((level << 24) & LEVEL_MASK) +
             ((mario->idx << 27) & MARIO_IDX_MASK) +
10000918:	1887883a 	add	r3,r3,r2
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
| 31:30  | 29:27     | 26:24     | 23:21         | 20          | 19:10       | 9:0         |
| bg_idx | mario_idx | level_idx | level2_active | mario_alive | mario_pos_x | mario_pos_y |
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

    *GPIO =  (mario->pos_y_curr & MARIO_POS_Y_MASK) + 
1000091c:	e0bffc17 	ldw	r2,-16(fp)
10000920:	10c00015 	stw	r3,0(r2)
             ((level << 24) & LEVEL_MASK) +
             ((mario->idx << 27) & MARIO_IDX_MASK) +
             ((bg_idx <<30) & BG_IDX_MASK);
    }*/

}
10000924:	0001883a 	nop
10000928:	e037883a 	mov	sp,fp
1000092c:	df000017 	ldw	fp,0(sp)
10000930:	dec00104 	addi	sp,sp,4
10000934:	f800283a 	ret

10000938 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000938:	deffff04 	addi	sp,sp,-4
1000093c:	df000015 	stw	fp,0(sp)
10000940:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000944:	00802804 	movi	r2,160
10000948:	00c00044 	movi	r3,1
1000094c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000950:	00802c04 	movi	r2,176
10000954:	00c00044 	movi	r3,1
10000958:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000095c:	00803404 	movi	r2,208
10000960:	00c00044 	movi	r3,1
10000964:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000968:	00803004 	movi	r2,192
1000096c:	00c00044 	movi	r3,1
10000970:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000974:	00803c04 	movi	r2,240
10000978:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000097c:	00803804 	movi	r2,224
10000980:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000984:	00802c04 	movi	r2,176
10000988:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
1000098c:	00802804 	movi	r2,160
10000990:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000994:	00802804 	movi	r2,160
10000998:	00c00044 	movi	r3,1
1000099c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100009a0:	00802c04 	movi	r2,176
100009a4:	00c00044 	movi	r3,1
100009a8:	10c00005 	stb	r3,0(r2)
}
100009ac:	0001883a 	nop
100009b0:	e037883a 	mov	sp,fp
100009b4:	df000017 	ldw	fp,0(sp)
100009b8:	dec00104 	addi	sp,sp,4
100009bc:	f800283a 	ret

100009c0 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100009c0:	defffd04 	addi	sp,sp,-12
100009c4:	df000215 	stw	fp,8(sp)
100009c8:	df000204 	addi	fp,sp,8
100009cc:	2007883a 	mov	r3,r4
100009d0:	2805883a 	mov	r2,r5
100009d4:	e0fffe05 	stb	r3,-8(fp)
100009d8:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_data = Data;
100009dc:	00803804 	movi	r2,224
100009e0:	e0ffff0b 	ldhu	r3,-4(fp)
100009e4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_address = Address;
100009e8:	00803c04 	movi	r2,240
100009ec:	e0fffe03 	ldbu	r3,-8(fp)
100009f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100009f4:	00802c04 	movi	r2,176
100009f8:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
100009fc:	00803004 	movi	r2,192
10000a00:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000a04:	00803004 	movi	r2,192
10000a08:	00c00044 	movi	r3,1
10000a0c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000a10:	00802c04 	movi	r2,176
10000a14:	00c00044 	movi	r3,1
10000a18:	10c00005 	stb	r3,0(r2)
}
10000a1c:	0001883a 	nop
10000a20:	e037883a 	mov	sp,fp
10000a24:	df000017 	ldw	fp,0(sp)
10000a28:	dec00104 	addi	sp,sp,4
10000a2c:	f800283a 	ret

10000a30 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000a30:	defffd04 	addi	sp,sp,-12
10000a34:	df000215 	stw	fp,8(sp)
10000a38:	df000204 	addi	fp,sp,8
10000a3c:	2005883a 	mov	r2,r4
10000a40:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000a44:	00803c04 	movi	r2,240
10000a48:	e0ffff03 	ldbu	r3,-4(fp)
10000a4c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000a50:	00802c04 	movi	r2,176
10000a54:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10000a58:	00803404 	movi	r2,208
10000a5c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
10000a60:	00803404 	movi	r2,208
10000a64:	00c00044 	movi	r3,1
10000a68:	10c00005 	stb	r3,0(r2)
	temp = *otg_hpi_data;
10000a6c:	00803804 	movi	r2,224
10000a70:	10800017 	ldw	r2,0(r2)
10000a74:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_cs = 1;
10000a78:	00802c04 	movi	r2,176
10000a7c:	00c00044 	movi	r3,1
10000a80:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	return temp;
10000a84:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000a88:	e037883a 	mov	sp,fp
10000a8c:	df000017 	ldw	fp,0(sp)
10000a90:	dec00104 	addi	sp,sp,4
10000a94:	f800283a 	ret

10000a98 <get_keycode>:
static alt_u16 ctl_reg = 0;
static alt_u16 no_device = 0;
static alt_u8 toggle = 0;

int get_keycode(void)
{
10000a98:	defffc04 	addi	sp,sp,-16
10000a9c:	dfc00315 	stw	ra,12(sp)
10000aa0:	df000215 	stw	fp,8(sp)
10000aa4:	df000204 	addi	fp,sp,8
	int keycode = 0;
10000aa8:	e03fff15 	stw	zero,-4(fp)
	alt_u16 usb_ctl_val;
	alt_u8 hot_plug_count;

    //-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000aac:	0109c404 	movi	r4,10000
10000ab0:	00116500 	call	10011650 <usleep>

	toggle++;
10000ab4:	d0a6cc83 	ldbu	r2,-25806(gp)
10000ab8:	10800044 	addi	r2,r2,1
10000abc:	d0a6cc85 	stb	r2,-25806(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
10000ac0:	01414004 	movi	r5,1280
10000ac4:	01000084 	movi	r4,2
10000ac8:	00009c00 	call	100009c0 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10000acc:	01414704 	movi	r5,1308
10000ad0:	0009883a 	mov	r4,zero
10000ad4:	00009c00 	call	100009c0 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000ad8:	d0a6cb03 	ldbu	r2,-25812(gp)
10000adc:	10803fcc 	andi	r2,r2,255
10000ae0:	108003cc 	andi	r2,r2,15
10000ae4:	100b883a 	mov	r5,r2
10000ae8:	0009883a 	mov	r4,zero
10000aec:	00009c00 	call	100009c0 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000af0:	0140a444 	movi	r5,657
10000af4:	0009883a 	mov	r4,zero
10000af8:	00009c00 	call	100009c0 <IO_write>
	if(toggle%2)
10000afc:	d0a6cc83 	ldbu	r2,-25806(gp)
10000b00:	1080004c 	andi	r2,r2,1
10000b04:	10803fcc 	andi	r2,r2,255
10000b08:	10000426 	beq	r2,zero,10000b1c <get_keycode+0x84>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10000b0c:	01400044 	movi	r5,1
10000b10:	0009883a 	mov	r4,zero
10000b14:	00009c00 	call	100009c0 <IO_write>
10000b18:	00000306 	br	10000b28 <get_keycode+0x90>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10000b1c:	01401044 	movi	r5,65
10000b20:	0009883a 	mov	r4,zero
10000b24:	00009c00 	call	100009c0 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10000b28:	014004c4 	movi	r5,19
10000b2c:	0009883a 	mov	r4,zero
10000b30:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10000b34:	000b883a 	mov	r5,zero
10000b38:	0009883a 	mov	r4,zero
10000b3c:	00009c00 	call	100009c0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000b40:	01414004 	movi	r5,1280
10000b44:	01006c04 	movi	r4,432
10000b48:	00018200 	call	10001820 <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b4c:	00002506 	br	10000be4 <get_keycode+0x14c>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
10000b50:	01414004 	movi	r5,1280
10000b54:	01000084 	movi	r4,2
10000b58:	00009c00 	call	100009c0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000b5c:	01414704 	movi	r5,1308
10000b60:	0009883a 	mov	r4,zero
10000b64:	00009c00 	call	100009c0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000b68:	d0a6cb03 	ldbu	r2,-25812(gp)
10000b6c:	10803fcc 	andi	r2,r2,255
10000b70:	108003cc 	andi	r2,r2,15
10000b74:	100b883a 	mov	r5,r2
10000b78:	0009883a 	mov	r4,zero
10000b7c:	00009c00 	call	100009c0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000b80:	0140a444 	movi	r5,657
10000b84:	0009883a 	mov	r4,zero
10000b88:	00009c00 	call	100009c0 <IO_write>
		if(toggle%2)
10000b8c:	d0a6cc83 	ldbu	r2,-25806(gp)
10000b90:	1080004c 	andi	r2,r2,1
10000b94:	10803fcc 	andi	r2,r2,255
10000b98:	10000426 	beq	r2,zero,10000bac <get_keycode+0x114>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000b9c:	01400044 	movi	r5,1
10000ba0:	0009883a 	mov	r4,zero
10000ba4:	00009c00 	call	100009c0 <IO_write>
10000ba8:	00000306 	br	10000bb8 <get_keycode+0x120>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000bac:	01401044 	movi	r5,65
10000bb0:	0009883a 	mov	r4,zero
10000bb4:	00009c00 	call	100009c0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000bb8:	014004c4 	movi	r5,19
10000bbc:	0009883a 	mov	r4,zero
10000bc0:	00009c00 	call	100009c0 <IO_write>
		IO_write(HPI_DATA,0x0000);//
10000bc4:	000b883a 	mov	r5,zero
10000bc8:	0009883a 	mov	r4,zero
10000bcc:	00009c00 	call	100009c0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000bd0:	01414004 	movi	r5,1280
10000bd4:	01006c04 	movi	r4,432
10000bd8:	00018200 	call	10001820 <UsbWrite>
		usleep(10*1000);
10000bdc:	0109c404 	movi	r4,10000
10000be0:	00116500 	call	10011650 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000be4:	010000c4 	movi	r4,3
10000be8:	0000a300 	call	10000a30 <IO_read>
10000bec:	10bfffcc 	andi	r2,r2,65535
10000bf0:	1080040c 	andi	r2,r2,16
10000bf4:	103fd626 	beq	r2,zero,10000b50 <__alt_data_end+0xf8000b50>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10000bf8:	00028100 	call	10002810 <UsbWaitTDListDone>
10000bfc:	e0bffe0d 	sth	r2,-8(fp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in 
	// subsequent addresses.
	keycode = UsbRead(0x051e);
10000c00:	01014784 	movi	r4,1310
10000c04:	00018780 	call	10001878 <UsbRead>
10000c08:	10bfffcc 	andi	r2,r2,65535
10000c0c:	e0bfff15 	stw	r2,-4(fp)
	// printf("\nfirst two keycode values are %04x\n",keycode);
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff; 
10000c10:	00804004 	movi	r2,256
10000c14:	e0ffff17 	ldw	r3,-4(fp)
10000c18:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
10000c1c:	01003204 	movi	r4,200
10000c20:	00116500 	call	10011650 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
10000c24:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000c28:	10bfffcc 	andi	r2,r2,65535
10000c2c:	1009883a 	mov	r4,r2
10000c30:	00018780 	call	10001878 <UsbRead>
10000c34:	e0bffe0d 	sth	r2,-8(fp)

	if(!(usb_ctl_val & no_device))
10000c38:	d0a6cc0b 	ldhu	r2,-25808(gp)
10000c3c:	e0fffe0b 	ldhu	r3,-8(fp)
10000c40:	1884703a 	and	r2,r3,r2
10000c44:	10bfffcc 	andi	r2,r2,65535
10000c48:	10003f1e 	bne	r2,zero,10000d48 <get_keycode+0x2b0>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000c4c:	e03ffe85 	stb	zero,-6(fp)
10000c50:	00000f06 	br	10000c90 <get_keycode+0x1f8>
		{
			usleep(5*1000);
10000c54:	0104e204 	movi	r4,5000
10000c58:	00116500 	call	10011650 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000c5c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000c60:	10bfffcc 	andi	r2,r2,65535
10000c64:	1009883a 	mov	r4,r2
10000c68:	00018780 	call	10001878 <UsbRead>
10000c6c:	e0bffe0d 	sth	r2,-8(fp)
			if(usb_ctl_val & no_device) break;
10000c70:	d0a6cc0b 	ldhu	r2,-25808(gp)
10000c74:	e0fffe0b 	ldhu	r3,-8(fp)
10000c78:	1884703a 	and	r2,r3,r2
10000c7c:	10bfffcc 	andi	r2,r2,65535
10000c80:	1000071e 	bne	r2,zero,10000ca0 <get_keycode+0x208>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000c84:	e0bffe83 	ldbu	r2,-6(fp)
10000c88:	10800044 	addi	r2,r2,1
10000c8c:	e0bffe85 	stb	r2,-6(fp)
10000c90:	e0bffe83 	ldbu	r2,-6(fp)
10000c94:	108001f0 	cmpltui	r2,r2,7
10000c98:	103fee1e 	bne	r2,zero,10000c54 <__alt_data_end+0xf8000c54>
10000c9c:	00000106 	br	10000ca4 <get_keycode+0x20c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000ca0:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000ca4:	d0a6cc0b 	ldhu	r2,-25808(gp)
10000ca8:	e0fffe0b 	ldhu	r3,-8(fp)
10000cac:	1884703a 	and	r2,r3,r2
10000cb0:	10bfffcc 	andi	r2,r2,65535
10000cb4:	1000241e 	bne	r2,zero,10000d48 <get_keycode+0x2b0>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
10000cb8:	01040074 	movhi	r4,4097
10000cbc:	210d8604 	addi	r4,r4,13848
10000cc0:	00042c00 	call	100042c0 <puts>
			printf("[INFO]: please insert again!!! \n");
10000cc4:	01040074 	movhi	r4,4097
10000cc8:	210d9104 	addi	r4,r4,13892
10000ccc:	00042c00 	call	100042c0 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10000cd0:	00001d06 	br	10000d48 <get_keycode+0x2b0>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10000cd4:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000cd8:	10bfffcc 	andi	r2,r2,65535
10000cdc:	1009883a 	mov	r4,r2
10000ce0:	00018780 	call	10001878 <UsbRead>
10000ce4:	e0bffe0d 	sth	r2,-8(fp)
		usleep(5*1000);
10000ce8:	0104e204 	movi	r4,5000
10000cec:	00116500 	call	10011650 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000cf0:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000cf4:	10bfffcc 	andi	r2,r2,65535
10000cf8:	1009883a 	mov	r4,r2
10000cfc:	00018780 	call	10001878 <UsbRead>
10000d00:	e0bffe0d 	sth	r2,-8(fp)
		usleep(5*1000);
10000d04:	0104e204 	movi	r4,5000
10000d08:	00116500 	call	10011650 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000d0c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000d10:	10bfffcc 	andi	r2,r2,65535
10000d14:	1009883a 	mov	r4,r2
10000d18:	00018780 	call	10001878 <UsbRead>
10000d1c:	e0bffe0d 	sth	r2,-8(fp)
		usleep(5*1000);
10000d20:	0104e204 	movi	r4,5000
10000d24:	00116500 	call	10011650 <usleep>

		if(usb_ctl_val & no_device)
10000d28:	d0a6cc0b 	ldhu	r2,-25808(gp)
10000d2c:	e0fffe0b 	ldhu	r3,-8(fp)
10000d30:	1884703a 	and	r2,r3,r2
10000d34:	10bfffcc 	andi	r2,r2,65535
10000d38:	10000126 	beq	r2,zero,10000d40 <get_keycode+0x2a8>
			keyboard_init();
10000d3c:	0000d740 	call	10000d74 <keyboard_init>

		usleep(200);
10000d40:	01003204 	movi	r4,200
10000d44:	00116500 	call	10011650 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
10000d48:	d0a6cc0b 	ldhu	r2,-25808(gp)
10000d4c:	e0fffe0b 	ldhu	r3,-8(fp)
10000d50:	1884703a 	and	r2,r3,r2
10000d54:	10bfffcc 	andi	r2,r2,65535
10000d58:	103fde26 	beq	r2,zero,10000cd4 <__alt_data_end+0xf8000cd4>
			keyboard_init();

		usleep(200);
	}

	return keycode;
10000d5c:	e0bfff17 	ldw	r2,-4(fp)
}
10000d60:	e037883a 	mov	sp,fp
10000d64:	dfc00117 	ldw	ra,4(sp)
10000d68:	df000017 	ldw	fp,0(sp)
10000d6c:	dec00204 	addi	sp,sp,8
10000d70:	f800283a 	ret

10000d74 <keyboard_init>:

int keyboard_init(void)
{
10000d74:	defffb04 	addi	sp,sp,-20
10000d78:	dfc00415 	stw	ra,16(sp)
10000d7c:	df000315 	stw	fp,12(sp)
10000d80:	df000304 	addi	fp,sp,12
	IO_init();
10000d84:	00009380 	call	10000938 <IO_init>
		usleep(10*10000);
	}*/

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	alt_u16 fs_device = 0;
10000d88:	e03ffe0d 	sth	zero,-8(fp)
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000d8c:	01040074 	movhi	r4,4097
10000d90:	210d9904 	addi	r4,r4,13924
10000d94:	00042c00 	call	100042c0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000d98:	00018bc0 	call	100018bc <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000d9c:	000b883a 	mov	r5,zero
10000da0:	01005104 	movi	r4,324
10000da4:	00018200 	call	10001820 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000da8:	017fffd4 	movui	r5,65535
10000dac:	01302414 	movui	r4,49296
10000db0:	00018200 	call	10001820 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000db4:	01409604 	movi	r5,600
10000db8:	01006d04 	movi	r4,436
10000dbc:	00018200 	call	10001820 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000dc0:	00811004 	movi	r2,1088
10000dc4:	e0bffd0d 	sth	r2,-12(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000dc8:	e0bffd0b 	ldhu	r2,-12(fp)
10000dcc:	100b883a 	mov	r5,r2
10000dd0:	01005084 	movi	r4,322
10000dd4:	00018200 	call	10001820 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000dd8:	00808404 	movi	r2,528
10000ddc:	e0bffe8d 	sth	r2,-6(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000de0:	e0bffe8b 	ldhu	r2,-6(fp)
10000de4:	100b883a 	mov	r5,r2
10000de8:	01302314 	movui	r4,49292
10000dec:	00018200 	call	10001820 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000df0:	000b883a 	mov	r5,zero
10000df4:	01007104 	movi	r4,452
10000df8:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000dfc:	000b883a 	mov	r5,zero
10000e00:	01007184 	movi	r4,454
10000e04:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000e08:	000b883a 	mov	r5,zero
10000e0c:	01007204 	movi	r4,456
10000e10:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000e14:	000b883a 	mov	r5,zero
10000e18:	01007284 	movi	r4,458
10000e1c:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000e20:	000b883a 	mov	r5,zero
10000e24:	01007304 	movi	r4,460
10000e28:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000e2c:	000b883a 	mov	r5,zero
10000e30:	01007384 	movi	r4,462
10000e34:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000e38:	000b883a 	mov	r5,zero
10000e3c:	01007404 	movi	r4,464
10000e40:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000e44:	000b883a 	mov	r5,zero
10000e48:	01007484 	movi	r4,466
10000e4c:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000e50:	000b883a 	mov	r5,zero
10000e54:	01007504 	movi	r4,468
10000e58:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000e5c:	000b883a 	mov	r5,zero
10000e60:	01007584 	movi	r4,470
10000e64:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000e68:	000b883a 	mov	r5,zero
10000e6c:	01007604 	movi	r4,472
10000e70:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000e74:	000b883a 	mov	r5,zero
10000e78:	01007684 	movi	r4,474
10000e7c:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000e80:	000b883a 	mov	r5,zero
10000e84:	01007704 	movi	r4,476
10000e88:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000e8c:	000b883a 	mov	r5,zero
10000e90:	01007784 	movi	r4,478
10000e94:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000e98:	01401c84 	movi	r5,114
10000e9c:	01007084 	movi	r4,450
10000ea0:	00018200 	call	10001820 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000ea4:	01738054 	movui	r5,52737
10000ea8:	01000044 	movi	r4,1
10000eac:	00009c00 	call	100009c0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000eb0:	0001883a 	nop
10000eb4:	010000c4 	movi	r4,3
10000eb8:	0000a300 	call	10000a30 <IO_read>
10000ebc:	10bfffcc 	andi	r2,r2,65535
10000ec0:	103ffc26 	beq	r2,zero,10000eb4 <__alt_data_end+0xf8000eb4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000ec4:	00000806 	br	10000ee8 <keyboard_init+0x174>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000ec8:	01000044 	movi	r4,1
10000ecc:	0000a300 	call	10000a30 <IO_read>
10000ed0:	10bfffcc 	andi	r2,r2,65535
10000ed4:	100b883a 	mov	r5,r2
10000ed8:	01040074 	movhi	r4,4097
10000edc:	210d9f04 	addi	r4,r4,13948
10000ee0:	00041c40 	call	100041c4 <printf>
		goto USB_HOT_PLUG;
10000ee4:	003fac06 	br	10000d98 <__alt_data_end+0xf8000d98>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000ee8:	01000044 	movi	r4,1
10000eec:	0000a300 	call	10000a30 <IO_read>
10000ef0:	10bfffcc 	andi	r2,r2,65535
10000ef4:	1083fb58 	cmpnei	r2,r2,4077
10000ef8:	103ff31e 	bne	r2,zero,10000ec8 <__alt_data_end+0xf8000ec8>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000efc:	01040074 	movhi	r4,4097
10000f00:	210da804 	addi	r4,r4,13984
10000f04:	00041c40 	call	100041c4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000f08:	01401d04 	movi	r5,116
10000f0c:	01007084 	movi	r4,450
10000f10:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000f14:	01400f04 	movi	r5,60
10000f18:	01007104 	movi	r4,452
10000f1c:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000f20:	000b883a 	mov	r5,zero
10000f24:	01007184 	movi	r4,454
10000f28:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000f2c:	000b883a 	mov	r5,zero
10000f30:	01007204 	movi	r4,456
10000f34:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000f38:	000b883a 	mov	r5,zero
10000f3c:	01007284 	movi	r4,458
10000f40:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000f44:	000b883a 	mov	r5,zero
10000f48:	01007304 	movi	r4,460
10000f4c:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000f50:	000b883a 	mov	r5,zero
10000f54:	01007384 	movi	r4,462
10000f58:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000f5c:	000b883a 	mov	r5,zero
10000f60:	01007404 	movi	r4,464
10000f64:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000f68:	000b883a 	mov	r5,zero
10000f6c:	01007484 	movi	r4,466
10000f70:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000f74:	000b883a 	mov	r5,zero
10000f78:	01007504 	movi	r4,468
10000f7c:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000f80:	000b883a 	mov	r5,zero
10000f84:	01007584 	movi	r4,470
10000f88:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000f8c:	000b883a 	mov	r5,zero
10000f90:	01007604 	movi	r4,472
10000f94:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000f98:	000b883a 	mov	r5,zero
10000f9c:	01007684 	movi	r4,474
10000fa0:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000fa4:	000b883a 	mov	r5,zero
10000fa8:	01007704 	movi	r4,476
10000fac:	00018200 	call	10001820 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000fb0:	000b883a 	mov	r5,zero
10000fb4:	01007784 	movi	r4,478
10000fb8:	00018200 	call	10001820 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000fbc:	01738054 	movui	r5,52737
10000fc0:	01000044 	movi	r4,1
10000fc4:	00009c00 	call	100009c0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000fc8:	0001883a 	nop
10000fcc:	01000044 	movi	r4,1
10000fd0:	0000a300 	call	10000a30 <IO_read>
10000fd4:	10bfffcc 	andi	r2,r2,65535
10000fd8:	1083fb58 	cmpnei	r2,r2,4077
10000fdc:	10000826 	beq	r2,zero,10001000 <keyboard_init+0x28c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000fe0:	01000044 	movi	r4,1
10000fe4:	0000a300 	call	10000a30 <IO_read>
10000fe8:	10bfffcc 	andi	r2,r2,65535
10000fec:	100b883a 	mov	r5,r2
10000ff0:	01040074 	movhi	r4,4097
10000ff4:	210d9f04 	addi	r4,r4,13948
10000ff8:	00041c40 	call	100041c4 <printf>
		goto USB_HOT_PLUG;
10000ffc:	003f6606 	br	10000d98 <__alt_data_end+0xf8000d98>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10001000:	00b02284 	movi	r2,-16246
10001004:	d0a6cb8d 	sth	r2,-25810(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10001008:	008c0004 	movi	r2,12288
1000100c:	d0a6cc0d 	sth	r2,-25808(gp)
	fs_device = A_DP_STAT;
10001010:	00880004 	movi	r2,8192
10001014:	e0bffe0d 	sth	r2,-8(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10001018:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000101c:	10bfffcc 	andi	r2,r2,65535
10001020:	1009883a 	mov	r4,r2
10001024:	00018780 	call	10001878 <UsbRead>
10001028:	e0bffd0d 	sth	r2,-12(fp)

	if (!(usb_ctl_val & no_device))
1000102c:	d0a6cc0b 	ldhu	r2,-25808(gp)
10001030:	e0fffd0b 	ldhu	r3,-12(fp)
10001034:	1884703a 	and	r2,r3,r2
10001038:	10bfffcc 	andi	r2,r2,65535
1000103c:	1000351e 	bne	r2,zero,10001114 <keyboard_init+0x3a0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001040:	e03ffd85 	stb	zero,-10(fp)
10001044:	00000f06 	br	10001084 <keyboard_init+0x310>
		{
			usleep(5*1000);
10001048:	0104e204 	movi	r4,5000
1000104c:	00116500 	call	10011650 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001050:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001054:	10bfffcc 	andi	r2,r2,65535
10001058:	1009883a 	mov	r4,r2
1000105c:	00018780 	call	10001878 <UsbRead>
10001060:	e0bffd0d 	sth	r2,-12(fp)
			if(usb_ctl_val & no_device) break;
10001064:	d0a6cc0b 	ldhu	r2,-25808(gp)
10001068:	e0fffd0b 	ldhu	r3,-12(fp)
1000106c:	1884703a 	and	r2,r3,r2
10001070:	10bfffcc 	andi	r2,r2,65535
10001074:	1000071e 	bne	r2,zero,10001094 <keyboard_init+0x320>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10001078:	e0bffd83 	ldbu	r2,-10(fp)
1000107c:	10800044 	addi	r2,r2,1
10001080:	e0bffd85 	stb	r2,-10(fp)
10001084:	e0bffd83 	ldbu	r2,-10(fp)
10001088:	10800170 	cmpltui	r2,r2,5
1000108c:	103fee1e 	bne	r2,zero,10001048 <__alt_data_end+0xf8001048>
10001090:	00000106 	br	10001098 <keyboard_init+0x324>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10001094:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10001098:	d0a6cc0b 	ldhu	r2,-25808(gp)
1000109c:	e0fffd0b 	ldhu	r3,-12(fp)
100010a0:	1884703a 	and	r2,r3,r2
100010a4:	10bfffcc 	andi	r2,r2,65535
100010a8:	1000261e 	bne	r2,zero,10001144 <keyboard_init+0x3d0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
100010ac:	01040074 	movhi	r4,4097
100010b0:	210dac04 	addi	r4,r4,14000
100010b4:	00042c00 	call	100042c0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100010b8:	01040074 	movhi	r4,4097
100010bc:	210db604 	addi	r4,r4,14040
100010c0:	00042c00 	call	100042c0 <puts>
			while (!(usb_ctl_val & no_device))
100010c4:	00000d06 	br	100010fc <keyboard_init+0x388>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100010c8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010cc:	10bfffcc 	andi	r2,r2,65535
100010d0:	1009883a 	mov	r4,r2
100010d4:	00018780 	call	10001878 <UsbRead>
100010d8:	e0bffd0d 	sth	r2,-12(fp)
				if(usb_ctl_val & no_device)
100010dc:	d0a6cc0b 	ldhu	r2,-25808(gp)
100010e0:	e0fffd0b 	ldhu	r3,-12(fp)
100010e4:	1884703a 	and	r2,r3,r2
100010e8:	10bfffcc 	andi	r2,r2,65535
100010ec:	10000126 	beq	r2,zero,100010f4 <keyboard_init+0x380>
					goto USB_HOT_PLUG;
100010f0:	003f2906 	br	10000d98 <__alt_data_end+0xf8000d98>

				usleep(2000);
100010f4:	0101f404 	movi	r4,2000
100010f8:	00116500 	call	10011650 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100010fc:	d0a6cc0b 	ldhu	r2,-25808(gp)
10001100:	e0fffd0b 	ldhu	r3,-12(fp)
10001104:	1884703a 	and	r2,r3,r2
10001108:	10bfffcc 	andi	r2,r2,65535
1000110c:	103fee26 	beq	r2,zero,100010c8 <__alt_data_end+0xf80010c8>
10001110:	00000c06 	br	10001144 <keyboard_init+0x3d0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10001114:	e0fffd0b 	ldhu	r3,-12(fp)
10001118:	e0bffe0b 	ldhu	r2,-8(fp)
1000111c:	1884703a 	and	r2,r3,r2
10001120:	10bfffcc 	andi	r2,r2,65535
10001124:	10000426 	beq	r2,zero,10001138 <keyboard_init+0x3c4>
		{
			printf("[INFO]: full speed device\n");
10001128:	01040074 	movhi	r4,4097
1000112c:	210dc204 	addi	r4,r4,14088
10001130:	00042c00 	call	100042c0 <puts>
10001134:	00000306 	br	10001144 <keyboard_init+0x3d0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10001138:	01040074 	movhi	r4,4097
1000113c:	210dc904 	addi	r4,r4,14116
10001140:	00042c00 	call	100042c0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10001144:	00019700 	call	10001970 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001148:	00000306 	br	10001158 <keyboard_init+0x3e4>
	{
		UsbSetAddress();
1000114c:	00019700 	call	10001970 <UsbSetAddress>
		usleep(10*1000);
10001150:	0109c404 	movi	r4,10000
10001154:	00116500 	call	10011650 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001158:	010000c4 	movi	r4,3
1000115c:	0000a300 	call	10000a30 <IO_read>
10001160:	10bfffcc 	andi	r2,r2,65535
10001164:	1080040c 	andi	r2,r2,16
10001168:	103ff826 	beq	r2,zero,1000114c <__alt_data_end+0xf800114c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000116c:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10001170:	01414184 	movi	r5,1286
10001174:	01000084 	movi	r4,2
10001178:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000117c:	0009883a 	mov	r4,zero
10001180:	0000a300 	call	10000a30 <IO_read>
10001184:	10bfffcc 	andi	r2,r2,65535
10001188:	100b883a 	mov	r5,r2
1000118c:	01040074 	movhi	r4,4097
10001190:	210dd004 	addi	r4,r4,14144
10001194:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10001198:	01414204 	movi	r5,1288
1000119c:	01000084 	movi	r4,2
100011a0:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100011a4:	0009883a 	mov	r4,zero
100011a8:	0000a300 	call	10000a30 <IO_read>
100011ac:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100011b0:	e0bffd0b 	ldhu	r2,-12(fp)
100011b4:	100b883a 	mov	r5,r2
100011b8:	01040074 	movhi	r4,4097
100011bc:	210ddb04 	addi	r4,r4,14188
100011c0:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100011c4:	e0bffd0b 	ldhu	r2,-12(fp)
100011c8:	108000e0 	cmpeqi	r2,r2,3
100011cc:	1000031e 	bne	r2,zero,100011dc <keyboard_init+0x468>
	{
		usb_ctl_val = UsbGetRetryCnt();
100011d0:	00028940 	call	10002894 <UsbGetRetryCnt>
100011d4:	e0bffd0d 	sth	r2,-12(fp)

		goto USB_HOT_PLUG;
100011d8:	003eef06 	br	10000d98 <__alt_data_end+0xf8000d98>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100011dc:	01040074 	movhi	r4,4097
100011e0:	210de704 	addi	r4,r4,14236
100011e4:	00042c00 	call	100042c0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100011e8:	0001a700 	call	10001a70 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100011ec:	00000306 	br	100011fc <keyboard_init+0x488>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100011f0:	0001a700 	call	10001a70 <UsbGetDeviceDesc1>
		usleep(10*1000);
100011f4:	0109c404 	movi	r4,10000
100011f8:	00116500 	call	10011650 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100011fc:	010000c4 	movi	r4,3
10001200:	0000a300 	call	10000a30 <IO_read>
10001204:	10bfffcc 	andi	r2,r2,65535
10001208:	1080040c 	andi	r2,r2,16
1000120c:	103ff826 	beq	r2,zero,100011f0 <__alt_data_end+0xf80011f0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001210:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001214:	01414184 	movi	r5,1286
10001218:	01000084 	movi	r4,2
1000121c:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001220:	0009883a 	mov	r4,zero
10001224:	0000a300 	call	10000a30 <IO_read>
10001228:	10bfffcc 	andi	r2,r2,65535
1000122c:	100b883a 	mov	r5,r2
10001230:	01040074 	movhi	r4,4097
10001234:	210df604 	addi	r4,r4,14296
10001238:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
1000123c:	01414204 	movi	r5,1288
10001240:	01000084 	movi	r4,2
10001244:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001248:	0009883a 	mov	r4,zero
1000124c:	0000a300 	call	10000a30 <IO_read>
10001250:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10001254:	e0bffd0b 	ldhu	r2,-12(fp)
10001258:	100b883a 	mov	r5,r2
1000125c:	01040074 	movhi	r4,4097
10001260:	210e0104 	addi	r4,r4,14340
10001264:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
10001268:	00000206 	br	10001274 <keyboard_init+0x500>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000126c:	00028940 	call	10002894 <UsbGetRetryCnt>
10001270:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001274:	e0bffd0b 	ldhu	r2,-12(fp)
10001278:	108000d8 	cmpnei	r2,r2,3
1000127c:	103ffb1e 	bne	r2,zero,1000126c <__alt_data_end+0xf800126c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10001280:	01040074 	movhi	r4,4097
10001284:	210e0d04 	addi	r4,r4,14388
10001288:	00042c00 	call	100042c0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000128c:	0001bb80 	call	10001bb8 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001290:	00000306 	br	100012a0 <keyboard_init+0x52c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10001294:	0001bb80 	call	10001bb8 <UsbGetDeviceDesc2>
		usleep(10*1000);
10001298:	0109c404 	movi	r4,10000
1000129c:	00116500 	call	10011650 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100012a0:	010000c4 	movi	r4,3
100012a4:	0000a300 	call	10000a30 <IO_read>
100012a8:	10bfffcc 	andi	r2,r2,65535
100012ac:	1080040c 	andi	r2,r2,16
100012b0:	103ff826 	beq	r2,zero,10001294 <__alt_data_end+0xf8001294>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100012b4:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100012b8:	01414184 	movi	r5,1286
100012bc:	01000084 	movi	r4,2
100012c0:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100012c4:	0009883a 	mov	r4,zero
100012c8:	0000a300 	call	10000a30 <IO_read>
100012cc:	10bfffcc 	andi	r2,r2,65535
100012d0:	100b883a 	mov	r5,r2
100012d4:	01040074 	movhi	r4,4097
100012d8:	210df604 	addi	r4,r4,14296
100012dc:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
100012e0:	01414204 	movi	r5,1288
100012e4:	01000084 	movi	r4,2
100012e8:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100012ec:	0009883a 	mov	r4,zero
100012f0:	0000a300 	call	10000a30 <IO_read>
100012f4:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100012f8:	e0bffd0b 	ldhu	r2,-12(fp)
100012fc:	100b883a 	mov	r5,r2
10001300:	01040074 	movhi	r4,4097
10001304:	210e0104 	addi	r4,r4,14340
10001308:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
1000130c:	00000206 	br	10001318 <keyboard_init+0x5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001310:	00028940 	call	10002894 <UsbGetRetryCnt>
10001314:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001318:	e0bffd0b 	ldhu	r2,-12(fp)
1000131c:	108000d8 	cmpnei	r2,r2,3
10001320:	103ffb1e 	bne	r2,zero,10001310 <__alt_data_end+0xf8001310>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10001324:	01040074 	movhi	r4,4097
10001328:	210e2104 	addi	r4,r4,14468
1000132c:	00042c00 	call	100042c0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10001330:	0001d900 	call	10001d90 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001334:	00000306 	br	10001344 <keyboard_init+0x5d0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10001338:	0001d900 	call	10001d90 <UsbGetConfigDesc1>
		usleep(10*1000);
1000133c:	0109c404 	movi	r4,10000
10001340:	00116500 	call	10011650 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001344:	010000c4 	movi	r4,3
10001348:	0000a300 	call	10000a30 <IO_read>
1000134c:	10bfffcc 	andi	r2,r2,65535
10001350:	1080040c 	andi	r2,r2,16
10001354:	103ff826 	beq	r2,zero,10001338 <__alt_data_end+0xf8001338>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001358:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000135c:	01414184 	movi	r5,1286
10001360:	01000084 	movi	r4,2
10001364:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001368:	0009883a 	mov	r4,zero
1000136c:	0000a300 	call	10000a30 <IO_read>
10001370:	10bfffcc 	andi	r2,r2,65535
10001374:	100b883a 	mov	r5,r2
10001378:	01040074 	movhi	r4,4097
1000137c:	210e3304 	addi	r4,r4,14540
10001380:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
10001384:	01414204 	movi	r5,1288
10001388:	01000084 	movi	r4,2
1000138c:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001390:	0009883a 	mov	r4,zero
10001394:	0000a300 	call	10000a30 <IO_read>
10001398:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000139c:	e0bffd0b 	ldhu	r2,-12(fp)
100013a0:	100b883a 	mov	r5,r2
100013a4:	01040074 	movhi	r4,4097
100013a8:	210e3e04 	addi	r4,r4,14584
100013ac:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
100013b0:	00000206 	br	100013bc <keyboard_init+0x648>
	{
		usb_ctl_val = UsbGetRetryCnt();
100013b4:	00028940 	call	10002894 <UsbGetRetryCnt>
100013b8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100013bc:	e0bffd0b 	ldhu	r2,-12(fp)
100013c0:	108000d8 	cmpnei	r2,r2,3
100013c4:	103ffb1e 	bne	r2,zero,100013b4 <__alt_data_end+0xf80013b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100013c8:	01040074 	movhi	r4,4097
100013cc:	210e4a04 	addi	r4,r4,14632
100013d0:	00042c00 	call	100042c0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100013d4:	0001f200 	call	10001f20 <UsbGetConfigDesc2>

	usleep(100*1000);
100013d8:	010000b4 	movhi	r4,2
100013dc:	2121a804 	addi	r4,r4,-31072
100013e0:	00116500 	call	10011650 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100013e4:	00000306 	br	100013f4 <keyboard_init+0x680>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100013e8:	0001f200 	call	10001f20 <UsbGetConfigDesc2>

		usleep(10*1000);
100013ec:	0109c404 	movi	r4,10000
100013f0:	00116500 	call	10011650 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100013f4:	010000c4 	movi	r4,3
100013f8:	0000a300 	call	10000a30 <IO_read>
100013fc:	10bfffcc 	andi	r2,r2,65535
10001400:	1080040c 	andi	r2,r2,16
10001404:	103ff826 	beq	r2,zero,100013e8 <__alt_data_end+0xf80013e8>
		UsbGetConfigDesc2();

		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001408:	00028100 	call	10002810 <UsbWaitTDListDone>
	printf("3\n");
1000140c:	01040074 	movhi	r4,4097
10001410:	210e5d04 	addi	r4,r4,14708
10001414:	00042c00 	call	100042c0 <puts>

	IO_write(HPI_ADDR,0x0506);
10001418:	01414184 	movi	r5,1286
1000141c:	01000084 	movi	r4,2
10001420:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001424:	0009883a 	mov	r4,zero
10001428:	0000a300 	call	10000a30 <IO_read>
1000142c:	10bfffcc 	andi	r2,r2,65535
10001430:	100b883a 	mov	r5,r2
10001434:	01040074 	movhi	r4,4097
10001438:	210e5e04 	addi	r4,r4,14712
1000143c:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
10001440:	01414204 	movi	r5,1288
10001444:	01000084 	movi	r4,2
10001448:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000144c:	0009883a 	mov	r4,zero
10001450:	0000a300 	call	10000a30 <IO_read>
10001454:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10001458:	e0bffd0b 	ldhu	r2,-12(fp)
1000145c:	100b883a 	mov	r5,r2
10001460:	01040074 	movhi	r4,4097
10001464:	210e6904 	addi	r4,r4,14756
10001468:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
1000146c:	00000206 	br	10001478 <keyboard_init+0x704>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001470:	00028940 	call	10002894 <UsbGetRetryCnt>
10001474:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001478:	e0bffd0b 	ldhu	r2,-12(fp)
1000147c:	108000d8 	cmpnei	r2,r2,3
10001480:	103ffb1e 	bne	r2,zero,10001470 <__alt_data_end+0xf8001470>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10001484:	01040074 	movhi	r4,4097
10001488:	210e7504 	addi	r4,r4,14804
1000148c:	00042c00 	call	100042c0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10001490:	01415b04 	movi	r5,1388
10001494:	01000084 	movi	r4,2
10001498:	00009c00 	call	100009c0 <IO_write>
	code = IO_read(HPI_DATA);
1000149c:	0009883a 	mov	r4,zero
100014a0:	0000a300 	call	10000a30 <IO_read>
100014a4:	e0bfff0d 	sth	r2,-4(fp)
	code = code & 0x003;
100014a8:	e0bfff0b 	ldhu	r2,-4(fp)
100014ac:	108000cc 	andi	r2,r2,3
100014b0:	e0bfff0d 	sth	r2,-4(fp)
	printf("\ncode = %x\n", code);
100014b4:	e0bfff0b 	ldhu	r2,-4(fp)
100014b8:	100b883a 	mov	r5,r2
100014bc:	01040074 	movhi	r4,4097
100014c0:	210e8804 	addi	r4,r4,14880
100014c4:	00041c40 	call	100041c4 <printf>

	if (code == 0x01)
100014c8:	e0bfff0b 	ldhu	r2,-4(fp)
100014cc:	10800058 	cmpnei	r2,r2,1
100014d0:	1000041e 	bne	r2,zero,100014e4 <keyboard_init+0x770>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
100014d4:	01040074 	movhi	r4,4097
100014d8:	210e8b04 	addi	r4,r4,14892
100014dc:	00042c00 	call	100042c0 <puts>
100014e0:	00000306 	br	100014f0 <keyboard_init+0x77c>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100014e4:	01040074 	movhi	r4,4097
100014e8:	210e9a04 	addi	r4,r4,14952
100014ec:	00042c00 	call	100042c0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
100014f0:	01415d84 	movi	r5,1398
100014f4:	01000084 	movi	r4,2
100014f8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x073F);
100014fc:	0141cfc4 	movi	r5,1855
10001500:	0009883a 	mov	r4,zero
10001504:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x8105);
10001508:	01604154 	movui	r5,33029
1000150c:	0009883a 	mov	r4,zero
10001510:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0003);
10001514:	014000c4 	movi	r5,3
10001518:	0009883a 	mov	r4,zero
1000151c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001520:	01400204 	movi	r5,8
10001524:	0009883a 	mov	r4,zero
10001528:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
1000152c:	016b0294 	movui	r5,44042
10001530:	0009883a 	mov	r4,zero
10001534:	00009c00 	call	100009c0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10001538:	01415d84 	movi	r5,1398
1000153c:	01006c04 	movi	r4,432
10001540:	00018200 	call	10001820 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10001544:	01415f04 	movi	r5,1404
10001548:	01000084 	movi	r4,2
1000154c:	00009c00 	call	100009c0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10001550:	0009883a 	mov	r4,zero
10001554:	0000a300 	call	10000a30 <IO_read>
10001558:	d0a6cb05 	stb	r2,-25812(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
1000155c:	d0a6cb03 	ldbu	r2,-25812(gp)
10001560:	10803fcc 	andi	r2,r2,255
10001564:	100b883a 	mov	r5,r2
10001568:	01040074 	movhi	r4,4097
1000156c:	210ea304 	addi	r4,r4,14988
10001570:	00041c40 	call	100041c4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10001574:	00021880 	call	10002188 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001578:	00000306 	br	10001588 <keyboard_init+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
1000157c:	00021880 	call	10002188 <UsbSetConfig>
		usleep(10*1000);
10001580:	0109c404 	movi	r4,10000
10001584:	00116500 	call	10011650 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001588:	010000c4 	movi	r4,3
1000158c:	0000a300 	call	10000a30 <IO_read>
10001590:	10bfffcc 	andi	r2,r2,65535
10001594:	1080040c 	andi	r2,r2,16
10001598:	103ff826 	beq	r2,zero,1000157c <__alt_data_end+0xf800157c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000159c:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100015a0:	01414184 	movi	r5,1286
100015a4:	01000084 	movi	r4,2
100015a8:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
100015ac:	0009883a 	mov	r4,zero
100015b0:	0000a300 	call	10000a30 <IO_read>
100015b4:	10bfffcc 	andi	r2,r2,65535
100015b8:	100b883a 	mov	r5,r2
100015bc:	01040074 	movhi	r4,4097
100015c0:	210ead04 	addi	r4,r4,15028
100015c4:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
100015c8:	01414204 	movi	r5,1288
100015cc:	01000084 	movi	r4,2
100015d0:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100015d4:	0009883a 	mov	r4,zero
100015d8:	0000a300 	call	10000a30 <IO_read>
100015dc:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
100015e0:	e0bffd0b 	ldhu	r2,-12(fp)
100015e4:	100b883a 	mov	r5,r2
100015e8:	01040074 	movhi	r4,4097
100015ec:	210eb804 	addi	r4,r4,15072
100015f0:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
100015f4:	00000206 	br	10001600 <keyboard_init+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100015f8:	00028940 	call	10002894 <UsbGetRetryCnt>
100015fc:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001600:	e0bffd0b 	ldhu	r2,-12(fp)
10001604:	108000d8 	cmpnei	r2,r2,3
10001608:	103ffb1e 	bne	r2,zero,100015f8 <__alt_data_end+0xf80015f8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
1000160c:	01040074 	movhi	r4,4097
10001610:	210ec404 	addi	r4,r4,15120
10001614:	00042c00 	call	100042c0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10001618:	00022880 	call	10002288 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000161c:	00000306 	br	1000162c <keyboard_init+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10001620:	00022880 	call	10002288 <UsbClassRequest>
		usleep(10*1000);
10001624:	0109c404 	movi	r4,10000
10001628:	00116500 	call	10011650 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000162c:	010000c4 	movi	r4,3
10001630:	0000a300 	call	10000a30 <IO_read>
10001634:	10bfffcc 	andi	r2,r2,65535
10001638:	1080040c 	andi	r2,r2,16
1000163c:	103ff826 	beq	r2,zero,10001620 <__alt_data_end+0xf8001620>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001640:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001644:	01414184 	movi	r5,1286
10001648:	01000084 	movi	r4,2
1000164c:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001650:	0009883a 	mov	r4,zero
10001654:	0000a300 	call	10000a30 <IO_read>
10001658:	10bfffcc 	andi	r2,r2,65535
1000165c:	100b883a 	mov	r5,r2
10001660:	01040074 	movhi	r4,4097
10001664:	210ed604 	addi	r4,r4,15192
10001668:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
1000166c:	01414204 	movi	r5,1288
10001670:	01000084 	movi	r4,2
10001674:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001678:	0009883a 	mov	r4,zero
1000167c:	0000a300 	call	10000a30 <IO_read>
10001680:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001684:	e0bffd0b 	ldhu	r2,-12(fp)
10001688:	100b883a 	mov	r5,r2
1000168c:	01040074 	movhi	r4,4097
10001690:	210ee104 	addi	r4,r4,15236
10001694:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
10001698:	00000206 	br	100016a4 <keyboard_init+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000169c:	00028940 	call	10002894 <UsbGetRetryCnt>
100016a0:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100016a4:	e0bffd0b 	ldhu	r2,-12(fp)
100016a8:	108000d8 	cmpnei	r2,r2,3
100016ac:	103ffb1e 	bne	r2,zero,1000169c <__alt_data_end+0xf800169c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
100016b0:	01040074 	movhi	r4,4097
100016b4:	210eed04 	addi	r4,r4,15284
100016b8:	00042c00 	call	100042c0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
100016bc:	00023880 	call	10002388 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100016c0:	00000306 	br	100016d0 <keyboard_init+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
100016c4:	00023880 	call	10002388 <UsbGetHidDesc>
		usleep(10*1000);
100016c8:	0109c404 	movi	r4,10000
100016cc:	00116500 	call	10011650 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100016d0:	010000c4 	movi	r4,3
100016d4:	0000a300 	call	10000a30 <IO_read>
100016d8:	10bfffcc 	andi	r2,r2,65535
100016dc:	1080040c 	andi	r2,r2,16
100016e0:	103ff826 	beq	r2,zero,100016c4 <__alt_data_end+0xf80016c4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100016e4:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100016e8:	01414184 	movi	r5,1286
100016ec:	01000084 	movi	r4,2
100016f0:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100016f4:	0009883a 	mov	r4,zero
100016f8:	0000a300 	call	10000a30 <IO_read>
100016fc:	10bfffcc 	andi	r2,r2,65535
10001700:	100b883a 	mov	r5,r2
10001704:	01040074 	movhi	r4,4097
10001708:	210ed604 	addi	r4,r4,15192
1000170c:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
10001710:	01414204 	movi	r5,1288
10001714:	01000084 	movi	r4,2
10001718:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000171c:	0009883a 	mov	r4,zero
10001720:	0000a300 	call	10000a30 <IO_read>
10001724:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001728:	e0bffd0b 	ldhu	r2,-12(fp)
1000172c:	100b883a 	mov	r5,r2
10001730:	01040074 	movhi	r4,4097
10001734:	210ee104 	addi	r4,r4,15236
10001738:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
1000173c:	00000206 	br	10001748 <keyboard_init+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001740:	00028940 	call	10002894 <UsbGetRetryCnt>
10001744:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001748:	e0bffd0b 	ldhu	r2,-12(fp)
1000174c:	108000d8 	cmpnei	r2,r2,3
10001750:	103ffb1e 	bne	r2,zero,10001740 <__alt_data_end+0xf8001740>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10001754:	01040074 	movhi	r4,4097
10001758:	210eff04 	addi	r4,r4,15356
1000175c:	00042c00 	call	100042c0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10001760:	00024d00 	call	100024d0 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001764:	00000306 	br	10001774 <keyboard_init+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10001768:	00024d00 	call	100024d0 <UsbGetReportDesc>
		usleep(10*1000);
1000176c:	0109c404 	movi	r4,10000
10001770:	00116500 	call	10011650 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001774:	010000c4 	movi	r4,3
10001778:	0000a300 	call	10000a30 <IO_read>
1000177c:	10bfffcc 	andi	r2,r2,65535
10001780:	1080040c 	andi	r2,r2,16
10001784:	103ff826 	beq	r2,zero,10001768 <__alt_data_end+0xf8001768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001788:	00028100 	call	10002810 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000178c:	01414184 	movi	r5,1286
10001790:	01000084 	movi	r4,2
10001794:	00009c00 	call	100009c0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001798:	0009883a 	mov	r4,zero
1000179c:	0000a300 	call	10000a30 <IO_read>
100017a0:	10bfffcc 	andi	r2,r2,65535
100017a4:	100b883a 	mov	r5,r2
100017a8:	01040074 	movhi	r4,4097
100017ac:	210f1304 	addi	r4,r4,15436
100017b0:	00041c40 	call	100041c4 <printf>

	IO_write(HPI_ADDR,0x0508);
100017b4:	01414204 	movi	r5,1288
100017b8:	01000084 	movi	r4,2
100017bc:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100017c0:	0009883a 	mov	r4,zero
100017c4:	0000a300 	call	10000a30 <IO_read>
100017c8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
100017cc:	e0bffd0b 	ldhu	r2,-12(fp)
100017d0:	100b883a 	mov	r5,r2
100017d4:	01040074 	movhi	r4,4097
100017d8:	210f1f04 	addi	r4,r4,15484
100017dc:	00041c40 	call	100041c4 <printf>
	while (usb_ctl_val != 0x03)
100017e0:	00000206 	br	100017ec <keyboard_init+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
100017e4:	00028940 	call	10002894 <UsbGetRetryCnt>
100017e8:	e0bffd0d 	sth	r2,-12(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100017ec:	e0bffd0b 	ldhu	r2,-12(fp)
100017f0:	108000d8 	cmpnei	r2,r2,3
100017f4:	103ffb1e 	bne	r2,zero,100017e4 <__alt_data_end+0xf80017e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	toggle = 0;
100017f8:	d026cc85 	stb	zero,-25806(gp)
	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
100017fc:	01040074 	movhi	r4,4097
10001800:	210f2b04 	addi	r4,r4,15532
10001804:	00042c00 	call	100042c0 <puts>

	return 0;
10001808:	0005883a 	mov	r2,zero
}
1000180c:	e037883a 	mov	sp,fp
10001810:	dfc00117 	ldw	ra,4(sp)
10001814:	df000017 	ldw	fp,0(sp)
10001818:	dec00204 	addi	sp,sp,8
1000181c:	f800283a 	ret

10001820 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001820:	defffc04 	addi	sp,sp,-16
10001824:	dfc00315 	stw	ra,12(sp)
10001828:	df000215 	stw	fp,8(sp)
1000182c:	df000204 	addi	fp,sp,8
10001830:	2007883a 	mov	r3,r4
10001834:	2805883a 	mov	r2,r5
10001838:	e0fffe0d 	sth	r3,-8(fp)
1000183c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001840:	e0bffe0b 	ldhu	r2,-8(fp)
10001844:	100b883a 	mov	r5,r2
10001848:	01000084 	movi	r4,2
1000184c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA, Data);
10001850:	e0bfff0b 	ldhu	r2,-4(fp)
10001854:	100b883a 	mov	r5,r2
10001858:	0009883a 	mov	r4,zero
1000185c:	00009c00 	call	100009c0 <IO_write>
}
10001860:	0001883a 	nop
10001864:	e037883a 	mov	sp,fp
10001868:	dfc00117 	ldw	ra,4(sp)
1000186c:	df000017 	ldw	fp,0(sp)
10001870:	dec00204 	addi	sp,sp,8
10001874:	f800283a 	ret

10001878 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001878:	defffd04 	addi	sp,sp,-12
1000187c:	dfc00215 	stw	ra,8(sp)
10001880:	df000115 	stw	fp,4(sp)
10001884:	df000104 	addi	fp,sp,4
10001888:	2005883a 	mov	r2,r4
1000188c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001890:	e0bfff0b 	ldhu	r2,-4(fp)
10001894:	100b883a 	mov	r5,r2
10001898:	01000084 	movi	r4,2
1000189c:	00009c00 	call	100009c0 <IO_write>
	return IO_read(HPI_DATA);
100018a0:	0009883a 	mov	r4,zero
100018a4:	0000a300 	call	10000a30 <IO_read>
}
100018a8:	e037883a 	mov	sp,fp
100018ac:	dfc00117 	ldw	ra,4(sp)
100018b0:	df000017 	ldw	fp,0(sp)
100018b4:	dec00204 	addi	sp,sp,8
100018b8:	f800283a 	ret

100018bc <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100018bc:	defffe04 	addi	sp,sp,-8
100018c0:	dfc00115 	stw	ra,4(sp)
100018c4:	df000015 	stw	fp,0(sp)
100018c8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100018cc:	017e9414 	movui	r5,64080
100018d0:	01000044 	movi	r4,1
100018d4:	00009c00 	call	100009c0 <IO_write>
	usleep(100000);
100018d8:	010000b4 	movhi	r4,2
100018dc:	2121a804 	addi	r4,r4,-31072
100018e0:	00116500 	call	10011650 <usleep>
	printf("[USB INIT]:reset finished!\n");
100018e4:	01040074 	movhi	r4,4097
100018e8:	210f3f04 	addi	r4,r4,15612
100018ec:	00042c00 	call	100042c0 <puts>

	usleep(500000);
100018f0:	01000234 	movhi	r4,8
100018f4:	21284804 	addi	r4,r4,-24288
100018f8:	00116500 	call	10011650 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100018fc:	01040074 	movhi	r4,4097
10001900:	210f4604 	addi	r4,r4,15640
10001904:	00042c00 	call	100042c0 <puts>
	IO_read(HPI_MAILBOX);
10001908:	01000044 	movi	r4,1
1000190c:	0000a300 	call	10000a30 <IO_read>
	IO_read(HPI_STATUS);
10001910:	010000c4 	movi	r4,3
10001914:	0000a300 	call	10000a30 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001918:	01005104 	movi	r4,324
1000191c:	00018780 	call	10001878 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001920:	000b883a 	mov	r5,zero
10001924:	01005104 	movi	r4,324
10001928:	00018200 	call	10001820 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
1000192c:	01005204 	movi	r4,328
10001930:	00018780 	call	10001878 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001934:	000b883a 	mov	r5,zero
10001938:	01005204 	movi	r4,328
1000193c:	00018200 	call	10001820 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001940:	017fffd4 	movui	r5,65535
10001944:	01302414 	movui	r4,49296
10001948:	00018200 	call	10001820 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
1000194c:	017fffd4 	movui	r5,65535
10001950:	01302c14 	movui	r4,49328
10001954:	00018200 	call	10001820 <UsbWrite>
}
10001958:	0001883a 	nop
1000195c:	e037883a 	mov	sp,fp
10001960:	dfc00117 	ldw	ra,4(sp)
10001964:	df000017 	ldw	fp,0(sp)
10001968:	dec00204 	addi	sp,sp,8
1000196c:	f800283a 	ret

10001970 <UsbSetAddress>:


void UsbSetAddress()
{
10001970:	defffe04 	addi	sp,sp,-8
10001974:	dfc00115 	stw	ra,4(sp)
10001978:	df000015 	stw	fp,0(sp)
1000197c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001980:	01414004 	movi	r5,1280
10001984:	01000084 	movi	r4,2
10001988:	00009c00 	call	100009c0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
1000198c:	01414304 	movi	r5,1292
10001990:	0009883a 	mov	r4,zero
10001994:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001998:	01400204 	movi	r5,8
1000199c:	0009883a 	mov	r4,zero
100019a0:	00009c00 	call	100009c0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100019a4:	01403404 	movi	r5,208
100019a8:	0009883a 	mov	r4,zero
100019ac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100019b0:	01400044 	movi	r5,1
100019b4:	0009883a 	mov	r4,zero
100019b8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100019bc:	014004c4 	movi	r5,19
100019c0:	0009883a 	mov	r4,zero
100019c4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100019c8:	01414504 	movi	r5,1300
100019cc:	0009883a 	mov	r4,zero
100019d0:	00009c00 	call	100009c0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100019d4:	01414004 	movi	r5,1280
100019d8:	0009883a 	mov	r4,zero
100019dc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0002);
100019e0:	01400084 	movi	r5,2
100019e4:	0009883a 	mov	r4,zero
100019e8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100019ec:	000b883a 	mov	r5,zero
100019f0:	0009883a 	mov	r4,zero
100019f4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100019f8:	000b883a 	mov	r5,zero
100019fc:	0009883a 	mov	r4,zero
10001a00:	00009c00 	call	100009c0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001a04:	000b883a 	mov	r5,zero
10001a08:	0009883a 	mov	r4,zero
10001a0c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001a10:	000b883a 	mov	r5,zero
10001a14:	0009883a 	mov	r4,zero
10001a18:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001a1c:	01402404 	movi	r5,144
10001a20:	0009883a 	mov	r4,zero
10001a24:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001a28:	01401044 	movi	r5,65
10001a2c:	0009883a 	mov	r4,zero
10001a30:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a34:	014004c4 	movi	r5,19
10001a38:	0009883a 	mov	r4,zero
10001a3c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a40:	000b883a 	mov	r5,zero
10001a44:	0009883a 	mov	r4,zero
10001a48:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a4c:	01414004 	movi	r5,1280
10001a50:	01006c04 	movi	r4,432
10001a54:	00018200 	call	10001820 <UsbWrite>
}
10001a58:	0001883a 	nop
10001a5c:	e037883a 	mov	sp,fp
10001a60:	dfc00117 	ldw	ra,4(sp)
10001a64:	df000017 	ldw	fp,0(sp)
10001a68:	dec00204 	addi	sp,sp,8
10001a6c:	f800283a 	ret

10001a70 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001a70:	defffe04 	addi	sp,sp,-8
10001a74:	dfc00115 	stw	ra,4(sp)
10001a78:	df000015 	stw	fp,0(sp)
10001a7c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a80:	01414004 	movi	r5,1280
10001a84:	01000084 	movi	r4,2
10001a88:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001a8c:	01414304 	movi	r5,1292
10001a90:	0009883a 	mov	r4,zero
10001a94:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001a98:	01400204 	movi	r5,8
10001a9c:	0009883a 	mov	r4,zero
10001aa0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001aa4:	0140b404 	movi	r5,720
10001aa8:	0009883a 	mov	r4,zero
10001aac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ab0:	01400044 	movi	r5,1
10001ab4:	0009883a 	mov	r4,zero
10001ab8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001abc:	014004c4 	movi	r5,19
10001ac0:	0009883a 	mov	r4,zero
10001ac4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ac8:	01414504 	movi	r5,1300
10001acc:	0009883a 	mov	r4,zero
10001ad0:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001ad4:	0141a004 	movi	r5,1664
10001ad8:	0009883a 	mov	r4,zero
10001adc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10001ae0:	01404004 	movi	r5,256
10001ae4:	0009883a 	mov	r4,zero
10001ae8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001aec:	000b883a 	mov	r5,zero
10001af0:	0009883a 	mov	r4,zero
10001af4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001af8:	01400204 	movi	r5,8
10001afc:	0009883a 	mov	r4,zero
10001b00:	00009c00 	call	100009c0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001b04:	01414b04 	movi	r5,1324
10001b08:	0009883a 	mov	r4,zero
10001b0c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001b10:	01400204 	movi	r5,8
10001b14:	0009883a 	mov	r4,zero
10001b18:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001b1c:	0140a404 	movi	r5,656
10001b20:	0009883a 	mov	r4,zero
10001b24:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001b28:	01401044 	movi	r5,65
10001b2c:	0009883a 	mov	r4,zero
10001b30:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b34:	014004c4 	movi	r5,19
10001b38:	0009883a 	mov	r4,zero
10001b3c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001b40:	01414804 	movi	r5,1312
10001b44:	0009883a 	mov	r4,zero
10001b48:	00009c00 	call	100009c0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001b4c:	000b883a 	mov	r5,zero
10001b50:	0009883a 	mov	r4,zero
10001b54:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001b58:	000b883a 	mov	r5,zero
10001b5c:	0009883a 	mov	r4,zero
10001b60:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001b64:	01408404 	movi	r5,528
10001b68:	0009883a 	mov	r4,zero
10001b6c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001b70:	01401044 	movi	r5,65
10001b74:	0009883a 	mov	r4,zero
10001b78:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b7c:	014004c4 	movi	r5,19
10001b80:	0009883a 	mov	r4,zero
10001b84:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b88:	000b883a 	mov	r5,zero
10001b8c:	0009883a 	mov	r4,zero
10001b90:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b94:	01414004 	movi	r5,1280
10001b98:	01006c04 	movi	r4,432
10001b9c:	00018200 	call	10001820 <UsbWrite>
}
10001ba0:	0001883a 	nop
10001ba4:	e037883a 	mov	sp,fp
10001ba8:	dfc00117 	ldw	ra,4(sp)
10001bac:	df000017 	ldw	fp,0(sp)
10001bb0:	dec00204 	addi	sp,sp,8
10001bb4:	f800283a 	ret

10001bb8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001bb8:	defffe04 	addi	sp,sp,-8
10001bbc:	dfc00115 	stw	ra,4(sp)
10001bc0:	df000015 	stw	fp,0(sp)
10001bc4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001bc8:	01414004 	movi	r5,1280
10001bcc:	01000084 	movi	r4,2
10001bd0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001bd4:	01414304 	movi	r5,1292
10001bd8:	0009883a 	mov	r4,zero
10001bdc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001be0:	01400204 	movi	r5,8
10001be4:	0009883a 	mov	r4,zero
10001be8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001bec:	0140b404 	movi	r5,720
10001bf0:	0009883a 	mov	r4,zero
10001bf4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001bf8:	01400044 	movi	r5,1
10001bfc:	0009883a 	mov	r4,zero
10001c00:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c04:	014004c4 	movi	r5,19
10001c08:	0009883a 	mov	r4,zero
10001c0c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c10:	01414504 	movi	r5,1300
10001c14:	0009883a 	mov	r4,zero
10001c18:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001c1c:	0141a004 	movi	r5,1664
10001c20:	0009883a 	mov	r4,zero
10001c24:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001c28:	01404004 	movi	r5,256
10001c2c:	0009883a 	mov	r4,zero
10001c30:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001c34:	000b883a 	mov	r5,zero
10001c38:	0009883a 	mov	r4,zero
10001c3c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001c40:	01400484 	movi	r5,18
10001c44:	0009883a 	mov	r4,zero
10001c48:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001c4c:	01415104 	movi	r5,1348
10001c50:	0009883a 	mov	r4,zero
10001c54:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001c58:	01400204 	movi	r5,8
10001c5c:	0009883a 	mov	r4,zero
10001c60:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001c64:	0140a404 	movi	r5,656
10001c68:	0009883a 	mov	r4,zero
10001c6c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001c70:	01401044 	movi	r5,65
10001c74:	0009883a 	mov	r4,zero
10001c78:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001c7c:	014004c4 	movi	r5,19
10001c80:	0009883a 	mov	r4,zero
10001c84:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001c88:	01414804 	movi	r5,1312
10001c8c:	0009883a 	mov	r4,zero
10001c90:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001c94:	01415304 	movi	r5,1356
10001c98:	0009883a 	mov	r4,zero
10001c9c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001ca0:	01400204 	movi	r5,8
10001ca4:	0009883a 	mov	r4,zero
10001ca8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001cac:	0140a404 	movi	r5,656
10001cb0:	0009883a 	mov	r4,zero
10001cb4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001cb8:	01400044 	movi	r5,1
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001cc4:	014004c4 	movi	r5,19
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001cd0:	01414b04 	movi	r5,1324
10001cd4:	0009883a 	mov	r4,zero
10001cd8:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10001cdc:	01415504 	movi	r5,1364
10001ce0:	0009883a 	mov	r4,zero
10001ce4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001ce8:	01400084 	movi	r5,2
10001cec:	0009883a 	mov	r4,zero
10001cf0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001cf4:	0140a404 	movi	r5,656
10001cf8:	0009883a 	mov	r4,zero
10001cfc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001d00:	01401044 	movi	r5,65
10001d04:	0009883a 	mov	r4,zero
10001d08:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001d0c:	014004c4 	movi	r5,19
10001d10:	0009883a 	mov	r4,zero
10001d14:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001d18:	01414e04 	movi	r5,1336
10001d1c:	0009883a 	mov	r4,zero
10001d20:	00009c00 	call	100009c0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001d24:	000b883a 	mov	r5,zero
10001d28:	0009883a 	mov	r4,zero
10001d2c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001d30:	000b883a 	mov	r5,zero
10001d34:	0009883a 	mov	r4,zero
10001d38:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001d3c:	01408404 	movi	r5,528
10001d40:	0009883a 	mov	r4,zero
10001d44:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001d48:	01401044 	movi	r5,65
10001d4c:	0009883a 	mov	r4,zero
10001d50:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001d54:	014004c4 	movi	r5,19
10001d58:	0009883a 	mov	r4,zero
10001d5c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001d60:	000b883a 	mov	r5,zero
10001d64:	0009883a 	mov	r4,zero
10001d68:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d6c:	01414004 	movi	r5,1280
10001d70:	01006c04 	movi	r4,432
10001d74:	00018200 	call	10001820 <UsbWrite>
}
10001d78:	0001883a 	nop
10001d7c:	e037883a 	mov	sp,fp
10001d80:	dfc00117 	ldw	ra,4(sp)
10001d84:	df000017 	ldw	fp,0(sp)
10001d88:	dec00204 	addi	sp,sp,8
10001d8c:	f800283a 	ret

10001d90 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001d90:	defffe04 	addi	sp,sp,-8
10001d94:	dfc00115 	stw	ra,4(sp)
10001d98:	df000015 	stw	fp,0(sp)
10001d9c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001da0:	01414004 	movi	r5,1280
10001da4:	01000084 	movi	r4,2
10001da8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001dac:	01414304 	movi	r5,1292
10001db0:	0009883a 	mov	r4,zero
10001db4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001db8:	01400204 	movi	r5,8
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001dc4:	0140b404 	movi	r5,720
10001dc8:	0009883a 	mov	r4,zero
10001dcc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001dd0:	01400044 	movi	r5,1
10001dd4:	0009883a 	mov	r4,zero
10001dd8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001ddc:	014004c4 	movi	r5,19
10001de0:	0009883a 	mov	r4,zero
10001de4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001de8:	01414504 	movi	r5,1300
10001dec:	0009883a 	mov	r4,zero
10001df0:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001df4:	0141a004 	movi	r5,1664
10001df8:	0009883a 	mov	r4,zero
10001dfc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001e00:	01408004 	movi	r5,512
10001e04:	0009883a 	mov	r4,zero
10001e08:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001e0c:	000b883a 	mov	r5,zero
10001e10:	0009883a 	mov	r4,zero
10001e14:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001e18:	01400244 	movi	r5,9
10001e1c:	0009883a 	mov	r4,zero
10001e20:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001e24:	01415104 	movi	r5,1348
10001e28:	0009883a 	mov	r4,zero
10001e2c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001e30:	01400204 	movi	r5,8
10001e34:	0009883a 	mov	r4,zero
10001e38:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001e3c:	0140a404 	movi	r5,656
10001e40:	0009883a 	mov	r4,zero
10001e44:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e48:	01401044 	movi	r5,65
10001e4c:	0009883a 	mov	r4,zero
10001e50:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e54:	014004c4 	movi	r5,19
10001e58:	0009883a 	mov	r4,zero
10001e5c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e60:	01414804 	movi	r5,1312
10001e64:	0009883a 	mov	r4,zero
10001e68:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001e6c:	01415304 	movi	r5,1356
10001e70:	0009883a 	mov	r4,zero
10001e74:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001e78:	01400044 	movi	r5,1
10001e7c:	0009883a 	mov	r4,zero
10001e80:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001e84:	0140a404 	movi	r5,656
10001e88:	0009883a 	mov	r4,zero
10001e8c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001e90:	01400044 	movi	r5,1
10001e94:	0009883a 	mov	r4,zero
10001e98:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001e9c:	014004c4 	movi	r5,19
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001ea8:	01414b04 	movi	r5,1324
10001eac:	0009883a 	mov	r4,zero
10001eb0:	00009c00 	call	100009c0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001eb4:	000b883a 	mov	r5,zero
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001ec0:	000b883a 	mov	r5,zero
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001ecc:	01408404 	movi	r5,528
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001ed8:	01401044 	movi	r5,65
10001edc:	0009883a 	mov	r4,zero
10001ee0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ee4:	014004c4 	movi	r5,19
10001ee8:	0009883a 	mov	r4,zero
10001eec:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001ef0:	000b883a 	mov	r5,zero
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001efc:	01414004 	movi	r5,1280
10001f00:	01006c04 	movi	r4,432
10001f04:	00018200 	call	10001820 <UsbWrite>
}
10001f08:	0001883a 	nop
10001f0c:	e037883a 	mov	sp,fp
10001f10:	dfc00117 	ldw	ra,4(sp)
10001f14:	df000017 	ldw	fp,0(sp)
10001f18:	dec00204 	addi	sp,sp,8
10001f1c:	f800283a 	ret

10001f20 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001f20:	defffe04 	addi	sp,sp,-8
10001f24:	dfc00115 	stw	ra,4(sp)
10001f28:	df000015 	stw	fp,0(sp)
10001f2c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f30:	01414004 	movi	r5,1280
10001f34:	01000084 	movi	r4,2
10001f38:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001f3c:	01414304 	movi	r5,1292
10001f40:	0009883a 	mov	r4,zero
10001f44:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001f48:	01400204 	movi	r5,8
10001f4c:	0009883a 	mov	r4,zero
10001f50:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001f54:	0140b404 	movi	r5,720
10001f58:	0009883a 	mov	r4,zero
10001f5c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001f60:	01400044 	movi	r5,1
10001f64:	0009883a 	mov	r4,zero
10001f68:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001f6c:	014004c4 	movi	r5,19
10001f70:	0009883a 	mov	r4,zero
10001f74:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001f78:	01414504 	movi	r5,1300
10001f7c:	0009883a 	mov	r4,zero
10001f80:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001f84:	0141a004 	movi	r5,1664
10001f88:	0009883a 	mov	r4,zero
10001f8c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001f90:	01408004 	movi	r5,512
10001f94:	0009883a 	mov	r4,zero
10001f98:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001f9c:	000b883a 	mov	r5,zero
10001fa0:	0009883a 	mov	r4,zero
10001fa4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001fa8:	01403fc4 	movi	r5,255
10001fac:	0009883a 	mov	r4,zero
10001fb0:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001fb4:	01415704 	movi	r5,1372
10001fb8:	0009883a 	mov	r4,zero
10001fbc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001fc0:	01400204 	movi	r5,8
10001fc4:	0009883a 	mov	r4,zero
10001fc8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001fcc:	0140a404 	movi	r5,656
10001fd0:	0009883a 	mov	r4,zero
10001fd4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001fd8:	01401044 	movi	r5,65
10001fdc:	0009883a 	mov	r4,zero
10001fe0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001fe4:	014004c4 	movi	r5,19
10001fe8:	0009883a 	mov	r4,zero
10001fec:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001ff0:	01414804 	movi	r5,1312
10001ff4:	0009883a 	mov	r4,zero
10001ff8:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001ffc:	01415904 	movi	r5,1380
10002000:	0009883a 	mov	r4,zero
10002004:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002008:	01400204 	movi	r5,8
1000200c:	0009883a 	mov	r4,zero
10002010:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002014:	0140a404 	movi	r5,656
10002018:	0009883a 	mov	r4,zero
1000201c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002020:	01400044 	movi	r5,1
10002024:	0009883a 	mov	r4,zero
10002028:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000202c:	014004c4 	movi	r5,19
10002030:	0009883a 	mov	r4,zero
10002034:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002038:	01414b04 	movi	r5,1324
1000203c:	0009883a 	mov	r4,zero
10002040:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002044:	01415b04 	movi	r5,1388
10002048:	0009883a 	mov	r4,zero
1000204c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002050:	01400204 	movi	r5,8
10002054:	0009883a 	mov	r4,zero
10002058:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000205c:	0140a404 	movi	r5,656
10002060:	0009883a 	mov	r4,zero
10002064:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002068:	01401044 	movi	r5,65
1000206c:	0009883a 	mov	r4,zero
10002070:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002074:	014004c4 	movi	r5,19
10002078:	0009883a 	mov	r4,zero
1000207c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002080:	01414e04 	movi	r5,1336
10002084:	0009883a 	mov	r4,zero
10002088:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
1000208c:	01415d04 	movi	r5,1396
10002090:	0009883a 	mov	r4,zero
10002094:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002098:	01400204 	movi	r5,8
1000209c:	0009883a 	mov	r4,zero
100020a0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100020a4:	0140a404 	movi	r5,656
100020a8:	0009883a 	mov	r4,zero
100020ac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100020b0:	01400044 	movi	r5,1
100020b4:	0009883a 	mov	r4,zero
100020b8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100020bc:	014004c4 	movi	r5,19
100020c0:	0009883a 	mov	r4,zero
100020c4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100020c8:	01415104 	movi	r5,1348
100020cc:	0009883a 	mov	r4,zero
100020d0:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100020d4:	01415f04 	movi	r5,1404
100020d8:	0009883a 	mov	r4,zero
100020dc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100020e0:	01400084 	movi	r5,2
100020e4:	0009883a 	mov	r4,zero
100020e8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100020ec:	0140a404 	movi	r5,656
100020f0:	0009883a 	mov	r4,zero
100020f4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100020f8:	01401044 	movi	r5,65
100020fc:	0009883a 	mov	r4,zero
10002100:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002104:	014004c4 	movi	r5,19
10002108:	0009883a 	mov	r4,zero
1000210c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002110:	01415404 	movi	r5,1360
10002114:	0009883a 	mov	r4,zero
10002118:	00009c00 	call	100009c0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
1000211c:	000b883a 	mov	r5,zero
10002120:	0009883a 	mov	r4,zero
10002124:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002128:	000b883a 	mov	r5,zero
1000212c:	0009883a 	mov	r4,zero
10002130:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002134:	01408404 	movi	r5,528
10002138:	0009883a 	mov	r4,zero
1000213c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002140:	01401044 	movi	r5,65
10002144:	0009883a 	mov	r4,zero
10002148:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000214c:	014004c4 	movi	r5,19
10002150:	0009883a 	mov	r4,zero
10002154:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002158:	000b883a 	mov	r5,zero
1000215c:	0009883a 	mov	r4,zero
10002160:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002164:	01414004 	movi	r5,1280
10002168:	01006c04 	movi	r4,432
1000216c:	00018200 	call	10001820 <UsbWrite>
}
10002170:	0001883a 	nop
10002174:	e037883a 	mov	sp,fp
10002178:	dfc00117 	ldw	ra,4(sp)
1000217c:	df000017 	ldw	fp,0(sp)
10002180:	dec00204 	addi	sp,sp,8
10002184:	f800283a 	ret

10002188 <UsbSetConfig>:

void UsbSetConfig()
{
10002188:	defffe04 	addi	sp,sp,-8
1000218c:	dfc00115 	stw	ra,4(sp)
10002190:	df000015 	stw	fp,0(sp)
10002194:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002198:	01414004 	movi	r5,1280
1000219c:	01000084 	movi	r4,2
100021a0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100021a4:	01414304 	movi	r5,1292
100021a8:	0009883a 	mov	r4,zero
100021ac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100021b0:	01400204 	movi	r5,8
100021b4:	0009883a 	mov	r4,zero
100021b8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100021bc:	0140b404 	movi	r5,720
100021c0:	0009883a 	mov	r4,zero
100021c4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100021c8:	01400044 	movi	r5,1
100021cc:	0009883a 	mov	r4,zero
100021d0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100021d4:	014004c4 	movi	r5,19
100021d8:	0009883a 	mov	r4,zero
100021dc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100021e0:	01414504 	movi	r5,1300
100021e4:	0009883a 	mov	r4,zero
100021e8:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
100021ec:	01424004 	movi	r5,2304
100021f0:	0009883a 	mov	r4,zero
100021f4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100021f8:	01400044 	movi	r5,1
100021fc:	0009883a 	mov	r4,zero
10002200:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002204:	000b883a 	mov	r5,zero
10002208:	0009883a 	mov	r4,zero
1000220c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002210:	000b883a 	mov	r5,zero
10002214:	0009883a 	mov	r4,zero
10002218:	00009c00 	call	100009c0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000221c:	000b883a 	mov	r5,zero
10002220:	0009883a 	mov	r4,zero
10002224:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002228:	000b883a 	mov	r5,zero
1000222c:	0009883a 	mov	r4,zero
10002230:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002234:	0140a404 	movi	r5,656
10002238:	0009883a 	mov	r4,zero
1000223c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002240:	01401044 	movi	r5,65
10002244:	0009883a 	mov	r4,zero
10002248:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000224c:	014004c4 	movi	r5,19
10002250:	0009883a 	mov	r4,zero
10002254:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002258:	000b883a 	mov	r5,zero
1000225c:	0009883a 	mov	r4,zero
10002260:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002264:	01414004 	movi	r5,1280
10002268:	01006c04 	movi	r4,432
1000226c:	00018200 	call	10001820 <UsbWrite>

}
10002270:	0001883a 	nop
10002274:	e037883a 	mov	sp,fp
10002278:	dfc00117 	ldw	ra,4(sp)
1000227c:	df000017 	ldw	fp,0(sp)
10002280:	dec00204 	addi	sp,sp,8
10002284:	f800283a 	ret

10002288 <UsbClassRequest>:

void UsbClassRequest()
{
10002288:	defffe04 	addi	sp,sp,-8
1000228c:	dfc00115 	stw	ra,4(sp)
10002290:	df000015 	stw	fp,0(sp)
10002294:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002298:	01414004 	movi	r5,1280
1000229c:	01000084 	movi	r4,2
100022a0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100022a4:	01414304 	movi	r5,1292
100022a8:	0009883a 	mov	r4,zero
100022ac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100022b0:	01400204 	movi	r5,8
100022b4:	0009883a 	mov	r4,zero
100022b8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100022bc:	0140b404 	movi	r5,720
100022c0:	0009883a 	mov	r4,zero
100022c4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100022c8:	01400044 	movi	r5,1
100022cc:	0009883a 	mov	r4,zero
100022d0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100022d4:	014004c4 	movi	r5,19
100022d8:	0009883a 	mov	r4,zero
100022dc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100022e0:	01414504 	movi	r5,1300
100022e4:	0009883a 	mov	r4,zero
100022e8:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100022ec:	01428844 	movi	r5,2593
100022f0:	0009883a 	mov	r4,zero
100022f4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100022f8:	000b883a 	mov	r5,zero
100022fc:	0009883a 	mov	r4,zero
10002300:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002304:	000b883a 	mov	r5,zero
10002308:	0009883a 	mov	r4,zero
1000230c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002310:	000b883a 	mov	r5,zero
10002314:	0009883a 	mov	r4,zero
10002318:	00009c00 	call	100009c0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000231c:	000b883a 	mov	r5,zero
10002320:	0009883a 	mov	r4,zero
10002324:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002328:	000b883a 	mov	r5,zero
1000232c:	0009883a 	mov	r4,zero
10002330:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002334:	0140a404 	movi	r5,656
10002338:	0009883a 	mov	r4,zero
1000233c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002340:	01401044 	movi	r5,65
10002344:	0009883a 	mov	r4,zero
10002348:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000234c:	014004c4 	movi	r5,19
10002350:	0009883a 	mov	r4,zero
10002354:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002358:	000b883a 	mov	r5,zero
1000235c:	0009883a 	mov	r4,zero
10002360:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002364:	01414004 	movi	r5,1280
10002368:	01006c04 	movi	r4,432
1000236c:	00018200 	call	10001820 <UsbWrite>
}
10002370:	0001883a 	nop
10002374:	e037883a 	mov	sp,fp
10002378:	dfc00117 	ldw	ra,4(sp)
1000237c:	df000017 	ldw	fp,0(sp)
10002380:	dec00204 	addi	sp,sp,8
10002384:	f800283a 	ret

10002388 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002388:	defffe04 	addi	sp,sp,-8
1000238c:	dfc00115 	stw	ra,4(sp)
10002390:	df000015 	stw	fp,0(sp)
10002394:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002398:	01414004 	movi	r5,1280
1000239c:	01000084 	movi	r4,2
100023a0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100023a4:	01414304 	movi	r5,1292
100023a8:	0009883a 	mov	r4,zero
100023ac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100023b0:	01400204 	movi	r5,8
100023b4:	0009883a 	mov	r4,zero
100023b8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100023bc:	0140b404 	movi	r5,720
100023c0:	0009883a 	mov	r4,zero
100023c4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100023c8:	01400044 	movi	r5,1
100023cc:	0009883a 	mov	r4,zero
100023d0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100023d4:	014004c4 	movi	r5,19
100023d8:	0009883a 	mov	r4,zero
100023dc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100023e0:	01414504 	movi	r5,1300
100023e4:	0009883a 	mov	r4,zero
100023e8:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100023ec:	0141a044 	movi	r5,1665
100023f0:	0009883a 	mov	r4,zero
100023f4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100023f8:	01484004 	movi	r5,8448
100023fc:	0009883a 	mov	r4,zero
10002400:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002404:	000b883a 	mov	r5,zero
10002408:	0009883a 	mov	r4,zero
1000240c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002410:	01401ec4 	movi	r5,123
10002414:	0009883a 	mov	r4,zero
10002418:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000241c:	01415104 	movi	r5,1348
10002420:	0009883a 	mov	r4,zero
10002424:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002428:	01400204 	movi	r5,8
1000242c:	0009883a 	mov	r4,zero
10002430:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002434:	0140a404 	movi	r5,656
10002438:	0009883a 	mov	r4,zero
1000243c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002440:	01401044 	movi	r5,65
10002444:	0009883a 	mov	r4,zero
10002448:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000244c:	014004c4 	movi	r5,19
10002450:	0009883a 	mov	r4,zero
10002454:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002458:	01414804 	movi	r5,1312
1000245c:	0009883a 	mov	r4,zero
10002460:	00009c00 	call	100009c0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002464:	000b883a 	mov	r5,zero
10002468:	0009883a 	mov	r4,zero
1000246c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002470:	000b883a 	mov	r5,zero
10002474:	0009883a 	mov	r4,zero
10002478:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000247c:	01408404 	movi	r5,528
10002480:	0009883a 	mov	r4,zero
10002484:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002488:	01401044 	movi	r5,65
1000248c:	0009883a 	mov	r4,zero
10002490:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002494:	014004c4 	movi	r5,19
10002498:	0009883a 	mov	r4,zero
1000249c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100024a0:	000b883a 	mov	r5,zero
100024a4:	0009883a 	mov	r4,zero
100024a8:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100024ac:	01414004 	movi	r5,1280
100024b0:	01006c04 	movi	r4,432
100024b4:	00018200 	call	10001820 <UsbWrite>

}
100024b8:	0001883a 	nop
100024bc:	e037883a 	mov	sp,fp
100024c0:	dfc00117 	ldw	ra,4(sp)
100024c4:	df000017 	ldw	fp,0(sp)
100024c8:	dec00204 	addi	sp,sp,8
100024cc:	f800283a 	ret

100024d0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
100024d0:	defffe04 	addi	sp,sp,-8
100024d4:	dfc00115 	stw	ra,4(sp)
100024d8:	df000015 	stw	fp,0(sp)
100024dc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100024e0:	01414004 	movi	r5,1280
100024e4:	01000084 	movi	r4,2
100024e8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100024ec:	01414304 	movi	r5,1292
100024f0:	0009883a 	mov	r4,zero
100024f4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100024f8:	01400204 	movi	r5,8
100024fc:	0009883a 	mov	r4,zero
10002500:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002504:	0140b404 	movi	r5,720
10002508:	0009883a 	mov	r4,zero
1000250c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002510:	01400044 	movi	r5,1
10002514:	0009883a 	mov	r4,zero
10002518:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000251c:	014004c4 	movi	r5,19
10002520:	0009883a 	mov	r4,zero
10002524:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002528:	01414504 	movi	r5,1300
1000252c:	0009883a 	mov	r4,zero
10002530:	00009c00 	call	100009c0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002534:	0141a044 	movi	r5,1665
10002538:	0009883a 	mov	r4,zero
1000253c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002540:	01488004 	movi	r5,8704
10002544:	0009883a 	mov	r4,zero
10002548:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000254c:	000b883a 	mov	r5,zero
10002550:	0009883a 	mov	r4,zero
10002554:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002558:	01401ec4 	movi	r5,123
1000255c:	0009883a 	mov	r4,zero
10002560:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002564:	01416004 	movi	r5,1408
10002568:	0009883a 	mov	r4,zero
1000256c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002570:	01400204 	movi	r5,8
10002574:	0009883a 	mov	r4,zero
10002578:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000257c:	0140a404 	movi	r5,656
10002580:	0009883a 	mov	r4,zero
10002584:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002588:	01401044 	movi	r5,65
1000258c:	0009883a 	mov	r4,zero
10002590:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002594:	014004c4 	movi	r5,19
10002598:	0009883a 	mov	r4,zero
1000259c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100025a0:	01414804 	movi	r5,1312
100025a4:	0009883a 	mov	r4,zero
100025a8:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100025ac:	01416204 	movi	r5,1416
100025b0:	0009883a 	mov	r4,zero
100025b4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100025b8:	01400204 	movi	r5,8
100025bc:	0009883a 	mov	r4,zero
100025c0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100025c4:	0140a404 	movi	r5,656
100025c8:	0009883a 	mov	r4,zero
100025cc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100025d0:	01400044 	movi	r5,1
100025d4:	0009883a 	mov	r4,zero
100025d8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100025dc:	014004c4 	movi	r5,19
100025e0:	0009883a 	mov	r4,zero
100025e4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100025e8:	01414b04 	movi	r5,1324
100025ec:	0009883a 	mov	r4,zero
100025f0:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100025f4:	01416404 	movi	r5,1424
100025f8:	0009883a 	mov	r4,zero
100025fc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002600:	01400204 	movi	r5,8
10002604:	0009883a 	mov	r4,zero
10002608:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000260c:	0140a404 	movi	r5,656
10002610:	0009883a 	mov	r4,zero
10002614:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002618:	01401044 	movi	r5,65
1000261c:	0009883a 	mov	r4,zero
10002620:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002624:	014004c4 	movi	r5,19
10002628:	0009883a 	mov	r4,zero
1000262c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002630:	01414e04 	movi	r5,1336
10002634:	0009883a 	mov	r4,zero
10002638:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
1000263c:	01416604 	movi	r5,1432
10002640:	0009883a 	mov	r4,zero
10002644:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002648:	01400204 	movi	r5,8
1000264c:	0009883a 	mov	r4,zero
10002650:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002654:	0140a404 	movi	r5,656
10002658:	0009883a 	mov	r4,zero
1000265c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002660:	01400044 	movi	r5,1
10002664:	0009883a 	mov	r4,zero
10002668:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000266c:	014004c4 	movi	r5,19
10002670:	0009883a 	mov	r4,zero
10002674:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002678:	01415104 	movi	r5,1348
1000267c:	0009883a 	mov	r4,zero
10002680:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002684:	01416804 	movi	r5,1440
10002688:	0009883a 	mov	r4,zero
1000268c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002690:	01400204 	movi	r5,8
10002694:	0009883a 	mov	r4,zero
10002698:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000269c:	0140a404 	movi	r5,656
100026a0:	0009883a 	mov	r4,zero
100026a4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100026a8:	01401044 	movi	r5,65
100026ac:	0009883a 	mov	r4,zero
100026b0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100026b4:	014004c4 	movi	r5,19
100026b8:	0009883a 	mov	r4,zero
100026bc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100026c0:	01415404 	movi	r5,1360
100026c4:	0009883a 	mov	r4,zero
100026c8:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100026cc:	01416a04 	movi	r5,1448
100026d0:	0009883a 	mov	r4,zero
100026d4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100026d8:	01400204 	movi	r5,8
100026dc:	0009883a 	mov	r4,zero
100026e0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100026e4:	0140a404 	movi	r5,656
100026e8:	0009883a 	mov	r4,zero
100026ec:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100026f0:	01400044 	movi	r5,1
100026f4:	0009883a 	mov	r4,zero
100026f8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100026fc:	014004c4 	movi	r5,19
10002700:	0009883a 	mov	r4,zero
10002704:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002708:	01415704 	movi	r5,1372
1000270c:	0009883a 	mov	r4,zero
10002710:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002714:	01416c04 	movi	r5,1456
10002718:	0009883a 	mov	r4,zero
1000271c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002720:	01400204 	movi	r5,8
10002724:	0009883a 	mov	r4,zero
10002728:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
1000272c:	0140a404 	movi	r5,656
10002730:	0009883a 	mov	r4,zero
10002734:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002738:	01401044 	movi	r5,65
1000273c:	0009883a 	mov	r4,zero
10002740:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002744:	014004c4 	movi	r5,19
10002748:	0009883a 	mov	r4,zero
1000274c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002750:	01415a04 	movi	r5,1384
10002754:	0009883a 	mov	r4,zero
10002758:	00009c00 	call	100009c0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
1000275c:	01416e04 	movi	r5,1464
10002760:	0009883a 	mov	r4,zero
10002764:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002768:	014000c4 	movi	r5,3
1000276c:	0009883a 	mov	r4,zero
10002770:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002774:	0140a404 	movi	r5,656
10002778:	0009883a 	mov	r4,zero
1000277c:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002780:	01400044 	movi	r5,1
10002784:	0009883a 	mov	r4,zero
10002788:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
1000278c:	014004c4 	movi	r5,19
10002790:	0009883a 	mov	r4,zero
10002794:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002798:	01415d04 	movi	r5,1396
1000279c:	0009883a 	mov	r4,zero
100027a0:	00009c00 	call	100009c0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100027a4:	000b883a 	mov	r5,zero
100027a8:	0009883a 	mov	r4,zero
100027ac:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100027b0:	000b883a 	mov	r5,zero
100027b4:	0009883a 	mov	r4,zero
100027b8:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100027bc:	01408404 	movi	r5,528
100027c0:	0009883a 	mov	r4,zero
100027c4:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100027c8:	01401044 	movi	r5,65
100027cc:	0009883a 	mov	r4,zero
100027d0:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100027d4:	014004c4 	movi	r5,19
100027d8:	0009883a 	mov	r4,zero
100027dc:	00009c00 	call	100009c0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100027e0:	000b883a 	mov	r5,zero
100027e4:	0009883a 	mov	r4,zero
100027e8:	00009c00 	call	100009c0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100027ec:	01414004 	movi	r5,1280
100027f0:	01006c04 	movi	r4,432
100027f4:	00018200 	call	10001820 <UsbWrite>

}
100027f8:	0001883a 	nop
100027fc:	e037883a 	mov	sp,fp
10002800:	dfc00117 	ldw	ra,4(sp)
10002804:	df000017 	ldw	fp,0(sp)
10002808:	dec00204 	addi	sp,sp,8
1000280c:	f800283a 	ret

10002810 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002810:	defffd04 	addi	sp,sp,-12
10002814:	dfc00215 	stw	ra,8(sp)
10002818:	df000115 	stw	fp,4(sp)
1000281c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002820:	01005104 	movi	r4,324
10002824:	00018780 	call	10001878 <UsbRead>
10002828:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000282c:	000b883a 	mov	r5,zero
10002830:	01005104 	movi	r4,324
10002834:	00018200 	call	10001820 <UsbWrite>

	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002838:	00000d06 	br	10002870 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
1000283c:	e0bfff0b 	ldhu	r2,-4(fp)
10002840:	10000526 	beq	r2,zero,10002858 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002844:	e0bfff0b 	ldhu	r2,-4(fp)
10002848:	100b883a 	mov	r5,r2
1000284c:	01040074 	movhi	r4,4097
10002850:	210f4f04 	addi	r4,r4,15676
10002854:	00041c40 	call	100041c4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002858:	01005104 	movi	r4,324
1000285c:	00018780 	call	10001878 <UsbRead>
10002860:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002864:	000b883a 	mov	r5,zero
10002868:	01005104 	movi	r4,324
1000286c:	00018200 	call	10001820 <UsbWrite>
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);

	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002870:	e0bfff0b 	ldhu	r2,-4(fp)
10002874:	10840018 	cmpnei	r2,r2,4096
10002878:	103ff01e 	bne	r2,zero,1000283c <__alt_data_end+0xf800283c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
1000287c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002880:	e037883a 	mov	sp,fp
10002884:	dfc00117 	ldw	ra,4(sp)
10002888:	df000017 	ldw	fp,0(sp)
1000288c:	dec00204 	addi	sp,sp,8
10002890:	f800283a 	ret

10002894 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002894:	defffd04 	addi	sp,sp,-12
10002898:	dfc00215 	stw	ra,8(sp)
1000289c:	df000115 	stw	fp,4(sp)
100028a0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100028a4:	010000c4 	movi	r4,3
100028a8:	0000a300 	call	10000a30 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100028ac:	01005104 	movi	r4,324
100028b0:	00018780 	call	10001878 <UsbRead>
100028b4:	10bfffcc 	andi	r2,r2,65535
100028b8:	10840018 	cmpnei	r2,r2,4096
100028bc:	1000091e 	bne	r2,zero,100028e4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100028c0:	000b883a 	mov	r5,zero
100028c4:	01005104 	movi	r4,324
100028c8:	00018200 	call	10001820 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100028cc:	0001883a 	nop
100028d0:	010000c4 	movi	r4,3
100028d4:	0000a300 	call	10000a30 <IO_read>
100028d8:	10bfffcc 	andi	r2,r2,65535
100028dc:	1080040c 	andi	r2,r2,16
100028e0:	103ffb26 	beq	r2,zero,100028d0 <__alt_data_end+0xf80028d0>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100028e4:	01414204 	movi	r5,1288
100028e8:	01000084 	movi	r4,2
100028ec:	00009c00 	call	100009c0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100028f0:	0009883a 	mov	r4,zero
100028f4:	0000a300 	call	10000a30 <IO_read>
100028f8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100028fc:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002900:	e037883a 	mov	sp,fp
10002904:	dfc00117 	ldw	ra,4(sp)
10002908:	df000017 	ldw	fp,0(sp)
1000290c:	dec00204 	addi	sp,sp,8
10002910:	f800283a 	ret

10002914 <UsbPrintMem>:


void UsbPrintMem()
{
10002914:	defffc04 	addi	sp,sp,-16
10002918:	dfc00315 	stw	ra,12(sp)
1000291c:	df000215 	stw	fp,8(sp)
10002920:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002924:	01414004 	movi	r5,1280
10002928:	01000084 	movi	r4,2
1000292c:	00009c00 	call	100009c0 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002930:	e03ffe15 	stw	zero,-8(fp)
10002934:	00000e06 	br	10002970 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002938:	0009883a 	mov	r4,zero
1000293c:	0000a300 	call	10000a30 <IO_read>
10002940:	10bfffcc 	andi	r2,r2,65535
10002944:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002948:	e0bffe17 	ldw	r2,-8(fp)
1000294c:	10814004 	addi	r2,r2,1280
10002950:	e1bfff17 	ldw	r6,-4(fp)
10002954:	100b883a 	mov	r5,r2
10002958:	01040074 	movhi	r4,4097
1000295c:	210f5704 	addi	r4,r4,15708
10002960:	00041c40 	call	100041c4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002964:	e0bffe17 	ldw	r2,-8(fp)
10002968:	10800084 	addi	r2,r2,2
1000296c:	e0bffe15 	stw	r2,-8(fp)
10002970:	e0bffe17 	ldw	r2,-8(fp)
10002974:	10803250 	cmplti	r2,r2,201
10002978:	103fef1e 	bne	r2,zero,10002938 <__alt_data_end+0xf8002938>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
1000297c:	0001883a 	nop
10002980:	e037883a 	mov	sp,fp
10002984:	dfc00117 	ldw	ra,4(sp)
10002988:	df000017 	ldw	fp,0(sp)
1000298c:	dec00204 	addi	sp,sp,8
10002990:	f800283a 	ret

10002994 <handle_level>:
#include "block.h"
#include "spike.h"
#include "mario_move.h"

int handle_level(mario_move_t* mario, int level)
{
10002994:	defffc04 	addi	sp,sp,-16
10002998:	dfc00315 	stw	ra,12(sp)
1000299c:	df000215 	stw	fp,8(sp)
100029a0:	df000204 	addi	fp,sp,8
100029a4:	e13ffe15 	stw	r4,-8(fp)
100029a8:	e17fff15 	stw	r5,-4(fp)
    switch (level)
100029ac:	e0bfff17 	ldw	r2,-4(fp)
100029b0:	10c00060 	cmpeqi	r3,r2,1
100029b4:	1800031e 	bne	r3,zero,100029c4 <handle_level+0x30>
100029b8:	108000a0 	cmpeqi	r2,r2,2
100029bc:	10001e1e 	bne	r2,zero,10002a38 <handle_level+0xa4>
         && mario->pos_y_curr + MARIO_Y < 8 * BLOCK_WIDTH
         && mario->pos_y_curr + MARIO_Y > 7 * BLOCK_WIDTH)
            mario->level2_active = ACTIVE_LEVEL2;
        break;
    default: 
        break;
100029c0:	00005806 	br	10002b24 <handle_level+0x190>
{
    switch (level)
    {
    case 1:
        // level1 - right
        if (mario->pos_x_curr + MARIO_X > MARIO_LV1_RIGHT_LIMIT)
100029c4:	e0bffe17 	ldw	r2,-8(fp)
100029c8:	10800217 	ldw	r2,8(r2)
100029cc:	10800504 	addi	r2,r2,20
100029d0:	10809f10 	cmplti	r2,r2,636
100029d4:	1000041e 	bne	r2,zero,100029e8 <handle_level+0x54>
        {
            mario->alive = 0;
100029d8:	e0bffe17 	ldw	r2,-8(fp)
100029dc:	10000615 	stw	zero,24(r2)
            return LEVEL_RESTART;
100029e0:	00800304 	movi	r2,12
100029e4:	00006506 	br	10002b7c <handle_level+0x1e8>
        }
        // level1 - left
        if (mario->pos_x_curr < MARIO_LV1_LEFT_LIMIT)
100029e8:	e0bffe17 	ldw	r2,-8(fp)
100029ec:	10800217 	ldw	r2,8(r2)
100029f0:	10800148 	cmpgei	r2,r2,5
100029f4:	1000481e 	bne	r2,zero,10002b18 <handle_level+0x184>
        {
            mario->pos_x_curr = X_UPPER - 2 * MARIO_X;
100029f8:	e0bffe17 	ldw	r2,-8(fp)
100029fc:	00c09604 	movi	r3,600
10002a00:	10c00215 	stw	r3,8(r2)
            if (mario->pos_y_curr > 16 * BLOCK_WIDTH)
10002a04:	e0bffe17 	ldw	r2,-8(fp)
10002a08:	10800317 	ldw	r2,12(r2)
10002a0c:	10805050 	cmplti	r2,r2,321
10002a10:	1000041e 	bne	r2,zero,10002a24 <handle_level+0x90>
                mario->pos_y_curr = 18 * BLOCK_WIDTH;
10002a14:	e0bffe17 	ldw	r2,-8(fp)
10002a18:	00c05a04 	movi	r3,360
10002a1c:	10c00315 	stw	r3,12(r2)
10002a20:	00000306 	br	10002a30 <handle_level+0x9c>
            else
                mario->pos_y_curr = 14 * BLOCK_WIDTH;
10002a24:	e0bffe17 	ldw	r2,-8(fp)
10002a28:	00c04604 	movi	r3,280
10002a2c:	10c00315 	stw	r3,12(r2)
            return LEVEL_SWITCH;
10002a30:	00800344 	movi	r2,13
10002a34:	00005106 	br	10002b7c <handle_level+0x1e8>
        }
        break;
    case 2:
        // right - down
        if (mario->pos_x_curr > 26 * BLOCK_WIDTH
10002a38:	e0bffe17 	ldw	r2,-8(fp)
10002a3c:	10800217 	ldw	r2,8(r2)
10002a40:	10808250 	cmplti	r2,r2,521
10002a44:	1000091e 	bne	r2,zero,10002a6c <handle_level+0xd8>
         && mario->pos_y_curr + MARIO_Y > MARIO_UPPER_LIMIT)
10002a48:	e0bffe17 	ldw	r2,-8(fp)
10002a4c:	10800317 	ldw	r2,12(r2)
10002a50:	10800604 	addi	r2,r2,24
10002a54:	108075d0 	cmplti	r2,r2,471
10002a58:	1000041e 	bne	r2,zero,10002a6c <handle_level+0xd8>
        {
            mario->alive = 0;
10002a5c:	e0bffe17 	ldw	r2,-8(fp)
10002a60:	10000615 	stw	zero,24(r2)
            return LEVEL_BEFORE;
10002a64:	00800244 	movi	r2,9
10002a68:	00004406 	br	10002b7c <handle_level+0x1e8>
        }
        // right - up
        if (mario->pos_x_curr + MARIO_X > MARIO_LV1_RIGHT_LIMIT)
10002a6c:	e0bffe17 	ldw	r2,-8(fp)
10002a70:	10800217 	ldw	r2,8(r2)
10002a74:	10800504 	addi	r2,r2,20
10002a78:	10809f10 	cmplti	r2,r2,636
10002a7c:	1000051e 	bne	r2,zero,10002a94 <handle_level+0x100>
        {
            mario->pos_x_curr = MARIO_X;
10002a80:	e0bffe17 	ldw	r2,-8(fp)
10002a84:	00c00504 	movi	r3,20
10002a88:	10c00215 	stw	r3,8(r2)
            return LEVEL_SWITCH;
10002a8c:	00800344 	movi	r2,13
10002a90:	00003a06 	br	10002b7c <handle_level+0x1e8>
        }
        // left
        if (mario->pos_x_curr < MARIO_LV1_LEFT_LIMIT)
10002a94:	e0bffe17 	ldw	r2,-8(fp)
10002a98:	10800217 	ldw	r2,8(r2)
10002a9c:	10800148 	cmpgei	r2,r2,5
10002aa0:	10000a1e 	bne	r2,zero,10002acc <handle_level+0x138>
            if (mario->pos_y_curr < 13 * BLOCK_WIDTH)
10002aa4:	e0bffe17 	ldw	r2,-8(fp)
10002aa8:	10800317 	ldw	r2,12(r2)
10002aac:	10804108 	cmpgei	r2,r2,260
10002ab0:	1000041e 	bne	r2,zero,10002ac4 <handle_level+0x130>
            {
                mario->alive = 0;
10002ab4:	e0bffe17 	ldw	r2,-8(fp)
10002ab8:	10000615 	stw	zero,24(r2)
                return LEVEL_RESTART;
10002abc:	00800304 	movi	r2,12
10002ac0:	00002e06 	br	10002b7c <handle_level+0x1e8>
            }
            else
            {
                return LEVEL_NEXT;
10002ac4:	008002c4 	movi	r2,11
10002ac8:	00002c06 	br	10002b7c <handle_level+0x1e8>
            }
        // active spike
        if (mario->pos_x_curr + MARIO_X < 5 * BLOCK_WIDTH
10002acc:	e0bffe17 	ldw	r2,-8(fp)
10002ad0:	10800217 	ldw	r2,8(r2)
10002ad4:	10800504 	addi	r2,r2,20
10002ad8:	10801908 	cmpgei	r2,r2,100
10002adc:	1000101e 	bne	r2,zero,10002b20 <handle_level+0x18c>
         && mario->pos_y_curr + MARIO_Y < 8 * BLOCK_WIDTH
10002ae0:	e0bffe17 	ldw	r2,-8(fp)
10002ae4:	10800317 	ldw	r2,12(r2)
10002ae8:	10800604 	addi	r2,r2,24
10002aec:	10802808 	cmpgei	r2,r2,160
10002af0:	10000b1e 	bne	r2,zero,10002b20 <handle_level+0x18c>
         && mario->pos_y_curr + MARIO_Y > 7 * BLOCK_WIDTH)
10002af4:	e0bffe17 	ldw	r2,-8(fp)
10002af8:	10800317 	ldw	r2,12(r2)
10002afc:	10800604 	addi	r2,r2,24
10002b00:	10802350 	cmplti	r2,r2,141
10002b04:	1000061e 	bne	r2,zero,10002b20 <handle_level+0x18c>
            mario->level2_active = ACTIVE_LEVEL2;
10002b08:	e0bffe17 	ldw	r2,-8(fp)
10002b0c:	00c00044 	movi	r3,1
10002b10:	10c00d15 	stw	r3,52(r2)
        break;
10002b14:	00000206 	br	10002b20 <handle_level+0x18c>
                mario->pos_y_curr = 18 * BLOCK_WIDTH;
            else
                mario->pos_y_curr = 14 * BLOCK_WIDTH;
            return LEVEL_SWITCH;
        }
        break;
10002b18:	0001883a 	nop
10002b1c:	00000106 	br	10002b24 <handle_level+0x190>
        // active spike
        if (mario->pos_x_curr + MARIO_X < 5 * BLOCK_WIDTH
         && mario->pos_y_curr + MARIO_Y < 8 * BLOCK_WIDTH
         && mario->pos_y_curr + MARIO_Y > 7 * BLOCK_WIDTH)
            mario->level2_active = ACTIVE_LEVEL2;
        break;
10002b20:	0001883a 	nop
    default: 
        break;
    }
    
    if (is_spike(mario->pos_x_curr, mario->pos_y_curr, level)
10002b24:	e0bffe17 	ldw	r2,-8(fp)
10002b28:	10c00217 	ldw	r3,8(r2)
10002b2c:	e0bffe17 	ldw	r2,-8(fp)
10002b30:	10800317 	ldw	r2,12(r2)
10002b34:	e1bfff17 	ldw	r6,-4(fp)
10002b38:	100b883a 	mov	r5,r2
10002b3c:	1809883a 	mov	r4,r3
10002b40:	0003bd00 	call	10003bd0 <is_spike>
10002b44:	1000081e 	bne	r2,zero,10002b68 <handle_level+0x1d4>
     || out_screen(mario->pos_x_curr, mario->pos_y_curr))
10002b48:	e0bffe17 	ldw	r2,-8(fp)
10002b4c:	10c00217 	ldw	r3,8(r2)
10002b50:	e0bffe17 	ldw	r2,-8(fp)
10002b54:	10800317 	ldw	r2,12(r2)
10002b58:	100b883a 	mov	r5,r2
10002b5c:	1809883a 	mov	r4,r3
10002b60:	000026c0 	call	1000026c <out_screen>
10002b64:	10000426 	beq	r2,zero,10002b78 <handle_level+0x1e4>
    {
         mario->alive = 0;
10002b68:	e0bffe17 	ldw	r2,-8(fp)
10002b6c:	10000615 	stw	zero,24(r2)
         return LEVEL_RESTART;
10002b70:	00800304 	movi	r2,12
10002b74:	00000106 	br	10002b7c <handle_level+0x1e8>
    }
    return LEVEL_CURR;
10002b78:	00800284 	movi	r2,10
}
10002b7c:	e037883a 	mov	sp,fp
10002b80:	dfc00117 	ldw	ra,4(sp)
10002b84:	df000017 	ldw	fp,0(sp)
10002b88:	dec00204 	addi	sp,sp,8
10002b8c:	f800283a 	ret

10002b90 <handle_keycode>:

int handle_keycode(mario_move_t* mario, int level, int keycode)
{
10002b90:	defffb04 	addi	sp,sp,-20
10002b94:	dfc00415 	stw	ra,16(sp)
10002b98:	df000315 	stw	fp,12(sp)
10002b9c:	df000304 	addi	fp,sp,12
10002ba0:	e13ffd15 	stw	r4,-12(fp)
10002ba4:	e17ffe15 	stw	r5,-8(fp)
10002ba8:	e1bfff15 	stw	r6,-4(fp)
    keycode = keycode & 0x00FF;
10002bac:	e0bfff17 	ldw	r2,-4(fp)
10002bb0:	10803fcc 	andi	r2,r2,255
10002bb4:	e0bfff15 	stw	r2,-4(fp)
    if (keycode == KEYBOARD_D
10002bb8:	e0bfff17 	ldw	r2,-4(fp)
10002bbc:	108001e0 	cmpeqi	r2,r2,7
10002bc0:	1000061e 	bne	r2,zero,10002bdc <handle_keycode+0x4c>
     || keycode == KEYBOARD_A
10002bc4:	e0bfff17 	ldw	r2,-4(fp)
10002bc8:	10800120 	cmpeqi	r2,r2,4
10002bcc:	1000031e 	bne	r2,zero,10002bdc <handle_keycode+0x4c>
     || keycode == KEYBOARD_W)
10002bd0:	e0bfff17 	ldw	r2,-4(fp)
10002bd4:	10800698 	cmpnei	r2,r2,26
10002bd8:	10000c1e 	bne	r2,zero,10002c0c <handle_keycode+0x7c>
    {
        if (mario->dir_ct < 4)
10002bdc:	e0bffd17 	ldw	r2,-12(fp)
10002be0:	10800817 	ldw	r2,32(r2)
10002be4:	10800108 	cmpgei	r2,r2,4
10002be8:	1000061e 	bne	r2,zero,10002c04 <handle_keycode+0x74>
        {
            mario->dir_ct += 1;
10002bec:	e0bffd17 	ldw	r2,-12(fp)
10002bf0:	10800817 	ldw	r2,32(r2)
10002bf4:	10c00044 	addi	r3,r2,1
10002bf8:	e0bffd17 	ldw	r2,-12(fp)
10002bfc:	10c00815 	stw	r3,32(r2)
10002c00:	00000206 	br	10002c0c <handle_keycode+0x7c>
        }
        else
        {
            keycode = KEYBOARD_NONE;
10002c04:	00803c04 	movi	r2,240
10002c08:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    if (keycode == KEYBOARD_W)
10002c0c:	e0bfff17 	ldw	r2,-4(fp)
10002c10:	10800698 	cmpnei	r2,r2,26
10002c14:	10000c1e 	bne	r2,zero,10002c48 <handle_keycode+0xb8>
    {
        if (mario->jump_ct < 2)
10002c18:	e0bffd17 	ldw	r2,-12(fp)
10002c1c:	10800717 	ldw	r2,28(r2)
10002c20:	10800088 	cmpgei	r2,r2,2
10002c24:	1000061e 	bne	r2,zero,10002c40 <handle_keycode+0xb0>
        {
            mario->jump_ct += 1;
10002c28:	e0bffd17 	ldw	r2,-12(fp)
10002c2c:	10800717 	ldw	r2,28(r2)
10002c30:	10c00044 	addi	r3,r2,1
10002c34:	e0bffd17 	ldw	r2,-12(fp)
10002c38:	10c00715 	stw	r3,28(r2)
10002c3c:	00000206 	br	10002c48 <handle_keycode+0xb8>
        }
        else
        {
            keycode = KEYBOARD_NONE;
10002c40:	00803c04 	movi	r2,240
10002c44:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    switch (keycode)
10002c48:	e0bfff17 	ldw	r2,-4(fp)
10002c4c:	10c00560 	cmpeqi	r3,r2,21
10002c50:	1800041e 	bne	r3,zero,10002c64 <handle_keycode+0xd4>
10002c54:	10c00a60 	cmpeqi	r3,r2,41
10002c58:	1800041e 	bne	r3,zero,10002c6c <handle_keycode+0xdc>
10002c5c:	10000526 	beq	r2,zero,10002c74 <handle_keycode+0xe4>
10002c60:	00000906 	br	10002c88 <handle_keycode+0xf8>
        {
            case KEYBOARD_R:
                return LEVEL_RESTART;
10002c64:	00800304 	movi	r2,12
10002c68:	00000d06 	br	10002ca0 <handle_keycode+0x110>
                break;
            case KEYBOARD_ESC:
                return LEVEL_0;
10002c6c:	00800204 	movi	r2,8
10002c70:	00000b06 	br	10002ca0 <handle_keycode+0x110>
                break;
            // case KEYBOARD_S:
            //     return LEVEL_NEXT;
            case 0:
                mario_move_update(mario, level, KEYBOARD_NONE);
10002c74:	01803c04 	movi	r6,240
10002c78:	e17ffe17 	ldw	r5,-8(fp)
10002c7c:	e13ffd17 	ldw	r4,-12(fp)
10002c80:	00035540 	call	10003554 <mario_move_update>
                break;
10002c84:	00000506 	br	10002c9c <handle_keycode+0x10c>
            default:
                mario_move_update(mario, level, keycode);
10002c88:	e1bfff17 	ldw	r6,-4(fp)
10002c8c:	e17ffe17 	ldw	r5,-8(fp)
10002c90:	e13ffd17 	ldw	r4,-12(fp)
10002c94:	00035540 	call	10003554 <mario_move_update>
                break;
10002c98:	0001883a 	nop
        }

    return LEVEL_CURR;
10002c9c:	00800284 	movi	r2,10
}
10002ca0:	e037883a 	mov	sp,fp
10002ca4:	dfc00117 	ldw	ra,4(sp)
10002ca8:	df000017 	ldw	fp,0(sp)
10002cac:	dec00204 	addi	sp,sp,8
10002cb0:	f800283a 	ret

10002cb4 <main>:

int main()
{
10002cb4:	deffe904 	addi	sp,sp,-92
10002cb8:	dfc01615 	stw	ra,88(sp)
10002cbc:	df001515 	stw	fp,84(sp)
10002cc0:	df001504 	addi	fp,sp,84
    mario_move_t mario_move;
    int bg_idx, level;
    int keycode, keycode_last, keycode_curr;
    keyboard_init();
10002cc4:	0000d740 	call	10000d74 <keyboard_init>

LEVEL0:
    level = 0; bg_idx = 0;
10002cc8:	e03fed15 	stw	zero,-76(fp)
10002ccc:	e03fee15 	stw	zero,-72(fp)
    level_block_info_init(level);
10002cd0:	e13fed17 	ldw	r4,-76(fp)
10002cd4:	00006640 	call	10000664 <level_block_info_init>
    level_spike_info_init(level);
10002cd8:	e13fed17 	ldw	r4,-76(fp)
10002cdc:	0003dec0 	call	10003dec <level_spike_info_init>
    
    mario_move_init(&mario_move, level);
10002ce0:	e0bff204 	addi	r2,fp,-56
10002ce4:	e17fed17 	ldw	r5,-76(fp)
10002ce8:	1009883a 	mov	r4,r2
10002cec:	00033a00 	call	100033a0 <mario_move_init>
    while (get_keycode() != KEYBOARD_ENTER) {
10002cf0:	00000906 	br	10002d18 <main+0x64>
        mario_move.idx = (STAND_LEFT + RUN_LEFT) - mario_move.idx;
10002cf4:	e0bff717 	ldw	r2,-36(fp)
10002cf8:	00c00144 	movi	r3,5
10002cfc:	1885c83a 	sub	r2,r3,r2
10002d00:	e0bff715 	stw	r2,-36(fp)
        draw_screen(bg_idx, level, &mario_move);
10002d04:	e0bff204 	addi	r2,fp,-56
10002d08:	100d883a 	mov	r6,r2
10002d0c:	e17fed17 	ldw	r5,-76(fp)
10002d10:	e13fee17 	ldw	r4,-72(fp)
10002d14:	00008700 	call	10000870 <draw_screen>
    level = 0; bg_idx = 0;
    level_block_info_init(level);
    level_spike_info_init(level);
    
    mario_move_init(&mario_move, level);
    while (get_keycode() != KEYBOARD_ENTER) {
10002d18:	0000a980 	call	10000a98 <get_keycode>
10002d1c:	10800a18 	cmpnei	r2,r2,40
10002d20:	103ff41e 	bne	r2,zero,10002cf4 <__alt_data_end+0xf8002cf4>
        mario_move.idx = (STAND_LEFT + RUN_LEFT) - mario_move.idx;
        draw_screen(bg_idx, level, &mario_move);
    }

LEVEL1:
    level = 1; bg_idx = 0;
10002d24:	00800044 	movi	r2,1
10002d28:	e0bfed15 	stw	r2,-76(fp)
10002d2c:	e03fee15 	stw	zero,-72(fp)
    mario_move_init(&mario_move, level);
10002d30:	e0bff204 	addi	r2,fp,-56
10002d34:	e17fed17 	ldw	r5,-76(fp)
10002d38:	1009883a 	mov	r4,r2
10002d3c:	00033a00 	call	100033a0 <mario_move_init>
    handle_keycode(&mario_move, level, KEYBOARD_NONE);
10002d40:	e0bff204 	addi	r2,fp,-56
10002d44:	01803c04 	movi	r6,240
10002d48:	e17fed17 	ldw	r5,-76(fp)
10002d4c:	1009883a 	mov	r4,r2
10002d50:	0002b900 	call	10002b90 <handle_keycode>
    draw_screen(bg_idx, level, &mario_move);
10002d54:	e0bff204 	addi	r2,fp,-56
10002d58:	100d883a 	mov	r6,r2
10002d5c:	e17fed17 	ldw	r5,-76(fp)
10002d60:	e13fee17 	ldw	r4,-72(fp)
10002d64:	00008700 	call	10000870 <draw_screen>

LEVEL1_SWITCH:
    level = 1; bg_idx = 0;
10002d68:	00800044 	movi	r2,1
10002d6c:	e0bfed15 	stw	r2,-76(fp)
10002d70:	e03fee15 	stw	zero,-72(fp)
    level_block_info_init(level);
10002d74:	e13fed17 	ldw	r4,-76(fp)
10002d78:	00006640 	call	10000664 <level_block_info_init>
    level_spike_info_init(level);
10002d7c:	e13fed17 	ldw	r4,-76(fp)
10002d80:	0003dec0 	call	10003dec <level_spike_info_init>
    keycode_last = 0;
10002d84:	e03fef15 	stw	zero,-68(fp)
    while(1)
    {
        keycode_last = keycode_curr;
10002d88:	e0bfec17 	ldw	r2,-80(fp)
10002d8c:	e0bfef15 	stw	r2,-68(fp)
        keycode_curr = get_keycode();
10002d90:	0000a980 	call	10000a98 <get_keycode>
10002d94:	e0bfec15 	stw	r2,-80(fp)
        if (keycode_curr == KEYBOARD_R
10002d98:	e0bfec17 	ldw	r2,-80(fp)
10002d9c:	10800558 	cmpnei	r2,r2,21
10002da0:	1000061e 	bne	r2,zero,10002dbc <main+0x108>
         && keycode_curr == keycode_last)
10002da4:	e0ffec17 	ldw	r3,-80(fp)
10002da8:	e0bfef17 	ldw	r2,-68(fp)
10002dac:	1880031e 	bne	r3,r2,10002dbc <main+0x108>
            keycode = KEYBOARD_NONE;
10002db0:	00803c04 	movi	r2,240
10002db4:	e0bfeb15 	stw	r2,-84(fp)
10002db8:	00000206 	br	10002dc4 <main+0x110>
        else
            keycode = keycode_curr;
10002dbc:	e0bfec17 	ldw	r2,-80(fp)
10002dc0:	e0bfeb15 	stw	r2,-84(fp)
        int flag = 0;
10002dc4:	e03ff015 	stw	zero,-64(fp)
        flag = handle_keycode(&mario_move, level, keycode);
10002dc8:	e0bff204 	addi	r2,fp,-56
10002dcc:	e1bfeb17 	ldw	r6,-84(fp)
10002dd0:	e17fed17 	ldw	r5,-76(fp)
10002dd4:	1009883a 	mov	r4,r2
10002dd8:	0002b900 	call	10002b90 <handle_keycode>
10002ddc:	e0bff015 	stw	r2,-64(fp)
        draw_screen(bg_idx, level, &mario_move);
10002de0:	e0bff204 	addi	r2,fp,-56
10002de4:	100d883a 	mov	r6,r2
10002de8:	e17fed17 	ldw	r5,-76(fp)
10002dec:	e13fee17 	ldw	r4,-72(fp)
10002df0:	00008700 	call	10000870 <draw_screen>
        switch (flag)
10002df4:	e0bff017 	ldw	r2,-64(fp)
10002df8:	10c002e0 	cmpeqi	r3,r2,11
10002dfc:	18002b1e 	bne	r3,zero,10002eac <main+0x1f8>
10002e00:	10c00320 	cmpeqi	r3,r2,12
10002e04:	18000c1e 	bne	r3,zero,10002e38 <main+0x184>
10002e08:	10800220 	cmpeqi	r2,r2,8
10002e0c:	103fae1e 	bne	r2,zero,10002cc8 <__alt_data_end+0xf8002cc8>
                break;
            case LEVEL_NEXT:
                goto LEVEL2;
                break;
            default:
                break;
10002e10:	0001883a 	nop
        }
        flag = handle_level(&mario_move, level);
10002e14:	e0bff204 	addi	r2,fp,-56
10002e18:	e17fed17 	ldw	r5,-76(fp)
10002e1c:	1009883a 	mov	r4,r2
10002e20:	00029940 	call	10002994 <handle_level>
10002e24:	e0bff015 	stw	r2,-64(fp)
        switch (flag)
10002e28:	e0bff017 	ldw	r2,-64(fp)
10002e2c:	10c00320 	cmpeqi	r3,r2,12
10002e30:	18000e1e 	bne	r3,zero,10002e6c <main+0x1b8>
10002e34:	00000a06 	br	10002e60 <main+0x1ac>
        flag = handle_keycode(&mario_move, level, keycode);
        draw_screen(bg_idx, level, &mario_move);
        switch (flag)
        {
            case LEVEL_RESTART:
                draw_screen(bg_idx, level, &mario_move);
10002e38:	e0bff204 	addi	r2,fp,-56
10002e3c:	100d883a 	mov	r6,r2
10002e40:	e17fed17 	ldw	r5,-76(fp)
10002e44:	e13fee17 	ldw	r4,-72(fp)
10002e48:	00008700 	call	10000870 <draw_screen>
                while (get_keycode() != KEYBOARD_R) {}
10002e4c:	0001883a 	nop
10002e50:	0000a980 	call	10000a98 <get_keycode>
10002e54:	10800558 	cmpnei	r2,r2,21
10002e58:	103ffd1e 	bne	r2,zero,10002e50 <__alt_data_end+0xf8002e50>
                goto LEVEL1;
10002e5c:	003fb106 	br	10002d24 <__alt_data_end+0xf8002d24>
                break;
            default:
                break;
        }
        flag = handle_level(&mario_move, level);
        switch (flag)
10002e60:	10800360 	cmpeqi	r2,r2,13
10002e64:	1000241e 	bne	r2,zero,10002ef8 <main+0x244>
                break;
            case LEVEL_SWITCH:
                goto LEVEL2_SWITCH;
                break;
            default:
                break;
10002e68:	00000a06 	br	10002e94 <main+0x1e0>
        }
        flag = handle_level(&mario_move, level);
        switch (flag)
        {
            case LEVEL_RESTART:
                draw_screen(bg_idx, level, &mario_move);
10002e6c:	e0bff204 	addi	r2,fp,-56
10002e70:	100d883a 	mov	r6,r2
10002e74:	e17fed17 	ldw	r5,-76(fp)
10002e78:	e13fee17 	ldw	r4,-72(fp)
10002e7c:	00008700 	call	10000870 <draw_screen>
                while (get_keycode() != KEYBOARD_R) {}
10002e80:	0001883a 	nop
10002e84:	0000a980 	call	10000a98 <get_keycode>
10002e88:	10800558 	cmpnei	r2,r2,21
10002e8c:	103ffd1e 	bne	r2,zero,10002e84 <__alt_data_end+0xf8002e84>
                goto LEVEL1;
10002e90:	003fa406 	br	10002d24 <__alt_data_end+0xf8002d24>
                goto LEVEL2_SWITCH;
                break;
            default:
                break;
        }
        draw_screen(bg_idx, level, &mario_move);
10002e94:	e0bff204 	addi	r2,fp,-56
10002e98:	100d883a 	mov	r6,r2
10002e9c:	e17fed17 	ldw	r5,-76(fp)
10002ea0:	e13fee17 	ldw	r4,-72(fp)
10002ea4:	00008700 	call	10000870 <draw_screen>
    }
10002ea8:	003fb706 	br	10002d88 <__alt_data_end+0xf8002d88>
                break;
            case LEVEL_0:
                goto LEVEL0;
                break;
            case LEVEL_NEXT:
                goto LEVEL2;
10002eac:	0001883a 	nop
        }
        draw_screen(bg_idx, level, &mario_move);
    }
    
LEVEL2:
    level = 2; bg_idx = 0;
10002eb0:	00800084 	movi	r2,2
10002eb4:	e0bfed15 	stw	r2,-76(fp)
10002eb8:	e03fee15 	stw	zero,-72(fp)
    mario_move_init(&mario_move, level);
10002ebc:	e0bff204 	addi	r2,fp,-56
10002ec0:	e17fed17 	ldw	r5,-76(fp)
10002ec4:	1009883a 	mov	r4,r2
10002ec8:	00033a00 	call	100033a0 <mario_move_init>
    handle_keycode(&mario_move, level, KEYBOARD_NONE);
10002ecc:	e0bff204 	addi	r2,fp,-56
10002ed0:	01803c04 	movi	r6,240
10002ed4:	e17fed17 	ldw	r5,-76(fp)
10002ed8:	1009883a 	mov	r4,r2
10002edc:	0002b900 	call	10002b90 <handle_keycode>
    draw_screen(bg_idx, level, &mario_move);
10002ee0:	e0bff204 	addi	r2,fp,-56
10002ee4:	100d883a 	mov	r6,r2
10002ee8:	e17fed17 	ldw	r5,-76(fp)
10002eec:	e13fee17 	ldw	r4,-72(fp)
10002ef0:	00008700 	call	10000870 <draw_screen>
10002ef4:	00000106 	br	10002efc <main+0x248>
                draw_screen(bg_idx, level, &mario_move);
                while (get_keycode() != KEYBOARD_R) {}
                goto LEVEL1;
                break;
            case LEVEL_SWITCH:
                goto LEVEL2_SWITCH;
10002ef8:	0001883a 	nop
    mario_move_init(&mario_move, level);
    handle_keycode(&mario_move, level, KEYBOARD_NONE);
    draw_screen(bg_idx, level, &mario_move);
    
LEVEL2_SWITCH:
    level = 2; bg_idx = 0;
10002efc:	00800084 	movi	r2,2
10002f00:	e0bfed15 	stw	r2,-76(fp)
10002f04:	e03fee15 	stw	zero,-72(fp)
    level_block_info_init(level);
10002f08:	e13fed17 	ldw	r4,-76(fp)
10002f0c:	00006640 	call	10000664 <level_block_info_init>
    level_spike_info_init(level);
10002f10:	e13fed17 	ldw	r4,-76(fp)
10002f14:	0003dec0 	call	10003dec <level_spike_info_init>
    keycode_last = 0;
10002f18:	e03fef15 	stw	zero,-68(fp)
    while(1)
    {
        keycode_last = keycode_curr;
10002f1c:	e0bfec17 	ldw	r2,-80(fp)
10002f20:	e0bfef15 	stw	r2,-68(fp)
        keycode_curr = get_keycode();
10002f24:	0000a980 	call	10000a98 <get_keycode>
10002f28:	e0bfec15 	stw	r2,-80(fp)
        if (keycode_curr == KEYBOARD_R
10002f2c:	e0bfec17 	ldw	r2,-80(fp)
10002f30:	10800558 	cmpnei	r2,r2,21
10002f34:	1000061e 	bne	r2,zero,10002f50 <main+0x29c>
         && keycode_curr == keycode_last)
10002f38:	e0ffec17 	ldw	r3,-80(fp)
10002f3c:	e0bfef17 	ldw	r2,-68(fp)
10002f40:	1880031e 	bne	r3,r2,10002f50 <main+0x29c>
            keycode = KEYBOARD_NONE;
10002f44:	00803c04 	movi	r2,240
10002f48:	e0bfeb15 	stw	r2,-84(fp)
10002f4c:	00000206 	br	10002f58 <main+0x2a4>
        else
            keycode = keycode_curr;
10002f50:	e0bfec17 	ldw	r2,-80(fp)
10002f54:	e0bfeb15 	stw	r2,-84(fp)
        int flag = 0;
10002f58:	e03ff115 	stw	zero,-60(fp)
        flag = handle_keycode(&mario_move, level, keycode);
10002f5c:	e0bff204 	addi	r2,fp,-56
10002f60:	e1bfeb17 	ldw	r6,-84(fp)
10002f64:	e17fed17 	ldw	r5,-76(fp)
10002f68:	1009883a 	mov	r4,r2
10002f6c:	0002b900 	call	10002b90 <handle_keycode>
10002f70:	e0bff115 	stw	r2,-60(fp)
        draw_screen(bg_idx, level, &mario_move);
10002f74:	e0bff204 	addi	r2,fp,-56
10002f78:	100d883a 	mov	r6,r2
10002f7c:	e17fed17 	ldw	r5,-76(fp)
10002f80:	e13fee17 	ldw	r4,-72(fp)
10002f84:	00008700 	call	10000870 <draw_screen>
        switch (flag)
10002f88:	e0bff117 	ldw	r2,-60(fp)
10002f8c:	10c002e0 	cmpeqi	r3,r2,11
10002f90:	183f641e 	bne	r3,zero,10002d24 <__alt_data_end+0xf8002d24>
10002f94:	10c00320 	cmpeqi	r3,r2,12
10002f98:	18000c1e 	bne	r3,zero,10002fcc <main+0x318>
10002f9c:	10800220 	cmpeqi	r2,r2,8
10002fa0:	103f491e 	bne	r2,zero,10002cc8 <__alt_data_end+0xf8002cc8>
                break;
            case LEVEL_NEXT:
                goto LEVEL1;
                break;
            default:
                break;
10002fa4:	0001883a 	nop
        }
        flag = handle_level(&mario_move, level);
10002fa8:	e0bff204 	addi	r2,fp,-56
10002fac:	e17fed17 	ldw	r5,-76(fp)
10002fb0:	1009883a 	mov	r4,r2
10002fb4:	00029940 	call	10002994 <handle_level>
10002fb8:	e0bff115 	stw	r2,-60(fp)
        switch (flag)
10002fbc:	e0bff117 	ldw	r2,-60(fp)
10002fc0:	10c002e0 	cmpeqi	r3,r2,11
10002fc4:	18002f1e 	bne	r3,zero,10003084 <main+0x3d0>
10002fc8:	00000a06 	br	10002ff4 <main+0x340>
        flag = handle_keycode(&mario_move, level, keycode);
        draw_screen(bg_idx, level, &mario_move);
        switch (flag)
        {
            case LEVEL_RESTART:
                draw_screen(bg_idx, level, &mario_move);
10002fcc:	e0bff204 	addi	r2,fp,-56
10002fd0:	100d883a 	mov	r6,r2
10002fd4:	e17fed17 	ldw	r5,-76(fp)
10002fd8:	e13fee17 	ldw	r4,-72(fp)
10002fdc:	00008700 	call	10000870 <draw_screen>
                while (get_keycode() != KEYBOARD_R) {}
10002fe0:	0001883a 	nop
10002fe4:	0000a980 	call	10000a98 <get_keycode>
10002fe8:	10800558 	cmpnei	r2,r2,21
10002fec:	103ffd1e 	bne	r2,zero,10002fe4 <__alt_data_end+0xf8002fe4>
                goto LEVEL2;
10002ff0:	003faf06 	br	10002eb0 <__alt_data_end+0xf8002eb0>
                break;
            default:
                break;
        }
        flag = handle_level(&mario_move, level);
        switch (flag)
10002ff4:	10c00308 	cmpgei	r3,r2,12
10002ff8:	1800031e 	bne	r3,zero,10003008 <main+0x354>
10002ffc:	10800260 	cmpeqi	r2,r2,9
10003000:	1000101e 	bne	r2,zero,10003044 <main+0x390>
                break;
            case LEVEL_NEXT:
                goto LEVEL3;
                break;
            default:
                break;
10003004:	00001906 	br	1000306c <main+0x3b8>
                break;
            default:
                break;
        }
        flag = handle_level(&mario_move, level);
        switch (flag)
10003008:	10c00320 	cmpeqi	r3,r2,12
1000300c:	1800031e 	bne	r3,zero,1000301c <main+0x368>
10003010:	10800360 	cmpeqi	r2,r2,13
10003014:	103f541e 	bne	r2,zero,10002d68 <__alt_data_end+0xf8002d68>
                break;
            case LEVEL_NEXT:
                goto LEVEL3;
                break;
            default:
                break;
10003018:	00001406 	br	1000306c <main+0x3b8>
        }
        flag = handle_level(&mario_move, level);
        switch (flag)
        {
            case LEVEL_RESTART:
                draw_screen(bg_idx, level, &mario_move);
1000301c:	e0bff204 	addi	r2,fp,-56
10003020:	100d883a 	mov	r6,r2
10003024:	e17fed17 	ldw	r5,-76(fp)
10003028:	e13fee17 	ldw	r4,-72(fp)
1000302c:	00008700 	call	10000870 <draw_screen>
                while (get_keycode() != KEYBOARD_R) {}
10003030:	0001883a 	nop
10003034:	0000a980 	call	10000a98 <get_keycode>
10003038:	10800558 	cmpnei	r2,r2,21
1000303c:	103ffd1e 	bne	r2,zero,10003034 <__alt_data_end+0xf8003034>
                goto LEVEL2;
10003040:	003f9b06 	br	10002eb0 <__alt_data_end+0xf8002eb0>
                break;
            case LEVEL_SWITCH:
                goto LEVEL1_SWITCH;
                break;
            case LEVEL_BEFORE:
                draw_screen(bg_idx, level, &mario_move);
10003044:	e0bff204 	addi	r2,fp,-56
10003048:	100d883a 	mov	r6,r2
1000304c:	e17fed17 	ldw	r5,-76(fp)
10003050:	e13fee17 	ldw	r4,-72(fp)
10003054:	00008700 	call	10000870 <draw_screen>
                while (get_keycode() != KEYBOARD_R) {}
10003058:	0001883a 	nop
1000305c:	0000a980 	call	10000a98 <get_keycode>
10003060:	10800558 	cmpnei	r2,r2,21
10003064:	103ffd1e 	bne	r2,zero,1000305c <__alt_data_end+0xf800305c>
                goto LEVEL1;
10003068:	003f2e06 	br	10002d24 <__alt_data_end+0xf8002d24>
                goto LEVEL3;
                break;
            default:
                break;
        }
        draw_screen(bg_idx, level, &mario_move);
1000306c:	e0bff204 	addi	r2,fp,-56
10003070:	100d883a 	mov	r6,r2
10003074:	e17fed17 	ldw	r5,-76(fp)
10003078:	e13fee17 	ldw	r4,-72(fp)
1000307c:	00008700 	call	10000870 <draw_screen>
    }
10003080:	003fa606 	br	10002f1c <__alt_data_end+0xf8002f1c>
                draw_screen(bg_idx, level, &mario_move);
                while (get_keycode() != KEYBOARD_R) {}
                goto LEVEL1;
                break;
            case LEVEL_NEXT:
                goto LEVEL3;
10003084:	0001883a 	nop
        }
        draw_screen(bg_idx, level, &mario_move);
    }

LEVEL3:
    level = 3; bg_idx = 1;
10003088:	008000c4 	movi	r2,3
1000308c:	e0bfed15 	stw	r2,-76(fp)
10003090:	00800044 	movi	r2,1
10003094:	e0bfee15 	stw	r2,-72(fp)
    mario_move_init(&mario_move, level);
10003098:	e0bff204 	addi	r2,fp,-56
1000309c:	e17fed17 	ldw	r5,-76(fp)
100030a0:	1009883a 	mov	r4,r2
100030a4:	00033a00 	call	100033a0 <mario_move_init>
    draw_screen(bg_idx, level, &mario_move);
100030a8:	e0bff204 	addi	r2,fp,-56
100030ac:	100d883a 	mov	r6,r2
100030b0:	e17fed17 	ldw	r5,-76(fp)
100030b4:	e13fee17 	ldw	r4,-72(fp)
100030b8:	00008700 	call	10000870 <draw_screen>
    while(get_keycode() != KEYBOARD_ENTER) {}
100030bc:	0001883a 	nop
100030c0:	0000a980 	call	10000a98 <get_keycode>
100030c4:	10800a18 	cmpnei	r2,r2,40
100030c8:	103ffd1e 	bne	r2,zero,100030c0 <__alt_data_end+0xf80030c0>
    goto LEVEL0;
100030cc:	003efe06 	br	10002cc8 <__alt_data_end+0xf8002cc8>

100030d0 <face_to>:
#include "mario_move.h"
#include "block.h"
#include "keyboard/keyboard_util.h"

static int face_to(mario_move_t* mario) 
{
100030d0:	defffe04 	addi	sp,sp,-8
100030d4:	df000115 	stw	fp,4(sp)
100030d8:	df000104 	addi	fp,sp,4
100030dc:	e13fff15 	stw	r4,-4(fp)
    if (mario->idx_last == STAND_RIGHT
100030e0:	e0bfff17 	ldw	r2,-4(fp)
100030e4:	10800417 	ldw	r2,16(r2)
100030e8:	10000826 	beq	r2,zero,1000310c <face_to+0x3c>
     || mario->idx_last == RUN_RIGHT
100030ec:	e0bfff17 	ldw	r2,-4(fp)
100030f0:	10800417 	ldw	r2,16(r2)
100030f4:	10800060 	cmpeqi	r2,r2,1
100030f8:	1000041e 	bne	r2,zero,1000310c <face_to+0x3c>
     || mario->idx_last == JUMP_RIGHT
100030fc:	e0bfff17 	ldw	r2,-4(fp)
10003100:	10800417 	ldw	r2,16(r2)
10003104:	10800118 	cmpnei	r2,r2,4
10003108:	1000021e 	bne	r2,zero,10003114 <face_to+0x44>
     )
        return FACE_RIGHT;
1000310c:	008001c4 	movi	r2,7
10003110:	00000106 	br	10003118 <face_to+0x48>
    return FACE_LEFT;
10003114:	00800184 	movi	r2,6
}
10003118:	e037883a 	mov	sp,fp
1000311c:	df000017 	ldw	fp,0(sp)
10003120:	dec00104 	addi	sp,sp,4
10003124:	f800283a 	ret

10003128 <get_speed>:

static void get_speed(mario_move_t* mario, int keycode, int acc_x, int acc_y, int level)
{
10003128:	defff604 	addi	sp,sp,-40
1000312c:	dfc00915 	stw	ra,36(sp)
10003130:	df000815 	stw	fp,32(sp)
10003134:	df000804 	addi	fp,sp,32
10003138:	e13ffc15 	stw	r4,-16(fp)
1000313c:	e17ffd15 	stw	r5,-12(fp)
10003140:	e1bffe15 	stw	r6,-8(fp)
10003144:	e1ffff15 	stw	r7,-4(fp)
    int max_x = mario->speed_x_last + acc_x;
10003148:	e0bffc17 	ldw	r2,-16(fp)
1000314c:	10c00917 	ldw	r3,36(r2)
10003150:	e0bffe17 	ldw	r2,-8(fp)
10003154:	1885883a 	add	r2,r3,r2
10003158:	e0bffa15 	stw	r2,-24(fp)
    int max_y = mario->speed_y_last + acc_y;
1000315c:	e0bffc17 	ldw	r2,-16(fp)
10003160:	10c00a17 	ldw	r3,40(r2)
10003164:	e0bfff17 	ldw	r2,-4(fp)
10003168:	1885883a 	add	r2,r3,r2
1000316c:	e0bffb15 	stw	r2,-20(fp)
    int update_y = 0;
10003170:	e03ff815 	stw	zero,-32(fp)
    if (max_y == 0)
10003174:	e0bffb17 	ldw	r2,-20(fp)
10003178:	1000021e 	bne	r2,zero,10003184 <get_speed+0x5c>
    {
        update_y = 0;
1000317c:	e03ff815 	stw	zero,-32(fp)
10003180:	00002e06 	br	1000323c <get_speed+0x114>
    } else if (max_y < 0)
10003184:	e0bffb17 	ldw	r2,-20(fp)
10003188:	10001a0e 	bge	r2,zero,100031f4 <get_speed+0xcc>
    {
        while (update_y > max_y && can_move(mario->pos_x_last, mario->pos_y_last + update_y, level))
1000318c:	00000306 	br	1000319c <get_speed+0x74>
            update_y --;
10003190:	e0bff817 	ldw	r2,-32(fp)
10003194:	10bfffc4 	addi	r2,r2,-1
10003198:	e0bff815 	stw	r2,-32(fp)
    if (max_y == 0)
    {
        update_y = 0;
    } else if (max_y < 0)
    {
        while (update_y > max_y && can_move(mario->pos_x_last, mario->pos_y_last + update_y, level))
1000319c:	e0bff817 	ldw	r2,-32(fp)
100031a0:	e0fffb17 	ldw	r3,-20(fp)
100031a4:	18800a0e 	bge	r3,r2,100031d0 <get_speed+0xa8>
100031a8:	e0bffc17 	ldw	r2,-16(fp)
100031ac:	11000017 	ldw	r4,0(r2)
100031b0:	e0bffc17 	ldw	r2,-16(fp)
100031b4:	10c00117 	ldw	r3,4(r2)
100031b8:	e0bff817 	ldw	r2,-32(fp)
100031bc:	1885883a 	add	r2,r3,r2
100031c0:	e1800217 	ldw	r6,8(fp)
100031c4:	100b883a 	mov	r5,r2
100031c8:	000051c0 	call	1000051c <can_move>
100031cc:	103ff01e 	bne	r2,zero,10003190 <__alt_data_end+0xf8003190>
            update_y --;
        if (update_y < 0)
100031d0:	e0bff817 	ldw	r2,-32(fp)
100031d4:	1000190e 	bge	r2,zero,1000323c <get_speed+0x114>
            update_y ++;
100031d8:	e0bff817 	ldw	r2,-32(fp)
100031dc:	10800044 	addi	r2,r2,1
100031e0:	e0bff815 	stw	r2,-32(fp)
100031e4:	00001506 	br	1000323c <get_speed+0x114>
    }
    else
    {
        while (update_y < max_y && can_move(mario->pos_x_last, mario->pos_y_last + update_y, level))
            update_y ++;
100031e8:	e0bff817 	ldw	r2,-32(fp)
100031ec:	10800044 	addi	r2,r2,1
100031f0:	e0bff815 	stw	r2,-32(fp)
        if (update_y < 0)
            update_y ++;
    }
    else
    {
        while (update_y < max_y && can_move(mario->pos_x_last, mario->pos_y_last + update_y, level))
100031f4:	e0fff817 	ldw	r3,-32(fp)
100031f8:	e0bffb17 	ldw	r2,-20(fp)
100031fc:	18800a0e 	bge	r3,r2,10003228 <get_speed+0x100>
10003200:	e0bffc17 	ldw	r2,-16(fp)
10003204:	11000017 	ldw	r4,0(r2)
10003208:	e0bffc17 	ldw	r2,-16(fp)
1000320c:	10c00117 	ldw	r3,4(r2)
10003210:	e0bff817 	ldw	r2,-32(fp)
10003214:	1885883a 	add	r2,r3,r2
10003218:	e1800217 	ldw	r6,8(fp)
1000321c:	100b883a 	mov	r5,r2
10003220:	000051c0 	call	1000051c <can_move>
10003224:	103ff01e 	bne	r2,zero,100031e8 <__alt_data_end+0xf80031e8>
            update_y ++;
        if (update_y > 0) 
10003228:	e0bff817 	ldw	r2,-32(fp)
1000322c:	0080030e 	bge	zero,r2,1000323c <get_speed+0x114>
            update_y --;
10003230:	e0bff817 	ldw	r2,-32(fp)
10003234:	10bfffc4 	addi	r2,r2,-1
10003238:	e0bff815 	stw	r2,-32(fp)
    }

    int update_x = 0;
1000323c:	e03ff915 	stw	zero,-28(fp)
    if (max_x == 0)
10003240:	e0bffa17 	ldw	r2,-24(fp)
10003244:	1000021e 	bne	r2,zero,10003250 <get_speed+0x128>
    {
        update_x = 0;
10003248:	e03ff915 	stw	zero,-28(fp)
1000324c:	00003c06 	br	10003340 <get_speed+0x218>
    } 
    else if (max_x < 0)
10003250:	e0bffa17 	ldw	r2,-24(fp)
10003254:	1000210e 	bge	r2,zero,100032dc <get_speed+0x1b4>
    {
        while (update_x > max_x && can_move(mario->pos_x_last + update_x, mario->pos_y_last + update_y, level))
10003258:	00000306 	br	10003268 <get_speed+0x140>
            update_x --;
1000325c:	e0bff917 	ldw	r2,-28(fp)
10003260:	10bfffc4 	addi	r2,r2,-1
10003264:	e0bff915 	stw	r2,-28(fp)
    {
        update_x = 0;
    } 
    else if (max_x < 0)
    {
        while (update_x > max_x && can_move(mario->pos_x_last + update_x, mario->pos_y_last + update_y, level))
10003268:	e0bff917 	ldw	r2,-28(fp)
1000326c:	e0fffa17 	ldw	r3,-24(fp)
10003270:	18800c0e 	bge	r3,r2,100032a4 <get_speed+0x17c>
10003274:	e0bffc17 	ldw	r2,-16(fp)
10003278:	10c00017 	ldw	r3,0(r2)
1000327c:	e0bff917 	ldw	r2,-28(fp)
10003280:	1889883a 	add	r4,r3,r2
10003284:	e0bffc17 	ldw	r2,-16(fp)
10003288:	10c00117 	ldw	r3,4(r2)
1000328c:	e0bff817 	ldw	r2,-32(fp)
10003290:	1885883a 	add	r2,r3,r2
10003294:	e1800217 	ldw	r6,8(fp)
10003298:	100b883a 	mov	r5,r2
1000329c:	000051c0 	call	1000051c <can_move>
100032a0:	103fee1e 	bne	r2,zero,1000325c <__alt_data_end+0xf800325c>
            update_x --;
        if (update_x < 0)
100032a4:	e0bff917 	ldw	r2,-28(fp)
100032a8:	1000030e 	bge	r2,zero,100032b8 <get_speed+0x190>
            update_x ++;
100032ac:	e0bff917 	ldw	r2,-28(fp)
100032b0:	10800044 	addi	r2,r2,1
100032b4:	e0bff915 	stw	r2,-28(fp)
        if (update_x < -MARIO_X_SPEED_UPPER)
100032b8:	e0bff917 	ldw	r2,-28(fp)
100032bc:	10bffb08 	cmpgei	r2,r2,-20
100032c0:	10001f1e 	bne	r2,zero,10003340 <get_speed+0x218>
        {
            update_x = -MARIO_X_SPEED_UPPER;
100032c4:	00bffb04 	movi	r2,-20
100032c8:	e0bff915 	stw	r2,-28(fp)
100032cc:	00001c06 	br	10003340 <get_speed+0x218>
        }
    }
    else
    {
        while (update_x < max_x && can_move(mario->pos_x_last + update_x, mario->pos_y_last + update_y, level))
            update_x ++;
100032d0:	e0bff917 	ldw	r2,-28(fp)
100032d4:	10800044 	addi	r2,r2,1
100032d8:	e0bff915 	stw	r2,-28(fp)
            update_x = -MARIO_X_SPEED_UPPER;
        }
    }
    else
    {
        while (update_x < max_x && can_move(mario->pos_x_last + update_x, mario->pos_y_last + update_y, level))
100032dc:	e0fff917 	ldw	r3,-28(fp)
100032e0:	e0bffa17 	ldw	r2,-24(fp)
100032e4:	18800c0e 	bge	r3,r2,10003318 <get_speed+0x1f0>
100032e8:	e0bffc17 	ldw	r2,-16(fp)
100032ec:	10c00017 	ldw	r3,0(r2)
100032f0:	e0bff917 	ldw	r2,-28(fp)
100032f4:	1889883a 	add	r4,r3,r2
100032f8:	e0bffc17 	ldw	r2,-16(fp)
100032fc:	10c00117 	ldw	r3,4(r2)
10003300:	e0bff817 	ldw	r2,-32(fp)
10003304:	1885883a 	add	r2,r3,r2
10003308:	e1800217 	ldw	r6,8(fp)
1000330c:	100b883a 	mov	r5,r2
10003310:	000051c0 	call	1000051c <can_move>
10003314:	103fee1e 	bne	r2,zero,100032d0 <__alt_data_end+0xf80032d0>
            update_x ++;
        if (update_x > 0)
10003318:	e0bff917 	ldw	r2,-28(fp)
1000331c:	0080030e 	bge	zero,r2,1000332c <get_speed+0x204>
            update_x --;
10003320:	e0bff917 	ldw	r2,-28(fp)
10003324:	10bfffc4 	addi	r2,r2,-1
10003328:	e0bff915 	stw	r2,-28(fp)
        if (update_x > MARIO_X_SPEED_UPPER)
1000332c:	e0bff917 	ldw	r2,-28(fp)
10003330:	10800550 	cmplti	r2,r2,21
10003334:	1000021e 	bne	r2,zero,10003340 <get_speed+0x218>
        {
            update_x = MARIO_X_SPEED_UPPER;
10003338:	00800504 	movi	r2,20
1000333c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    mario->pos_x_curr = mario->pos_x_last + update_x;
10003340:	e0bffc17 	ldw	r2,-16(fp)
10003344:	10c00017 	ldw	r3,0(r2)
10003348:	e0bff917 	ldw	r2,-28(fp)
1000334c:	1887883a 	add	r3,r3,r2
10003350:	e0bffc17 	ldw	r2,-16(fp)
10003354:	10c00215 	stw	r3,8(r2)
    mario->pos_y_curr = mario->pos_y_last + update_y;
10003358:	e0bffc17 	ldw	r2,-16(fp)
1000335c:	10c00117 	ldw	r3,4(r2)
10003360:	e0bff817 	ldw	r2,-32(fp)
10003364:	1887883a 	add	r3,r3,r2
10003368:	e0bffc17 	ldw	r2,-16(fp)
1000336c:	10c00315 	stw	r3,12(r2)
    mario->speed_x_curr = update_x;
10003370:	e0bffc17 	ldw	r2,-16(fp)
10003374:	e0fff917 	ldw	r3,-28(fp)
10003378:	10c00b15 	stw	r3,44(r2)
    mario->speed_y_curr = update_y;
1000337c:	e0bffc17 	ldw	r2,-16(fp)
10003380:	e0fff817 	ldw	r3,-32(fp)
10003384:	10c00c15 	stw	r3,48(r2)
}
10003388:	0001883a 	nop
1000338c:	e037883a 	mov	sp,fp
10003390:	dfc00117 	ldw	ra,4(sp)
10003394:	df000017 	ldw	fp,0(sp)
10003398:	dec00204 	addi	sp,sp,8
1000339c:	f800283a 	ret

100033a0 <mario_move_init>:

void mario_move_init(mario_move_t* mario, int level)
{
100033a0:	defffd04 	addi	sp,sp,-12
100033a4:	df000215 	stw	fp,8(sp)
100033a8:	df000204 	addi	fp,sp,8
100033ac:	e13ffe15 	stw	r4,-8(fp)
100033b0:	e17fff15 	stw	r5,-4(fp)
    switch (level)
100033b4:	e0bfff17 	ldw	r2,-4(fp)
100033b8:	10c00060 	cmpeqi	r3,r2,1
100033bc:	1800191e 	bne	r3,zero,10003424 <mario_move_init+0x84>
100033c0:	10c00088 	cmpgei	r3,r2,2
100033c4:	1800021e 	bne	r3,zero,100033d0 <mario_move_init+0x30>
100033c8:	10000626 	beq	r2,zero,100033e4 <mario_move_init+0x44>
            mario->dir_ct = 0;
            mario->speed_x_curr = 0;
            mario->speed_y_curr = 0;
            mario->level2_active = RESET_LEVEL2;
        default:
            break;
100033cc:	00005b06 	br	1000353c <mario_move_init+0x19c>
    mario->speed_y_curr = update_y;
}

void mario_move_init(mario_move_t* mario, int level)
{
    switch (level)
100033d0:	10c000a0 	cmpeqi	r3,r2,2
100033d4:	18002a1e 	bne	r3,zero,10003480 <mario_move_init+0xe0>
100033d8:	108000e0 	cmpeqi	r2,r2,3
100033dc:	1000401e 	bne	r2,zero,100034e0 <mario_move_init+0x140>
            mario->dir_ct = 0;
            mario->speed_x_curr = 0;
            mario->speed_y_curr = 0;
            mario->level2_active = RESET_LEVEL2;
        default:
            break;
100033e0:	00005606 	br	1000353c <mario_move_init+0x19c>
void mario_move_init(mario_move_t* mario, int level)
{
    switch (level)
    {
        case 0:
            mario->pos_x_curr = 0xFA;
100033e4:	e0bffe17 	ldw	r2,-8(fp)
100033e8:	00c03e84 	movi	r3,250
100033ec:	10c00215 	stw	r3,8(r2)
            mario->pos_y_curr = 0x80;
100033f0:	e0bffe17 	ldw	r2,-8(fp)
100033f4:	00c02004 	movi	r3,128
100033f8:	10c00315 	stw	r3,12(r2)
            mario->idx = STAND_LEFT;
100033fc:	e0bffe17 	ldw	r2,-8(fp)
10003400:	00c00084 	movi	r3,2
10003404:	10c00515 	stw	r3,20(r2)
            mario->alive = MARIO_ALIVE;
10003408:	e0bffe17 	ldw	r2,-8(fp)
1000340c:	00c00044 	movi	r3,1
10003410:	10c00615 	stw	r3,24(r2)
            mario->level2_active = 2;
10003414:	e0bffe17 	ldw	r2,-8(fp)
10003418:	00c00084 	movi	r3,2
1000341c:	10c00d15 	stw	r3,52(r2)
            break;
10003420:	00004706 	br	10003540 <mario_move_init+0x1a0>
        case 1:
            mario->pos_x_curr = 5 * MARIO_X;
10003424:	e0bffe17 	ldw	r2,-8(fp)
10003428:	00c01904 	movi	r3,100
1000342c:	10c00215 	stw	r3,8(r2)
            mario->pos_y_curr = Y_UPPER - 4 * BLOCK_WIDTH - MARIO_Y;
10003430:	e0bffe17 	ldw	r2,-8(fp)
10003434:	00c05e04 	movi	r3,376
10003438:	10c00315 	stw	r3,12(r2)
            mario->idx = STAND_RIGHT;
1000343c:	e0bffe17 	ldw	r2,-8(fp)
10003440:	10000515 	stw	zero,20(r2)
            mario->alive = MARIO_ALIVE;
10003444:	e0bffe17 	ldw	r2,-8(fp)
10003448:	00c00044 	movi	r3,1
1000344c:	10c00615 	stw	r3,24(r2)
            mario->jump_ct = 0;
10003450:	e0bffe17 	ldw	r2,-8(fp)
10003454:	10000715 	stw	zero,28(r2)
            mario->dir_ct = 0;
10003458:	e0bffe17 	ldw	r2,-8(fp)
1000345c:	10000815 	stw	zero,32(r2)
            mario->speed_x_curr = 0;
10003460:	e0bffe17 	ldw	r2,-8(fp)
10003464:	10000b15 	stw	zero,44(r2)
            mario->speed_y_curr = 0;
10003468:	e0bffe17 	ldw	r2,-8(fp)
1000346c:	10000c15 	stw	zero,48(r2)
            mario->level2_active = RESET_LEVEL2;
10003470:	e0bffe17 	ldw	r2,-8(fp)
10003474:	00c00084 	movi	r3,2
10003478:	10c00d15 	stw	r3,52(r2)
            break;
1000347c:	00003006 	br	10003540 <mario_move_init+0x1a0>
        case 2:
            mario->pos_x_curr = X_UPPER - 3 * MARIO_X;
10003480:	e0bffe17 	ldw	r2,-8(fp)
10003484:	00c09104 	movi	r3,580
10003488:	10c00215 	stw	r3,8(r2)
            mario->pos_y_curr = Y_UPPER - 10 * BLOCK_WIDTH - MARIO_Y - 1;
1000348c:	e0bffe17 	ldw	r2,-8(fp)
10003490:	00c03fc4 	movi	r3,255
10003494:	10c00315 	stw	r3,12(r2)
            mario->idx = STAND_LEFT;
10003498:	e0bffe17 	ldw	r2,-8(fp)
1000349c:	00c00084 	movi	r3,2
100034a0:	10c00515 	stw	r3,20(r2)
            mario->alive = MARIO_ALIVE;
100034a4:	e0bffe17 	ldw	r2,-8(fp)
100034a8:	00c00044 	movi	r3,1
100034ac:	10c00615 	stw	r3,24(r2)
            mario->jump_ct = 0;
100034b0:	e0bffe17 	ldw	r2,-8(fp)
100034b4:	10000715 	stw	zero,28(r2)
            mario->dir_ct = 0;
100034b8:	e0bffe17 	ldw	r2,-8(fp)
100034bc:	10000815 	stw	zero,32(r2)
            mario->speed_x_curr = 0;
100034c0:	e0bffe17 	ldw	r2,-8(fp)
100034c4:	10000b15 	stw	zero,44(r2)
            mario->speed_y_curr = 0;
100034c8:	e0bffe17 	ldw	r2,-8(fp)
100034cc:	10000c15 	stw	zero,48(r2)
            mario->level2_active = RESET_LEVEL2;
100034d0:	e0bffe17 	ldw	r2,-8(fp)
100034d4:	00c00084 	movi	r3,2
100034d8:	10c00d15 	stw	r3,52(r2)
            break;
100034dc:	00001806 	br	10003540 <mario_move_init+0x1a0>
        case 3:
            mario->pos_x_curr = 5 * BLOCK_WIDTH;
100034e0:	e0bffe17 	ldw	r2,-8(fp)
100034e4:	00c01904 	movi	r3,100
100034e8:	10c00215 	stw	r3,8(r2)
            mario->pos_y_curr = 5 * BLOCK_WIDTH;
100034ec:	e0bffe17 	ldw	r2,-8(fp)
100034f0:	00c01904 	movi	r3,100
100034f4:	10c00315 	stw	r3,12(r2)
            mario->idx = JUMP_RIGHT;
100034f8:	e0bffe17 	ldw	r2,-8(fp)
100034fc:	00c00104 	movi	r3,4
10003500:	10c00515 	stw	r3,20(r2)
            mario->alive = MARIO_ALIVE;
10003504:	e0bffe17 	ldw	r2,-8(fp)
10003508:	00c00044 	movi	r3,1
1000350c:	10c00615 	stw	r3,24(r2)
            mario->jump_ct = 0;
10003510:	e0bffe17 	ldw	r2,-8(fp)
10003514:	10000715 	stw	zero,28(r2)
            mario->dir_ct = 0;
10003518:	e0bffe17 	ldw	r2,-8(fp)
1000351c:	10000815 	stw	zero,32(r2)
            mario->speed_x_curr = 0;
10003520:	e0bffe17 	ldw	r2,-8(fp)
10003524:	10000b15 	stw	zero,44(r2)
            mario->speed_y_curr = 0;
10003528:	e0bffe17 	ldw	r2,-8(fp)
1000352c:	10000c15 	stw	zero,48(r2)
            mario->level2_active = RESET_LEVEL2;
10003530:	e0bffe17 	ldw	r2,-8(fp)
10003534:	00c00084 	movi	r3,2
10003538:	10c00d15 	stw	r3,52(r2)
        default:
            break;
1000353c:	0001883a 	nop
    }
    
}
10003540:	0001883a 	nop
10003544:	e037883a 	mov	sp,fp
10003548:	df000017 	ldw	fp,0(sp)
1000354c:	dec00104 	addi	sp,sp,4
10003550:	f800283a 	ret

10003554 <mario_move_update>:

int mario_move_update(mario_move_t* mario, int level, int keycode)
{
10003554:	defff404 	addi	sp,sp,-48
10003558:	dfc00b15 	stw	ra,44(sp)
1000355c:	df000a15 	stw	fp,40(sp)
10003560:	df000a04 	addi	fp,sp,40
10003564:	e13ffd15 	stw	r4,-12(fp)
10003568:	e17ffe15 	stw	r5,-8(fp)
1000356c:	e1bfff15 	stw	r6,-4(fp)
    // save last
    mario->pos_x_last = mario->pos_x_curr;
10003570:	e0bffd17 	ldw	r2,-12(fp)
10003574:	10c00217 	ldw	r3,8(r2)
10003578:	e0bffd17 	ldw	r2,-12(fp)
1000357c:	10c00015 	stw	r3,0(r2)
    mario->pos_y_last = mario->pos_y_curr;
10003580:	e0bffd17 	ldw	r2,-12(fp)
10003584:	10c00317 	ldw	r3,12(r2)
10003588:	e0bffd17 	ldw	r2,-12(fp)
1000358c:	10c00115 	stw	r3,4(r2)
    mario->idx_last = mario->idx;
10003590:	e0bffd17 	ldw	r2,-12(fp)
10003594:	10c00517 	ldw	r3,20(r2)
10003598:	e0bffd17 	ldw	r2,-12(fp)
1000359c:	10c00415 	stw	r3,16(r2)
    mario->speed_x_last = mario->speed_x_curr;
100035a0:	e0bffd17 	ldw	r2,-12(fp)
100035a4:	10c00b17 	ldw	r3,44(r2)
100035a8:	e0bffd17 	ldw	r2,-12(fp)
100035ac:	10c00915 	stw	r3,36(r2)
    mario->speed_y_last = mario->speed_y_curr;
100035b0:	e0bffd17 	ldw	r2,-12(fp)
100035b4:	10c00c17 	ldw	r3,48(r2)
100035b8:	e0bffd17 	ldw	r2,-12(fp)
100035bc:	10c00a15 	stw	r3,40(r2)

    int acc_x, acc_y = 0;
100035c0:	e03ff815 	stw	zero,-32(fp)

    int keycode_group[2] = {keycode & 0x00FF, (keycode >> 8) & 0x00FF};
100035c4:	e0bfff17 	ldw	r2,-4(fp)
100035c8:	10803fcc 	andi	r2,r2,255
100035cc:	e0bffb15 	stw	r2,-20(fp)
100035d0:	e0bfff17 	ldw	r2,-4(fp)
100035d4:	1005d23a 	srai	r2,r2,8
100035d8:	10803fcc 	andi	r2,r2,255
100035dc:	e0bffc15 	stw	r2,-16(fp)
    int num = 0;
100035e0:	e03ff915 	stw	zero,-28(fp)

    if (keycode_group[0] == 0)
100035e4:	e0bffb17 	ldw	r2,-20(fp)
100035e8:	1000031e 	bne	r2,zero,100035f8 <mario_move_update+0xa4>
    {
        num = 1;
100035ec:	00800044 	movi	r2,1
100035f0:	e0bff915 	stw	r2,-28(fp)
100035f4:	00000706 	br	10003614 <mario_move_update+0xc0>
    } 
    else if (keycode_group[1] == 0) 
100035f8:	e0bffc17 	ldw	r2,-16(fp)
100035fc:	1000031e 	bne	r2,zero,1000360c <mario_move_update+0xb8>
    {
        num = 1;
10003600:	00800044 	movi	r2,1
10003604:	e0bff915 	stw	r2,-28(fp)
10003608:	00000206 	br	10003614 <mario_move_update+0xc0>
    }
    else
    {
        num = 2;
1000360c:	00800084 	movi	r2,2
10003610:	e0bff915 	stw	r2,-28(fp)
    }


    for (int i = 0; i < num; i++)
10003614:	e03ffa15 	stw	zero,-24(fp)
10003618:	00006f06 	br	100037d8 <mario_move_update+0x284>
    {
        keycode = keycode_group[i];
1000361c:	e0bffa17 	ldw	r2,-24(fp)
10003620:	1085883a 	add	r2,r2,r2
10003624:	1085883a 	add	r2,r2,r2
10003628:	e0fff704 	addi	r3,fp,-36
1000362c:	1885883a 	add	r2,r3,r2
10003630:	10800404 	addi	r2,r2,16
10003634:	10800017 	ldw	r2,0(r2)
10003638:	e0bfff15 	stw	r2,-4(fp)

    switch (keycode)
1000363c:	e0bfff17 	ldw	r2,-4(fp)
10003640:	10c001e0 	cmpeqi	r3,r2,7
10003644:	1800161e 	bne	r3,zero,100036a0 <mario_move_update+0x14c>
10003648:	10c006a0 	cmpeqi	r3,r2,26
1000364c:	1800261e 	bne	r3,zero,100036e8 <mario_move_update+0x194>
10003650:	10800120 	cmpeqi	r2,r2,4
10003654:	10003426 	beq	r2,zero,10003728 <mario_move_update+0x1d4>
    {
    case KEYBOARD_A:
        if (is_ground(mario->pos_x_curr, mario->pos_y_curr))
10003658:	e0bffd17 	ldw	r2,-12(fp)
1000365c:	10c00217 	ldw	r3,8(r2)
10003660:	e0bffd17 	ldw	r2,-12(fp)
10003664:	10800317 	ldw	r2,12(r2)
10003668:	100b883a 	mov	r5,r2
1000366c:	1809883a 	mov	r4,r3
10003670:	00004a00 	call	100004a0 <is_ground>
10003674:	10000526 	beq	r2,zero,1000368c <mario_move_update+0x138>
        {
            acc_x = -(MARIO_X_ACC + MARIO_X_SPEED);
10003678:	00bffe44 	movi	r2,-7
1000367c:	e0bff715 	stw	r2,-36(fp)
            acc_y = MARIO_Y_ACC;
10003680:	00800204 	movi	r2,8
10003684:	e0bff815 	stw	r2,-32(fp)
        else
        {
            acc_x = -(MARIO_X_ACC + MARIO_X_FLY_SPEED);
            acc_y = MARIO_Y_ACC;
        }
        break;
10003688:	00004906 	br	100037b0 <mario_move_update+0x25c>
            acc_x = -(MARIO_X_ACC + MARIO_X_SPEED);
            acc_y = MARIO_Y_ACC;
        }
        else
        {
            acc_x = -(MARIO_X_ACC + MARIO_X_FLY_SPEED);
1000368c:	00bff9c4 	movi	r2,-25
10003690:	e0bff715 	stw	r2,-36(fp)
            acc_y = MARIO_Y_ACC;
10003694:	00800204 	movi	r2,8
10003698:	e0bff815 	stw	r2,-32(fp)
        }
        break;
1000369c:	00004406 	br	100037b0 <mario_move_update+0x25c>
    case KEYBOARD_D:
        if (is_ground(mario->pos_x_curr, mario->pos_y_curr))
100036a0:	e0bffd17 	ldw	r2,-12(fp)
100036a4:	10c00217 	ldw	r3,8(r2)
100036a8:	e0bffd17 	ldw	r2,-12(fp)
100036ac:	10800317 	ldw	r2,12(r2)
100036b0:	100b883a 	mov	r5,r2
100036b4:	1809883a 	mov	r4,r3
100036b8:	00004a00 	call	100004a0 <is_ground>
100036bc:	10000526 	beq	r2,zero,100036d4 <mario_move_update+0x180>
        {
            acc_x = MARIO_X_ACC + MARIO_X_SPEED;
100036c0:	008001c4 	movi	r2,7
100036c4:	e0bff715 	stw	r2,-36(fp)
            acc_y = MARIO_Y_ACC;
100036c8:	00800204 	movi	r2,8
100036cc:	e0bff815 	stw	r2,-32(fp)
        else
        {
            acc_x = MARIO_X_ACC + MARIO_X_FLY_SPEED;
            acc_y = MARIO_Y_ACC;
        }
        break;
100036d0:	00003706 	br	100037b0 <mario_move_update+0x25c>
            acc_x = MARIO_X_ACC + MARIO_X_SPEED;
            acc_y = MARIO_Y_ACC;
        }
        else
        {
            acc_x = MARIO_X_ACC + MARIO_X_FLY_SPEED;
100036d4:	00800644 	movi	r2,25
100036d8:	e0bff715 	stw	r2,-36(fp)
            acc_y = MARIO_Y_ACC;
100036dc:	00800204 	movi	r2,8
100036e0:	e0bff815 	stw	r2,-32(fp)
        }
        break;
100036e4:	00003206 	br	100037b0 <mario_move_update+0x25c>
    case KEYBOARD_W:
        if (mario->speed_x_last == 0)
100036e8:	e0bffd17 	ldw	r2,-12(fp)
100036ec:	10800917 	ldw	r2,36(r2)
100036f0:	1000021e 	bne	r2,zero,100036fc <mario_move_update+0x1a8>
            acc_x = 0;
100036f4:	e03ff715 	stw	zero,-36(fp)
100036f8:	00000806 	br	1000371c <mario_move_update+0x1c8>
        else
        {
            if (mario->speed_x_last > 0)
100036fc:	e0bffd17 	ldw	r2,-12(fp)
10003700:	10800917 	ldw	r2,36(r2)
10003704:	0080030e 	bge	zero,r2,10003714 <mario_move_update+0x1c0>
                acc_x = MARIO_X_ACC;
10003708:	00bffe04 	movi	r2,-8
1000370c:	e0bff715 	stw	r2,-36(fp)
10003710:	00000206 	br	1000371c <mario_move_update+0x1c8>
            else
                acc_x = -MARIO_X_ACC;
10003714:	00800204 	movi	r2,8
10003718:	e0bff715 	stw	r2,-36(fp)
        }
        acc_y = MARIO_Y_ACC + MARIO_Y_SPEED;
1000371c:	00bffa84 	movi	r2,-22
10003720:	e0bff815 	stw	r2,-32(fp)
        break;
10003724:	00002206 	br	100037b0 <mario_move_update+0x25c>
    default:
        if (mario->speed_x_last == 0)
10003728:	e0bffd17 	ldw	r2,-12(fp)
1000372c:	10800917 	ldw	r2,36(r2)
10003730:	1000021e 	bne	r2,zero,1000373c <mario_move_update+0x1e8>
            acc_x = 0;
10003734:	e03ff715 	stw	zero,-36(fp)
10003738:	00001a06 	br	100037a4 <mario_move_update+0x250>
        else
        {
            if (mario->speed_x_last > 0)
1000373c:	e0bffd17 	ldw	r2,-12(fp)
10003740:	10800917 	ldw	r2,36(r2)
10003744:	00800c0e 	bge	zero,r2,10003778 <mario_move_update+0x224>
            {
                if (mario->speed_x_last + MARIO_X_ACC > 0)
10003748:	e0bffd17 	ldw	r2,-12(fp)
1000374c:	10800917 	ldw	r2,36(r2)
10003750:	10bffe04 	addi	r2,r2,-8
10003754:	0080030e 	bge	zero,r2,10003764 <mario_move_update+0x210>
                    acc_x = MARIO_X_ACC;
10003758:	00bffe04 	movi	r2,-8
1000375c:	e0bff715 	stw	r2,-36(fp)
10003760:	00001006 	br	100037a4 <mario_move_update+0x250>
                else 
                    acc_x = -mario->speed_x_last;
10003764:	e0bffd17 	ldw	r2,-12(fp)
10003768:	10800917 	ldw	r2,36(r2)
1000376c:	0085c83a 	sub	r2,zero,r2
10003770:	e0bff715 	stw	r2,-36(fp)
10003774:	00000b06 	br	100037a4 <mario_move_update+0x250>
            }
            else
            {
                if (mario->speed_x_last - MARIO_X_ACC < 0)
10003778:	e0bffd17 	ldw	r2,-12(fp)
1000377c:	10800917 	ldw	r2,36(r2)
10003780:	10800204 	addi	r2,r2,8
10003784:	1000030e 	bge	r2,zero,10003794 <mario_move_update+0x240>
                    acc_x = -MARIO_X_ACC;
10003788:	00800204 	movi	r2,8
1000378c:	e0bff715 	stw	r2,-36(fp)
10003790:	00000406 	br	100037a4 <mario_move_update+0x250>
                else
                    acc_x = -mario->speed_x_last;  
10003794:	e0bffd17 	ldw	r2,-12(fp)
10003798:	10800917 	ldw	r2,36(r2)
1000379c:	0085c83a 	sub	r2,zero,r2
100037a0:	e0bff715 	stw	r2,-36(fp)
            }
        }
        acc_y = MARIO_Y_ACC;
100037a4:	00800204 	movi	r2,8
100037a8:	e0bff815 	stw	r2,-32(fp)
        break;
100037ac:	0001883a 	nop
    }
    
    // update speed and pos
    get_speed(mario, keycode, acc_x, acc_y, level);
100037b0:	e0bffe17 	ldw	r2,-8(fp)
100037b4:	d8800015 	stw	r2,0(sp)
100037b8:	e1fff817 	ldw	r7,-32(fp)
100037bc:	e1bff717 	ldw	r6,-36(fp)
100037c0:	e17fff17 	ldw	r5,-4(fp)
100037c4:	e13ffd17 	ldw	r4,-12(fp)
100037c8:	00031280 	call	10003128 <get_speed>
    {
        num = 2;
    }


    for (int i = 0; i < num; i++)
100037cc:	e0bffa17 	ldw	r2,-24(fp)
100037d0:	10800044 	addi	r2,r2,1
100037d4:	e0bffa15 	stw	r2,-24(fp)
100037d8:	e0fffa17 	ldw	r3,-24(fp)
100037dc:	e0bff917 	ldw	r2,-28(fp)
100037e0:	18bf8e16 	blt	r3,r2,1000361c <__alt_data_end+0xf800361c>
    get_speed(mario, keycode, acc_x, acc_y, level);
    
    }

    // update idx
    switch (keycode)
100037e4:	e0bfff17 	ldw	r2,-4(fp)
100037e8:	10c001e0 	cmpeqi	r3,r2,7
100037ec:	1800101e 	bne	r3,zero,10003830 <mario_move_update+0x2dc>
100037f0:	10c006a0 	cmpeqi	r3,r2,26
100037f4:	1800191e 	bne	r3,zero,1000385c <mario_move_update+0x308>
100037f8:	10800120 	cmpeqi	r2,r2,4
100037fc:	10002326 	beq	r2,zero,1000388c <mario_move_update+0x338>
    {
    case KEYBOARD_A:
        if (mario->idx_last != RUN_LEFT)
10003800:	e0bffd17 	ldw	r2,-12(fp)
10003804:	10800417 	ldw	r2,16(r2)
10003808:	108000e0 	cmpeqi	r2,r2,3
1000380c:	1000041e 	bne	r2,zero,10003820 <mario_move_update+0x2cc>
            mario->idx = RUN_LEFT;
10003810:	e0bffd17 	ldw	r2,-12(fp)
10003814:	00c000c4 	movi	r3,3
10003818:	10c00515 	stw	r3,20(r2)
        else
            mario->idx = STAND_LEFT;
        break;
1000381c:	00002606 	br	100038b8 <mario_move_update+0x364>
    {
    case KEYBOARD_A:
        if (mario->idx_last != RUN_LEFT)
            mario->idx = RUN_LEFT;
        else
            mario->idx = STAND_LEFT;
10003820:	e0bffd17 	ldw	r2,-12(fp)
10003824:	00c00084 	movi	r3,2
10003828:	10c00515 	stw	r3,20(r2)
        break;
1000382c:	00002206 	br	100038b8 <mario_move_update+0x364>
    case KEYBOARD_D:
        if (mario->idx_last != RUN_RIGHT)
10003830:	e0bffd17 	ldw	r2,-12(fp)
10003834:	10800417 	ldw	r2,16(r2)
10003838:	10800060 	cmpeqi	r2,r2,1
1000383c:	1000041e 	bne	r2,zero,10003850 <mario_move_update+0x2fc>
            mario->idx = RUN_RIGHT;
10003840:	e0bffd17 	ldw	r2,-12(fp)
10003844:	00c00044 	movi	r3,1
10003848:	10c00515 	stw	r3,20(r2)
        else
            mario->idx = STAND_RIGHT;
        break;
1000384c:	00001a06 	br	100038b8 <mario_move_update+0x364>
        break;
    case KEYBOARD_D:
        if (mario->idx_last != RUN_RIGHT)
            mario->idx = RUN_RIGHT;
        else
            mario->idx = STAND_RIGHT;
10003850:	e0bffd17 	ldw	r2,-12(fp)
10003854:	10000515 	stw	zero,20(r2)
        break;
10003858:	00001706 	br	100038b8 <mario_move_update+0x364>
    case KEYBOARD_W:
        if (face_to(mario) == FACE_RIGHT)
1000385c:	e13ffd17 	ldw	r4,-12(fp)
10003860:	00030d00 	call	100030d0 <face_to>
10003864:	108001d8 	cmpnei	r2,r2,7
10003868:	1000041e 	bne	r2,zero,1000387c <mario_move_update+0x328>
            mario->idx = JUMP_RIGHT;
1000386c:	e0bffd17 	ldw	r2,-12(fp)
10003870:	00c00104 	movi	r3,4
10003874:	10c00515 	stw	r3,20(r2)
        else
            mario->idx = JUMP_LEFT;
        break;
10003878:	00000f06 	br	100038b8 <mario_move_update+0x364>
        break;
    case KEYBOARD_W:
        if (face_to(mario) == FACE_RIGHT)
            mario->idx = JUMP_RIGHT;
        else
            mario->idx = JUMP_LEFT;
1000387c:	e0bffd17 	ldw	r2,-12(fp)
10003880:	00c00144 	movi	r3,5
10003884:	10c00515 	stw	r3,20(r2)
        break;
10003888:	00000b06 	br	100038b8 <mario_move_update+0x364>
    default:
        if (face_to(mario) == FACE_RIGHT)
1000388c:	e13ffd17 	ldw	r4,-12(fp)
10003890:	00030d00 	call	100030d0 <face_to>
10003894:	108001d8 	cmpnei	r2,r2,7
10003898:	1000031e 	bne	r2,zero,100038a8 <mario_move_update+0x354>
            mario->idx = STAND_RIGHT;
1000389c:	e0bffd17 	ldw	r2,-12(fp)
100038a0:	10000515 	stw	zero,20(r2)
        else
            mario->idx = STAND_LEFT;
        break;
100038a4:	00000306 	br	100038b4 <mario_move_update+0x360>
        break;
    default:
        if (face_to(mario) == FACE_RIGHT)
            mario->idx = STAND_RIGHT;
        else
            mario->idx = STAND_LEFT;
100038a8:	e0bffd17 	ldw	r2,-12(fp)
100038ac:	00c00084 	movi	r3,2
100038b0:	10c00515 	stw	r3,20(r2)
        break;
100038b4:	0001883a 	nop
    }

    // not on ground
    if (!is_ground(mario->pos_x_curr, mario->pos_y_curr))
100038b8:	e0bffd17 	ldw	r2,-12(fp)
100038bc:	10c00217 	ldw	r3,8(r2)
100038c0:	e0bffd17 	ldw	r2,-12(fp)
100038c4:	10800317 	ldw	r2,12(r2)
100038c8:	100b883a 	mov	r5,r2
100038cc:	1809883a 	mov	r4,r3
100038d0:	00004a00 	call	100004a0 <is_ground>
100038d4:	10001a1e 	bne	r2,zero,10003940 <mario_move_update+0x3ec>
    {
        if (mario->speed_x_curr > 0)
100038d8:	e0bffd17 	ldw	r2,-12(fp)
100038dc:	10800b17 	ldw	r2,44(r2)
100038e0:	0080040e 	bge	zero,r2,100038f4 <mario_move_update+0x3a0>
            mario->idx = JUMP_RIGHT; 
100038e4:	e0bffd17 	ldw	r2,-12(fp)
100038e8:	00c00104 	movi	r3,4
100038ec:	10c00515 	stw	r3,20(r2)
100038f0:	00001706 	br	10003950 <mario_move_update+0x3fc>
        else if (mario->speed_x_curr < 0)
100038f4:	e0bffd17 	ldw	r2,-12(fp)
100038f8:	10800b17 	ldw	r2,44(r2)
100038fc:	1000040e 	bge	r2,zero,10003910 <mario_move_update+0x3bc>
            mario->idx = JUMP_LEFT;
10003900:	e0bffd17 	ldw	r2,-12(fp)
10003904:	00c00144 	movi	r3,5
10003908:	10c00515 	stw	r3,20(r2)
1000390c:	00001006 	br	10003950 <mario_move_update+0x3fc>
        else
        {
            if(face_to(mario) == FACE_RIGHT)
10003910:	e13ffd17 	ldw	r4,-12(fp)
10003914:	00030d00 	call	100030d0 <face_to>
10003918:	108001d8 	cmpnei	r2,r2,7
1000391c:	1000041e 	bne	r2,zero,10003930 <mario_move_update+0x3dc>
                mario->idx = JUMP_RIGHT;
10003920:	e0bffd17 	ldw	r2,-12(fp)
10003924:	00c00104 	movi	r3,4
10003928:	10c00515 	stw	r3,20(r2)
1000392c:	00000806 	br	10003950 <mario_move_update+0x3fc>
            else
                mario->idx = JUMP_LEFT;
10003930:	e0bffd17 	ldw	r2,-12(fp)
10003934:	00c00144 	movi	r3,5
10003938:	10c00515 	stw	r3,20(r2)
1000393c:	00000406 	br	10003950 <mario_move_update+0x3fc>
        }
    } 
    else
    {
        mario->jump_ct = 0;
10003940:	e0bffd17 	ldw	r2,-12(fp)
10003944:	10000715 	stw	zero,28(r2)
        mario->dir_ct = 0;
10003948:	e0bffd17 	ldw	r2,-12(fp)
1000394c:	10000815 	stw	zero,32(r2)
    }

    return 0;
10003950:	0005883a 	mov	r2,zero
}
10003954:	e037883a 	mov	sp,fp
10003958:	dfc00117 	ldw	ra,4(sp)
1000395c:	df000017 	ldw	fp,0(sp)
10003960:	dec00204 	addi	sp,sp,8
10003964:	f800283a 	ret

10003968 <level2_is_spike>:

static int level_spike_info[SPIKE_NUM_MAX];
static int spike_num = 0;

static int level2_is_spike(int pos_x, int pos_y)
{
10003968:	defffb04 	addi	sp,sp,-20
1000396c:	df000415 	stw	fp,16(sp)
10003970:	df000404 	addi	fp,sp,16
10003974:	e13ffe15 	stw	r4,-8(fp)
10003978:	e17fff15 	stw	r5,-4(fp)
    volatile unsigned int *INFO = (unsigned int*)0x80;
1000397c:	00802004 	movi	r2,128
10003980:	e0bffc15 	stw	r2,-16(fp)
    int spike_x = *INFO & 0x03FF;
10003984:	e0bffc17 	ldw	r2,-16(fp)
10003988:	10800017 	ldw	r2,0(r2)
1000398c:	1080ffcc 	andi	r2,r2,1023
10003990:	e0bffd15 	stw	r2,-12(fp)
    if (spike_x == 0)
10003994:	e0bffd17 	ldw	r2,-12(fp)
10003998:	1000021e 	bne	r2,zero,100039a4 <level2_is_spike+0x3c>
        return 0;
1000399c:	0005883a 	mov	r2,zero
100039a0:	00002906 	br	10003a48 <level2_is_spike+0xe0>
    if (pos_y + MARIO_Y < 8 * BLOCK_WIDTH
100039a4:	e0bfff17 	ldw	r2,-4(fp)
100039a8:	10800604 	addi	r2,r2,24
100039ac:	10802810 	cmplti	r2,r2,160
100039b0:	1000031e 	bne	r2,zero,100039c0 <level2_is_spike+0x58>
     || pos_y > 13 * BLOCK_WIDTH)
100039b4:	e0bfff17 	ldw	r2,-4(fp)
100039b8:	10804150 	cmplti	r2,r2,261
100039bc:	1000021e 	bne	r2,zero,100039c8 <level2_is_spike+0x60>
        return 0;
100039c0:	0005883a 	mov	r2,zero
100039c4:	00002006 	br	10003a48 <level2_is_spike+0xe0>
    if (pos_x > spike_x - BLOCK_WIDTH
100039c8:	e0bffd17 	ldw	r2,-12(fp)
100039cc:	10fffb04 	addi	r3,r2,-20
100039d0:	e0bffe17 	ldw	r2,-8(fp)
100039d4:	1880050e 	bge	r3,r2,100039ec <level2_is_spike+0x84>
     && pos_x < spike_x
100039d8:	e0fffe17 	ldw	r3,-8(fp)
100039dc:	e0bffd17 	ldw	r2,-12(fp)
100039e0:	1880020e 	bge	r3,r2,100039ec <level2_is_spike+0x84>
    )
        return 1;
100039e4:	00800044 	movi	r2,1
100039e8:	00001706 	br	10003a48 <level2_is_spike+0xe0>
    if (pos_x + MARIO_X > spike_x - BLOCK_WIDTH
100039ec:	e0bffe17 	ldw	r2,-8(fp)
100039f0:	10800504 	addi	r2,r2,20
100039f4:	e0fffd17 	ldw	r3,-12(fp)
100039f8:	18fffb04 	addi	r3,r3,-20
100039fc:	1880060e 	bge	r3,r2,10003a18 <level2_is_spike+0xb0>
     && pos_x + MARIO_X < spike_x
10003a00:	e0bffe17 	ldw	r2,-8(fp)
10003a04:	10c00504 	addi	r3,r2,20
10003a08:	e0bffd17 	ldw	r2,-12(fp)
10003a0c:	1880020e 	bge	r3,r2,10003a18 <level2_is_spike+0xb0>
    )
        return 1;
10003a10:	00800044 	movi	r2,1
10003a14:	00000c06 	br	10003a48 <level2_is_spike+0xe0>
    if (pos_x + MARIO_X / 2 > spike_x - BLOCK_WIDTH
10003a18:	e0bffe17 	ldw	r2,-8(fp)
10003a1c:	10800284 	addi	r2,r2,10
10003a20:	e0fffd17 	ldw	r3,-12(fp)
10003a24:	18fffb04 	addi	r3,r3,-20
10003a28:	1880060e 	bge	r3,r2,10003a44 <level2_is_spike+0xdc>
     && pos_x + MARIO_X / 2 < spike_x
10003a2c:	e0bffe17 	ldw	r2,-8(fp)
10003a30:	10c00284 	addi	r3,r2,10
10003a34:	e0bffd17 	ldw	r2,-12(fp)
10003a38:	1880020e 	bge	r3,r2,10003a44 <level2_is_spike+0xdc>
    )
        return 1;
10003a3c:	00800044 	movi	r2,1
10003a40:	00000106 	br	10003a48 <level2_is_spike+0xe0>
    return 0;
10003a44:	0005883a 	mov	r2,zero
}
10003a48:	e037883a 	mov	sp,fp
10003a4c:	df000017 	ldw	fp,0(sp)
10003a50:	dec00104 	addi	sp,sp,4
10003a54:	f800283a 	ret

10003a58 <point_is_spike>:

static int point_is_spike(int pos_x, int pos_y)
{
10003a58:	defff604 	addi	sp,sp,-40
10003a5c:	dfc00915 	stw	ra,36(sp)
10003a60:	df000815 	stw	fp,32(sp)
10003a64:	df000804 	addi	fp,sp,32
10003a68:	e13ffe15 	stw	r4,-8(fp)
10003a6c:	e17fff15 	stw	r5,-4(fp)
    int flag = 0;
10003a70:	e03ff915 	stw	zero,-28(fp)
    for (int i = 0; i < spike_num; i++)
10003a74:	e03ff815 	stw	zero,-32(fp)
10003a78:	00004c06 	br	10003bac <point_is_spike+0x154>
    {
        int spike_x = level_spike_info[i] % BLOCK_X_NUM;
10003a7c:	00840074 	movhi	r2,4097
10003a80:	109e6304 	addi	r2,r2,31116
10003a84:	e0fff817 	ldw	r3,-32(fp)
10003a88:	18c7883a 	add	r3,r3,r3
10003a8c:	18c7883a 	add	r3,r3,r3
10003a90:	10c5883a 	add	r2,r2,r3
10003a94:	10c00017 	ldw	r3,0(r2)
10003a98:	00a00034 	movhi	r2,32768
10003a9c:	108007c4 	addi	r2,r2,31
10003aa0:	1884703a 	and	r2,r3,r2
10003aa4:	1000040e 	bge	r2,zero,10003ab8 <point_is_spike+0x60>
10003aa8:	10bfffc4 	addi	r2,r2,-1
10003aac:	00fff804 	movi	r3,-32
10003ab0:	10c4b03a 	or	r2,r2,r3
10003ab4:	10800044 	addi	r2,r2,1
10003ab8:	e0bffa15 	stw	r2,-24(fp)
        int spike_y = level_spike_info[i] / BLOCK_X_NUM;
10003abc:	00840074 	movhi	r2,4097
10003ac0:	109e6304 	addi	r2,r2,31116
10003ac4:	e0fff817 	ldw	r3,-32(fp)
10003ac8:	18c7883a 	add	r3,r3,r3
10003acc:	18c7883a 	add	r3,r3,r3
10003ad0:	10c5883a 	add	r2,r2,r3
10003ad4:	10800017 	ldw	r2,0(r2)
10003ad8:	1000010e 	bge	r2,zero,10003ae0 <point_is_spike+0x88>
10003adc:	108007c4 	addi	r2,r2,31
10003ae0:	1005d17a 	srai	r2,r2,5
10003ae4:	e0bffb15 	stw	r2,-20(fp)
        if (pos_x / BLOCK_WIDTH != spike_x
10003ae8:	e0bffe17 	ldw	r2,-8(fp)
10003aec:	01400504 	movi	r5,20
10003af0:	1009883a 	mov	r4,r2
10003af4:	0003eb80 	call	10003eb8 <__divsi3>
10003af8:	1007883a 	mov	r3,r2
10003afc:	e0bffa17 	ldw	r2,-24(fp)
10003b00:	1880261e 	bne	r3,r2,10003b9c <point_is_spike+0x144>
         || pos_y / BLOCK_WIDTH != spike_y)
10003b04:	e0bfff17 	ldw	r2,-4(fp)
10003b08:	01400504 	movi	r5,20
10003b0c:	1009883a 	mov	r4,r2
10003b10:	0003eb80 	call	10003eb8 <__divsi3>
10003b14:	1007883a 	mov	r3,r2
10003b18:	e0bffb17 	ldw	r2,-20(fp)
10003b1c:	18801f1e 	bne	r3,r2,10003b9c <point_is_spike+0x144>
            continue;
        int off_x = pos_x % BLOCK_WIDTH;
10003b20:	e0bffe17 	ldw	r2,-8(fp)
10003b24:	01400504 	movi	r5,20
10003b28:	1009883a 	mov	r4,r2
10003b2c:	0003f3c0 	call	10003f3c <__modsi3>
10003b30:	e0bffc15 	stw	r2,-16(fp)
        int off_y = pos_y % BLOCK_WIDTH;
10003b34:	e0bfff17 	ldw	r2,-4(fp)
10003b38:	01400504 	movi	r5,20
10003b3c:	1009883a 	mov	r4,r2
10003b40:	0003f3c0 	call	10003f3c <__modsi3>
10003b44:	e0bffd15 	stw	r2,-12(fp)
        if ((off_x < BLOCK_WIDTH / 2 && off_y > BLOCK_WIDTH - 2 * off_x)
10003b48:	e0bffc17 	ldw	r2,-16(fp)
10003b4c:	10800288 	cmpgei	r2,r2,10
10003b50:	1000071e 	bne	r2,zero,10003b70 <point_is_spike+0x118>
10003b54:	00c00284 	movi	r3,10
10003b58:	e0bffc17 	ldw	r2,-16(fp)
10003b5c:	1885c83a 	sub	r2,r3,r2
10003b60:	1085883a 	add	r2,r2,r2
10003b64:	1007883a 	mov	r3,r2
10003b68:	e0bffd17 	ldw	r2,-12(fp)
10003b6c:	18800916 	blt	r3,r2,10003b94 <point_is_spike+0x13c>
         || (off_x > BLOCK_WIDTH / 2 && off_y > BLOCK_WIDTH - 2 * (BLOCK_WIDTH - off_x))
10003b70:	e0bffc17 	ldw	r2,-16(fp)
10003b74:	108002d0 	cmplti	r2,r2,11
10003b78:	1000091e 	bne	r2,zero,10003ba0 <point_is_spike+0x148>
10003b7c:	e0bffc17 	ldw	r2,-16(fp)
10003b80:	10bffd84 	addi	r2,r2,-10
10003b84:	1085883a 	add	r2,r2,r2
10003b88:	1007883a 	mov	r3,r2
10003b8c:	e0bffd17 	ldw	r2,-12(fp)
10003b90:	1880030e 	bge	r3,r2,10003ba0 <point_is_spike+0x148>
         )
            return 1;
10003b94:	00800044 	movi	r2,1
10003b98:	00000806 	br	10003bbc <point_is_spike+0x164>
    {
        int spike_x = level_spike_info[i] % BLOCK_X_NUM;
        int spike_y = level_spike_info[i] / BLOCK_X_NUM;
        if (pos_x / BLOCK_WIDTH != spike_x
         || pos_y / BLOCK_WIDTH != spike_y)
            continue;
10003b9c:	0001883a 	nop
}

static int point_is_spike(int pos_x, int pos_y)
{
    int flag = 0;
    for (int i = 0; i < spike_num; i++)
10003ba0:	e0bff817 	ldw	r2,-32(fp)
10003ba4:	10800044 	addi	r2,r2,1
10003ba8:	e0bff815 	stw	r2,-32(fp)
10003bac:	d0a6cd17 	ldw	r2,-25804(gp)
10003bb0:	e0fff817 	ldw	r3,-32(fp)
10003bb4:	18bfb116 	blt	r3,r2,10003a7c <__alt_data_end+0xf8003a7c>
        if ((off_x < BLOCK_WIDTH / 2 && off_y > BLOCK_WIDTH - 2 * off_x)
         || (off_x > BLOCK_WIDTH / 2 && off_y > BLOCK_WIDTH - 2 * (BLOCK_WIDTH - off_x))
         )
            return 1;
    } 
    return flag;
10003bb8:	e0bff917 	ldw	r2,-28(fp)
}
10003bbc:	e037883a 	mov	sp,fp
10003bc0:	dfc00117 	ldw	ra,4(sp)
10003bc4:	df000017 	ldw	fp,0(sp)
10003bc8:	dec00204 	addi	sp,sp,8
10003bcc:	f800283a 	ret

10003bd0 <is_spike>:

int is_spike(int pos_x, int pos_y, int level)
{
10003bd0:	defffa04 	addi	sp,sp,-24
10003bd4:	dfc00515 	stw	ra,20(sp)
10003bd8:	df000415 	stw	fp,16(sp)
10003bdc:	df000404 	addi	fp,sp,16
10003be0:	e13ffd15 	stw	r4,-12(fp)
10003be4:	e17ffe15 	stw	r5,-8(fp)
10003be8:	e1bfff15 	stw	r6,-4(fp)
    int flag = 0;
10003bec:	e03ffc15 	stw	zero,-16(fp)
    if (level == 2
10003bf0:	e0bfff17 	ldw	r2,-4(fp)
10003bf4:	10800098 	cmpnei	r2,r2,2
10003bf8:	1000061e 	bne	r2,zero,10003c14 <is_spike+0x44>
     && level2_is_spike(pos_x, pos_y))
10003bfc:	e17ffe17 	ldw	r5,-8(fp)
10003c00:	e13ffd17 	ldw	r4,-12(fp)
10003c04:	00039680 	call	10003968 <level2_is_spike>
10003c08:	10000226 	beq	r2,zero,10003c14 <is_spike+0x44>
        flag = 1;
10003c0c:	00800044 	movi	r2,1
10003c10:	e0bffc15 	stw	r2,-16(fp)
    if (point_is_spike(pos_x, pos_y - 1)
10003c14:	e0bffe17 	ldw	r2,-8(fp)
10003c18:	10bfffc4 	addi	r2,r2,-1
10003c1c:	100b883a 	mov	r5,r2
10003c20:	e13ffd17 	ldw	r4,-12(fp)
10003c24:	0003a580 	call	10003a58 <point_is_spike>
10003c28:	10001e1e 	bne	r2,zero,10003ca4 <is_spike+0xd4>
     || point_is_spike(pos_x, pos_y + MARIO_Y - 1)
10003c2c:	e0bffe17 	ldw	r2,-8(fp)
10003c30:	108005c4 	addi	r2,r2,23
10003c34:	100b883a 	mov	r5,r2
10003c38:	e13ffd17 	ldw	r4,-12(fp)
10003c3c:	0003a580 	call	10003a58 <point_is_spike>
10003c40:	1000181e 	bne	r2,zero,10003ca4 <is_spike+0xd4>
     || point_is_spike(pos_x + MARIO_X, pos_y - 1)
10003c44:	e0bffd17 	ldw	r2,-12(fp)
10003c48:	10c00504 	addi	r3,r2,20
10003c4c:	e0bffe17 	ldw	r2,-8(fp)
10003c50:	10bfffc4 	addi	r2,r2,-1
10003c54:	100b883a 	mov	r5,r2
10003c58:	1809883a 	mov	r4,r3
10003c5c:	0003a580 	call	10003a58 <point_is_spike>
10003c60:	1000101e 	bne	r2,zero,10003ca4 <is_spike+0xd4>
     || point_is_spike(pos_x + MARIO_X, pos_y + MARIO_Y - 1)
10003c64:	e0bffd17 	ldw	r2,-12(fp)
10003c68:	10c00504 	addi	r3,r2,20
10003c6c:	e0bffe17 	ldw	r2,-8(fp)
10003c70:	108005c4 	addi	r2,r2,23
10003c74:	100b883a 	mov	r5,r2
10003c78:	1809883a 	mov	r4,r3
10003c7c:	0003a580 	call	10003a58 <point_is_spike>
10003c80:	1000081e 	bne	r2,zero,10003ca4 <is_spike+0xd4>
     || point_is_spike(pos_x + MARIO_X / 2, pos_y + MARIO_Y / 2)
10003c84:	e0bffd17 	ldw	r2,-12(fp)
10003c88:	10c00284 	addi	r3,r2,10
10003c8c:	e0bffe17 	ldw	r2,-8(fp)
10003c90:	10800304 	addi	r2,r2,12
10003c94:	100b883a 	mov	r5,r2
10003c98:	1809883a 	mov	r4,r3
10003c9c:	0003a580 	call	10003a58 <point_is_spike>
10003ca0:	10000226 	beq	r2,zero,10003cac <is_spike+0xdc>
     )
        flag = 1;
10003ca4:	00800044 	movi	r2,1
10003ca8:	e0bffc15 	stw	r2,-16(fp)
    return flag;
10003cac:	e0bffc17 	ldw	r2,-16(fp)
}
10003cb0:	e037883a 	mov	sp,fp
10003cb4:	dfc00117 	ldw	ra,4(sp)
10003cb8:	df000017 	ldw	fp,0(sp)
10003cbc:	dec00204 	addi	sp,sp,8
10003cc0:	f800283a 	ret

10003cc4 <set_spike>:

void set_spike(int x, int y, int set)
{
10003cc4:	defffa04 	addi	sp,sp,-24
10003cc8:	df000515 	stw	fp,20(sp)
10003ccc:	df000504 	addi	fp,sp,20
10003cd0:	e13ffd15 	stw	r4,-12(fp)
10003cd4:	e17ffe15 	stw	r5,-8(fp)
10003cd8:	e1bfff15 	stw	r6,-4(fp)
    if (set == SPIKE_SET)
10003cdc:	e0bfff17 	ldw	r2,-4(fp)
10003ce0:	10800058 	cmpnei	r2,r2,1
10003ce4:	10000f1e 	bne	r2,zero,10003d24 <set_spike+0x60>
    {
        level_spike_info[spike_num] = y * BLOCK_X_NUM + x;
10003ce8:	d0e6cd17 	ldw	r3,-25804(gp)
10003cec:	e0bffe17 	ldw	r2,-8(fp)
10003cf0:	1008917a 	slli	r4,r2,5
10003cf4:	e0bffd17 	ldw	r2,-12(fp)
10003cf8:	2089883a 	add	r4,r4,r2
10003cfc:	00840074 	movhi	r2,4097
10003d00:	109e6304 	addi	r2,r2,31116
10003d04:	18c7883a 	add	r3,r3,r3
10003d08:	18c7883a 	add	r3,r3,r3
10003d0c:	10c5883a 	add	r2,r2,r3
10003d10:	11000015 	stw	r4,0(r2)
        spike_num ++;
10003d14:	d0a6cd17 	ldw	r2,-25804(gp)
10003d18:	10800044 	addi	r2,r2,1
10003d1c:	d0a6cd15 	stw	r2,-25804(gp)
        {
            level_spike_info[i] = level_spike_info[i+1];
        }
        spike_num --;
    }
}
10003d20:	00002d06 	br	10003dd8 <set_spike+0x114>
        level_spike_info[spike_num] = y * BLOCK_X_NUM + x;
        spike_num ++;
    }
    else
    {
        int start = 0;
10003d24:	e03ffb15 	stw	zero,-20(fp)
        while (level_spike_info[start] != y * BLOCK_X_NUM + x)
10003d28:	00000306 	br	10003d38 <set_spike+0x74>
            start ++;
10003d2c:	e0bffb17 	ldw	r2,-20(fp)
10003d30:	10800044 	addi	r2,r2,1
10003d34:	e0bffb15 	stw	r2,-20(fp)
        spike_num ++;
    }
    else
    {
        int start = 0;
        while (level_spike_info[start] != y * BLOCK_X_NUM + x)
10003d38:	00840074 	movhi	r2,4097
10003d3c:	109e6304 	addi	r2,r2,31116
10003d40:	e0fffb17 	ldw	r3,-20(fp)
10003d44:	18c7883a 	add	r3,r3,r3
10003d48:	18c7883a 	add	r3,r3,r3
10003d4c:	10c5883a 	add	r2,r2,r3
10003d50:	10c00017 	ldw	r3,0(r2)
10003d54:	e0bffe17 	ldw	r2,-8(fp)
10003d58:	1008917a 	slli	r4,r2,5
10003d5c:	e0bffd17 	ldw	r2,-12(fp)
10003d60:	2085883a 	add	r2,r4,r2
10003d64:	18bff11e 	bne	r3,r2,10003d2c <__alt_data_end+0xf8003d2c>
            start ++;
        for (int i = start; i < spike_num - 1; i++)
10003d68:	e0bffb17 	ldw	r2,-20(fp)
10003d6c:	e0bffc15 	stw	r2,-16(fp)
10003d70:	00001206 	br	10003dbc <set_spike+0xf8>
        {
            level_spike_info[i] = level_spike_info[i+1];
10003d74:	e0bffc17 	ldw	r2,-16(fp)
10003d78:	10c00044 	addi	r3,r2,1
10003d7c:	00840074 	movhi	r2,4097
10003d80:	109e6304 	addi	r2,r2,31116
10003d84:	18c7883a 	add	r3,r3,r3
10003d88:	18c7883a 	add	r3,r3,r3
10003d8c:	10c5883a 	add	r2,r2,r3
10003d90:	11000017 	ldw	r4,0(r2)
10003d94:	00840074 	movhi	r2,4097
10003d98:	109e6304 	addi	r2,r2,31116
10003d9c:	e0fffc17 	ldw	r3,-16(fp)
10003da0:	18c7883a 	add	r3,r3,r3
10003da4:	18c7883a 	add	r3,r3,r3
10003da8:	10c5883a 	add	r2,r2,r3
10003dac:	11000015 	stw	r4,0(r2)
    else
    {
        int start = 0;
        while (level_spike_info[start] != y * BLOCK_X_NUM + x)
            start ++;
        for (int i = start; i < spike_num - 1; i++)
10003db0:	e0bffc17 	ldw	r2,-16(fp)
10003db4:	10800044 	addi	r2,r2,1
10003db8:	e0bffc15 	stw	r2,-16(fp)
10003dbc:	d0a6cd17 	ldw	r2,-25804(gp)
10003dc0:	10bfffc4 	addi	r2,r2,-1
10003dc4:	e0fffc17 	ldw	r3,-16(fp)
10003dc8:	18bfea16 	blt	r3,r2,10003d74 <__alt_data_end+0xf8003d74>
        {
            level_spike_info[i] = level_spike_info[i+1];
        }
        spike_num --;
10003dcc:	d0a6cd17 	ldw	r2,-25804(gp)
10003dd0:	10bfffc4 	addi	r2,r2,-1
10003dd4:	d0a6cd15 	stw	r2,-25804(gp)
    }
}
10003dd8:	0001883a 	nop
10003ddc:	e037883a 	mov	sp,fp
10003de0:	df000017 	ldw	fp,0(sp)
10003de4:	dec00104 	addi	sp,sp,4
10003de8:	f800283a 	ret

10003dec <level_spike_info_init>:

void level_spike_info_init(int level)
{
10003dec:	defffd04 	addi	sp,sp,-12
10003df0:	dfc00215 	stw	ra,8(sp)
10003df4:	df000115 	stw	fp,4(sp)
10003df8:	df000104 	addi	fp,sp,4
10003dfc:	e13fff15 	stw	r4,-4(fp)
    memset(level_spike_info, 0, sizeof(char) * SPIKE_NUM_MAX);
10003e00:	01800504 	movi	r6,20
10003e04:	000b883a 	mov	r5,zero
10003e08:	01040074 	movhi	r4,4097
10003e0c:	211e6304 	addi	r4,r4,31116
10003e10:	000406c0 	call	1000406c <memset>
    spike_num = 0;
10003e14:	d026cd15 	stw	zero,-25804(gp)
    switch (level)
10003e18:	e0bfff17 	ldw	r2,-4(fp)
10003e1c:	10c00060 	cmpeqi	r3,r2,1
10003e20:	1800041e 	bne	r3,zero,10003e34 <level_spike_info_init+0x48>
10003e24:	10c000a0 	cmpeqi	r3,r2,2
10003e28:	1800071e 	bne	r3,zero,10003e48 <level_spike_info_init+0x5c>
10003e2c:	10001b26 	beq	r2,zero,10003e9c <level_spike_info_init+0xb0>
            set_spike( 7, 17, SPIKE_SET);
            set_spike( 8, 17, SPIKE_SET);
            set_spike(29,  9, SPIKE_SET);
            break;
        default:
            break;
10003e30:	00001b06 	br	10003ea0 <level_spike_info_init+0xb4>
    switch (level)
    {
        case 0:
            break;
        case 1:
            set_spike(21, 20, SPIKE_SET);
10003e34:	01800044 	movi	r6,1
10003e38:	01400504 	movi	r5,20
10003e3c:	01000544 	movi	r4,21
10003e40:	0003cc40 	call	10003cc4 <set_spike>
            break;
10003e44:	00001606 	br	10003ea0 <level_spike_info_init+0xb4>
        case 2:
            set_spike(13,  6, SPIKE_SET);
10003e48:	01800044 	movi	r6,1
10003e4c:	01400184 	movi	r5,6
10003e50:	01000344 	movi	r4,13
10003e54:	0003cc40 	call	10003cc4 <set_spike>
            set_spike(14,  6, SPIKE_SET);
10003e58:	01800044 	movi	r6,1
10003e5c:	01400184 	movi	r5,6
10003e60:	01000384 	movi	r4,14
10003e64:	0003cc40 	call	10003cc4 <set_spike>
            set_spike( 7, 17, SPIKE_SET);
10003e68:	01800044 	movi	r6,1
10003e6c:	01400444 	movi	r5,17
10003e70:	010001c4 	movi	r4,7
10003e74:	0003cc40 	call	10003cc4 <set_spike>
            set_spike( 8, 17, SPIKE_SET);
10003e78:	01800044 	movi	r6,1
10003e7c:	01400444 	movi	r5,17
10003e80:	01000204 	movi	r4,8
10003e84:	0003cc40 	call	10003cc4 <set_spike>
            set_spike(29,  9, SPIKE_SET);
10003e88:	01800044 	movi	r6,1
10003e8c:	01400244 	movi	r5,9
10003e90:	01000744 	movi	r4,29
10003e94:	0003cc40 	call	10003cc4 <set_spike>
            break;
10003e98:	00000106 	br	10003ea0 <level_spike_info_init+0xb4>
    memset(level_spike_info, 0, sizeof(char) * SPIKE_NUM_MAX);
    spike_num = 0;
    switch (level)
    {
        case 0:
            break;
10003e9c:	0001883a 	nop
            set_spike(29,  9, SPIKE_SET);
            break;
        default:
            break;
    }
}
10003ea0:	0001883a 	nop
10003ea4:	e037883a 	mov	sp,fp
10003ea8:	dfc00117 	ldw	ra,4(sp)
10003eac:	df000017 	ldw	fp,0(sp)
10003eb0:	dec00204 	addi	sp,sp,8
10003eb4:	f800283a 	ret

10003eb8 <__divsi3>:
10003eb8:	20001b16 	blt	r4,zero,10003f28 <__divsi3+0x70>
10003ebc:	000f883a 	mov	r7,zero
10003ec0:	28001616 	blt	r5,zero,10003f1c <__divsi3+0x64>
10003ec4:	200d883a 	mov	r6,r4
10003ec8:	29001a2e 	bgeu	r5,r4,10003f34 <__divsi3+0x7c>
10003ecc:	00800804 	movi	r2,32
10003ed0:	00c00044 	movi	r3,1
10003ed4:	00000106 	br	10003edc <__divsi3+0x24>
10003ed8:	10000d26 	beq	r2,zero,10003f10 <__divsi3+0x58>
10003edc:	294b883a 	add	r5,r5,r5
10003ee0:	10bfffc4 	addi	r2,r2,-1
10003ee4:	18c7883a 	add	r3,r3,r3
10003ee8:	293ffb36 	bltu	r5,r4,10003ed8 <__alt_data_end+0xf8003ed8>
10003eec:	0005883a 	mov	r2,zero
10003ef0:	18000726 	beq	r3,zero,10003f10 <__divsi3+0x58>
10003ef4:	0005883a 	mov	r2,zero
10003ef8:	31400236 	bltu	r6,r5,10003f04 <__divsi3+0x4c>
10003efc:	314dc83a 	sub	r6,r6,r5
10003f00:	10c4b03a 	or	r2,r2,r3
10003f04:	1806d07a 	srli	r3,r3,1
10003f08:	280ad07a 	srli	r5,r5,1
10003f0c:	183ffa1e 	bne	r3,zero,10003ef8 <__alt_data_end+0xf8003ef8>
10003f10:	38000126 	beq	r7,zero,10003f18 <__divsi3+0x60>
10003f14:	0085c83a 	sub	r2,zero,r2
10003f18:	f800283a 	ret
10003f1c:	014bc83a 	sub	r5,zero,r5
10003f20:	39c0005c 	xori	r7,r7,1
10003f24:	003fe706 	br	10003ec4 <__alt_data_end+0xf8003ec4>
10003f28:	0109c83a 	sub	r4,zero,r4
10003f2c:	01c00044 	movi	r7,1
10003f30:	003fe306 	br	10003ec0 <__alt_data_end+0xf8003ec0>
10003f34:	00c00044 	movi	r3,1
10003f38:	003fee06 	br	10003ef4 <__alt_data_end+0xf8003ef4>

10003f3c <__modsi3>:
10003f3c:	20001716 	blt	r4,zero,10003f9c <__modsi3+0x60>
10003f40:	000f883a 	mov	r7,zero
10003f44:	2005883a 	mov	r2,r4
10003f48:	28001216 	blt	r5,zero,10003f94 <__modsi3+0x58>
10003f4c:	2900162e 	bgeu	r5,r4,10003fa8 <__modsi3+0x6c>
10003f50:	01800804 	movi	r6,32
10003f54:	00c00044 	movi	r3,1
10003f58:	00000106 	br	10003f60 <__modsi3+0x24>
10003f5c:	30000a26 	beq	r6,zero,10003f88 <__modsi3+0x4c>
10003f60:	294b883a 	add	r5,r5,r5
10003f64:	31bfffc4 	addi	r6,r6,-1
10003f68:	18c7883a 	add	r3,r3,r3
10003f6c:	293ffb36 	bltu	r5,r4,10003f5c <__alt_data_end+0xf8003f5c>
10003f70:	18000526 	beq	r3,zero,10003f88 <__modsi3+0x4c>
10003f74:	1806d07a 	srli	r3,r3,1
10003f78:	11400136 	bltu	r2,r5,10003f80 <__modsi3+0x44>
10003f7c:	1145c83a 	sub	r2,r2,r5
10003f80:	280ad07a 	srli	r5,r5,1
10003f84:	183ffb1e 	bne	r3,zero,10003f74 <__alt_data_end+0xf8003f74>
10003f88:	38000126 	beq	r7,zero,10003f90 <__modsi3+0x54>
10003f8c:	0085c83a 	sub	r2,zero,r2
10003f90:	f800283a 	ret
10003f94:	014bc83a 	sub	r5,zero,r5
10003f98:	003fec06 	br	10003f4c <__alt_data_end+0xf8003f4c>
10003f9c:	0109c83a 	sub	r4,zero,r4
10003fa0:	01c00044 	movi	r7,1
10003fa4:	003fe706 	br	10003f44 <__alt_data_end+0xf8003f44>
10003fa8:	00c00044 	movi	r3,1
10003fac:	003ff106 	br	10003f74 <__alt_data_end+0xf8003f74>

10003fb0 <__udivsi3>:
10003fb0:	200d883a 	mov	r6,r4
10003fb4:	2900152e 	bgeu	r5,r4,1000400c <__udivsi3+0x5c>
10003fb8:	28001416 	blt	r5,zero,1000400c <__udivsi3+0x5c>
10003fbc:	00800804 	movi	r2,32
10003fc0:	00c00044 	movi	r3,1
10003fc4:	00000206 	br	10003fd0 <__udivsi3+0x20>
10003fc8:	10000e26 	beq	r2,zero,10004004 <__udivsi3+0x54>
10003fcc:	28000516 	blt	r5,zero,10003fe4 <__udivsi3+0x34>
10003fd0:	294b883a 	add	r5,r5,r5
10003fd4:	10bfffc4 	addi	r2,r2,-1
10003fd8:	18c7883a 	add	r3,r3,r3
10003fdc:	293ffa36 	bltu	r5,r4,10003fc8 <__alt_data_end+0xf8003fc8>
10003fe0:	18000826 	beq	r3,zero,10004004 <__udivsi3+0x54>
10003fe4:	0005883a 	mov	r2,zero
10003fe8:	31400236 	bltu	r6,r5,10003ff4 <__udivsi3+0x44>
10003fec:	314dc83a 	sub	r6,r6,r5
10003ff0:	10c4b03a 	or	r2,r2,r3
10003ff4:	1806d07a 	srli	r3,r3,1
10003ff8:	280ad07a 	srli	r5,r5,1
10003ffc:	183ffa1e 	bne	r3,zero,10003fe8 <__alt_data_end+0xf8003fe8>
10004000:	f800283a 	ret
10004004:	0005883a 	mov	r2,zero
10004008:	f800283a 	ret
1000400c:	00c00044 	movi	r3,1
10004010:	003ff406 	br	10003fe4 <__alt_data_end+0xf8003fe4>

10004014 <__umodsi3>:
10004014:	2005883a 	mov	r2,r4
10004018:	2900122e 	bgeu	r5,r4,10004064 <__umodsi3+0x50>
1000401c:	28001116 	blt	r5,zero,10004064 <__umodsi3+0x50>
10004020:	01800804 	movi	r6,32
10004024:	00c00044 	movi	r3,1
10004028:	00000206 	br	10004034 <__umodsi3+0x20>
1000402c:	30000c26 	beq	r6,zero,10004060 <__umodsi3+0x4c>
10004030:	28000516 	blt	r5,zero,10004048 <__umodsi3+0x34>
10004034:	294b883a 	add	r5,r5,r5
10004038:	31bfffc4 	addi	r6,r6,-1
1000403c:	18c7883a 	add	r3,r3,r3
10004040:	293ffa36 	bltu	r5,r4,1000402c <__alt_data_end+0xf800402c>
10004044:	18000626 	beq	r3,zero,10004060 <__umodsi3+0x4c>
10004048:	1806d07a 	srli	r3,r3,1
1000404c:	11400136 	bltu	r2,r5,10004054 <__umodsi3+0x40>
10004050:	1145c83a 	sub	r2,r2,r5
10004054:	280ad07a 	srli	r5,r5,1
10004058:	183ffb1e 	bne	r3,zero,10004048 <__alt_data_end+0xf8004048>
1000405c:	f800283a 	ret
10004060:	f800283a 	ret
10004064:	00c00044 	movi	r3,1
10004068:	003ff706 	br	10004048 <__alt_data_end+0xf8004048>

1000406c <memset>:
1000406c:	20c000cc 	andi	r3,r4,3
10004070:	2005883a 	mov	r2,r4
10004074:	18004426 	beq	r3,zero,10004188 <memset+0x11c>
10004078:	31ffffc4 	addi	r7,r6,-1
1000407c:	30004026 	beq	r6,zero,10004180 <memset+0x114>
10004080:	2813883a 	mov	r9,r5
10004084:	200d883a 	mov	r6,r4
10004088:	2007883a 	mov	r3,r4
1000408c:	00000406 	br	100040a0 <memset+0x34>
10004090:	3a3fffc4 	addi	r8,r7,-1
10004094:	31800044 	addi	r6,r6,1
10004098:	38003926 	beq	r7,zero,10004180 <memset+0x114>
1000409c:	400f883a 	mov	r7,r8
100040a0:	18c00044 	addi	r3,r3,1
100040a4:	32400005 	stb	r9,0(r6)
100040a8:	1a0000cc 	andi	r8,r3,3
100040ac:	403ff81e 	bne	r8,zero,10004090 <__alt_data_end+0xf8004090>
100040b0:	010000c4 	movi	r4,3
100040b4:	21c02d2e 	bgeu	r4,r7,1000416c <memset+0x100>
100040b8:	29003fcc 	andi	r4,r5,255
100040bc:	200c923a 	slli	r6,r4,8
100040c0:	3108b03a 	or	r4,r6,r4
100040c4:	200c943a 	slli	r6,r4,16
100040c8:	218cb03a 	or	r6,r4,r6
100040cc:	010003c4 	movi	r4,15
100040d0:	21c0182e 	bgeu	r4,r7,10004134 <memset+0xc8>
100040d4:	3b3ffc04 	addi	r12,r7,-16
100040d8:	6018d13a 	srli	r12,r12,4
100040dc:	1a000104 	addi	r8,r3,4
100040e0:	1ac00204 	addi	r11,r3,8
100040e4:	6008913a 	slli	r4,r12,4
100040e8:	1a800304 	addi	r10,r3,12
100040ec:	1813883a 	mov	r9,r3
100040f0:	21000504 	addi	r4,r4,20
100040f4:	1909883a 	add	r4,r3,r4
100040f8:	49800015 	stw	r6,0(r9)
100040fc:	41800015 	stw	r6,0(r8)
10004100:	59800015 	stw	r6,0(r11)
10004104:	51800015 	stw	r6,0(r10)
10004108:	42000404 	addi	r8,r8,16
1000410c:	4a400404 	addi	r9,r9,16
10004110:	5ac00404 	addi	r11,r11,16
10004114:	52800404 	addi	r10,r10,16
10004118:	413ff71e 	bne	r8,r4,100040f8 <__alt_data_end+0xf80040f8>
1000411c:	63000044 	addi	r12,r12,1
10004120:	6018913a 	slli	r12,r12,4
10004124:	39c003cc 	andi	r7,r7,15
10004128:	010000c4 	movi	r4,3
1000412c:	1b07883a 	add	r3,r3,r12
10004130:	21c00e2e 	bgeu	r4,r7,1000416c <memset+0x100>
10004134:	1813883a 	mov	r9,r3
10004138:	3811883a 	mov	r8,r7
1000413c:	010000c4 	movi	r4,3
10004140:	49800015 	stw	r6,0(r9)
10004144:	423fff04 	addi	r8,r8,-4
10004148:	4a400104 	addi	r9,r9,4
1000414c:	223ffc36 	bltu	r4,r8,10004140 <__alt_data_end+0xf8004140>
10004150:	393fff04 	addi	r4,r7,-4
10004154:	2008d0ba 	srli	r4,r4,2
10004158:	39c000cc 	andi	r7,r7,3
1000415c:	21000044 	addi	r4,r4,1
10004160:	2109883a 	add	r4,r4,r4
10004164:	2109883a 	add	r4,r4,r4
10004168:	1907883a 	add	r3,r3,r4
1000416c:	38000526 	beq	r7,zero,10004184 <memset+0x118>
10004170:	19cf883a 	add	r7,r3,r7
10004174:	19400005 	stb	r5,0(r3)
10004178:	18c00044 	addi	r3,r3,1
1000417c:	38fffd1e 	bne	r7,r3,10004174 <__alt_data_end+0xf8004174>
10004180:	f800283a 	ret
10004184:	f800283a 	ret
10004188:	2007883a 	mov	r3,r4
1000418c:	300f883a 	mov	r7,r6
10004190:	003fc706 	br	100040b0 <__alt_data_end+0xf80040b0>

10004194 <_printf_r>:
10004194:	defffd04 	addi	sp,sp,-12
10004198:	2805883a 	mov	r2,r5
1000419c:	dfc00015 	stw	ra,0(sp)
100041a0:	d9800115 	stw	r6,4(sp)
100041a4:	d9c00215 	stw	r7,8(sp)
100041a8:	21400217 	ldw	r5,8(r4)
100041ac:	d9c00104 	addi	r7,sp,4
100041b0:	100d883a 	mov	r6,r2
100041b4:	000436c0 	call	1000436c <___vfprintf_internal_r>
100041b8:	dfc00017 	ldw	ra,0(sp)
100041bc:	dec00304 	addi	sp,sp,12
100041c0:	f800283a 	ret

100041c4 <printf>:
100041c4:	defffc04 	addi	sp,sp,-16
100041c8:	dfc00015 	stw	ra,0(sp)
100041cc:	d9400115 	stw	r5,4(sp)
100041d0:	d9800215 	stw	r6,8(sp)
100041d4:	d9c00315 	stw	r7,12(sp)
100041d8:	00840074 	movhi	r2,4097
100041dc:	1096c804 	addi	r2,r2,23328
100041e0:	10800017 	ldw	r2,0(r2)
100041e4:	200b883a 	mov	r5,r4
100041e8:	d9800104 	addi	r6,sp,4
100041ec:	11000217 	ldw	r4,8(r2)
100041f0:	00066480 	call	10006648 <__vfprintf_internal>
100041f4:	dfc00017 	ldw	ra,0(sp)
100041f8:	dec00404 	addi	sp,sp,16
100041fc:	f800283a 	ret

10004200 <_puts_r>:
10004200:	defff604 	addi	sp,sp,-40
10004204:	dc000715 	stw	r16,28(sp)
10004208:	2021883a 	mov	r16,r4
1000420c:	2809883a 	mov	r4,r5
10004210:	dc400815 	stw	r17,32(sp)
10004214:	dfc00915 	stw	ra,36(sp)
10004218:	2823883a 	mov	r17,r5
1000421c:	00042d40 	call	100042d4 <strlen>
10004220:	10c00044 	addi	r3,r2,1
10004224:	d8800115 	stw	r2,4(sp)
10004228:	00840074 	movhi	r2,4097
1000422c:	108f5c04 	addi	r2,r2,15728
10004230:	d8800215 	stw	r2,8(sp)
10004234:	00800044 	movi	r2,1
10004238:	d8800315 	stw	r2,12(sp)
1000423c:	00800084 	movi	r2,2
10004240:	dc400015 	stw	r17,0(sp)
10004244:	d8c00615 	stw	r3,24(sp)
10004248:	dec00415 	stw	sp,16(sp)
1000424c:	d8800515 	stw	r2,20(sp)
10004250:	80000226 	beq	r16,zero,1000425c <_puts_r+0x5c>
10004254:	80800e17 	ldw	r2,56(r16)
10004258:	10001426 	beq	r2,zero,100042ac <_puts_r+0xac>
1000425c:	81400217 	ldw	r5,8(r16)
10004260:	2880030b 	ldhu	r2,12(r5)
10004264:	10c8000c 	andi	r3,r2,8192
10004268:	1800061e 	bne	r3,zero,10004284 <_puts_r+0x84>
1000426c:	29001917 	ldw	r4,100(r5)
10004270:	00f7ffc4 	movi	r3,-8193
10004274:	10880014 	ori	r2,r2,8192
10004278:	20c6703a 	and	r3,r4,r3
1000427c:	2880030d 	sth	r2,12(r5)
10004280:	28c01915 	stw	r3,100(r5)
10004284:	d9800404 	addi	r6,sp,16
10004288:	8009883a 	mov	r4,r16
1000428c:	0008bb00 	call	10008bb0 <__sfvwrite_r>
10004290:	1000091e 	bne	r2,zero,100042b8 <_puts_r+0xb8>
10004294:	00800284 	movi	r2,10
10004298:	dfc00917 	ldw	ra,36(sp)
1000429c:	dc400817 	ldw	r17,32(sp)
100042a0:	dc000717 	ldw	r16,28(sp)
100042a4:	dec00a04 	addi	sp,sp,40
100042a8:	f800283a 	ret
100042ac:	8009883a 	mov	r4,r16
100042b0:	000872c0 	call	1000872c <__sinit>
100042b4:	003fe906 	br	1000425c <__alt_data_end+0xf800425c>
100042b8:	00bfffc4 	movi	r2,-1
100042bc:	003ff606 	br	10004298 <__alt_data_end+0xf8004298>

100042c0 <puts>:
100042c0:	00840074 	movhi	r2,4097
100042c4:	1096c804 	addi	r2,r2,23328
100042c8:	200b883a 	mov	r5,r4
100042cc:	11000017 	ldw	r4,0(r2)
100042d0:	00042001 	jmpi	10004200 <_puts_r>

100042d4 <strlen>:
100042d4:	208000cc 	andi	r2,r4,3
100042d8:	10002026 	beq	r2,zero,1000435c <strlen+0x88>
100042dc:	20800007 	ldb	r2,0(r4)
100042e0:	10002026 	beq	r2,zero,10004364 <strlen+0x90>
100042e4:	2005883a 	mov	r2,r4
100042e8:	00000206 	br	100042f4 <strlen+0x20>
100042ec:	10c00007 	ldb	r3,0(r2)
100042f0:	18001826 	beq	r3,zero,10004354 <strlen+0x80>
100042f4:	10800044 	addi	r2,r2,1
100042f8:	10c000cc 	andi	r3,r2,3
100042fc:	183ffb1e 	bne	r3,zero,100042ec <__alt_data_end+0xf80042ec>
10004300:	10c00017 	ldw	r3,0(r2)
10004304:	01ffbff4 	movhi	r7,65279
10004308:	39ffbfc4 	addi	r7,r7,-257
1000430c:	00ca303a 	nor	r5,zero,r3
10004310:	01a02074 	movhi	r6,32897
10004314:	19c7883a 	add	r3,r3,r7
10004318:	31a02004 	addi	r6,r6,-32640
1000431c:	1946703a 	and	r3,r3,r5
10004320:	1986703a 	and	r3,r3,r6
10004324:	1800091e 	bne	r3,zero,1000434c <strlen+0x78>
10004328:	10800104 	addi	r2,r2,4
1000432c:	10c00017 	ldw	r3,0(r2)
10004330:	19cb883a 	add	r5,r3,r7
10004334:	00c6303a 	nor	r3,zero,r3
10004338:	28c6703a 	and	r3,r5,r3
1000433c:	1986703a 	and	r3,r3,r6
10004340:	183ff926 	beq	r3,zero,10004328 <__alt_data_end+0xf8004328>
10004344:	00000106 	br	1000434c <strlen+0x78>
10004348:	10800044 	addi	r2,r2,1
1000434c:	10c00007 	ldb	r3,0(r2)
10004350:	183ffd1e 	bne	r3,zero,10004348 <__alt_data_end+0xf8004348>
10004354:	1105c83a 	sub	r2,r2,r4
10004358:	f800283a 	ret
1000435c:	2005883a 	mov	r2,r4
10004360:	003fe706 	br	10004300 <__alt_data_end+0xf8004300>
10004364:	0005883a 	mov	r2,zero
10004368:	f800283a 	ret

1000436c <___vfprintf_internal_r>:
1000436c:	deffb804 	addi	sp,sp,-288
10004370:	dfc04715 	stw	ra,284(sp)
10004374:	ddc04515 	stw	r23,276(sp)
10004378:	dd404315 	stw	r21,268(sp)
1000437c:	d9002d15 	stw	r4,180(sp)
10004380:	282f883a 	mov	r23,r5
10004384:	302b883a 	mov	r21,r6
10004388:	d9c02e15 	stw	r7,184(sp)
1000438c:	df004615 	stw	fp,280(sp)
10004390:	dd804415 	stw	r22,272(sp)
10004394:	dd004215 	stw	r20,264(sp)
10004398:	dcc04115 	stw	r19,260(sp)
1000439c:	dc804015 	stw	r18,256(sp)
100043a0:	dc403f15 	stw	r17,252(sp)
100043a4:	dc003e15 	stw	r16,248(sp)
100043a8:	00092ac0 	call	100092ac <_localeconv_r>
100043ac:	10800017 	ldw	r2,0(r2)
100043b0:	1009883a 	mov	r4,r2
100043b4:	d8803415 	stw	r2,208(sp)
100043b8:	00042d40 	call	100042d4 <strlen>
100043bc:	d8803715 	stw	r2,220(sp)
100043c0:	d8802d17 	ldw	r2,180(sp)
100043c4:	10000226 	beq	r2,zero,100043d0 <___vfprintf_internal_r+0x64>
100043c8:	10800e17 	ldw	r2,56(r2)
100043cc:	1000fb26 	beq	r2,zero,100047bc <___vfprintf_internal_r+0x450>
100043d0:	b880030b 	ldhu	r2,12(r23)
100043d4:	10c8000c 	andi	r3,r2,8192
100043d8:	1800061e 	bne	r3,zero,100043f4 <___vfprintf_internal_r+0x88>
100043dc:	b9001917 	ldw	r4,100(r23)
100043e0:	00f7ffc4 	movi	r3,-8193
100043e4:	10880014 	ori	r2,r2,8192
100043e8:	20c6703a 	and	r3,r4,r3
100043ec:	b880030d 	sth	r2,12(r23)
100043f0:	b8c01915 	stw	r3,100(r23)
100043f4:	10c0020c 	andi	r3,r2,8
100043f8:	1800c326 	beq	r3,zero,10004708 <___vfprintf_internal_r+0x39c>
100043fc:	b8c00417 	ldw	r3,16(r23)
10004400:	1800c126 	beq	r3,zero,10004708 <___vfprintf_internal_r+0x39c>
10004404:	1080068c 	andi	r2,r2,26
10004408:	00c00284 	movi	r3,10
1000440c:	10c0c626 	beq	r2,r3,10004728 <___vfprintf_internal_r+0x3bc>
10004410:	d8c00404 	addi	r3,sp,16
10004414:	05040074 	movhi	r20,4097
10004418:	d9001e04 	addi	r4,sp,120
1000441c:	a50f6d84 	addi	r20,r20,15798
10004420:	d8c01e15 	stw	r3,120(sp)
10004424:	d8002015 	stw	zero,128(sp)
10004428:	d8001f15 	stw	zero,124(sp)
1000442c:	d8003315 	stw	zero,204(sp)
10004430:	d8003615 	stw	zero,216(sp)
10004434:	d8003815 	stw	zero,224(sp)
10004438:	1811883a 	mov	r8,r3
1000443c:	d8003915 	stw	zero,228(sp)
10004440:	d8003a15 	stw	zero,232(sp)
10004444:	d8002f15 	stw	zero,188(sp)
10004448:	d9002815 	stw	r4,160(sp)
1000444c:	a8800007 	ldb	r2,0(r21)
10004450:	10028b26 	beq	r2,zero,10004e80 <___vfprintf_internal_r+0xb14>
10004454:	00c00944 	movi	r3,37
10004458:	a823883a 	mov	r17,r21
1000445c:	10c0021e 	bne	r2,r3,10004468 <___vfprintf_internal_r+0xfc>
10004460:	00001406 	br	100044b4 <___vfprintf_internal_r+0x148>
10004464:	10c00326 	beq	r2,r3,10004474 <___vfprintf_internal_r+0x108>
10004468:	8c400044 	addi	r17,r17,1
1000446c:	88800007 	ldb	r2,0(r17)
10004470:	103ffc1e 	bne	r2,zero,10004464 <__alt_data_end+0xf8004464>
10004474:	8d61c83a 	sub	r16,r17,r21
10004478:	80000e26 	beq	r16,zero,100044b4 <___vfprintf_internal_r+0x148>
1000447c:	d8c02017 	ldw	r3,128(sp)
10004480:	d8801f17 	ldw	r2,124(sp)
10004484:	45400015 	stw	r21,0(r8)
10004488:	1c07883a 	add	r3,r3,r16
1000448c:	10800044 	addi	r2,r2,1
10004490:	d8c02015 	stw	r3,128(sp)
10004494:	44000115 	stw	r16,4(r8)
10004498:	d8801f15 	stw	r2,124(sp)
1000449c:	00c001c4 	movi	r3,7
100044a0:	1880a916 	blt	r3,r2,10004748 <___vfprintf_internal_r+0x3dc>
100044a4:	42000204 	addi	r8,r8,8
100044a8:	d9402f17 	ldw	r5,188(sp)
100044ac:	2c0b883a 	add	r5,r5,r16
100044b0:	d9402f15 	stw	r5,188(sp)
100044b4:	88800007 	ldb	r2,0(r17)
100044b8:	1000aa26 	beq	r2,zero,10004764 <___vfprintf_internal_r+0x3f8>
100044bc:	8d400044 	addi	r21,r17,1
100044c0:	8c400047 	ldb	r17,1(r17)
100044c4:	0021883a 	mov	r16,zero
100044c8:	00bfffc4 	movi	r2,-1
100044cc:	0025883a 	mov	r18,zero
100044d0:	dc002905 	stb	r16,164(sp)
100044d4:	d8002785 	stb	zero,158(sp)
100044d8:	d8002b05 	stb	zero,172(sp)
100044dc:	d8802a15 	stw	r2,168(sp)
100044e0:	d8003115 	stw	zero,196(sp)
100044e4:	04c01604 	movi	r19,88
100044e8:	05800244 	movi	r22,9
100044ec:	9021883a 	mov	r16,r18
100044f0:	4039883a 	mov	fp,r8
100044f4:	ad400044 	addi	r21,r21,1
100044f8:	88bff804 	addi	r2,r17,-32
100044fc:	98833236 	bltu	r19,r2,100051c8 <___vfprintf_internal_r+0xe5c>
10004500:	100490ba 	slli	r2,r2,2
10004504:	00c40034 	movhi	r3,4096
10004508:	18d14604 	addi	r3,r3,17688
1000450c:	10c5883a 	add	r2,r2,r3
10004510:	10800017 	ldw	r2,0(r2)
10004514:	1000683a 	jmp	r2
10004518:	100050c0 	call	1100050c <_gp+0xfe29f0>
1000451c:	100051c8 	cmpgei	zero,r2,327
10004520:	100051c8 	cmpgei	zero,r2,327
10004524:	100050e0 	cmpeqi	zero,r2,323
10004528:	100051c8 	cmpgei	zero,r2,327
1000452c:	100051c8 	cmpgei	zero,r2,327
10004530:	100051c8 	cmpgei	zero,r2,327
10004534:	100051c8 	cmpgei	zero,r2,327
10004538:	100051c8 	cmpgei	zero,r2,327
1000453c:	100051c8 	cmpgei	zero,r2,327
10004540:	100047c8 	cmpgei	zero,r2,287
10004544:	10004fd0 	cmplti	zero,r2,319
10004548:	100051c8 	cmpgei	zero,r2,327
1000454c:	1000468c 	andi	zero,r2,282
10004550:	100047ec 	andhi	zero,r2,287
10004554:	100051c8 	cmpgei	zero,r2,327
10004558:	1000483c 	xorhi	zero,r2,288
1000455c:	10004848 	cmpgei	zero,r2,289
10004560:	10004848 	cmpgei	zero,r2,289
10004564:	10004848 	cmpgei	zero,r2,289
10004568:	10004848 	cmpgei	zero,r2,289
1000456c:	10004848 	cmpgei	zero,r2,289
10004570:	10004848 	cmpgei	zero,r2,289
10004574:	10004848 	cmpgei	zero,r2,289
10004578:	10004848 	cmpgei	zero,r2,289
1000457c:	10004848 	cmpgei	zero,r2,289
10004580:	100051c8 	cmpgei	zero,r2,327
10004584:	100051c8 	cmpgei	zero,r2,327
10004588:	100051c8 	cmpgei	zero,r2,327
1000458c:	100051c8 	cmpgei	zero,r2,327
10004590:	100051c8 	cmpgei	zero,r2,327
10004594:	100051c8 	cmpgei	zero,r2,327
10004598:	100051c8 	cmpgei	zero,r2,327
1000459c:	100051c8 	cmpgei	zero,r2,327
100045a0:	100051c8 	cmpgei	zero,r2,327
100045a4:	100051c8 	cmpgei	zero,r2,327
100045a8:	10004884 	addi	zero,r2,290
100045ac:	1000494c 	andi	zero,r2,293
100045b0:	100051c8 	cmpgei	zero,r2,327
100045b4:	1000494c 	andi	zero,r2,293
100045b8:	100051c8 	cmpgei	zero,r2,327
100045bc:	100051c8 	cmpgei	zero,r2,327
100045c0:	100051c8 	cmpgei	zero,r2,327
100045c4:	100051c8 	cmpgei	zero,r2,327
100045c8:	100049f8 	rdprs	zero,r2,295
100045cc:	100051c8 	cmpgei	zero,r2,327
100045d0:	100051c8 	cmpgei	zero,r2,327
100045d4:	10004a04 	addi	zero,r2,296
100045d8:	100051c8 	cmpgei	zero,r2,327
100045dc:	100051c8 	cmpgei	zero,r2,327
100045e0:	100051c8 	cmpgei	zero,r2,327
100045e4:	100051c8 	cmpgei	zero,r2,327
100045e8:	100051c8 	cmpgei	zero,r2,327
100045ec:	10004e88 	cmpgei	zero,r2,314
100045f0:	100051c8 	cmpgei	zero,r2,327
100045f4:	100051c8 	cmpgei	zero,r2,327
100045f8:	10004ef4 	orhi	zero,r2,315
100045fc:	100051c8 	cmpgei	zero,r2,327
10004600:	100051c8 	cmpgei	zero,r2,327
10004604:	100051c8 	cmpgei	zero,r2,327
10004608:	100051c8 	cmpgei	zero,r2,327
1000460c:	100051c8 	cmpgei	zero,r2,327
10004610:	100051c8 	cmpgei	zero,r2,327
10004614:	100051c8 	cmpgei	zero,r2,327
10004618:	100051c8 	cmpgei	zero,r2,327
1000461c:	100051c8 	cmpgei	zero,r2,327
10004620:	100051c8 	cmpgei	zero,r2,327
10004624:	1000516c 	andhi	zero,r2,325
10004628:	100050ec 	andhi	zero,r2,323
1000462c:	1000494c 	andi	zero,r2,293
10004630:	1000494c 	andi	zero,r2,293
10004634:	1000494c 	andi	zero,r2,293
10004638:	1000510c 	andi	zero,r2,324
1000463c:	100050ec 	andhi	zero,r2,323
10004640:	100051c8 	cmpgei	zero,r2,327
10004644:	100051c8 	cmpgei	zero,r2,327
10004648:	10005118 	cmpnei	zero,r2,324
1000464c:	100051c8 	cmpgei	zero,r2,327
10004650:	1000512c 	andhi	zero,r2,324
10004654:	10004fb0 	cmpltui	zero,r2,318
10004658:	10004698 	cmpnei	zero,r2,282
1000465c:	10004fe8 	cmpgeui	zero,r2,319
10004660:	100051c8 	cmpgei	zero,r2,327
10004664:	10004ff4 	orhi	zero,r2,319
10004668:	100051c8 	cmpgei	zero,r2,327
1000466c:	10005058 	cmpnei	zero,r2,321
10004670:	100051c8 	cmpgei	zero,r2,327
10004674:	100051c8 	cmpgei	zero,r2,327
10004678:	10005078 	rdprs	zero,r2,321
1000467c:	d8c03117 	ldw	r3,196(sp)
10004680:	d8802e15 	stw	r2,184(sp)
10004684:	00c7c83a 	sub	r3,zero,r3
10004688:	d8c03115 	stw	r3,196(sp)
1000468c:	84000114 	ori	r16,r16,4
10004690:	ac400007 	ldb	r17,0(r21)
10004694:	003f9706 	br	100044f4 <__alt_data_end+0xf80044f4>
10004698:	00800c04 	movi	r2,48
1000469c:	d8802705 	stb	r2,156(sp)
100046a0:	00801e04 	movi	r2,120
100046a4:	d8802745 	stb	r2,157(sp)
100046a8:	d9002a17 	ldw	r4,168(sp)
100046ac:	d8802e17 	ldw	r2,184(sp)
100046b0:	d8002785 	stb	zero,158(sp)
100046b4:	e011883a 	mov	r8,fp
100046b8:	10c00104 	addi	r3,r2,4
100046bc:	14c00017 	ldw	r19,0(r2)
100046c0:	002d883a 	mov	r22,zero
100046c4:	80800094 	ori	r2,r16,2
100046c8:	2002ca16 	blt	r4,zero,100051f4 <___vfprintf_internal_r+0xe88>
100046cc:	00bfdfc4 	movi	r2,-129
100046d0:	80a4703a 	and	r18,r16,r2
100046d4:	d8c02e15 	stw	r3,184(sp)
100046d8:	94800094 	ori	r18,r18,2
100046dc:	9802b41e 	bne	r19,zero,100051b0 <___vfprintf_internal_r+0xe44>
100046e0:	01440074 	movhi	r5,4097
100046e4:	294f6604 	addi	r5,r5,15768
100046e8:	d9403915 	stw	r5,228(sp)
100046ec:	04401e04 	movi	r17,120
100046f0:	d8802a17 	ldw	r2,168(sp)
100046f4:	0039883a 	mov	fp,zero
100046f8:	1001fa26 	beq	r2,zero,10004ee4 <___vfprintf_internal_r+0xb78>
100046fc:	0027883a 	mov	r19,zero
10004700:	002d883a 	mov	r22,zero
10004704:	00021906 	br	10004f6c <___vfprintf_internal_r+0xc00>
10004708:	d9002d17 	ldw	r4,180(sp)
1000470c:	b80b883a 	mov	r5,r23
10004710:	00067200 	call	10006720 <__swsetup_r>
10004714:	1005dc1e 	bne	r2,zero,10005e88 <___vfprintf_internal_r+0x1b1c>
10004718:	b880030b 	ldhu	r2,12(r23)
1000471c:	00c00284 	movi	r3,10
10004720:	1080068c 	andi	r2,r2,26
10004724:	10ff3a1e 	bne	r2,r3,10004410 <__alt_data_end+0xf8004410>
10004728:	b880038f 	ldh	r2,14(r23)
1000472c:	103f3816 	blt	r2,zero,10004410 <__alt_data_end+0xf8004410>
10004730:	d9c02e17 	ldw	r7,184(sp)
10004734:	d9002d17 	ldw	r4,180(sp)
10004738:	a80d883a 	mov	r6,r21
1000473c:	b80b883a 	mov	r5,r23
10004740:	00066640 	call	10006664 <__sbprintf>
10004744:	00001106 	br	1000478c <___vfprintf_internal_r+0x420>
10004748:	d9002d17 	ldw	r4,180(sp)
1000474c:	d9801e04 	addi	r6,sp,120
10004750:	b80b883a 	mov	r5,r23
10004754:	000ba240 	call	1000ba24 <__sprint_r>
10004758:	1000081e 	bne	r2,zero,1000477c <___vfprintf_internal_r+0x410>
1000475c:	da000404 	addi	r8,sp,16
10004760:	003f5106 	br	100044a8 <__alt_data_end+0xf80044a8>
10004764:	d8802017 	ldw	r2,128(sp)
10004768:	10000426 	beq	r2,zero,1000477c <___vfprintf_internal_r+0x410>
1000476c:	d9002d17 	ldw	r4,180(sp)
10004770:	d9801e04 	addi	r6,sp,120
10004774:	b80b883a 	mov	r5,r23
10004778:	000ba240 	call	1000ba24 <__sprint_r>
1000477c:	b880030b 	ldhu	r2,12(r23)
10004780:	1080100c 	andi	r2,r2,64
10004784:	1005c01e 	bne	r2,zero,10005e88 <___vfprintf_internal_r+0x1b1c>
10004788:	d8802f17 	ldw	r2,188(sp)
1000478c:	dfc04717 	ldw	ra,284(sp)
10004790:	df004617 	ldw	fp,280(sp)
10004794:	ddc04517 	ldw	r23,276(sp)
10004798:	dd804417 	ldw	r22,272(sp)
1000479c:	dd404317 	ldw	r21,268(sp)
100047a0:	dd004217 	ldw	r20,264(sp)
100047a4:	dcc04117 	ldw	r19,260(sp)
100047a8:	dc804017 	ldw	r18,256(sp)
100047ac:	dc403f17 	ldw	r17,252(sp)
100047b0:	dc003e17 	ldw	r16,248(sp)
100047b4:	dec04804 	addi	sp,sp,288
100047b8:	f800283a 	ret
100047bc:	d9002d17 	ldw	r4,180(sp)
100047c0:	000872c0 	call	1000872c <__sinit>
100047c4:	003f0206 	br	100043d0 <__alt_data_end+0xf80043d0>
100047c8:	d9002e17 	ldw	r4,184(sp)
100047cc:	d9402e17 	ldw	r5,184(sp)
100047d0:	21000017 	ldw	r4,0(r4)
100047d4:	28800104 	addi	r2,r5,4
100047d8:	d9003115 	stw	r4,196(sp)
100047dc:	203fa716 	blt	r4,zero,1000467c <__alt_data_end+0xf800467c>
100047e0:	d8802e15 	stw	r2,184(sp)
100047e4:	ac400007 	ldb	r17,0(r21)
100047e8:	003f4206 	br	100044f4 <__alt_data_end+0xf80044f4>
100047ec:	ac400007 	ldb	r17,0(r21)
100047f0:	01000a84 	movi	r4,42
100047f4:	a8c00044 	addi	r3,r21,1
100047f8:	89075826 	beq	r17,r4,1000655c <___vfprintf_internal_r+0x21f0>
100047fc:	8cbff404 	addi	r18,r17,-48
10004800:	b486ae36 	bltu	r22,r18,100062bc <___vfprintf_internal_r+0x1f50>
10004804:	0009883a 	mov	r4,zero
10004808:	1823883a 	mov	r17,r3
1000480c:	01400284 	movi	r5,10
10004810:	000e52c0 	call	1000e52c <__mulsi3>
10004814:	88c00007 	ldb	r3,0(r17)
10004818:	1489883a 	add	r4,r2,r18
1000481c:	8d400044 	addi	r21,r17,1
10004820:	1cbff404 	addi	r18,r3,-48
10004824:	a823883a 	mov	r17,r21
10004828:	b4bff82e 	bgeu	r22,r18,1000480c <__alt_data_end+0xf800480c>
1000482c:	1823883a 	mov	r17,r3
10004830:	2005f616 	blt	r4,zero,1000600c <___vfprintf_internal_r+0x1ca0>
10004834:	d9002a15 	stw	r4,168(sp)
10004838:	003f2f06 	br	100044f8 <__alt_data_end+0xf80044f8>
1000483c:	84002014 	ori	r16,r16,128
10004840:	ac400007 	ldb	r17,0(r21)
10004844:	003f2b06 	br	100044f4 <__alt_data_end+0xf80044f4>
10004848:	8cbff404 	addi	r18,r17,-48
1000484c:	d8003115 	stw	zero,196(sp)
10004850:	0009883a 	mov	r4,zero
10004854:	a823883a 	mov	r17,r21
10004858:	01400284 	movi	r5,10
1000485c:	000e52c0 	call	1000e52c <__mulsi3>
10004860:	88c00007 	ldb	r3,0(r17)
10004864:	9089883a 	add	r4,r18,r2
10004868:	ad400044 	addi	r21,r21,1
1000486c:	1cbff404 	addi	r18,r3,-48
10004870:	a823883a 	mov	r17,r21
10004874:	b4bff82e 	bgeu	r22,r18,10004858 <__alt_data_end+0xf8004858>
10004878:	1823883a 	mov	r17,r3
1000487c:	d9003115 	stw	r4,196(sp)
10004880:	003f1d06 	br	100044f8 <__alt_data_end+0xf80044f8>
10004884:	8025883a 	mov	r18,r16
10004888:	dc002903 	ldbu	r16,164(sp)
1000488c:	e011883a 	mov	r8,fp
10004890:	84003fcc 	andi	r16,r16,255
10004894:	8007531e 	bne	r16,zero,100065e4 <___vfprintf_internal_r+0x2278>
10004898:	94800414 	ori	r18,r18,16
1000489c:	9080080c 	andi	r2,r18,32
100048a0:	1003a326 	beq	r2,zero,10005730 <___vfprintf_internal_r+0x13c4>
100048a4:	d9002e17 	ldw	r4,184(sp)
100048a8:	20800117 	ldw	r2,4(r4)
100048ac:	24c00017 	ldw	r19,0(r4)
100048b0:	21000204 	addi	r4,r4,8
100048b4:	d9002e15 	stw	r4,184(sp)
100048b8:	102d883a 	mov	r22,r2
100048bc:	10047316 	blt	r2,zero,10005a8c <___vfprintf_internal_r+0x1720>
100048c0:	d9002a17 	ldw	r4,168(sp)
100048c4:	df002783 	ldbu	fp,158(sp)
100048c8:	2003e416 	blt	r4,zero,1000585c <___vfprintf_internal_r+0x14f0>
100048cc:	00ffdfc4 	movi	r3,-129
100048d0:	9d84b03a 	or	r2,r19,r22
100048d4:	90e4703a 	and	r18,r18,r3
100048d8:	10018026 	beq	r2,zero,10004edc <___vfprintf_internal_r+0xb70>
100048dc:	b003ab26 	beq	r22,zero,1000578c <___vfprintf_internal_r+0x1420>
100048e0:	dc402915 	stw	r17,164(sp)
100048e4:	dc001e04 	addi	r16,sp,120
100048e8:	b023883a 	mov	r17,r22
100048ec:	402d883a 	mov	r22,r8
100048f0:	9809883a 	mov	r4,r19
100048f4:	880b883a 	mov	r5,r17
100048f8:	01800284 	movi	r6,10
100048fc:	000f883a 	mov	r7,zero
10004900:	000df680 	call	1000df68 <__umoddi3>
10004904:	10800c04 	addi	r2,r2,48
10004908:	843fffc4 	addi	r16,r16,-1
1000490c:	9809883a 	mov	r4,r19
10004910:	880b883a 	mov	r5,r17
10004914:	80800005 	stb	r2,0(r16)
10004918:	01800284 	movi	r6,10
1000491c:	000f883a 	mov	r7,zero
10004920:	000d96c0 	call	1000d96c <__udivdi3>
10004924:	1027883a 	mov	r19,r2
10004928:	10c4b03a 	or	r2,r2,r3
1000492c:	1823883a 	mov	r17,r3
10004930:	103fef1e 	bne	r2,zero,100048f0 <__alt_data_end+0xf80048f0>
10004934:	d8c02817 	ldw	r3,160(sp)
10004938:	dc402917 	ldw	r17,164(sp)
1000493c:	b011883a 	mov	r8,r22
10004940:	1c07c83a 	sub	r3,r3,r16
10004944:	d8c02b15 	stw	r3,172(sp)
10004948:	00005f06 	br	10004ac8 <___vfprintf_internal_r+0x75c>
1000494c:	8025883a 	mov	r18,r16
10004950:	dc002903 	ldbu	r16,164(sp)
10004954:	e011883a 	mov	r8,fp
10004958:	84003fcc 	andi	r16,r16,255
1000495c:	80071e1e 	bne	r16,zero,100065d8 <___vfprintf_internal_r+0x226c>
10004960:	9080020c 	andi	r2,r18,8
10004964:	1004af26 	beq	r2,zero,10005c24 <___vfprintf_internal_r+0x18b8>
10004968:	d9002e17 	ldw	r4,184(sp)
1000496c:	d9402e17 	ldw	r5,184(sp)
10004970:	d8802e17 	ldw	r2,184(sp)
10004974:	21000017 	ldw	r4,0(r4)
10004978:	29400117 	ldw	r5,4(r5)
1000497c:	10800204 	addi	r2,r2,8
10004980:	d9003615 	stw	r4,216(sp)
10004984:	d9403815 	stw	r5,224(sp)
10004988:	d8802e15 	stw	r2,184(sp)
1000498c:	d9003617 	ldw	r4,216(sp)
10004990:	d9403817 	ldw	r5,224(sp)
10004994:	da003d15 	stw	r8,244(sp)
10004998:	04000044 	movi	r16,1
1000499c:	000b6480 	call	1000b648 <__fpclassifyd>
100049a0:	da003d17 	ldw	r8,244(sp)
100049a4:	1404441e 	bne	r2,r16,10005ab8 <___vfprintf_internal_r+0x174c>
100049a8:	d9003617 	ldw	r4,216(sp)
100049ac:	d9403817 	ldw	r5,224(sp)
100049b0:	000d883a 	mov	r6,zero
100049b4:	000f883a 	mov	r7,zero
100049b8:	000f9340 	call	1000f934 <__ledf2>
100049bc:	da003d17 	ldw	r8,244(sp)
100049c0:	1005e316 	blt	r2,zero,10006150 <___vfprintf_internal_r+0x1de4>
100049c4:	df002783 	ldbu	fp,158(sp)
100049c8:	008011c4 	movi	r2,71
100049cc:	1445580e 	bge	r2,r17,10005f30 <___vfprintf_internal_r+0x1bc4>
100049d0:	04040074 	movhi	r16,4097
100049d4:	840f5e04 	addi	r16,r16,15736
100049d8:	00c000c4 	movi	r3,3
100049dc:	00bfdfc4 	movi	r2,-129
100049e0:	d8c02915 	stw	r3,164(sp)
100049e4:	90a4703a 	and	r18,r18,r2
100049e8:	d8c02b15 	stw	r3,172(sp)
100049ec:	d8002a15 	stw	zero,168(sp)
100049f0:	d8003215 	stw	zero,200(sp)
100049f4:	00003a06 	br	10004ae0 <___vfprintf_internal_r+0x774>
100049f8:	84000214 	ori	r16,r16,8
100049fc:	ac400007 	ldb	r17,0(r21)
10004a00:	003ebc06 	br	100044f4 <__alt_data_end+0xf80044f4>
10004a04:	8025883a 	mov	r18,r16
10004a08:	dc002903 	ldbu	r16,164(sp)
10004a0c:	e011883a 	mov	r8,fp
10004a10:	84003fcc 	andi	r16,r16,255
10004a14:	8007001e 	bne	r16,zero,10006618 <___vfprintf_internal_r+0x22ac>
10004a18:	94800414 	ori	r18,r18,16
10004a1c:	9080080c 	andi	r2,r18,32
10004a20:	1002fa26 	beq	r2,zero,1000560c <___vfprintf_internal_r+0x12a0>
10004a24:	d9002e17 	ldw	r4,184(sp)
10004a28:	d9402a17 	ldw	r5,168(sp)
10004a2c:	d8002785 	stb	zero,158(sp)
10004a30:	20800204 	addi	r2,r4,8
10004a34:	24c00017 	ldw	r19,0(r4)
10004a38:	25800117 	ldw	r22,4(r4)
10004a3c:	2804b116 	blt	r5,zero,10005d04 <___vfprintf_internal_r+0x1998>
10004a40:	013fdfc4 	movi	r4,-129
10004a44:	9d86b03a 	or	r3,r19,r22
10004a48:	d8802e15 	stw	r2,184(sp)
10004a4c:	9124703a 	and	r18,r18,r4
10004a50:	1802fb1e 	bne	r3,zero,10005640 <___vfprintf_internal_r+0x12d4>
10004a54:	d8c02a17 	ldw	r3,168(sp)
10004a58:	0039883a 	mov	fp,zero
10004a5c:	1805e526 	beq	r3,zero,100061f4 <___vfprintf_internal_r+0x1e88>
10004a60:	0027883a 	mov	r19,zero
10004a64:	002d883a 	mov	r22,zero
10004a68:	dc001e04 	addi	r16,sp,120
10004a6c:	9806d0fa 	srli	r3,r19,3
10004a70:	b008977a 	slli	r4,r22,29
10004a74:	b02cd0fa 	srli	r22,r22,3
10004a78:	9cc001cc 	andi	r19,r19,7
10004a7c:	98800c04 	addi	r2,r19,48
10004a80:	843fffc4 	addi	r16,r16,-1
10004a84:	20e6b03a 	or	r19,r4,r3
10004a88:	80800005 	stb	r2,0(r16)
10004a8c:	9d86b03a 	or	r3,r19,r22
10004a90:	183ff61e 	bne	r3,zero,10004a6c <__alt_data_end+0xf8004a6c>
10004a94:	90c0004c 	andi	r3,r18,1
10004a98:	18014126 	beq	r3,zero,10004fa0 <___vfprintf_internal_r+0xc34>
10004a9c:	10803fcc 	andi	r2,r2,255
10004aa0:	1080201c 	xori	r2,r2,128
10004aa4:	10bfe004 	addi	r2,r2,-128
10004aa8:	00c00c04 	movi	r3,48
10004aac:	10c13c26 	beq	r2,r3,10004fa0 <___vfprintf_internal_r+0xc34>
10004ab0:	80ffffc5 	stb	r3,-1(r16)
10004ab4:	d8c02817 	ldw	r3,160(sp)
10004ab8:	80bfffc4 	addi	r2,r16,-1
10004abc:	1021883a 	mov	r16,r2
10004ac0:	1887c83a 	sub	r3,r3,r2
10004ac4:	d8c02b15 	stw	r3,172(sp)
10004ac8:	d8802b17 	ldw	r2,172(sp)
10004acc:	d9002a17 	ldw	r4,168(sp)
10004ad0:	1100010e 	bge	r2,r4,10004ad8 <___vfprintf_internal_r+0x76c>
10004ad4:	2005883a 	mov	r2,r4
10004ad8:	d8802915 	stw	r2,164(sp)
10004adc:	d8003215 	stw	zero,200(sp)
10004ae0:	e7003fcc 	andi	fp,fp,255
10004ae4:	e700201c 	xori	fp,fp,128
10004ae8:	e73fe004 	addi	fp,fp,-128
10004aec:	e0000326 	beq	fp,zero,10004afc <___vfprintf_internal_r+0x790>
10004af0:	d8c02917 	ldw	r3,164(sp)
10004af4:	18c00044 	addi	r3,r3,1
10004af8:	d8c02915 	stw	r3,164(sp)
10004afc:	90c0008c 	andi	r3,r18,2
10004b00:	d8c02c15 	stw	r3,176(sp)
10004b04:	18000326 	beq	r3,zero,10004b14 <___vfprintf_internal_r+0x7a8>
10004b08:	d8c02917 	ldw	r3,164(sp)
10004b0c:	18c00084 	addi	r3,r3,2
10004b10:	d8c02915 	stw	r3,164(sp)
10004b14:	90c0210c 	andi	r3,r18,132
10004b18:	d8c03015 	stw	r3,192(sp)
10004b1c:	1801c51e 	bne	r3,zero,10005234 <___vfprintf_internal_r+0xec8>
10004b20:	d9003117 	ldw	r4,196(sp)
10004b24:	d8c02917 	ldw	r3,164(sp)
10004b28:	20e7c83a 	sub	r19,r4,r3
10004b2c:	04c1c10e 	bge	zero,r19,10005234 <___vfprintf_internal_r+0xec8>
10004b30:	02400404 	movi	r9,16
10004b34:	d8c02017 	ldw	r3,128(sp)
10004b38:	d8801f17 	ldw	r2,124(sp)
10004b3c:	4cc52f0e 	bge	r9,r19,10005ffc <___vfprintf_internal_r+0x1c90>
10004b40:	01440074 	movhi	r5,4097
10004b44:	294f7184 	addi	r5,r5,15814
10004b48:	dc403b15 	stw	r17,236(sp)
10004b4c:	d9403515 	stw	r5,212(sp)
10004b50:	9823883a 	mov	r17,r19
10004b54:	482d883a 	mov	r22,r9
10004b58:	9027883a 	mov	r19,r18
10004b5c:	070001c4 	movi	fp,7
10004b60:	8025883a 	mov	r18,r16
10004b64:	dc002d17 	ldw	r16,180(sp)
10004b68:	00000306 	br	10004b78 <___vfprintf_internal_r+0x80c>
10004b6c:	8c7ffc04 	addi	r17,r17,-16
10004b70:	42000204 	addi	r8,r8,8
10004b74:	b440130e 	bge	r22,r17,10004bc4 <___vfprintf_internal_r+0x858>
10004b78:	01040074 	movhi	r4,4097
10004b7c:	18c00404 	addi	r3,r3,16
10004b80:	10800044 	addi	r2,r2,1
10004b84:	210f7184 	addi	r4,r4,15814
10004b88:	41000015 	stw	r4,0(r8)
10004b8c:	45800115 	stw	r22,4(r8)
10004b90:	d8c02015 	stw	r3,128(sp)
10004b94:	d8801f15 	stw	r2,124(sp)
10004b98:	e0bff40e 	bge	fp,r2,10004b6c <__alt_data_end+0xf8004b6c>
10004b9c:	d9801e04 	addi	r6,sp,120
10004ba0:	b80b883a 	mov	r5,r23
10004ba4:	8009883a 	mov	r4,r16
10004ba8:	000ba240 	call	1000ba24 <__sprint_r>
10004bac:	103ef31e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10004bb0:	8c7ffc04 	addi	r17,r17,-16
10004bb4:	d8c02017 	ldw	r3,128(sp)
10004bb8:	d8801f17 	ldw	r2,124(sp)
10004bbc:	da000404 	addi	r8,sp,16
10004bc0:	b47fed16 	blt	r22,r17,10004b78 <__alt_data_end+0xf8004b78>
10004bc4:	9021883a 	mov	r16,r18
10004bc8:	9825883a 	mov	r18,r19
10004bcc:	8827883a 	mov	r19,r17
10004bd0:	dc403b17 	ldw	r17,236(sp)
10004bd4:	d9403517 	ldw	r5,212(sp)
10004bd8:	98c7883a 	add	r3,r19,r3
10004bdc:	10800044 	addi	r2,r2,1
10004be0:	41400015 	stw	r5,0(r8)
10004be4:	44c00115 	stw	r19,4(r8)
10004be8:	d8c02015 	stw	r3,128(sp)
10004bec:	d8801f15 	stw	r2,124(sp)
10004bf0:	010001c4 	movi	r4,7
10004bf4:	2082c516 	blt	r4,r2,1000570c <___vfprintf_internal_r+0x13a0>
10004bf8:	df002787 	ldb	fp,158(sp)
10004bfc:	42000204 	addi	r8,r8,8
10004c00:	e0000c26 	beq	fp,zero,10004c34 <___vfprintf_internal_r+0x8c8>
10004c04:	d8801f17 	ldw	r2,124(sp)
10004c08:	d9002784 	addi	r4,sp,158
10004c0c:	18c00044 	addi	r3,r3,1
10004c10:	10800044 	addi	r2,r2,1
10004c14:	41000015 	stw	r4,0(r8)
10004c18:	01000044 	movi	r4,1
10004c1c:	41000115 	stw	r4,4(r8)
10004c20:	d8c02015 	stw	r3,128(sp)
10004c24:	d8801f15 	stw	r2,124(sp)
10004c28:	010001c4 	movi	r4,7
10004c2c:	20825e16 	blt	r4,r2,100055a8 <___vfprintf_internal_r+0x123c>
10004c30:	42000204 	addi	r8,r8,8
10004c34:	d8802c17 	ldw	r2,176(sp)
10004c38:	10000c26 	beq	r2,zero,10004c6c <___vfprintf_internal_r+0x900>
10004c3c:	d8801f17 	ldw	r2,124(sp)
10004c40:	d9002704 	addi	r4,sp,156
10004c44:	18c00084 	addi	r3,r3,2
10004c48:	10800044 	addi	r2,r2,1
10004c4c:	41000015 	stw	r4,0(r8)
10004c50:	01000084 	movi	r4,2
10004c54:	41000115 	stw	r4,4(r8)
10004c58:	d8c02015 	stw	r3,128(sp)
10004c5c:	d8801f15 	stw	r2,124(sp)
10004c60:	010001c4 	movi	r4,7
10004c64:	20825816 	blt	r4,r2,100055c8 <___vfprintf_internal_r+0x125c>
10004c68:	42000204 	addi	r8,r8,8
10004c6c:	d9003017 	ldw	r4,192(sp)
10004c70:	00802004 	movi	r2,128
10004c74:	2081bb26 	beq	r4,r2,10005364 <___vfprintf_internal_r+0xff8>
10004c78:	d9402a17 	ldw	r5,168(sp)
10004c7c:	d8802b17 	ldw	r2,172(sp)
10004c80:	28adc83a 	sub	r22,r5,r2
10004c84:	0580310e 	bge	zero,r22,10004d4c <___vfprintf_internal_r+0x9e0>
10004c88:	07000404 	movi	fp,16
10004c8c:	d8801f17 	ldw	r2,124(sp)
10004c90:	e584360e 	bge	fp,r22,10005d6c <___vfprintf_internal_r+0x1a00>
10004c94:	01440074 	movhi	r5,4097
10004c98:	294f6d84 	addi	r5,r5,15798
10004c9c:	dc402a15 	stw	r17,168(sp)
10004ca0:	d9402c15 	stw	r5,176(sp)
10004ca4:	b023883a 	mov	r17,r22
10004ca8:	04c001c4 	movi	r19,7
10004cac:	a82d883a 	mov	r22,r21
10004cb0:	902b883a 	mov	r21,r18
10004cb4:	8025883a 	mov	r18,r16
10004cb8:	dc002d17 	ldw	r16,180(sp)
10004cbc:	00000306 	br	10004ccc <___vfprintf_internal_r+0x960>
10004cc0:	8c7ffc04 	addi	r17,r17,-16
10004cc4:	42000204 	addi	r8,r8,8
10004cc8:	e440110e 	bge	fp,r17,10004d10 <___vfprintf_internal_r+0x9a4>
10004ccc:	18c00404 	addi	r3,r3,16
10004cd0:	10800044 	addi	r2,r2,1
10004cd4:	45000015 	stw	r20,0(r8)
10004cd8:	47000115 	stw	fp,4(r8)
10004cdc:	d8c02015 	stw	r3,128(sp)
10004ce0:	d8801f15 	stw	r2,124(sp)
10004ce4:	98bff60e 	bge	r19,r2,10004cc0 <__alt_data_end+0xf8004cc0>
10004ce8:	d9801e04 	addi	r6,sp,120
10004cec:	b80b883a 	mov	r5,r23
10004cf0:	8009883a 	mov	r4,r16
10004cf4:	000ba240 	call	1000ba24 <__sprint_r>
10004cf8:	103ea01e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10004cfc:	8c7ffc04 	addi	r17,r17,-16
10004d00:	d8c02017 	ldw	r3,128(sp)
10004d04:	d8801f17 	ldw	r2,124(sp)
10004d08:	da000404 	addi	r8,sp,16
10004d0c:	e47fef16 	blt	fp,r17,10004ccc <__alt_data_end+0xf8004ccc>
10004d10:	9021883a 	mov	r16,r18
10004d14:	a825883a 	mov	r18,r21
10004d18:	b02b883a 	mov	r21,r22
10004d1c:	882d883a 	mov	r22,r17
10004d20:	dc402a17 	ldw	r17,168(sp)
10004d24:	d9002c17 	ldw	r4,176(sp)
10004d28:	1d87883a 	add	r3,r3,r22
10004d2c:	10800044 	addi	r2,r2,1
10004d30:	41000015 	stw	r4,0(r8)
10004d34:	45800115 	stw	r22,4(r8)
10004d38:	d8c02015 	stw	r3,128(sp)
10004d3c:	d8801f15 	stw	r2,124(sp)
10004d40:	010001c4 	movi	r4,7
10004d44:	20821016 	blt	r4,r2,10005588 <___vfprintf_internal_r+0x121c>
10004d48:	42000204 	addi	r8,r8,8
10004d4c:	9080400c 	andi	r2,r18,256
10004d50:	10013a1e 	bne	r2,zero,1000523c <___vfprintf_internal_r+0xed0>
10004d54:	d9402b17 	ldw	r5,172(sp)
10004d58:	d8801f17 	ldw	r2,124(sp)
10004d5c:	44000015 	stw	r16,0(r8)
10004d60:	1947883a 	add	r3,r3,r5
10004d64:	10800044 	addi	r2,r2,1
10004d68:	41400115 	stw	r5,4(r8)
10004d6c:	d8c02015 	stw	r3,128(sp)
10004d70:	d8801f15 	stw	r2,124(sp)
10004d74:	010001c4 	movi	r4,7
10004d78:	2081f516 	blt	r4,r2,10005550 <___vfprintf_internal_r+0x11e4>
10004d7c:	42000204 	addi	r8,r8,8
10004d80:	9480010c 	andi	r18,r18,4
10004d84:	90003226 	beq	r18,zero,10004e50 <___vfprintf_internal_r+0xae4>
10004d88:	d9403117 	ldw	r5,196(sp)
10004d8c:	d8802917 	ldw	r2,164(sp)
10004d90:	28a1c83a 	sub	r16,r5,r2
10004d94:	04002e0e 	bge	zero,r16,10004e50 <___vfprintf_internal_r+0xae4>
10004d98:	04400404 	movi	r17,16
10004d9c:	d8801f17 	ldw	r2,124(sp)
10004da0:	8c04c40e 	bge	r17,r16,100060b4 <___vfprintf_internal_r+0x1d48>
10004da4:	01440074 	movhi	r5,4097
10004da8:	294f7184 	addi	r5,r5,15814
10004dac:	d9403515 	stw	r5,212(sp)
10004db0:	048001c4 	movi	r18,7
10004db4:	dcc02d17 	ldw	r19,180(sp)
10004db8:	00000306 	br	10004dc8 <___vfprintf_internal_r+0xa5c>
10004dbc:	843ffc04 	addi	r16,r16,-16
10004dc0:	42000204 	addi	r8,r8,8
10004dc4:	8c00130e 	bge	r17,r16,10004e14 <___vfprintf_internal_r+0xaa8>
10004dc8:	01040074 	movhi	r4,4097
10004dcc:	18c00404 	addi	r3,r3,16
10004dd0:	10800044 	addi	r2,r2,1
10004dd4:	210f7184 	addi	r4,r4,15814
10004dd8:	41000015 	stw	r4,0(r8)
10004ddc:	44400115 	stw	r17,4(r8)
10004de0:	d8c02015 	stw	r3,128(sp)
10004de4:	d8801f15 	stw	r2,124(sp)
10004de8:	90bff40e 	bge	r18,r2,10004dbc <__alt_data_end+0xf8004dbc>
10004dec:	d9801e04 	addi	r6,sp,120
10004df0:	b80b883a 	mov	r5,r23
10004df4:	9809883a 	mov	r4,r19
10004df8:	000ba240 	call	1000ba24 <__sprint_r>
10004dfc:	103e5f1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10004e00:	843ffc04 	addi	r16,r16,-16
10004e04:	d8c02017 	ldw	r3,128(sp)
10004e08:	d8801f17 	ldw	r2,124(sp)
10004e0c:	da000404 	addi	r8,sp,16
10004e10:	8c3fed16 	blt	r17,r16,10004dc8 <__alt_data_end+0xf8004dc8>
10004e14:	d9403517 	ldw	r5,212(sp)
10004e18:	1c07883a 	add	r3,r3,r16
10004e1c:	10800044 	addi	r2,r2,1
10004e20:	41400015 	stw	r5,0(r8)
10004e24:	44000115 	stw	r16,4(r8)
10004e28:	d8c02015 	stw	r3,128(sp)
10004e2c:	d8801f15 	stw	r2,124(sp)
10004e30:	010001c4 	movi	r4,7
10004e34:	2080060e 	bge	r4,r2,10004e50 <___vfprintf_internal_r+0xae4>
10004e38:	d9002d17 	ldw	r4,180(sp)
10004e3c:	d9801e04 	addi	r6,sp,120
10004e40:	b80b883a 	mov	r5,r23
10004e44:	000ba240 	call	1000ba24 <__sprint_r>
10004e48:	103e4c1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10004e4c:	d8c02017 	ldw	r3,128(sp)
10004e50:	d8803117 	ldw	r2,196(sp)
10004e54:	d9002917 	ldw	r4,164(sp)
10004e58:	1100010e 	bge	r2,r4,10004e60 <___vfprintf_internal_r+0xaf4>
10004e5c:	2005883a 	mov	r2,r4
10004e60:	d9402f17 	ldw	r5,188(sp)
10004e64:	288b883a 	add	r5,r5,r2
10004e68:	d9402f15 	stw	r5,188(sp)
10004e6c:	1801c01e 	bne	r3,zero,10005570 <___vfprintf_internal_r+0x1204>
10004e70:	a8800007 	ldb	r2,0(r21)
10004e74:	d8001f15 	stw	zero,124(sp)
10004e78:	da000404 	addi	r8,sp,16
10004e7c:	103d751e 	bne	r2,zero,10004454 <__alt_data_end+0xf8004454>
10004e80:	a823883a 	mov	r17,r21
10004e84:	003d8b06 	br	100044b4 <__alt_data_end+0xf80044b4>
10004e88:	8025883a 	mov	r18,r16
10004e8c:	dc002903 	ldbu	r16,164(sp)
10004e90:	e011883a 	mov	r8,fp
10004e94:	84003fcc 	andi	r16,r16,255
10004e98:	8005e51e 	bne	r16,zero,10006630 <___vfprintf_internal_r+0x22c4>
10004e9c:	94800414 	ori	r18,r18,16
10004ea0:	9080080c 	andi	r2,r18,32
10004ea4:	10022b26 	beq	r2,zero,10005754 <___vfprintf_internal_r+0x13e8>
10004ea8:	d9002e17 	ldw	r4,184(sp)
10004eac:	d9402a17 	ldw	r5,168(sp)
10004eb0:	d8002785 	stb	zero,158(sp)
10004eb4:	20c00204 	addi	r3,r4,8
10004eb8:	24c00017 	ldw	r19,0(r4)
10004ebc:	25800117 	ldw	r22,4(r4)
10004ec0:	28042e16 	blt	r5,zero,10005f7c <___vfprintf_internal_r+0x1c10>
10004ec4:	013fdfc4 	movi	r4,-129
10004ec8:	9d84b03a 	or	r2,r19,r22
10004ecc:	d8c02e15 	stw	r3,184(sp)
10004ed0:	9124703a 	and	r18,r18,r4
10004ed4:	0039883a 	mov	fp,zero
10004ed8:	103e801e 	bne	r2,zero,100048dc <__alt_data_end+0xf80048dc>
10004edc:	d9002a17 	ldw	r4,168(sp)
10004ee0:	2002e01e 	bne	r4,zero,10005a64 <___vfprintf_internal_r+0x16f8>
10004ee4:	d8002a15 	stw	zero,168(sp)
10004ee8:	d8002b15 	stw	zero,172(sp)
10004eec:	dc001e04 	addi	r16,sp,120
10004ef0:	003ef506 	br	10004ac8 <__alt_data_end+0xf8004ac8>
10004ef4:	8025883a 	mov	r18,r16
10004ef8:	dc002903 	ldbu	r16,164(sp)
10004efc:	e011883a 	mov	r8,fp
10004f00:	84003fcc 	andi	r16,r16,255
10004f04:	8005ba1e 	bne	r16,zero,100065f0 <___vfprintf_internal_r+0x2284>
10004f08:	01040074 	movhi	r4,4097
10004f0c:	210f6104 	addi	r4,r4,15748
10004f10:	d9003915 	stw	r4,228(sp)
10004f14:	9080080c 	andi	r2,r18,32
10004f18:	10006126 	beq	r2,zero,100050a0 <___vfprintf_internal_r+0xd34>
10004f1c:	d9402e17 	ldw	r5,184(sp)
10004f20:	2cc00017 	ldw	r19,0(r5)
10004f24:	2d800117 	ldw	r22,4(r5)
10004f28:	29400204 	addi	r5,r5,8
10004f2c:	d9402e15 	stw	r5,184(sp)
10004f30:	9080004c 	andi	r2,r18,1
10004f34:	1001ac26 	beq	r2,zero,100055e8 <___vfprintf_internal_r+0x127c>
10004f38:	9d84b03a 	or	r2,r19,r22
10004f3c:	10038526 	beq	r2,zero,10005d54 <___vfprintf_internal_r+0x19e8>
10004f40:	d8c02a17 	ldw	r3,168(sp)
10004f44:	00800c04 	movi	r2,48
10004f48:	d8802705 	stb	r2,156(sp)
10004f4c:	dc402745 	stb	r17,157(sp)
10004f50:	d8002785 	stb	zero,158(sp)
10004f54:	90800094 	ori	r2,r18,2
10004f58:	18047916 	blt	r3,zero,10006140 <___vfprintf_internal_r+0x1dd4>
10004f5c:	00bfdfc4 	movi	r2,-129
10004f60:	90a4703a 	and	r18,r18,r2
10004f64:	94800094 	ori	r18,r18,2
10004f68:	0039883a 	mov	fp,zero
10004f6c:	d9003917 	ldw	r4,228(sp)
10004f70:	dc001e04 	addi	r16,sp,120
10004f74:	988003cc 	andi	r2,r19,15
10004f78:	b006973a 	slli	r3,r22,28
10004f7c:	2085883a 	add	r2,r4,r2
10004f80:	9826d13a 	srli	r19,r19,4
10004f84:	10800003 	ldbu	r2,0(r2)
10004f88:	b02cd13a 	srli	r22,r22,4
10004f8c:	843fffc4 	addi	r16,r16,-1
10004f90:	1ce6b03a 	or	r19,r3,r19
10004f94:	80800005 	stb	r2,0(r16)
10004f98:	9d84b03a 	or	r2,r19,r22
10004f9c:	103ff51e 	bne	r2,zero,10004f74 <__alt_data_end+0xf8004f74>
10004fa0:	d8c02817 	ldw	r3,160(sp)
10004fa4:	1c07c83a 	sub	r3,r3,r16
10004fa8:	d8c02b15 	stw	r3,172(sp)
10004fac:	003ec606 	br	10004ac8 <__alt_data_end+0xf8004ac8>
10004fb0:	8025883a 	mov	r18,r16
10004fb4:	dc002903 	ldbu	r16,164(sp)
10004fb8:	e011883a 	mov	r8,fp
10004fbc:	84003fcc 	andi	r16,r16,255
10004fc0:	803e9626 	beq	r16,zero,10004a1c <__alt_data_end+0xf8004a1c>
10004fc4:	d8c02b03 	ldbu	r3,172(sp)
10004fc8:	d8c02785 	stb	r3,158(sp)
10004fcc:	003e9306 	br	10004a1c <__alt_data_end+0xf8004a1c>
10004fd0:	00c00044 	movi	r3,1
10004fd4:	d8c02905 	stb	r3,164(sp)
10004fd8:	00c00ac4 	movi	r3,43
10004fdc:	d8c02b05 	stb	r3,172(sp)
10004fe0:	ac400007 	ldb	r17,0(r21)
10004fe4:	003d4306 	br	100044f4 <__alt_data_end+0xf80044f4>
10004fe8:	84000814 	ori	r16,r16,32
10004fec:	ac400007 	ldb	r17,0(r21)
10004ff0:	003d4006 	br	100044f4 <__alt_data_end+0xf80044f4>
10004ff4:	d8802e17 	ldw	r2,184(sp)
10004ff8:	8025883a 	mov	r18,r16
10004ffc:	d8002785 	stb	zero,158(sp)
10005000:	14000017 	ldw	r16,0(r2)
10005004:	e011883a 	mov	r8,fp
10005008:	14c00104 	addi	r19,r2,4
1000500c:	80042d26 	beq	r16,zero,100060c4 <___vfprintf_internal_r+0x1d58>
10005010:	d8c02a17 	ldw	r3,168(sp)
10005014:	1803e416 	blt	r3,zero,10005fa8 <___vfprintf_internal_r+0x1c3c>
10005018:	180d883a 	mov	r6,r3
1000501c:	000b883a 	mov	r5,zero
10005020:	8009883a 	mov	r4,r16
10005024:	df003d15 	stw	fp,244(sp)
10005028:	0009ca40 	call	10009ca4 <memchr>
1000502c:	da003d17 	ldw	r8,244(sp)
10005030:	10046826 	beq	r2,zero,100061d4 <___vfprintf_internal_r+0x1e68>
10005034:	1405c83a 	sub	r2,r2,r16
10005038:	d8802b15 	stw	r2,172(sp)
1000503c:	1003e016 	blt	r2,zero,10005fc0 <___vfprintf_internal_r+0x1c54>
10005040:	df002783 	ldbu	fp,158(sp)
10005044:	d8802915 	stw	r2,164(sp)
10005048:	dcc02e15 	stw	r19,184(sp)
1000504c:	d8002a15 	stw	zero,168(sp)
10005050:	d8003215 	stw	zero,200(sp)
10005054:	003ea206 	br	10004ae0 <__alt_data_end+0xf8004ae0>
10005058:	8025883a 	mov	r18,r16
1000505c:	dc002903 	ldbu	r16,164(sp)
10005060:	e011883a 	mov	r8,fp
10005064:	84003fcc 	andi	r16,r16,255
10005068:	803f8d26 	beq	r16,zero,10004ea0 <__alt_data_end+0xf8004ea0>
1000506c:	d8c02b03 	ldbu	r3,172(sp)
10005070:	d8c02785 	stb	r3,158(sp)
10005074:	003f8a06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10005078:	8025883a 	mov	r18,r16
1000507c:	dc002903 	ldbu	r16,164(sp)
10005080:	e011883a 	mov	r8,fp
10005084:	84003fcc 	andi	r16,r16,255
10005088:	8005661e 	bne	r16,zero,10006624 <___vfprintf_internal_r+0x22b8>
1000508c:	01040074 	movhi	r4,4097
10005090:	210f6604 	addi	r4,r4,15768
10005094:	d9003915 	stw	r4,228(sp)
10005098:	9080080c 	andi	r2,r18,32
1000509c:	103f9f1e 	bne	r2,zero,10004f1c <__alt_data_end+0xf8004f1c>
100050a0:	9080040c 	andi	r2,r18,16
100050a4:	1002eb26 	beq	r2,zero,10005c54 <___vfprintf_internal_r+0x18e8>
100050a8:	d8802e17 	ldw	r2,184(sp)
100050ac:	002d883a 	mov	r22,zero
100050b0:	14c00017 	ldw	r19,0(r2)
100050b4:	10800104 	addi	r2,r2,4
100050b8:	d8802e15 	stw	r2,184(sp)
100050bc:	003f9c06 	br	10004f30 <__alt_data_end+0xf8004f30>
100050c0:	d8802b07 	ldb	r2,172(sp)
100050c4:	1002e11e 	bne	r2,zero,10005c4c <___vfprintf_internal_r+0x18e0>
100050c8:	00c00044 	movi	r3,1
100050cc:	d8c02905 	stb	r3,164(sp)
100050d0:	00c00804 	movi	r3,32
100050d4:	d8c02b05 	stb	r3,172(sp)
100050d8:	ac400007 	ldb	r17,0(r21)
100050dc:	003d0506 	br	100044f4 <__alt_data_end+0xf80044f4>
100050e0:	84000054 	ori	r16,r16,1
100050e4:	ac400007 	ldb	r17,0(r21)
100050e8:	003d0206 	br	100044f4 <__alt_data_end+0xf80044f4>
100050ec:	8025883a 	mov	r18,r16
100050f0:	dc002903 	ldbu	r16,164(sp)
100050f4:	e011883a 	mov	r8,fp
100050f8:	84003fcc 	andi	r16,r16,255
100050fc:	803de726 	beq	r16,zero,1000489c <__alt_data_end+0xf800489c>
10005100:	d8c02b03 	ldbu	r3,172(sp)
10005104:	d8c02785 	stb	r3,158(sp)
10005108:	003de406 	br	1000489c <__alt_data_end+0xf800489c>
1000510c:	84001014 	ori	r16,r16,64
10005110:	ac400007 	ldb	r17,0(r21)
10005114:	003cf706 	br	100044f4 <__alt_data_end+0xf80044f4>
10005118:	ac400007 	ldb	r17,0(r21)
1000511c:	00801b04 	movi	r2,108
10005120:	88838f26 	beq	r17,r2,10005f60 <___vfprintf_internal_r+0x1bf4>
10005124:	84000414 	ori	r16,r16,16
10005128:	003cf206 	br	100044f4 <__alt_data_end+0xf80044f4>
1000512c:	8025883a 	mov	r18,r16
10005130:	dc002903 	ldbu	r16,164(sp)
10005134:	e011883a 	mov	r8,fp
10005138:	84003fcc 	andi	r16,r16,255
1000513c:	80053f1e 	bne	r16,zero,1000663c <___vfprintf_internal_r+0x22d0>
10005140:	9080080c 	andi	r2,r18,32
10005144:	1002d226 	beq	r2,zero,10005c90 <___vfprintf_internal_r+0x1924>
10005148:	d9002e17 	ldw	r4,184(sp)
1000514c:	d9402f17 	ldw	r5,188(sp)
10005150:	20800017 	ldw	r2,0(r4)
10005154:	2807d7fa 	srai	r3,r5,31
10005158:	21000104 	addi	r4,r4,4
1000515c:	d9002e15 	stw	r4,184(sp)
10005160:	11400015 	stw	r5,0(r2)
10005164:	10c00115 	stw	r3,4(r2)
10005168:	003cb806 	br	1000444c <__alt_data_end+0xf800444c>
1000516c:	d8c02e17 	ldw	r3,184(sp)
10005170:	d9002e17 	ldw	r4,184(sp)
10005174:	8025883a 	mov	r18,r16
10005178:	18800017 	ldw	r2,0(r3)
1000517c:	21000104 	addi	r4,r4,4
10005180:	00c00044 	movi	r3,1
10005184:	e011883a 	mov	r8,fp
10005188:	d8c02915 	stw	r3,164(sp)
1000518c:	d8002785 	stb	zero,158(sp)
10005190:	d8801405 	stb	r2,80(sp)
10005194:	d9002e15 	stw	r4,184(sp)
10005198:	d8c02b15 	stw	r3,172(sp)
1000519c:	d8002a15 	stw	zero,168(sp)
100051a0:	d8003215 	stw	zero,200(sp)
100051a4:	dc001404 	addi	r16,sp,80
100051a8:	0039883a 	mov	fp,zero
100051ac:	003e5306 	br	10004afc <__alt_data_end+0xf8004afc>
100051b0:	01040074 	movhi	r4,4097
100051b4:	210f6604 	addi	r4,r4,15768
100051b8:	0039883a 	mov	fp,zero
100051bc:	d9003915 	stw	r4,228(sp)
100051c0:	04401e04 	movi	r17,120
100051c4:	003f6906 	br	10004f6c <__alt_data_end+0xf8004f6c>
100051c8:	8025883a 	mov	r18,r16
100051cc:	dc002903 	ldbu	r16,164(sp)
100051d0:	e011883a 	mov	r8,fp
100051d4:	84003fcc 	andi	r16,r16,255
100051d8:	8005081e 	bne	r16,zero,100065fc <___vfprintf_internal_r+0x2290>
100051dc:	883d6126 	beq	r17,zero,10004764 <__alt_data_end+0xf8004764>
100051e0:	00c00044 	movi	r3,1
100051e4:	d8c02915 	stw	r3,164(sp)
100051e8:	dc401405 	stb	r17,80(sp)
100051ec:	d8002785 	stb	zero,158(sp)
100051f0:	003fe906 	br	10005198 <__alt_data_end+0xf8005198>
100051f4:	01440074 	movhi	r5,4097
100051f8:	294f6604 	addi	r5,r5,15768
100051fc:	d9403915 	stw	r5,228(sp)
10005200:	d8c02e15 	stw	r3,184(sp)
10005204:	1025883a 	mov	r18,r2
10005208:	04401e04 	movi	r17,120
1000520c:	9d84b03a 	or	r2,r19,r22
10005210:	1000fc1e 	bne	r2,zero,10005604 <___vfprintf_internal_r+0x1298>
10005214:	0039883a 	mov	fp,zero
10005218:	00800084 	movi	r2,2
1000521c:	10803fcc 	andi	r2,r2,255
10005220:	00c00044 	movi	r3,1
10005224:	10c20f26 	beq	r2,r3,10005a64 <___vfprintf_internal_r+0x16f8>
10005228:	00c00084 	movi	r3,2
1000522c:	10fd3326 	beq	r2,r3,100046fc <__alt_data_end+0xf80046fc>
10005230:	003e0b06 	br	10004a60 <__alt_data_end+0xf8004a60>
10005234:	d8c02017 	ldw	r3,128(sp)
10005238:	003e7106 	br	10004c00 <__alt_data_end+0xf8004c00>
1000523c:	00801944 	movi	r2,101
10005240:	14407e0e 	bge	r2,r17,1000543c <___vfprintf_internal_r+0x10d0>
10005244:	d9003617 	ldw	r4,216(sp)
10005248:	d9403817 	ldw	r5,224(sp)
1000524c:	000d883a 	mov	r6,zero
10005250:	000f883a 	mov	r7,zero
10005254:	d8c03c15 	stw	r3,240(sp)
10005258:	da003d15 	stw	r8,244(sp)
1000525c:	000f7d00 	call	1000f7d0 <__eqdf2>
10005260:	d8c03c17 	ldw	r3,240(sp)
10005264:	da003d17 	ldw	r8,244(sp)
10005268:	1000f71e 	bne	r2,zero,10005648 <___vfprintf_internal_r+0x12dc>
1000526c:	d8801f17 	ldw	r2,124(sp)
10005270:	01040074 	movhi	r4,4097
10005274:	210f6d04 	addi	r4,r4,15796
10005278:	18c00044 	addi	r3,r3,1
1000527c:	10800044 	addi	r2,r2,1
10005280:	41000015 	stw	r4,0(r8)
10005284:	01000044 	movi	r4,1
10005288:	41000115 	stw	r4,4(r8)
1000528c:	d8c02015 	stw	r3,128(sp)
10005290:	d8801f15 	stw	r2,124(sp)
10005294:	010001c4 	movi	r4,7
10005298:	2082b816 	blt	r4,r2,10005d7c <___vfprintf_internal_r+0x1a10>
1000529c:	42000204 	addi	r8,r8,8
100052a0:	d8802617 	ldw	r2,152(sp)
100052a4:	d9403317 	ldw	r5,204(sp)
100052a8:	11400216 	blt	r2,r5,100052b4 <___vfprintf_internal_r+0xf48>
100052ac:	9080004c 	andi	r2,r18,1
100052b0:	103eb326 	beq	r2,zero,10004d80 <__alt_data_end+0xf8004d80>
100052b4:	d8803717 	ldw	r2,220(sp)
100052b8:	d9003417 	ldw	r4,208(sp)
100052bc:	d9403717 	ldw	r5,220(sp)
100052c0:	1887883a 	add	r3,r3,r2
100052c4:	d8801f17 	ldw	r2,124(sp)
100052c8:	41000015 	stw	r4,0(r8)
100052cc:	41400115 	stw	r5,4(r8)
100052d0:	10800044 	addi	r2,r2,1
100052d4:	d8c02015 	stw	r3,128(sp)
100052d8:	d8801f15 	stw	r2,124(sp)
100052dc:	010001c4 	movi	r4,7
100052e0:	20832916 	blt	r4,r2,10005f88 <___vfprintf_internal_r+0x1c1c>
100052e4:	42000204 	addi	r8,r8,8
100052e8:	d8803317 	ldw	r2,204(sp)
100052ec:	143fffc4 	addi	r16,r2,-1
100052f0:	043ea30e 	bge	zero,r16,10004d80 <__alt_data_end+0xf8004d80>
100052f4:	04400404 	movi	r17,16
100052f8:	d8801f17 	ldw	r2,124(sp)
100052fc:	8c00880e 	bge	r17,r16,10005520 <___vfprintf_internal_r+0x11b4>
10005300:	01440074 	movhi	r5,4097
10005304:	294f6d84 	addi	r5,r5,15798
10005308:	d9402c15 	stw	r5,176(sp)
1000530c:	058001c4 	movi	r22,7
10005310:	dcc02d17 	ldw	r19,180(sp)
10005314:	00000306 	br	10005324 <___vfprintf_internal_r+0xfb8>
10005318:	42000204 	addi	r8,r8,8
1000531c:	843ffc04 	addi	r16,r16,-16
10005320:	8c00820e 	bge	r17,r16,1000552c <___vfprintf_internal_r+0x11c0>
10005324:	18c00404 	addi	r3,r3,16
10005328:	10800044 	addi	r2,r2,1
1000532c:	45000015 	stw	r20,0(r8)
10005330:	44400115 	stw	r17,4(r8)
10005334:	d8c02015 	stw	r3,128(sp)
10005338:	d8801f15 	stw	r2,124(sp)
1000533c:	b0bff60e 	bge	r22,r2,10005318 <__alt_data_end+0xf8005318>
10005340:	d9801e04 	addi	r6,sp,120
10005344:	b80b883a 	mov	r5,r23
10005348:	9809883a 	mov	r4,r19
1000534c:	000ba240 	call	1000ba24 <__sprint_r>
10005350:	103d0a1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005354:	d8c02017 	ldw	r3,128(sp)
10005358:	d8801f17 	ldw	r2,124(sp)
1000535c:	da000404 	addi	r8,sp,16
10005360:	003fee06 	br	1000531c <__alt_data_end+0xf800531c>
10005364:	d9403117 	ldw	r5,196(sp)
10005368:	d8802917 	ldw	r2,164(sp)
1000536c:	28adc83a 	sub	r22,r5,r2
10005370:	05be410e 	bge	zero,r22,10004c78 <__alt_data_end+0xf8004c78>
10005374:	07000404 	movi	fp,16
10005378:	d8801f17 	ldw	r2,124(sp)
1000537c:	e5838f0e 	bge	fp,r22,100061bc <___vfprintf_internal_r+0x1e50>
10005380:	01440074 	movhi	r5,4097
10005384:	294f6d84 	addi	r5,r5,15798
10005388:	dc403015 	stw	r17,192(sp)
1000538c:	d9402c15 	stw	r5,176(sp)
10005390:	b023883a 	mov	r17,r22
10005394:	04c001c4 	movi	r19,7
10005398:	a82d883a 	mov	r22,r21
1000539c:	902b883a 	mov	r21,r18
100053a0:	8025883a 	mov	r18,r16
100053a4:	dc002d17 	ldw	r16,180(sp)
100053a8:	00000306 	br	100053b8 <___vfprintf_internal_r+0x104c>
100053ac:	8c7ffc04 	addi	r17,r17,-16
100053b0:	42000204 	addi	r8,r8,8
100053b4:	e440110e 	bge	fp,r17,100053fc <___vfprintf_internal_r+0x1090>
100053b8:	18c00404 	addi	r3,r3,16
100053bc:	10800044 	addi	r2,r2,1
100053c0:	45000015 	stw	r20,0(r8)
100053c4:	47000115 	stw	fp,4(r8)
100053c8:	d8c02015 	stw	r3,128(sp)
100053cc:	d8801f15 	stw	r2,124(sp)
100053d0:	98bff60e 	bge	r19,r2,100053ac <__alt_data_end+0xf80053ac>
100053d4:	d9801e04 	addi	r6,sp,120
100053d8:	b80b883a 	mov	r5,r23
100053dc:	8009883a 	mov	r4,r16
100053e0:	000ba240 	call	1000ba24 <__sprint_r>
100053e4:	103ce51e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
100053e8:	8c7ffc04 	addi	r17,r17,-16
100053ec:	d8c02017 	ldw	r3,128(sp)
100053f0:	d8801f17 	ldw	r2,124(sp)
100053f4:	da000404 	addi	r8,sp,16
100053f8:	e47fef16 	blt	fp,r17,100053b8 <__alt_data_end+0xf80053b8>
100053fc:	9021883a 	mov	r16,r18
10005400:	a825883a 	mov	r18,r21
10005404:	b02b883a 	mov	r21,r22
10005408:	882d883a 	mov	r22,r17
1000540c:	dc403017 	ldw	r17,192(sp)
10005410:	d9002c17 	ldw	r4,176(sp)
10005414:	1d87883a 	add	r3,r3,r22
10005418:	10800044 	addi	r2,r2,1
1000541c:	41000015 	stw	r4,0(r8)
10005420:	45800115 	stw	r22,4(r8)
10005424:	d8c02015 	stw	r3,128(sp)
10005428:	d8801f15 	stw	r2,124(sp)
1000542c:	010001c4 	movi	r4,7
10005430:	20818e16 	blt	r4,r2,10005a6c <___vfprintf_internal_r+0x1700>
10005434:	42000204 	addi	r8,r8,8
10005438:	003e0f06 	br	10004c78 <__alt_data_end+0xf8004c78>
1000543c:	d9403317 	ldw	r5,204(sp)
10005440:	00800044 	movi	r2,1
10005444:	18c00044 	addi	r3,r3,1
10005448:	1141530e 	bge	r2,r5,10005998 <___vfprintf_internal_r+0x162c>
1000544c:	dc401f17 	ldw	r17,124(sp)
10005450:	00800044 	movi	r2,1
10005454:	40800115 	stw	r2,4(r8)
10005458:	8c400044 	addi	r17,r17,1
1000545c:	44000015 	stw	r16,0(r8)
10005460:	d8c02015 	stw	r3,128(sp)
10005464:	dc401f15 	stw	r17,124(sp)
10005468:	008001c4 	movi	r2,7
1000546c:	14416b16 	blt	r2,r17,10005a1c <___vfprintf_internal_r+0x16b0>
10005470:	42000204 	addi	r8,r8,8
10005474:	d8803717 	ldw	r2,220(sp)
10005478:	d9003417 	ldw	r4,208(sp)
1000547c:	8c400044 	addi	r17,r17,1
10005480:	10c7883a 	add	r3,r2,r3
10005484:	40800115 	stw	r2,4(r8)
10005488:	41000015 	stw	r4,0(r8)
1000548c:	d8c02015 	stw	r3,128(sp)
10005490:	dc401f15 	stw	r17,124(sp)
10005494:	008001c4 	movi	r2,7
10005498:	14416916 	blt	r2,r17,10005a40 <___vfprintf_internal_r+0x16d4>
1000549c:	45800204 	addi	r22,r8,8
100054a0:	d9003617 	ldw	r4,216(sp)
100054a4:	d9403817 	ldw	r5,224(sp)
100054a8:	000d883a 	mov	r6,zero
100054ac:	000f883a 	mov	r7,zero
100054b0:	d8c03c15 	stw	r3,240(sp)
100054b4:	000f7d00 	call	1000f7d0 <__eqdf2>
100054b8:	d8c03c17 	ldw	r3,240(sp)
100054bc:	1000bc26 	beq	r2,zero,100057b0 <___vfprintf_internal_r+0x1444>
100054c0:	d9403317 	ldw	r5,204(sp)
100054c4:	84000044 	addi	r16,r16,1
100054c8:	8c400044 	addi	r17,r17,1
100054cc:	28bfffc4 	addi	r2,r5,-1
100054d0:	1887883a 	add	r3,r3,r2
100054d4:	b0800115 	stw	r2,4(r22)
100054d8:	b4000015 	stw	r16,0(r22)
100054dc:	d8c02015 	stw	r3,128(sp)
100054e0:	dc401f15 	stw	r17,124(sp)
100054e4:	008001c4 	movi	r2,7
100054e8:	14414316 	blt	r2,r17,100059f8 <___vfprintf_internal_r+0x168c>
100054ec:	b5800204 	addi	r22,r22,8
100054f0:	d9003a17 	ldw	r4,232(sp)
100054f4:	df0022c4 	addi	fp,sp,139
100054f8:	8c400044 	addi	r17,r17,1
100054fc:	20c7883a 	add	r3,r4,r3
10005500:	b7000015 	stw	fp,0(r22)
10005504:	b1000115 	stw	r4,4(r22)
10005508:	d8c02015 	stw	r3,128(sp)
1000550c:	dc401f15 	stw	r17,124(sp)
10005510:	008001c4 	movi	r2,7
10005514:	14400e16 	blt	r2,r17,10005550 <___vfprintf_internal_r+0x11e4>
10005518:	b2000204 	addi	r8,r22,8
1000551c:	003e1806 	br	10004d80 <__alt_data_end+0xf8004d80>
10005520:	01040074 	movhi	r4,4097
10005524:	210f6d84 	addi	r4,r4,15798
10005528:	d9002c15 	stw	r4,176(sp)
1000552c:	d9002c17 	ldw	r4,176(sp)
10005530:	1c07883a 	add	r3,r3,r16
10005534:	44000115 	stw	r16,4(r8)
10005538:	41000015 	stw	r4,0(r8)
1000553c:	10800044 	addi	r2,r2,1
10005540:	d8c02015 	stw	r3,128(sp)
10005544:	d8801f15 	stw	r2,124(sp)
10005548:	010001c4 	movi	r4,7
1000554c:	20be0b0e 	bge	r4,r2,10004d7c <__alt_data_end+0xf8004d7c>
10005550:	d9002d17 	ldw	r4,180(sp)
10005554:	d9801e04 	addi	r6,sp,120
10005558:	b80b883a 	mov	r5,r23
1000555c:	000ba240 	call	1000ba24 <__sprint_r>
10005560:	103c861e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005564:	d8c02017 	ldw	r3,128(sp)
10005568:	da000404 	addi	r8,sp,16
1000556c:	003e0406 	br	10004d80 <__alt_data_end+0xf8004d80>
10005570:	d9002d17 	ldw	r4,180(sp)
10005574:	d9801e04 	addi	r6,sp,120
10005578:	b80b883a 	mov	r5,r23
1000557c:	000ba240 	call	1000ba24 <__sprint_r>
10005580:	103e3b26 	beq	r2,zero,10004e70 <__alt_data_end+0xf8004e70>
10005584:	003c7d06 	br	1000477c <__alt_data_end+0xf800477c>
10005588:	d9002d17 	ldw	r4,180(sp)
1000558c:	d9801e04 	addi	r6,sp,120
10005590:	b80b883a 	mov	r5,r23
10005594:	000ba240 	call	1000ba24 <__sprint_r>
10005598:	103c781e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
1000559c:	d8c02017 	ldw	r3,128(sp)
100055a0:	da000404 	addi	r8,sp,16
100055a4:	003de906 	br	10004d4c <__alt_data_end+0xf8004d4c>
100055a8:	d9002d17 	ldw	r4,180(sp)
100055ac:	d9801e04 	addi	r6,sp,120
100055b0:	b80b883a 	mov	r5,r23
100055b4:	000ba240 	call	1000ba24 <__sprint_r>
100055b8:	103c701e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
100055bc:	d8c02017 	ldw	r3,128(sp)
100055c0:	da000404 	addi	r8,sp,16
100055c4:	003d9b06 	br	10004c34 <__alt_data_end+0xf8004c34>
100055c8:	d9002d17 	ldw	r4,180(sp)
100055cc:	d9801e04 	addi	r6,sp,120
100055d0:	b80b883a 	mov	r5,r23
100055d4:	000ba240 	call	1000ba24 <__sprint_r>
100055d8:	103c681e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
100055dc:	d8c02017 	ldw	r3,128(sp)
100055e0:	da000404 	addi	r8,sp,16
100055e4:	003da106 	br	10004c6c <__alt_data_end+0xf8004c6c>
100055e8:	d9402a17 	ldw	r5,168(sp)
100055ec:	d8002785 	stb	zero,158(sp)
100055f0:	283f0616 	blt	r5,zero,1000520c <__alt_data_end+0xf800520c>
100055f4:	00ffdfc4 	movi	r3,-129
100055f8:	9d84b03a 	or	r2,r19,r22
100055fc:	90e4703a 	and	r18,r18,r3
10005600:	103c3b26 	beq	r2,zero,100046f0 <__alt_data_end+0xf80046f0>
10005604:	0039883a 	mov	fp,zero
10005608:	003e5806 	br	10004f6c <__alt_data_end+0xf8004f6c>
1000560c:	9080040c 	andi	r2,r18,16
10005610:	1001b326 	beq	r2,zero,10005ce0 <___vfprintf_internal_r+0x1974>
10005614:	d8c02e17 	ldw	r3,184(sp)
10005618:	d9002a17 	ldw	r4,168(sp)
1000561c:	d8002785 	stb	zero,158(sp)
10005620:	18800104 	addi	r2,r3,4
10005624:	1cc00017 	ldw	r19,0(r3)
10005628:	002d883a 	mov	r22,zero
1000562c:	2001b516 	blt	r4,zero,10005d04 <___vfprintf_internal_r+0x1998>
10005630:	00ffdfc4 	movi	r3,-129
10005634:	d8802e15 	stw	r2,184(sp)
10005638:	90e4703a 	and	r18,r18,r3
1000563c:	983d0526 	beq	r19,zero,10004a54 <__alt_data_end+0xf8004a54>
10005640:	0039883a 	mov	fp,zero
10005644:	003d0806 	br	10004a68 <__alt_data_end+0xf8004a68>
10005648:	dc402617 	ldw	r17,152(sp)
1000564c:	0441d30e 	bge	zero,r17,10005d9c <___vfprintf_internal_r+0x1a30>
10005650:	dc403217 	ldw	r17,200(sp)
10005654:	d8803317 	ldw	r2,204(sp)
10005658:	1440010e 	bge	r2,r17,10005660 <___vfprintf_internal_r+0x12f4>
1000565c:	1023883a 	mov	r17,r2
10005660:	04400a0e 	bge	zero,r17,1000568c <___vfprintf_internal_r+0x1320>
10005664:	d8801f17 	ldw	r2,124(sp)
10005668:	1c47883a 	add	r3,r3,r17
1000566c:	44000015 	stw	r16,0(r8)
10005670:	10800044 	addi	r2,r2,1
10005674:	44400115 	stw	r17,4(r8)
10005678:	d8c02015 	stw	r3,128(sp)
1000567c:	d8801f15 	stw	r2,124(sp)
10005680:	010001c4 	movi	r4,7
10005684:	20826516 	blt	r4,r2,1000601c <___vfprintf_internal_r+0x1cb0>
10005688:	42000204 	addi	r8,r8,8
1000568c:	88026116 	blt	r17,zero,10006014 <___vfprintf_internal_r+0x1ca8>
10005690:	d9003217 	ldw	r4,200(sp)
10005694:	2463c83a 	sub	r17,r4,r17
10005698:	04407b0e 	bge	zero,r17,10005888 <___vfprintf_internal_r+0x151c>
1000569c:	05800404 	movi	r22,16
100056a0:	d8801f17 	ldw	r2,124(sp)
100056a4:	b4419d0e 	bge	r22,r17,10005d1c <___vfprintf_internal_r+0x19b0>
100056a8:	01040074 	movhi	r4,4097
100056ac:	210f6d84 	addi	r4,r4,15798
100056b0:	d9002c15 	stw	r4,176(sp)
100056b4:	070001c4 	movi	fp,7
100056b8:	dcc02d17 	ldw	r19,180(sp)
100056bc:	00000306 	br	100056cc <___vfprintf_internal_r+0x1360>
100056c0:	42000204 	addi	r8,r8,8
100056c4:	8c7ffc04 	addi	r17,r17,-16
100056c8:	b441970e 	bge	r22,r17,10005d28 <___vfprintf_internal_r+0x19bc>
100056cc:	18c00404 	addi	r3,r3,16
100056d0:	10800044 	addi	r2,r2,1
100056d4:	45000015 	stw	r20,0(r8)
100056d8:	45800115 	stw	r22,4(r8)
100056dc:	d8c02015 	stw	r3,128(sp)
100056e0:	d8801f15 	stw	r2,124(sp)
100056e4:	e0bff60e 	bge	fp,r2,100056c0 <__alt_data_end+0xf80056c0>
100056e8:	d9801e04 	addi	r6,sp,120
100056ec:	b80b883a 	mov	r5,r23
100056f0:	9809883a 	mov	r4,r19
100056f4:	000ba240 	call	1000ba24 <__sprint_r>
100056f8:	103c201e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
100056fc:	d8c02017 	ldw	r3,128(sp)
10005700:	d8801f17 	ldw	r2,124(sp)
10005704:	da000404 	addi	r8,sp,16
10005708:	003fee06 	br	100056c4 <__alt_data_end+0xf80056c4>
1000570c:	d9002d17 	ldw	r4,180(sp)
10005710:	d9801e04 	addi	r6,sp,120
10005714:	b80b883a 	mov	r5,r23
10005718:	000ba240 	call	1000ba24 <__sprint_r>
1000571c:	103c171e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005720:	d8c02017 	ldw	r3,128(sp)
10005724:	df002787 	ldb	fp,158(sp)
10005728:	da000404 	addi	r8,sp,16
1000572c:	003d3406 	br	10004c00 <__alt_data_end+0xf8004c00>
10005730:	9080040c 	andi	r2,r18,16
10005734:	10016126 	beq	r2,zero,10005cbc <___vfprintf_internal_r+0x1950>
10005738:	d9402e17 	ldw	r5,184(sp)
1000573c:	2cc00017 	ldw	r19,0(r5)
10005740:	29400104 	addi	r5,r5,4
10005744:	d9402e15 	stw	r5,184(sp)
10005748:	982dd7fa 	srai	r22,r19,31
1000574c:	b005883a 	mov	r2,r22
10005750:	003c5a06 	br	100048bc <__alt_data_end+0xf80048bc>
10005754:	9080040c 	andi	r2,r18,16
10005758:	10003526 	beq	r2,zero,10005830 <___vfprintf_internal_r+0x14c4>
1000575c:	d8c02e17 	ldw	r3,184(sp)
10005760:	d9002a17 	ldw	r4,168(sp)
10005764:	d8002785 	stb	zero,158(sp)
10005768:	18800104 	addi	r2,r3,4
1000576c:	1cc00017 	ldw	r19,0(r3)
10005770:	002d883a 	mov	r22,zero
10005774:	20003716 	blt	r4,zero,10005854 <___vfprintf_internal_r+0x14e8>
10005778:	00ffdfc4 	movi	r3,-129
1000577c:	d8802e15 	stw	r2,184(sp)
10005780:	90e4703a 	and	r18,r18,r3
10005784:	0039883a 	mov	fp,zero
10005788:	983dd426 	beq	r19,zero,10004edc <__alt_data_end+0xf8004edc>
1000578c:	00800244 	movi	r2,9
10005790:	14fc5336 	bltu	r2,r19,100048e0 <__alt_data_end+0xf80048e0>
10005794:	d8c02817 	ldw	r3,160(sp)
10005798:	dc001dc4 	addi	r16,sp,119
1000579c:	9cc00c04 	addi	r19,r19,48
100057a0:	1c07c83a 	sub	r3,r3,r16
100057a4:	dcc01dc5 	stb	r19,119(sp)
100057a8:	d8c02b15 	stw	r3,172(sp)
100057ac:	003cc606 	br	10004ac8 <__alt_data_end+0xf8004ac8>
100057b0:	d8803317 	ldw	r2,204(sp)
100057b4:	143fffc4 	addi	r16,r2,-1
100057b8:	043f4d0e 	bge	zero,r16,100054f0 <__alt_data_end+0xf80054f0>
100057bc:	07000404 	movi	fp,16
100057c0:	e400810e 	bge	fp,r16,100059c8 <___vfprintf_internal_r+0x165c>
100057c4:	01440074 	movhi	r5,4097
100057c8:	294f6d84 	addi	r5,r5,15798
100057cc:	d9402c15 	stw	r5,176(sp)
100057d0:	01c001c4 	movi	r7,7
100057d4:	dcc02d17 	ldw	r19,180(sp)
100057d8:	00000306 	br	100057e8 <___vfprintf_internal_r+0x147c>
100057dc:	b5800204 	addi	r22,r22,8
100057e0:	843ffc04 	addi	r16,r16,-16
100057e4:	e4007b0e 	bge	fp,r16,100059d4 <___vfprintf_internal_r+0x1668>
100057e8:	18c00404 	addi	r3,r3,16
100057ec:	8c400044 	addi	r17,r17,1
100057f0:	b5000015 	stw	r20,0(r22)
100057f4:	b7000115 	stw	fp,4(r22)
100057f8:	d8c02015 	stw	r3,128(sp)
100057fc:	dc401f15 	stw	r17,124(sp)
10005800:	3c7ff60e 	bge	r7,r17,100057dc <__alt_data_end+0xf80057dc>
10005804:	d9801e04 	addi	r6,sp,120
10005808:	b80b883a 	mov	r5,r23
1000580c:	9809883a 	mov	r4,r19
10005810:	d9c03c15 	stw	r7,240(sp)
10005814:	000ba240 	call	1000ba24 <__sprint_r>
10005818:	d9c03c17 	ldw	r7,240(sp)
1000581c:	103bd71e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005820:	d8c02017 	ldw	r3,128(sp)
10005824:	dc401f17 	ldw	r17,124(sp)
10005828:	dd800404 	addi	r22,sp,16
1000582c:	003fec06 	br	100057e0 <__alt_data_end+0xf80057e0>
10005830:	9080100c 	andi	r2,r18,64
10005834:	d8002785 	stb	zero,158(sp)
10005838:	10010e26 	beq	r2,zero,10005c74 <___vfprintf_internal_r+0x1908>
1000583c:	d9402e17 	ldw	r5,184(sp)
10005840:	d8c02a17 	ldw	r3,168(sp)
10005844:	002d883a 	mov	r22,zero
10005848:	28800104 	addi	r2,r5,4
1000584c:	2cc0000b 	ldhu	r19,0(r5)
10005850:	183fc90e 	bge	r3,zero,10005778 <__alt_data_end+0xf8005778>
10005854:	d8802e15 	stw	r2,184(sp)
10005858:	0039883a 	mov	fp,zero
1000585c:	9d84b03a 	or	r2,r19,r22
10005860:	103c1e1e 	bne	r2,zero,100048dc <__alt_data_end+0xf80048dc>
10005864:	00800044 	movi	r2,1
10005868:	003e6c06 	br	1000521c <__alt_data_end+0xf800521c>
1000586c:	d9002d17 	ldw	r4,180(sp)
10005870:	d9801e04 	addi	r6,sp,120
10005874:	b80b883a 	mov	r5,r23
10005878:	000ba240 	call	1000ba24 <__sprint_r>
1000587c:	103bbf1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005880:	d8c02017 	ldw	r3,128(sp)
10005884:	da000404 	addi	r8,sp,16
10005888:	d9003217 	ldw	r4,200(sp)
1000588c:	d8802617 	ldw	r2,152(sp)
10005890:	d9403317 	ldw	r5,204(sp)
10005894:	8123883a 	add	r17,r16,r4
10005898:	11400216 	blt	r2,r5,100058a4 <___vfprintf_internal_r+0x1538>
1000589c:	9100004c 	andi	r4,r18,1
100058a0:	20000d26 	beq	r4,zero,100058d8 <___vfprintf_internal_r+0x156c>
100058a4:	d9003717 	ldw	r4,220(sp)
100058a8:	d9403417 	ldw	r5,208(sp)
100058ac:	1907883a 	add	r3,r3,r4
100058b0:	d9001f17 	ldw	r4,124(sp)
100058b4:	41400015 	stw	r5,0(r8)
100058b8:	d9403717 	ldw	r5,220(sp)
100058bc:	21000044 	addi	r4,r4,1
100058c0:	d8c02015 	stw	r3,128(sp)
100058c4:	41400115 	stw	r5,4(r8)
100058c8:	d9001f15 	stw	r4,124(sp)
100058cc:	014001c4 	movi	r5,7
100058d0:	2901e816 	blt	r5,r4,10006074 <___vfprintf_internal_r+0x1d08>
100058d4:	42000204 	addi	r8,r8,8
100058d8:	d9003317 	ldw	r4,204(sp)
100058dc:	8121883a 	add	r16,r16,r4
100058e0:	2085c83a 	sub	r2,r4,r2
100058e4:	8461c83a 	sub	r16,r16,r17
100058e8:	1400010e 	bge	r2,r16,100058f0 <___vfprintf_internal_r+0x1584>
100058ec:	1021883a 	mov	r16,r2
100058f0:	04000a0e 	bge	zero,r16,1000591c <___vfprintf_internal_r+0x15b0>
100058f4:	d9001f17 	ldw	r4,124(sp)
100058f8:	1c07883a 	add	r3,r3,r16
100058fc:	44400015 	stw	r17,0(r8)
10005900:	21000044 	addi	r4,r4,1
10005904:	44000115 	stw	r16,4(r8)
10005908:	d8c02015 	stw	r3,128(sp)
1000590c:	d9001f15 	stw	r4,124(sp)
10005910:	014001c4 	movi	r5,7
10005914:	2901fb16 	blt	r5,r4,10006104 <___vfprintf_internal_r+0x1d98>
10005918:	42000204 	addi	r8,r8,8
1000591c:	8001f716 	blt	r16,zero,100060fc <___vfprintf_internal_r+0x1d90>
10005920:	1421c83a 	sub	r16,r2,r16
10005924:	043d160e 	bge	zero,r16,10004d80 <__alt_data_end+0xf8004d80>
10005928:	04400404 	movi	r17,16
1000592c:	d8801f17 	ldw	r2,124(sp)
10005930:	8c3efb0e 	bge	r17,r16,10005520 <__alt_data_end+0xf8005520>
10005934:	01440074 	movhi	r5,4097
10005938:	294f6d84 	addi	r5,r5,15798
1000593c:	d9402c15 	stw	r5,176(sp)
10005940:	058001c4 	movi	r22,7
10005944:	dcc02d17 	ldw	r19,180(sp)
10005948:	00000306 	br	10005958 <___vfprintf_internal_r+0x15ec>
1000594c:	42000204 	addi	r8,r8,8
10005950:	843ffc04 	addi	r16,r16,-16
10005954:	8c3ef50e 	bge	r17,r16,1000552c <__alt_data_end+0xf800552c>
10005958:	18c00404 	addi	r3,r3,16
1000595c:	10800044 	addi	r2,r2,1
10005960:	45000015 	stw	r20,0(r8)
10005964:	44400115 	stw	r17,4(r8)
10005968:	d8c02015 	stw	r3,128(sp)
1000596c:	d8801f15 	stw	r2,124(sp)
10005970:	b0bff60e 	bge	r22,r2,1000594c <__alt_data_end+0xf800594c>
10005974:	d9801e04 	addi	r6,sp,120
10005978:	b80b883a 	mov	r5,r23
1000597c:	9809883a 	mov	r4,r19
10005980:	000ba240 	call	1000ba24 <__sprint_r>
10005984:	103b7d1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005988:	d8c02017 	ldw	r3,128(sp)
1000598c:	d8801f17 	ldw	r2,124(sp)
10005990:	da000404 	addi	r8,sp,16
10005994:	003fee06 	br	10005950 <__alt_data_end+0xf8005950>
10005998:	9088703a 	and	r4,r18,r2
1000599c:	203eab1e 	bne	r4,zero,1000544c <__alt_data_end+0xf800544c>
100059a0:	dc401f17 	ldw	r17,124(sp)
100059a4:	40800115 	stw	r2,4(r8)
100059a8:	44000015 	stw	r16,0(r8)
100059ac:	8c400044 	addi	r17,r17,1
100059b0:	d8c02015 	stw	r3,128(sp)
100059b4:	dc401f15 	stw	r17,124(sp)
100059b8:	008001c4 	movi	r2,7
100059bc:	14400e16 	blt	r2,r17,100059f8 <___vfprintf_internal_r+0x168c>
100059c0:	45800204 	addi	r22,r8,8
100059c4:	003eca06 	br	100054f0 <__alt_data_end+0xf80054f0>
100059c8:	01040074 	movhi	r4,4097
100059cc:	210f6d84 	addi	r4,r4,15798
100059d0:	d9002c15 	stw	r4,176(sp)
100059d4:	d8802c17 	ldw	r2,176(sp)
100059d8:	1c07883a 	add	r3,r3,r16
100059dc:	8c400044 	addi	r17,r17,1
100059e0:	b0800015 	stw	r2,0(r22)
100059e4:	b4000115 	stw	r16,4(r22)
100059e8:	d8c02015 	stw	r3,128(sp)
100059ec:	dc401f15 	stw	r17,124(sp)
100059f0:	008001c4 	movi	r2,7
100059f4:	147ebd0e 	bge	r2,r17,100054ec <__alt_data_end+0xf80054ec>
100059f8:	d9002d17 	ldw	r4,180(sp)
100059fc:	d9801e04 	addi	r6,sp,120
10005a00:	b80b883a 	mov	r5,r23
10005a04:	000ba240 	call	1000ba24 <__sprint_r>
10005a08:	103b5c1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005a0c:	d8c02017 	ldw	r3,128(sp)
10005a10:	dc401f17 	ldw	r17,124(sp)
10005a14:	dd800404 	addi	r22,sp,16
10005a18:	003eb506 	br	100054f0 <__alt_data_end+0xf80054f0>
10005a1c:	d9002d17 	ldw	r4,180(sp)
10005a20:	d9801e04 	addi	r6,sp,120
10005a24:	b80b883a 	mov	r5,r23
10005a28:	000ba240 	call	1000ba24 <__sprint_r>
10005a2c:	103b531e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005a30:	d8c02017 	ldw	r3,128(sp)
10005a34:	dc401f17 	ldw	r17,124(sp)
10005a38:	da000404 	addi	r8,sp,16
10005a3c:	003e8d06 	br	10005474 <__alt_data_end+0xf8005474>
10005a40:	d9002d17 	ldw	r4,180(sp)
10005a44:	d9801e04 	addi	r6,sp,120
10005a48:	b80b883a 	mov	r5,r23
10005a4c:	000ba240 	call	1000ba24 <__sprint_r>
10005a50:	103b4a1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005a54:	d8c02017 	ldw	r3,128(sp)
10005a58:	dc401f17 	ldw	r17,124(sp)
10005a5c:	dd800404 	addi	r22,sp,16
10005a60:	003e8f06 	br	100054a0 <__alt_data_end+0xf80054a0>
10005a64:	0027883a 	mov	r19,zero
10005a68:	003f4a06 	br	10005794 <__alt_data_end+0xf8005794>
10005a6c:	d9002d17 	ldw	r4,180(sp)
10005a70:	d9801e04 	addi	r6,sp,120
10005a74:	b80b883a 	mov	r5,r23
10005a78:	000ba240 	call	1000ba24 <__sprint_r>
10005a7c:	103b3f1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005a80:	d8c02017 	ldw	r3,128(sp)
10005a84:	da000404 	addi	r8,sp,16
10005a88:	003c7b06 	br	10004c78 <__alt_data_end+0xf8004c78>
10005a8c:	d9402a17 	ldw	r5,168(sp)
10005a90:	04e7c83a 	sub	r19,zero,r19
10005a94:	07000b44 	movi	fp,45
10005a98:	9804c03a 	cmpne	r2,r19,zero
10005a9c:	05adc83a 	sub	r22,zero,r22
10005aa0:	df002785 	stb	fp,158(sp)
10005aa4:	b0adc83a 	sub	r22,r22,r2
10005aa8:	28017b16 	blt	r5,zero,10006098 <___vfprintf_internal_r+0x1d2c>
10005aac:	00bfdfc4 	movi	r2,-129
10005ab0:	90a4703a 	and	r18,r18,r2
10005ab4:	003b8906 	br	100048dc <__alt_data_end+0xf80048dc>
10005ab8:	d9003617 	ldw	r4,216(sp)
10005abc:	d9403817 	ldw	r5,224(sp)
10005ac0:	da003d15 	stw	r8,244(sp)
10005ac4:	000b6480 	call	1000b648 <__fpclassifyd>
10005ac8:	da003d17 	ldw	r8,244(sp)
10005acc:	1000f026 	beq	r2,zero,10005e90 <___vfprintf_internal_r+0x1b24>
10005ad0:	d9002a17 	ldw	r4,168(sp)
10005ad4:	05bff7c4 	movi	r22,-33
10005ad8:	00bfffc4 	movi	r2,-1
10005adc:	8dac703a 	and	r22,r17,r22
10005ae0:	20820026 	beq	r4,r2,100062e4 <___vfprintf_internal_r+0x1f78>
10005ae4:	008011c4 	movi	r2,71
10005ae8:	b081f726 	beq	r22,r2,100062c8 <___vfprintf_internal_r+0x1f5c>
10005aec:	d9003817 	ldw	r4,224(sp)
10005af0:	90c04014 	ori	r3,r18,256
10005af4:	d8c02c15 	stw	r3,176(sp)
10005af8:	20021516 	blt	r4,zero,10006350 <___vfprintf_internal_r+0x1fe4>
10005afc:	dcc03817 	ldw	r19,224(sp)
10005b00:	d8002905 	stb	zero,164(sp)
10005b04:	00801984 	movi	r2,102
10005b08:	8881f926 	beq	r17,r2,100062f0 <___vfprintf_internal_r+0x1f84>
10005b0c:	00801184 	movi	r2,70
10005b10:	88821c26 	beq	r17,r2,10006384 <___vfprintf_internal_r+0x2018>
10005b14:	00801144 	movi	r2,69
10005b18:	b081ef26 	beq	r22,r2,100062d8 <___vfprintf_internal_r+0x1f6c>
10005b1c:	d8c02a17 	ldw	r3,168(sp)
10005b20:	d8802104 	addi	r2,sp,132
10005b24:	d8800315 	stw	r2,12(sp)
10005b28:	d9403617 	ldw	r5,216(sp)
10005b2c:	d8802504 	addi	r2,sp,148
10005b30:	d9002d17 	ldw	r4,180(sp)
10005b34:	d8800215 	stw	r2,8(sp)
10005b38:	d8802604 	addi	r2,sp,152
10005b3c:	d8c00015 	stw	r3,0(sp)
10005b40:	d8800115 	stw	r2,4(sp)
10005b44:	01c00084 	movi	r7,2
10005b48:	980d883a 	mov	r6,r19
10005b4c:	d8c03c15 	stw	r3,240(sp)
10005b50:	da003d15 	stw	r8,244(sp)
10005b54:	0006a9c0 	call	10006a9c <_dtoa_r>
10005b58:	1021883a 	mov	r16,r2
10005b5c:	008019c4 	movi	r2,103
10005b60:	d8c03c17 	ldw	r3,240(sp)
10005b64:	da003d17 	ldw	r8,244(sp)
10005b68:	88817126 	beq	r17,r2,10006130 <___vfprintf_internal_r+0x1dc4>
10005b6c:	008011c4 	movi	r2,71
10005b70:	88829126 	beq	r17,r2,100065b8 <___vfprintf_internal_r+0x224c>
10005b74:	80f9883a 	add	fp,r16,r3
10005b78:	d9003617 	ldw	r4,216(sp)
10005b7c:	000d883a 	mov	r6,zero
10005b80:	000f883a 	mov	r7,zero
10005b84:	980b883a 	mov	r5,r19
10005b88:	da003d15 	stw	r8,244(sp)
10005b8c:	000f7d00 	call	1000f7d0 <__eqdf2>
10005b90:	da003d17 	ldw	r8,244(sp)
10005b94:	10018d26 	beq	r2,zero,100061cc <___vfprintf_internal_r+0x1e60>
10005b98:	d8802117 	ldw	r2,132(sp)
10005b9c:	1700062e 	bgeu	r2,fp,10005bb8 <___vfprintf_internal_r+0x184c>
10005ba0:	01000c04 	movi	r4,48
10005ba4:	10c00044 	addi	r3,r2,1
10005ba8:	d8c02115 	stw	r3,132(sp)
10005bac:	11000005 	stb	r4,0(r2)
10005bb0:	d8802117 	ldw	r2,132(sp)
10005bb4:	173ffb36 	bltu	r2,fp,10005ba4 <__alt_data_end+0xf8005ba4>
10005bb8:	1405c83a 	sub	r2,r2,r16
10005bbc:	d8803315 	stw	r2,204(sp)
10005bc0:	008011c4 	movi	r2,71
10005bc4:	b0817626 	beq	r22,r2,100061a0 <___vfprintf_internal_r+0x1e34>
10005bc8:	00801944 	movi	r2,101
10005bcc:	1442800e 	bge	r2,r17,100065d0 <___vfprintf_internal_r+0x2264>
10005bd0:	d8c02617 	ldw	r3,152(sp)
10005bd4:	00801984 	movi	r2,102
10005bd8:	d8c03215 	stw	r3,200(sp)
10005bdc:	8881fe26 	beq	r17,r2,100063d8 <___vfprintf_internal_r+0x206c>
10005be0:	d8c03217 	ldw	r3,200(sp)
10005be4:	d9003317 	ldw	r4,204(sp)
10005be8:	1901dd16 	blt	r3,r4,10006360 <___vfprintf_internal_r+0x1ff4>
10005bec:	9480004c 	andi	r18,r18,1
10005bf0:	90022b1e 	bne	r18,zero,100064a0 <___vfprintf_internal_r+0x2134>
10005bf4:	1805883a 	mov	r2,r3
10005bf8:	18028316 	blt	r3,zero,10006608 <___vfprintf_internal_r+0x229c>
10005bfc:	d8c03217 	ldw	r3,200(sp)
10005c00:	044019c4 	movi	r17,103
10005c04:	d8c02b15 	stw	r3,172(sp)
10005c08:	df002907 	ldb	fp,164(sp)
10005c0c:	e001531e 	bne	fp,zero,1000615c <___vfprintf_internal_r+0x1df0>
10005c10:	df002783 	ldbu	fp,158(sp)
10005c14:	d8802915 	stw	r2,164(sp)
10005c18:	dc802c17 	ldw	r18,176(sp)
10005c1c:	d8002a15 	stw	zero,168(sp)
10005c20:	003baf06 	br	10004ae0 <__alt_data_end+0xf8004ae0>
10005c24:	d8c02e17 	ldw	r3,184(sp)
10005c28:	d9002e17 	ldw	r4,184(sp)
10005c2c:	d9402e17 	ldw	r5,184(sp)
10005c30:	18c00017 	ldw	r3,0(r3)
10005c34:	21000117 	ldw	r4,4(r4)
10005c38:	29400204 	addi	r5,r5,8
10005c3c:	d8c03615 	stw	r3,216(sp)
10005c40:	d9003815 	stw	r4,224(sp)
10005c44:	d9402e15 	stw	r5,184(sp)
10005c48:	003b5006 	br	1000498c <__alt_data_end+0xf800498c>
10005c4c:	ac400007 	ldb	r17,0(r21)
10005c50:	003a2806 	br	100044f4 <__alt_data_end+0xf80044f4>
10005c54:	9080100c 	andi	r2,r18,64
10005c58:	1000a826 	beq	r2,zero,10005efc <___vfprintf_internal_r+0x1b90>
10005c5c:	d8c02e17 	ldw	r3,184(sp)
10005c60:	002d883a 	mov	r22,zero
10005c64:	1cc0000b 	ldhu	r19,0(r3)
10005c68:	18c00104 	addi	r3,r3,4
10005c6c:	d8c02e15 	stw	r3,184(sp)
10005c70:	003caf06 	br	10004f30 <__alt_data_end+0xf8004f30>
10005c74:	d9002e17 	ldw	r4,184(sp)
10005c78:	d9402a17 	ldw	r5,168(sp)
10005c7c:	002d883a 	mov	r22,zero
10005c80:	20800104 	addi	r2,r4,4
10005c84:	24c00017 	ldw	r19,0(r4)
10005c88:	283ebb0e 	bge	r5,zero,10005778 <__alt_data_end+0xf8005778>
10005c8c:	003ef106 	br	10005854 <__alt_data_end+0xf8005854>
10005c90:	9080040c 	andi	r2,r18,16
10005c94:	1000921e 	bne	r2,zero,10005ee0 <___vfprintf_internal_r+0x1b74>
10005c98:	9480100c 	andi	r18,r18,64
10005c9c:	90013926 	beq	r18,zero,10006184 <___vfprintf_internal_r+0x1e18>
10005ca0:	d9402e17 	ldw	r5,184(sp)
10005ca4:	d8c02f17 	ldw	r3,188(sp)
10005ca8:	28800017 	ldw	r2,0(r5)
10005cac:	29400104 	addi	r5,r5,4
10005cb0:	d9402e15 	stw	r5,184(sp)
10005cb4:	10c0000d 	sth	r3,0(r2)
10005cb8:	0039e406 	br	1000444c <__alt_data_end+0xf800444c>
10005cbc:	9080100c 	andi	r2,r18,64
10005cc0:	10008026 	beq	r2,zero,10005ec4 <___vfprintf_internal_r+0x1b58>
10005cc4:	d8802e17 	ldw	r2,184(sp)
10005cc8:	14c0000f 	ldh	r19,0(r2)
10005ccc:	10800104 	addi	r2,r2,4
10005cd0:	d8802e15 	stw	r2,184(sp)
10005cd4:	982dd7fa 	srai	r22,r19,31
10005cd8:	b005883a 	mov	r2,r22
10005cdc:	003af706 	br	100048bc <__alt_data_end+0xf80048bc>
10005ce0:	9080100c 	andi	r2,r18,64
10005ce4:	d8002785 	stb	zero,158(sp)
10005ce8:	10008a1e 	bne	r2,zero,10005f14 <___vfprintf_internal_r+0x1ba8>
10005cec:	d9002e17 	ldw	r4,184(sp)
10005cf0:	d9402a17 	ldw	r5,168(sp)
10005cf4:	002d883a 	mov	r22,zero
10005cf8:	20800104 	addi	r2,r4,4
10005cfc:	24c00017 	ldw	r19,0(r4)
10005d00:	283e4b0e 	bge	r5,zero,10005630 <__alt_data_end+0xf8005630>
10005d04:	9d86b03a 	or	r3,r19,r22
10005d08:	d8802e15 	stw	r2,184(sp)
10005d0c:	183e4c1e 	bne	r3,zero,10005640 <__alt_data_end+0xf8005640>
10005d10:	0039883a 	mov	fp,zero
10005d14:	0005883a 	mov	r2,zero
10005d18:	003d4006 	br	1000521c <__alt_data_end+0xf800521c>
10005d1c:	01440074 	movhi	r5,4097
10005d20:	294f6d84 	addi	r5,r5,15798
10005d24:	d9402c15 	stw	r5,176(sp)
10005d28:	d9402c17 	ldw	r5,176(sp)
10005d2c:	1c47883a 	add	r3,r3,r17
10005d30:	10800044 	addi	r2,r2,1
10005d34:	41400015 	stw	r5,0(r8)
10005d38:	44400115 	stw	r17,4(r8)
10005d3c:	d8c02015 	stw	r3,128(sp)
10005d40:	d8801f15 	stw	r2,124(sp)
10005d44:	010001c4 	movi	r4,7
10005d48:	20bec816 	blt	r4,r2,1000586c <__alt_data_end+0xf800586c>
10005d4c:	42000204 	addi	r8,r8,8
10005d50:	003ecd06 	br	10005888 <__alt_data_end+0xf8005888>
10005d54:	d9002a17 	ldw	r4,168(sp)
10005d58:	d8002785 	stb	zero,158(sp)
10005d5c:	203d2d16 	blt	r4,zero,10005214 <__alt_data_end+0xf8005214>
10005d60:	00bfdfc4 	movi	r2,-129
10005d64:	90a4703a 	and	r18,r18,r2
10005d68:	003a6106 	br	100046f0 <__alt_data_end+0xf80046f0>
10005d6c:	01040074 	movhi	r4,4097
10005d70:	210f6d84 	addi	r4,r4,15798
10005d74:	d9002c15 	stw	r4,176(sp)
10005d78:	003bea06 	br	10004d24 <__alt_data_end+0xf8004d24>
10005d7c:	d9002d17 	ldw	r4,180(sp)
10005d80:	d9801e04 	addi	r6,sp,120
10005d84:	b80b883a 	mov	r5,r23
10005d88:	000ba240 	call	1000ba24 <__sprint_r>
10005d8c:	103a7b1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005d90:	d8c02017 	ldw	r3,128(sp)
10005d94:	da000404 	addi	r8,sp,16
10005d98:	003d4106 	br	100052a0 <__alt_data_end+0xf80052a0>
10005d9c:	d8801f17 	ldw	r2,124(sp)
10005da0:	01440074 	movhi	r5,4097
10005da4:	01000044 	movi	r4,1
10005da8:	18c00044 	addi	r3,r3,1
10005dac:	10800044 	addi	r2,r2,1
10005db0:	294f6d04 	addi	r5,r5,15796
10005db4:	41000115 	stw	r4,4(r8)
10005db8:	41400015 	stw	r5,0(r8)
10005dbc:	d8c02015 	stw	r3,128(sp)
10005dc0:	d8801f15 	stw	r2,124(sp)
10005dc4:	010001c4 	movi	r4,7
10005dc8:	20805c16 	blt	r4,r2,10005f3c <___vfprintf_internal_r+0x1bd0>
10005dcc:	42000204 	addi	r8,r8,8
10005dd0:	8800041e 	bne	r17,zero,10005de4 <___vfprintf_internal_r+0x1a78>
10005dd4:	d8803317 	ldw	r2,204(sp)
10005dd8:	1000021e 	bne	r2,zero,10005de4 <___vfprintf_internal_r+0x1a78>
10005ddc:	9080004c 	andi	r2,r18,1
10005de0:	103be726 	beq	r2,zero,10004d80 <__alt_data_end+0xf8004d80>
10005de4:	d9003717 	ldw	r4,220(sp)
10005de8:	d8801f17 	ldw	r2,124(sp)
10005dec:	d9403417 	ldw	r5,208(sp)
10005df0:	20c7883a 	add	r3,r4,r3
10005df4:	10800044 	addi	r2,r2,1
10005df8:	41000115 	stw	r4,4(r8)
10005dfc:	41400015 	stw	r5,0(r8)
10005e00:	d8c02015 	stw	r3,128(sp)
10005e04:	d8801f15 	stw	r2,124(sp)
10005e08:	010001c4 	movi	r4,7
10005e0c:	20812116 	blt	r4,r2,10006294 <___vfprintf_internal_r+0x1f28>
10005e10:	42000204 	addi	r8,r8,8
10005e14:	0463c83a 	sub	r17,zero,r17
10005e18:	0440730e 	bge	zero,r17,10005fe8 <___vfprintf_internal_r+0x1c7c>
10005e1c:	05800404 	movi	r22,16
10005e20:	b440860e 	bge	r22,r17,1000603c <___vfprintf_internal_r+0x1cd0>
10005e24:	01440074 	movhi	r5,4097
10005e28:	294f6d84 	addi	r5,r5,15798
10005e2c:	d9402c15 	stw	r5,176(sp)
10005e30:	070001c4 	movi	fp,7
10005e34:	dcc02d17 	ldw	r19,180(sp)
10005e38:	00000306 	br	10005e48 <___vfprintf_internal_r+0x1adc>
10005e3c:	42000204 	addi	r8,r8,8
10005e40:	8c7ffc04 	addi	r17,r17,-16
10005e44:	b440800e 	bge	r22,r17,10006048 <___vfprintf_internal_r+0x1cdc>
10005e48:	18c00404 	addi	r3,r3,16
10005e4c:	10800044 	addi	r2,r2,1
10005e50:	45000015 	stw	r20,0(r8)
10005e54:	45800115 	stw	r22,4(r8)
10005e58:	d8c02015 	stw	r3,128(sp)
10005e5c:	d8801f15 	stw	r2,124(sp)
10005e60:	e0bff60e 	bge	fp,r2,10005e3c <__alt_data_end+0xf8005e3c>
10005e64:	d9801e04 	addi	r6,sp,120
10005e68:	b80b883a 	mov	r5,r23
10005e6c:	9809883a 	mov	r4,r19
10005e70:	000ba240 	call	1000ba24 <__sprint_r>
10005e74:	103a411e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005e78:	d8c02017 	ldw	r3,128(sp)
10005e7c:	d8801f17 	ldw	r2,124(sp)
10005e80:	da000404 	addi	r8,sp,16
10005e84:	003fee06 	br	10005e40 <__alt_data_end+0xf8005e40>
10005e88:	00bfffc4 	movi	r2,-1
10005e8c:	003a3f06 	br	1000478c <__alt_data_end+0xf800478c>
10005e90:	008011c4 	movi	r2,71
10005e94:	1440b816 	blt	r2,r17,10006178 <___vfprintf_internal_r+0x1e0c>
10005e98:	04040074 	movhi	r16,4097
10005e9c:	840f5f04 	addi	r16,r16,15740
10005ea0:	00c000c4 	movi	r3,3
10005ea4:	00bfdfc4 	movi	r2,-129
10005ea8:	d8c02915 	stw	r3,164(sp)
10005eac:	90a4703a 	and	r18,r18,r2
10005eb0:	df002783 	ldbu	fp,158(sp)
10005eb4:	d8c02b15 	stw	r3,172(sp)
10005eb8:	d8002a15 	stw	zero,168(sp)
10005ebc:	d8003215 	stw	zero,200(sp)
10005ec0:	003b0706 	br	10004ae0 <__alt_data_end+0xf8004ae0>
10005ec4:	d8c02e17 	ldw	r3,184(sp)
10005ec8:	1cc00017 	ldw	r19,0(r3)
10005ecc:	18c00104 	addi	r3,r3,4
10005ed0:	d8c02e15 	stw	r3,184(sp)
10005ed4:	982dd7fa 	srai	r22,r19,31
10005ed8:	b005883a 	mov	r2,r22
10005edc:	003a7706 	br	100048bc <__alt_data_end+0xf80048bc>
10005ee0:	d8c02e17 	ldw	r3,184(sp)
10005ee4:	d9002f17 	ldw	r4,188(sp)
10005ee8:	18800017 	ldw	r2,0(r3)
10005eec:	18c00104 	addi	r3,r3,4
10005ef0:	d8c02e15 	stw	r3,184(sp)
10005ef4:	11000015 	stw	r4,0(r2)
10005ef8:	00395406 	br	1000444c <__alt_data_end+0xf800444c>
10005efc:	d9002e17 	ldw	r4,184(sp)
10005f00:	002d883a 	mov	r22,zero
10005f04:	24c00017 	ldw	r19,0(r4)
10005f08:	21000104 	addi	r4,r4,4
10005f0c:	d9002e15 	stw	r4,184(sp)
10005f10:	003c0706 	br	10004f30 <__alt_data_end+0xf8004f30>
10005f14:	d9402e17 	ldw	r5,184(sp)
10005f18:	d8c02a17 	ldw	r3,168(sp)
10005f1c:	002d883a 	mov	r22,zero
10005f20:	28800104 	addi	r2,r5,4
10005f24:	2cc0000b 	ldhu	r19,0(r5)
10005f28:	183dc10e 	bge	r3,zero,10005630 <__alt_data_end+0xf8005630>
10005f2c:	003f7506 	br	10005d04 <__alt_data_end+0xf8005d04>
10005f30:	04040074 	movhi	r16,4097
10005f34:	840f5d04 	addi	r16,r16,15732
10005f38:	003aa706 	br	100049d8 <__alt_data_end+0xf80049d8>
10005f3c:	d9002d17 	ldw	r4,180(sp)
10005f40:	d9801e04 	addi	r6,sp,120
10005f44:	b80b883a 	mov	r5,r23
10005f48:	000ba240 	call	1000ba24 <__sprint_r>
10005f4c:	103a0b1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005f50:	dc402617 	ldw	r17,152(sp)
10005f54:	d8c02017 	ldw	r3,128(sp)
10005f58:	da000404 	addi	r8,sp,16
10005f5c:	003f9c06 	br	10005dd0 <__alt_data_end+0xf8005dd0>
10005f60:	ac400043 	ldbu	r17,1(r21)
10005f64:	84000814 	ori	r16,r16,32
10005f68:	ad400044 	addi	r21,r21,1
10005f6c:	8c403fcc 	andi	r17,r17,255
10005f70:	8c40201c 	xori	r17,r17,128
10005f74:	8c7fe004 	addi	r17,r17,-128
10005f78:	00395e06 	br	100044f4 <__alt_data_end+0xf80044f4>
10005f7c:	d8c02e15 	stw	r3,184(sp)
10005f80:	0039883a 	mov	fp,zero
10005f84:	003e3506 	br	1000585c <__alt_data_end+0xf800585c>
10005f88:	d9002d17 	ldw	r4,180(sp)
10005f8c:	d9801e04 	addi	r6,sp,120
10005f90:	b80b883a 	mov	r5,r23
10005f94:	000ba240 	call	1000ba24 <__sprint_r>
10005f98:	1039f81e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005f9c:	d8c02017 	ldw	r3,128(sp)
10005fa0:	da000404 	addi	r8,sp,16
10005fa4:	003cd006 	br	100052e8 <__alt_data_end+0xf80052e8>
10005fa8:	8009883a 	mov	r4,r16
10005fac:	df003d15 	stw	fp,244(sp)
10005fb0:	00042d40 	call	100042d4 <strlen>
10005fb4:	d8802b15 	stw	r2,172(sp)
10005fb8:	da003d17 	ldw	r8,244(sp)
10005fbc:	103c200e 	bge	r2,zero,10005040 <__alt_data_end+0xf8005040>
10005fc0:	0005883a 	mov	r2,zero
10005fc4:	003c1e06 	br	10005040 <__alt_data_end+0xf8005040>
10005fc8:	d9002d17 	ldw	r4,180(sp)
10005fcc:	d9801e04 	addi	r6,sp,120
10005fd0:	b80b883a 	mov	r5,r23
10005fd4:	000ba240 	call	1000ba24 <__sprint_r>
10005fd8:	1039e81e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10005fdc:	d8c02017 	ldw	r3,128(sp)
10005fe0:	d8801f17 	ldw	r2,124(sp)
10005fe4:	da000404 	addi	r8,sp,16
10005fe8:	d9403317 	ldw	r5,204(sp)
10005fec:	10800044 	addi	r2,r2,1
10005ff0:	44000015 	stw	r16,0(r8)
10005ff4:	28c7883a 	add	r3,r5,r3
10005ff8:	003b5b06 	br	10004d68 <__alt_data_end+0xf8004d68>
10005ffc:	01040074 	movhi	r4,4097
10006000:	210f7184 	addi	r4,r4,15814
10006004:	d9003515 	stw	r4,212(sp)
10006008:	003af206 	br	10004bd4 <__alt_data_end+0xf8004bd4>
1000600c:	013fffc4 	movi	r4,-1
10006010:	003a0806 	br	10004834 <__alt_data_end+0xf8004834>
10006014:	0023883a 	mov	r17,zero
10006018:	003d9d06 	br	10005690 <__alt_data_end+0xf8005690>
1000601c:	d9002d17 	ldw	r4,180(sp)
10006020:	d9801e04 	addi	r6,sp,120
10006024:	b80b883a 	mov	r5,r23
10006028:	000ba240 	call	1000ba24 <__sprint_r>
1000602c:	1039d31e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10006030:	d8c02017 	ldw	r3,128(sp)
10006034:	da000404 	addi	r8,sp,16
10006038:	003d9406 	br	1000568c <__alt_data_end+0xf800568c>
1000603c:	01040074 	movhi	r4,4097
10006040:	210f6d84 	addi	r4,r4,15798
10006044:	d9002c15 	stw	r4,176(sp)
10006048:	d9002c17 	ldw	r4,176(sp)
1000604c:	1c47883a 	add	r3,r3,r17
10006050:	10800044 	addi	r2,r2,1
10006054:	41000015 	stw	r4,0(r8)
10006058:	44400115 	stw	r17,4(r8)
1000605c:	d8c02015 	stw	r3,128(sp)
10006060:	d8801f15 	stw	r2,124(sp)
10006064:	010001c4 	movi	r4,7
10006068:	20bfd716 	blt	r4,r2,10005fc8 <__alt_data_end+0xf8005fc8>
1000606c:	42000204 	addi	r8,r8,8
10006070:	003fdd06 	br	10005fe8 <__alt_data_end+0xf8005fe8>
10006074:	d9002d17 	ldw	r4,180(sp)
10006078:	d9801e04 	addi	r6,sp,120
1000607c:	b80b883a 	mov	r5,r23
10006080:	000ba240 	call	1000ba24 <__sprint_r>
10006084:	1039bd1e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10006088:	d8802617 	ldw	r2,152(sp)
1000608c:	d8c02017 	ldw	r3,128(sp)
10006090:	da000404 	addi	r8,sp,16
10006094:	003e1006 	br	100058d8 <__alt_data_end+0xf80058d8>
10006098:	00800044 	movi	r2,1
1000609c:	10803fcc 	andi	r2,r2,255
100060a0:	00c00044 	movi	r3,1
100060a4:	10fa0d26 	beq	r2,r3,100048dc <__alt_data_end+0xf80048dc>
100060a8:	00c00084 	movi	r3,2
100060ac:	10fbaf26 	beq	r2,r3,10004f6c <__alt_data_end+0xf8004f6c>
100060b0:	003a6d06 	br	10004a68 <__alt_data_end+0xf8004a68>
100060b4:	01040074 	movhi	r4,4097
100060b8:	210f7184 	addi	r4,r4,15814
100060bc:	d9003515 	stw	r4,212(sp)
100060c0:	003b5406 	br	10004e14 <__alt_data_end+0xf8004e14>
100060c4:	d8802a17 	ldw	r2,168(sp)
100060c8:	00c00184 	movi	r3,6
100060cc:	1880012e 	bgeu	r3,r2,100060d4 <___vfprintf_internal_r+0x1d68>
100060d0:	1805883a 	mov	r2,r3
100060d4:	d8802b15 	stw	r2,172(sp)
100060d8:	1000ef16 	blt	r2,zero,10006498 <___vfprintf_internal_r+0x212c>
100060dc:	04040074 	movhi	r16,4097
100060e0:	d8802915 	stw	r2,164(sp)
100060e4:	dcc02e15 	stw	r19,184(sp)
100060e8:	d8002a15 	stw	zero,168(sp)
100060ec:	d8003215 	stw	zero,200(sp)
100060f0:	840f6b04 	addi	r16,r16,15788
100060f4:	0039883a 	mov	fp,zero
100060f8:	003a8006 	br	10004afc <__alt_data_end+0xf8004afc>
100060fc:	0021883a 	mov	r16,zero
10006100:	003e0706 	br	10005920 <__alt_data_end+0xf8005920>
10006104:	d9002d17 	ldw	r4,180(sp)
10006108:	d9801e04 	addi	r6,sp,120
1000610c:	b80b883a 	mov	r5,r23
10006110:	000ba240 	call	1000ba24 <__sprint_r>
10006114:	1039991e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
10006118:	d8802617 	ldw	r2,152(sp)
1000611c:	d9403317 	ldw	r5,204(sp)
10006120:	d8c02017 	ldw	r3,128(sp)
10006124:	da000404 	addi	r8,sp,16
10006128:	2885c83a 	sub	r2,r5,r2
1000612c:	003dfb06 	br	1000591c <__alt_data_end+0xf800591c>
10006130:	9080004c 	andi	r2,r18,1
10006134:	103e8f1e 	bne	r2,zero,10005b74 <__alt_data_end+0xf8005b74>
10006138:	d8802117 	ldw	r2,132(sp)
1000613c:	003e9e06 	br	10005bb8 <__alt_data_end+0xf8005bb8>
10006140:	1025883a 	mov	r18,r2
10006144:	0039883a 	mov	fp,zero
10006148:	00800084 	movi	r2,2
1000614c:	003fd306 	br	1000609c <__alt_data_end+0xf800609c>
10006150:	07000b44 	movi	fp,45
10006154:	df002785 	stb	fp,158(sp)
10006158:	003a1b06 	br	100049c8 <__alt_data_end+0xf80049c8>
1000615c:	00c00b44 	movi	r3,45
10006160:	d8c02785 	stb	r3,158(sp)
10006164:	d8802915 	stw	r2,164(sp)
10006168:	dc802c17 	ldw	r18,176(sp)
1000616c:	d8002a15 	stw	zero,168(sp)
10006170:	07000b44 	movi	fp,45
10006174:	003a5e06 	br	10004af0 <__alt_data_end+0xf8004af0>
10006178:	04040074 	movhi	r16,4097
1000617c:	840f6004 	addi	r16,r16,15744
10006180:	003f4706 	br	10005ea0 <__alt_data_end+0xf8005ea0>
10006184:	d9002e17 	ldw	r4,184(sp)
10006188:	d9402f17 	ldw	r5,188(sp)
1000618c:	20800017 	ldw	r2,0(r4)
10006190:	21000104 	addi	r4,r4,4
10006194:	d9002e15 	stw	r4,184(sp)
10006198:	11400015 	stw	r5,0(r2)
1000619c:	0038ab06 	br	1000444c <__alt_data_end+0xf800444c>
100061a0:	dd802617 	ldw	r22,152(sp)
100061a4:	00bfff44 	movi	r2,-3
100061a8:	b0801c16 	blt	r22,r2,1000621c <___vfprintf_internal_r+0x1eb0>
100061ac:	d9402a17 	ldw	r5,168(sp)
100061b0:	2d801a16 	blt	r5,r22,1000621c <___vfprintf_internal_r+0x1eb0>
100061b4:	dd803215 	stw	r22,200(sp)
100061b8:	003e8906 	br	10005be0 <__alt_data_end+0xf8005be0>
100061bc:	01040074 	movhi	r4,4097
100061c0:	210f6d84 	addi	r4,r4,15798
100061c4:	d9002c15 	stw	r4,176(sp)
100061c8:	003c9106 	br	10005410 <__alt_data_end+0xf8005410>
100061cc:	e005883a 	mov	r2,fp
100061d0:	003e7906 	br	10005bb8 <__alt_data_end+0xf8005bb8>
100061d4:	d9002a17 	ldw	r4,168(sp)
100061d8:	df002783 	ldbu	fp,158(sp)
100061dc:	dcc02e15 	stw	r19,184(sp)
100061e0:	d9002915 	stw	r4,164(sp)
100061e4:	d9002b15 	stw	r4,172(sp)
100061e8:	d8002a15 	stw	zero,168(sp)
100061ec:	d8003215 	stw	zero,200(sp)
100061f0:	003a3b06 	br	10004ae0 <__alt_data_end+0xf8004ae0>
100061f4:	9080004c 	andi	r2,r18,1
100061f8:	0039883a 	mov	fp,zero
100061fc:	10000426 	beq	r2,zero,10006210 <___vfprintf_internal_r+0x1ea4>
10006200:	00800c04 	movi	r2,48
10006204:	dc001dc4 	addi	r16,sp,119
10006208:	d8801dc5 	stb	r2,119(sp)
1000620c:	003b6406 	br	10004fa0 <__alt_data_end+0xf8004fa0>
10006210:	d8002b15 	stw	zero,172(sp)
10006214:	dc001e04 	addi	r16,sp,120
10006218:	003a2b06 	br	10004ac8 <__alt_data_end+0xf8004ac8>
1000621c:	8c7fff84 	addi	r17,r17,-2
10006220:	b5bfffc4 	addi	r22,r22,-1
10006224:	dd802615 	stw	r22,152(sp)
10006228:	dc4022c5 	stb	r17,139(sp)
1000622c:	b000bf16 	blt	r22,zero,1000652c <___vfprintf_internal_r+0x21c0>
10006230:	00800ac4 	movi	r2,43
10006234:	d8802305 	stb	r2,140(sp)
10006238:	00800244 	movi	r2,9
1000623c:	15807016 	blt	r2,r22,10006400 <___vfprintf_internal_r+0x2094>
10006240:	00800c04 	movi	r2,48
10006244:	b5800c04 	addi	r22,r22,48
10006248:	d8802345 	stb	r2,141(sp)
1000624c:	dd802385 	stb	r22,142(sp)
10006250:	d88023c4 	addi	r2,sp,143
10006254:	df0022c4 	addi	fp,sp,139
10006258:	d8c03317 	ldw	r3,204(sp)
1000625c:	1739c83a 	sub	fp,r2,fp
10006260:	d9003317 	ldw	r4,204(sp)
10006264:	e0c7883a 	add	r3,fp,r3
10006268:	df003a15 	stw	fp,232(sp)
1000626c:	d8c02b15 	stw	r3,172(sp)
10006270:	00800044 	movi	r2,1
10006274:	1100b30e 	bge	r2,r4,10006544 <___vfprintf_internal_r+0x21d8>
10006278:	d8c02b17 	ldw	r3,172(sp)
1000627c:	18c00044 	addi	r3,r3,1
10006280:	d8c02b15 	stw	r3,172(sp)
10006284:	1805883a 	mov	r2,r3
10006288:	1800ac16 	blt	r3,zero,1000653c <___vfprintf_internal_r+0x21d0>
1000628c:	d8003215 	stw	zero,200(sp)
10006290:	003e5d06 	br	10005c08 <__alt_data_end+0xf8005c08>
10006294:	d9002d17 	ldw	r4,180(sp)
10006298:	d9801e04 	addi	r6,sp,120
1000629c:	b80b883a 	mov	r5,r23
100062a0:	000ba240 	call	1000ba24 <__sprint_r>
100062a4:	1039351e 	bne	r2,zero,1000477c <__alt_data_end+0xf800477c>
100062a8:	dc402617 	ldw	r17,152(sp)
100062ac:	d8c02017 	ldw	r3,128(sp)
100062b0:	d8801f17 	ldw	r2,124(sp)
100062b4:	da000404 	addi	r8,sp,16
100062b8:	003ed606 	br	10005e14 <__alt_data_end+0xf8005e14>
100062bc:	182b883a 	mov	r21,r3
100062c0:	d8002a15 	stw	zero,168(sp)
100062c4:	00388c06 	br	100044f8 <__alt_data_end+0xf80044f8>
100062c8:	d8802a17 	ldw	r2,168(sp)
100062cc:	103e071e 	bne	r2,zero,10005aec <__alt_data_end+0xf8005aec>
100062d0:	dc002a15 	stw	r16,168(sp)
100062d4:	003e0506 	br	10005aec <__alt_data_end+0xf8005aec>
100062d8:	d9002a17 	ldw	r4,168(sp)
100062dc:	20c00044 	addi	r3,r4,1
100062e0:	003e0f06 	br	10005b20 <__alt_data_end+0xf8005b20>
100062e4:	01400184 	movi	r5,6
100062e8:	d9402a15 	stw	r5,168(sp)
100062ec:	003dff06 	br	10005aec <__alt_data_end+0xf8005aec>
100062f0:	d8802104 	addi	r2,sp,132
100062f4:	d8800315 	stw	r2,12(sp)
100062f8:	d8802504 	addi	r2,sp,148
100062fc:	d8800215 	stw	r2,8(sp)
10006300:	d8802604 	addi	r2,sp,152
10006304:	d8800115 	stw	r2,4(sp)
10006308:	d8802a17 	ldw	r2,168(sp)
1000630c:	d9403617 	ldw	r5,216(sp)
10006310:	d9002d17 	ldw	r4,180(sp)
10006314:	d8800015 	stw	r2,0(sp)
10006318:	01c000c4 	movi	r7,3
1000631c:	980d883a 	mov	r6,r19
10006320:	da003d15 	stw	r8,244(sp)
10006324:	0006a9c0 	call	10006a9c <_dtoa_r>
10006328:	d8c02a17 	ldw	r3,168(sp)
1000632c:	da003d17 	ldw	r8,244(sp)
10006330:	1021883a 	mov	r16,r2
10006334:	10f9883a 	add	fp,r2,r3
10006338:	81000007 	ldb	r4,0(r16)
1000633c:	00800c04 	movi	r2,48
10006340:	20805e26 	beq	r4,r2,100064bc <___vfprintf_internal_r+0x2150>
10006344:	d8c02617 	ldw	r3,152(sp)
10006348:	e0f9883a 	add	fp,fp,r3
1000634c:	003e0a06 	br	10005b78 <__alt_data_end+0xf8005b78>
10006350:	00c00b44 	movi	r3,45
10006354:	24e0003c 	xorhi	r19,r4,32768
10006358:	d8c02905 	stb	r3,164(sp)
1000635c:	003de906 	br	10005b04 <__alt_data_end+0xf8005b04>
10006360:	d8c03217 	ldw	r3,200(sp)
10006364:	00c07a0e 	bge	zero,r3,10006550 <___vfprintf_internal_r+0x21e4>
10006368:	00800044 	movi	r2,1
1000636c:	d9003317 	ldw	r4,204(sp)
10006370:	1105883a 	add	r2,r2,r4
10006374:	d8802b15 	stw	r2,172(sp)
10006378:	10004e16 	blt	r2,zero,100064b4 <___vfprintf_internal_r+0x2148>
1000637c:	044019c4 	movi	r17,103
10006380:	003e2106 	br	10005c08 <__alt_data_end+0xf8005c08>
10006384:	d9002a17 	ldw	r4,168(sp)
10006388:	d8802104 	addi	r2,sp,132
1000638c:	d8800315 	stw	r2,12(sp)
10006390:	d9000015 	stw	r4,0(sp)
10006394:	d8802504 	addi	r2,sp,148
10006398:	d9403617 	ldw	r5,216(sp)
1000639c:	d9002d17 	ldw	r4,180(sp)
100063a0:	d8800215 	stw	r2,8(sp)
100063a4:	d8802604 	addi	r2,sp,152
100063a8:	d8800115 	stw	r2,4(sp)
100063ac:	01c000c4 	movi	r7,3
100063b0:	980d883a 	mov	r6,r19
100063b4:	da003d15 	stw	r8,244(sp)
100063b8:	0006a9c0 	call	10006a9c <_dtoa_r>
100063bc:	d8c02a17 	ldw	r3,168(sp)
100063c0:	da003d17 	ldw	r8,244(sp)
100063c4:	1021883a 	mov	r16,r2
100063c8:	00801184 	movi	r2,70
100063cc:	80f9883a 	add	fp,r16,r3
100063d0:	88bfd926 	beq	r17,r2,10006338 <__alt_data_end+0xf8006338>
100063d4:	003de806 	br	10005b78 <__alt_data_end+0xf8005b78>
100063d8:	d9002a17 	ldw	r4,168(sp)
100063dc:	00c04d0e 	bge	zero,r3,10006514 <___vfprintf_internal_r+0x21a8>
100063e0:	2000441e 	bne	r4,zero,100064f4 <___vfprintf_internal_r+0x2188>
100063e4:	9480004c 	andi	r18,r18,1
100063e8:	9000421e 	bne	r18,zero,100064f4 <___vfprintf_internal_r+0x2188>
100063ec:	1805883a 	mov	r2,r3
100063f0:	18006f16 	blt	r3,zero,100065b0 <___vfprintf_internal_r+0x2244>
100063f4:	d8c03217 	ldw	r3,200(sp)
100063f8:	d8c02b15 	stw	r3,172(sp)
100063fc:	003e0206 	br	10005c08 <__alt_data_end+0xf8005c08>
10006400:	df0022c4 	addi	fp,sp,139
10006404:	dc002a15 	stw	r16,168(sp)
10006408:	4027883a 	mov	r19,r8
1000640c:	e021883a 	mov	r16,fp
10006410:	b009883a 	mov	r4,r22
10006414:	01400284 	movi	r5,10
10006418:	0003f3c0 	call	10003f3c <__modsi3>
1000641c:	10800c04 	addi	r2,r2,48
10006420:	843fffc4 	addi	r16,r16,-1
10006424:	b009883a 	mov	r4,r22
10006428:	01400284 	movi	r5,10
1000642c:	80800005 	stb	r2,0(r16)
10006430:	0003eb80 	call	10003eb8 <__divsi3>
10006434:	102d883a 	mov	r22,r2
10006438:	00800244 	movi	r2,9
1000643c:	15bff416 	blt	r2,r22,10006410 <__alt_data_end+0xf8006410>
10006440:	9811883a 	mov	r8,r19
10006444:	b0800c04 	addi	r2,r22,48
10006448:	8027883a 	mov	r19,r16
1000644c:	997fffc4 	addi	r5,r19,-1
10006450:	98bfffc5 	stb	r2,-1(r19)
10006454:	dc002a17 	ldw	r16,168(sp)
10006458:	2f006d2e 	bgeu	r5,fp,10006610 <___vfprintf_internal_r+0x22a4>
1000645c:	d9c02384 	addi	r7,sp,142
10006460:	3ccfc83a 	sub	r7,r7,r19
10006464:	d9002344 	addi	r4,sp,141
10006468:	e1cf883a 	add	r7,fp,r7
1000646c:	00000106 	br	10006474 <___vfprintf_internal_r+0x2108>
10006470:	28800003 	ldbu	r2,0(r5)
10006474:	20800005 	stb	r2,0(r4)
10006478:	21000044 	addi	r4,r4,1
1000647c:	29400044 	addi	r5,r5,1
10006480:	393ffb1e 	bne	r7,r4,10006470 <__alt_data_end+0xf8006470>
10006484:	d8802304 	addi	r2,sp,140
10006488:	14c5c83a 	sub	r2,r2,r19
1000648c:	d8c02344 	addi	r3,sp,141
10006490:	1885883a 	add	r2,r3,r2
10006494:	003f7006 	br	10006258 <__alt_data_end+0xf8006258>
10006498:	0005883a 	mov	r2,zero
1000649c:	003f0f06 	br	100060dc <__alt_data_end+0xf80060dc>
100064a0:	d8c03217 	ldw	r3,200(sp)
100064a4:	18c00044 	addi	r3,r3,1
100064a8:	d8c02b15 	stw	r3,172(sp)
100064ac:	1805883a 	mov	r2,r3
100064b0:	183fb20e 	bge	r3,zero,1000637c <__alt_data_end+0xf800637c>
100064b4:	0005883a 	mov	r2,zero
100064b8:	003fb006 	br	1000637c <__alt_data_end+0xf800637c>
100064bc:	d9003617 	ldw	r4,216(sp)
100064c0:	000d883a 	mov	r6,zero
100064c4:	000f883a 	mov	r7,zero
100064c8:	980b883a 	mov	r5,r19
100064cc:	d8c03c15 	stw	r3,240(sp)
100064d0:	da003d15 	stw	r8,244(sp)
100064d4:	000f7d00 	call	1000f7d0 <__eqdf2>
100064d8:	d8c03c17 	ldw	r3,240(sp)
100064dc:	da003d17 	ldw	r8,244(sp)
100064e0:	103f9826 	beq	r2,zero,10006344 <__alt_data_end+0xf8006344>
100064e4:	00800044 	movi	r2,1
100064e8:	10c7c83a 	sub	r3,r2,r3
100064ec:	d8c02615 	stw	r3,152(sp)
100064f0:	003f9506 	br	10006348 <__alt_data_end+0xf8006348>
100064f4:	d9002a17 	ldw	r4,168(sp)
100064f8:	d8c03217 	ldw	r3,200(sp)
100064fc:	20800044 	addi	r2,r4,1
10006500:	1885883a 	add	r2,r3,r2
10006504:	d8802b15 	stw	r2,172(sp)
10006508:	103dbf0e 	bge	r2,zero,10005c08 <__alt_data_end+0xf8005c08>
1000650c:	0005883a 	mov	r2,zero
10006510:	003dbd06 	br	10005c08 <__alt_data_end+0xf8005c08>
10006514:	2000201e 	bne	r4,zero,10006598 <___vfprintf_internal_r+0x222c>
10006518:	9480004c 	andi	r18,r18,1
1000651c:	90001e1e 	bne	r18,zero,10006598 <___vfprintf_internal_r+0x222c>
10006520:	00800044 	movi	r2,1
10006524:	d8802b15 	stw	r2,172(sp)
10006528:	003db706 	br	10005c08 <__alt_data_end+0xf8005c08>
1000652c:	00800b44 	movi	r2,45
10006530:	05adc83a 	sub	r22,zero,r22
10006534:	d8802305 	stb	r2,140(sp)
10006538:	003f3f06 	br	10006238 <__alt_data_end+0xf8006238>
1000653c:	0005883a 	mov	r2,zero
10006540:	003f5206 	br	1000628c <__alt_data_end+0xf800628c>
10006544:	90a4703a 	and	r18,r18,r2
10006548:	903f4e26 	beq	r18,zero,10006284 <__alt_data_end+0xf8006284>
1000654c:	003f4a06 	br	10006278 <__alt_data_end+0xf8006278>
10006550:	00800084 	movi	r2,2
10006554:	10c5c83a 	sub	r2,r2,r3
10006558:	003f8406 	br	1000636c <__alt_data_end+0xf800636c>
1000655c:	d9402e17 	ldw	r5,184(sp)
10006560:	d9002e17 	ldw	r4,184(sp)
10006564:	ac400043 	ldbu	r17,1(r21)
10006568:	29400017 	ldw	r5,0(r5)
1000656c:	20800104 	addi	r2,r4,4
10006570:	d8802e15 	stw	r2,184(sp)
10006574:	d9402a15 	stw	r5,168(sp)
10006578:	182b883a 	mov	r21,r3
1000657c:	283e7b0e 	bge	r5,zero,10005f6c <__alt_data_end+0xf8005f6c>
10006580:	8c403fcc 	andi	r17,r17,255
10006584:	017fffc4 	movi	r5,-1
10006588:	8c40201c 	xori	r17,r17,128
1000658c:	d9402a15 	stw	r5,168(sp)
10006590:	8c7fe004 	addi	r17,r17,-128
10006594:	0037d706 	br	100044f4 <__alt_data_end+0xf80044f4>
10006598:	d8c02a17 	ldw	r3,168(sp)
1000659c:	18c00084 	addi	r3,r3,2
100065a0:	d8c02b15 	stw	r3,172(sp)
100065a4:	1805883a 	mov	r2,r3
100065a8:	183d970e 	bge	r3,zero,10005c08 <__alt_data_end+0xf8005c08>
100065ac:	003fd706 	br	1000650c <__alt_data_end+0xf800650c>
100065b0:	0005883a 	mov	r2,zero
100065b4:	003f8f06 	br	100063f4 <__alt_data_end+0xf80063f4>
100065b8:	9080004c 	andi	r2,r18,1
100065bc:	103f821e 	bne	r2,zero,100063c8 <__alt_data_end+0xf80063c8>
100065c0:	d8802117 	ldw	r2,132(sp)
100065c4:	1405c83a 	sub	r2,r2,r16
100065c8:	d8803315 	stw	r2,204(sp)
100065cc:	b47ef426 	beq	r22,r17,100061a0 <__alt_data_end+0xf80061a0>
100065d0:	dd802617 	ldw	r22,152(sp)
100065d4:	003f1206 	br	10006220 <__alt_data_end+0xf8006220>
100065d8:	d8c02b03 	ldbu	r3,172(sp)
100065dc:	d8c02785 	stb	r3,158(sp)
100065e0:	0038df06 	br	10004960 <__alt_data_end+0xf8004960>
100065e4:	d8c02b03 	ldbu	r3,172(sp)
100065e8:	d8c02785 	stb	r3,158(sp)
100065ec:	0038aa06 	br	10004898 <__alt_data_end+0xf8004898>
100065f0:	d8c02b03 	ldbu	r3,172(sp)
100065f4:	d8c02785 	stb	r3,158(sp)
100065f8:	003a4306 	br	10004f08 <__alt_data_end+0xf8004f08>
100065fc:	d8c02b03 	ldbu	r3,172(sp)
10006600:	d8c02785 	stb	r3,158(sp)
10006604:	003af506 	br	100051dc <__alt_data_end+0xf80051dc>
10006608:	0005883a 	mov	r2,zero
1000660c:	003d7b06 	br	10005bfc <__alt_data_end+0xf8005bfc>
10006610:	d8802344 	addi	r2,sp,141
10006614:	003f1006 	br	10006258 <__alt_data_end+0xf8006258>
10006618:	d8c02b03 	ldbu	r3,172(sp)
1000661c:	d8c02785 	stb	r3,158(sp)
10006620:	0038fd06 	br	10004a18 <__alt_data_end+0xf8004a18>
10006624:	d8c02b03 	ldbu	r3,172(sp)
10006628:	d8c02785 	stb	r3,158(sp)
1000662c:	003a9706 	br	1000508c <__alt_data_end+0xf800508c>
10006630:	d8c02b03 	ldbu	r3,172(sp)
10006634:	d8c02785 	stb	r3,158(sp)
10006638:	003a1806 	br	10004e9c <__alt_data_end+0xf8004e9c>
1000663c:	d8c02b03 	ldbu	r3,172(sp)
10006640:	d8c02785 	stb	r3,158(sp)
10006644:	003abe06 	br	10005140 <__alt_data_end+0xf8005140>

10006648 <__vfprintf_internal>:
10006648:	00840074 	movhi	r2,4097
1000664c:	1096c804 	addi	r2,r2,23328
10006650:	300f883a 	mov	r7,r6
10006654:	280d883a 	mov	r6,r5
10006658:	200b883a 	mov	r5,r4
1000665c:	11000017 	ldw	r4,0(r2)
10006660:	000436c1 	jmpi	1000436c <___vfprintf_internal_r>

10006664 <__sbprintf>:
10006664:	2880030b 	ldhu	r2,12(r5)
10006668:	2ac01917 	ldw	r11,100(r5)
1000666c:	2a80038b 	ldhu	r10,14(r5)
10006670:	2a400717 	ldw	r9,28(r5)
10006674:	2a000917 	ldw	r8,36(r5)
10006678:	defee204 	addi	sp,sp,-1144
1000667c:	00c10004 	movi	r3,1024
10006680:	dc011a15 	stw	r16,1128(sp)
10006684:	10bfff4c 	andi	r2,r2,65533
10006688:	2821883a 	mov	r16,r5
1000668c:	d8cb883a 	add	r5,sp,r3
10006690:	dc811c15 	stw	r18,1136(sp)
10006694:	dc411b15 	stw	r17,1132(sp)
10006698:	dfc11d15 	stw	ra,1140(sp)
1000669c:	2025883a 	mov	r18,r4
100066a0:	d881030d 	sth	r2,1036(sp)
100066a4:	dac11915 	stw	r11,1124(sp)
100066a8:	da81038d 	sth	r10,1038(sp)
100066ac:	da410715 	stw	r9,1052(sp)
100066b0:	da010915 	stw	r8,1060(sp)
100066b4:	dec10015 	stw	sp,1024(sp)
100066b8:	dec10415 	stw	sp,1040(sp)
100066bc:	d8c10215 	stw	r3,1032(sp)
100066c0:	d8c10515 	stw	r3,1044(sp)
100066c4:	d8010615 	stw	zero,1048(sp)
100066c8:	000436c0 	call	1000436c <___vfprintf_internal_r>
100066cc:	1023883a 	mov	r17,r2
100066d0:	10000416 	blt	r2,zero,100066e4 <__sbprintf+0x80>
100066d4:	d9410004 	addi	r5,sp,1024
100066d8:	9009883a 	mov	r4,r18
100066dc:	00083400 	call	10008340 <_fflush_r>
100066e0:	10000d1e 	bne	r2,zero,10006718 <__sbprintf+0xb4>
100066e4:	d881030b 	ldhu	r2,1036(sp)
100066e8:	1080100c 	andi	r2,r2,64
100066ec:	10000326 	beq	r2,zero,100066fc <__sbprintf+0x98>
100066f0:	8080030b 	ldhu	r2,12(r16)
100066f4:	10801014 	ori	r2,r2,64
100066f8:	8080030d 	sth	r2,12(r16)
100066fc:	8805883a 	mov	r2,r17
10006700:	dfc11d17 	ldw	ra,1140(sp)
10006704:	dc811c17 	ldw	r18,1136(sp)
10006708:	dc411b17 	ldw	r17,1132(sp)
1000670c:	dc011a17 	ldw	r16,1128(sp)
10006710:	dec11e04 	addi	sp,sp,1144
10006714:	f800283a 	ret
10006718:	047fffc4 	movi	r17,-1
1000671c:	003ff106 	br	100066e4 <__alt_data_end+0xf80066e4>

10006720 <__swsetup_r>:
10006720:	00840074 	movhi	r2,4097
10006724:	defffd04 	addi	sp,sp,-12
10006728:	1096c804 	addi	r2,r2,23328
1000672c:	dc400115 	stw	r17,4(sp)
10006730:	2023883a 	mov	r17,r4
10006734:	11000017 	ldw	r4,0(r2)
10006738:	dc000015 	stw	r16,0(sp)
1000673c:	dfc00215 	stw	ra,8(sp)
10006740:	2821883a 	mov	r16,r5
10006744:	20000226 	beq	r4,zero,10006750 <__swsetup_r+0x30>
10006748:	20800e17 	ldw	r2,56(r4)
1000674c:	10003126 	beq	r2,zero,10006814 <__swsetup_r+0xf4>
10006750:	8080030b 	ldhu	r2,12(r16)
10006754:	10c0020c 	andi	r3,r2,8
10006758:	1009883a 	mov	r4,r2
1000675c:	18000f26 	beq	r3,zero,1000679c <__swsetup_r+0x7c>
10006760:	80c00417 	ldw	r3,16(r16)
10006764:	18001526 	beq	r3,zero,100067bc <__swsetup_r+0x9c>
10006768:	1100004c 	andi	r4,r2,1
1000676c:	20001c1e 	bne	r4,zero,100067e0 <__swsetup_r+0xc0>
10006770:	1080008c 	andi	r2,r2,2
10006774:	1000291e 	bne	r2,zero,1000681c <__swsetup_r+0xfc>
10006778:	80800517 	ldw	r2,20(r16)
1000677c:	80800215 	stw	r2,8(r16)
10006780:	18001c26 	beq	r3,zero,100067f4 <__swsetup_r+0xd4>
10006784:	0005883a 	mov	r2,zero
10006788:	dfc00217 	ldw	ra,8(sp)
1000678c:	dc400117 	ldw	r17,4(sp)
10006790:	dc000017 	ldw	r16,0(sp)
10006794:	dec00304 	addi	sp,sp,12
10006798:	f800283a 	ret
1000679c:	2080040c 	andi	r2,r4,16
100067a0:	10002e26 	beq	r2,zero,1000685c <__swsetup_r+0x13c>
100067a4:	2080010c 	andi	r2,r4,4
100067a8:	10001e1e 	bne	r2,zero,10006824 <__swsetup_r+0x104>
100067ac:	80c00417 	ldw	r3,16(r16)
100067b0:	20800214 	ori	r2,r4,8
100067b4:	8080030d 	sth	r2,12(r16)
100067b8:	183feb1e 	bne	r3,zero,10006768 <__alt_data_end+0xf8006768>
100067bc:	1100a00c 	andi	r4,r2,640
100067c0:	01408004 	movi	r5,512
100067c4:	217fe826 	beq	r4,r5,10006768 <__alt_data_end+0xf8006768>
100067c8:	800b883a 	mov	r5,r16
100067cc:	8809883a 	mov	r4,r17
100067d0:	00092dc0 	call	100092dc <__smakebuf_r>
100067d4:	8080030b 	ldhu	r2,12(r16)
100067d8:	80c00417 	ldw	r3,16(r16)
100067dc:	003fe206 	br	10006768 <__alt_data_end+0xf8006768>
100067e0:	80800517 	ldw	r2,20(r16)
100067e4:	80000215 	stw	zero,8(r16)
100067e8:	0085c83a 	sub	r2,zero,r2
100067ec:	80800615 	stw	r2,24(r16)
100067f0:	183fe41e 	bne	r3,zero,10006784 <__alt_data_end+0xf8006784>
100067f4:	80c0030b 	ldhu	r3,12(r16)
100067f8:	0005883a 	mov	r2,zero
100067fc:	1900200c 	andi	r4,r3,128
10006800:	203fe126 	beq	r4,zero,10006788 <__alt_data_end+0xf8006788>
10006804:	18c01014 	ori	r3,r3,64
10006808:	80c0030d 	sth	r3,12(r16)
1000680c:	00bfffc4 	movi	r2,-1
10006810:	003fdd06 	br	10006788 <__alt_data_end+0xf8006788>
10006814:	000872c0 	call	1000872c <__sinit>
10006818:	003fcd06 	br	10006750 <__alt_data_end+0xf8006750>
1000681c:	0005883a 	mov	r2,zero
10006820:	003fd606 	br	1000677c <__alt_data_end+0xf800677c>
10006824:	81400c17 	ldw	r5,48(r16)
10006828:	28000626 	beq	r5,zero,10006844 <__swsetup_r+0x124>
1000682c:	80801004 	addi	r2,r16,64
10006830:	28800326 	beq	r5,r2,10006840 <__swsetup_r+0x120>
10006834:	8809883a 	mov	r4,r17
10006838:	00088a00 	call	100088a0 <_free_r>
1000683c:	8100030b 	ldhu	r4,12(r16)
10006840:	80000c15 	stw	zero,48(r16)
10006844:	80c00417 	ldw	r3,16(r16)
10006848:	00bff6c4 	movi	r2,-37
1000684c:	1108703a 	and	r4,r2,r4
10006850:	80000115 	stw	zero,4(r16)
10006854:	80c00015 	stw	r3,0(r16)
10006858:	003fd506 	br	100067b0 <__alt_data_end+0xf80067b0>
1000685c:	00800244 	movi	r2,9
10006860:	88800015 	stw	r2,0(r17)
10006864:	20801014 	ori	r2,r4,64
10006868:	8080030d 	sth	r2,12(r16)
1000686c:	00bfffc4 	movi	r2,-1
10006870:	003fc506 	br	10006788 <__alt_data_end+0xf8006788>

10006874 <quorem>:
10006874:	defff204 	addi	sp,sp,-56
10006878:	ddc00b15 	stw	r23,44(sp)
1000687c:	20800417 	ldw	r2,16(r4)
10006880:	2dc00417 	ldw	r23,16(r5)
10006884:	dfc00d15 	stw	ra,52(sp)
10006888:	df000c15 	stw	fp,48(sp)
1000688c:	dd800a15 	stw	r22,40(sp)
10006890:	dd400915 	stw	r21,36(sp)
10006894:	dd000815 	stw	r20,32(sp)
10006898:	dcc00715 	stw	r19,28(sp)
1000689c:	dc800615 	stw	r18,24(sp)
100068a0:	dc400515 	stw	r17,20(sp)
100068a4:	dc000415 	stw	r16,16(sp)
100068a8:	15c07a16 	blt	r2,r23,10006a94 <quorem+0x220>
100068ac:	bdffffc4 	addi	r23,r23,-1
100068b0:	bde9883a 	add	r20,r23,r23
100068b4:	28c00504 	addi	r3,r5,20
100068b8:	a529883a 	add	r20,r20,r20
100068bc:	1d39883a 	add	fp,r3,r20
100068c0:	24c00504 	addi	r19,r4,20
100068c4:	d9400215 	stw	r5,8(sp)
100068c8:	9d29883a 	add	r20,r19,r20
100068cc:	e1400017 	ldw	r5,0(fp)
100068d0:	d9000015 	stw	r4,0(sp)
100068d4:	a1000017 	ldw	r4,0(r20)
100068d8:	29400044 	addi	r5,r5,1
100068dc:	d8c00115 	stw	r3,4(sp)
100068e0:	dd000315 	stw	r20,12(sp)
100068e4:	0003fb00 	call	10003fb0 <__udivsi3>
100068e8:	1025883a 	mov	r18,r2
100068ec:	10003026 	beq	r2,zero,100069b0 <quorem+0x13c>
100068f0:	dc400117 	ldw	r17,4(sp)
100068f4:	9829883a 	mov	r20,r19
100068f8:	002d883a 	mov	r22,zero
100068fc:	0021883a 	mov	r16,zero
10006900:	8d400017 	ldw	r21,0(r17)
10006904:	900b883a 	mov	r5,r18
10006908:	8c400104 	addi	r17,r17,4
1000690c:	a93fffcc 	andi	r4,r21,65535
10006910:	000e52c0 	call	1000e52c <__mulsi3>
10006914:	a808d43a 	srli	r4,r21,16
10006918:	900b883a 	mov	r5,r18
1000691c:	15ad883a 	add	r22,r2,r22
10006920:	000e52c0 	call	1000e52c <__mulsi3>
10006924:	a1000017 	ldw	r4,0(r20)
10006928:	b00cd43a 	srli	r6,r22,16
1000692c:	b0ffffcc 	andi	r3,r22,65535
10006930:	217fffcc 	andi	r5,r4,65535
10006934:	2c21883a 	add	r16,r5,r16
10006938:	80c7c83a 	sub	r3,r16,r3
1000693c:	2008d43a 	srli	r4,r4,16
10006940:	1185883a 	add	r2,r2,r6
10006944:	1821d43a 	srai	r16,r3,16
10006948:	117fffcc 	andi	r5,r2,65535
1000694c:	2149c83a 	sub	r4,r4,r5
10006950:	2421883a 	add	r16,r4,r16
10006954:	8008943a 	slli	r4,r16,16
10006958:	18ffffcc 	andi	r3,r3,65535
1000695c:	102cd43a 	srli	r22,r2,16
10006960:	20c8b03a 	or	r4,r4,r3
10006964:	a1000015 	stw	r4,0(r20)
10006968:	8021d43a 	srai	r16,r16,16
1000696c:	a5000104 	addi	r20,r20,4
10006970:	e47fe32e 	bgeu	fp,r17,10006900 <__alt_data_end+0xf8006900>
10006974:	d8c00317 	ldw	r3,12(sp)
10006978:	18800017 	ldw	r2,0(r3)
1000697c:	10000c1e 	bne	r2,zero,100069b0 <quorem+0x13c>
10006980:	18bfff04 	addi	r2,r3,-4
10006984:	9880082e 	bgeu	r19,r2,100069a8 <quorem+0x134>
10006988:	18ffff17 	ldw	r3,-4(r3)
1000698c:	18000326 	beq	r3,zero,1000699c <quorem+0x128>
10006990:	00000506 	br	100069a8 <quorem+0x134>
10006994:	10c00017 	ldw	r3,0(r2)
10006998:	1800031e 	bne	r3,zero,100069a8 <quorem+0x134>
1000699c:	10bfff04 	addi	r2,r2,-4
100069a0:	bdffffc4 	addi	r23,r23,-1
100069a4:	98bffb36 	bltu	r19,r2,10006994 <__alt_data_end+0xf8006994>
100069a8:	d8c00017 	ldw	r3,0(sp)
100069ac:	1dc00415 	stw	r23,16(r3)
100069b0:	d9400217 	ldw	r5,8(sp)
100069b4:	d9000017 	ldw	r4,0(sp)
100069b8:	000a9b00 	call	1000a9b0 <__mcmp>
100069bc:	10002816 	blt	r2,zero,10006a60 <quorem+0x1ec>
100069c0:	dc400117 	ldw	r17,4(sp)
100069c4:	94800044 	addi	r18,r18,1
100069c8:	980d883a 	mov	r6,r19
100069cc:	0007883a 	mov	r3,zero
100069d0:	31000017 	ldw	r4,0(r6)
100069d4:	89400017 	ldw	r5,0(r17)
100069d8:	31800104 	addi	r6,r6,4
100069dc:	20bfffcc 	andi	r2,r4,65535
100069e0:	10c7883a 	add	r3,r2,r3
100069e4:	28bfffcc 	andi	r2,r5,65535
100069e8:	1885c83a 	sub	r2,r3,r2
100069ec:	280ad43a 	srli	r5,r5,16
100069f0:	2008d43a 	srli	r4,r4,16
100069f4:	1007d43a 	srai	r3,r2,16
100069f8:	10bfffcc 	andi	r2,r2,65535
100069fc:	2149c83a 	sub	r4,r4,r5
10006a00:	20c9883a 	add	r4,r4,r3
10006a04:	200a943a 	slli	r5,r4,16
10006a08:	8c400104 	addi	r17,r17,4
10006a0c:	2007d43a 	srai	r3,r4,16
10006a10:	2884b03a 	or	r2,r5,r2
10006a14:	30bfff15 	stw	r2,-4(r6)
10006a18:	e47fed2e 	bgeu	fp,r17,100069d0 <__alt_data_end+0xf80069d0>
10006a1c:	bdc5883a 	add	r2,r23,r23
10006a20:	1085883a 	add	r2,r2,r2
10006a24:	9887883a 	add	r3,r19,r2
10006a28:	18800017 	ldw	r2,0(r3)
10006a2c:	10000c1e 	bne	r2,zero,10006a60 <quorem+0x1ec>
10006a30:	18bfff04 	addi	r2,r3,-4
10006a34:	9880082e 	bgeu	r19,r2,10006a58 <quorem+0x1e4>
10006a38:	18ffff17 	ldw	r3,-4(r3)
10006a3c:	18000326 	beq	r3,zero,10006a4c <quorem+0x1d8>
10006a40:	00000506 	br	10006a58 <quorem+0x1e4>
10006a44:	10c00017 	ldw	r3,0(r2)
10006a48:	1800031e 	bne	r3,zero,10006a58 <quorem+0x1e4>
10006a4c:	10bfff04 	addi	r2,r2,-4
10006a50:	bdffffc4 	addi	r23,r23,-1
10006a54:	98bffb36 	bltu	r19,r2,10006a44 <__alt_data_end+0xf8006a44>
10006a58:	d8c00017 	ldw	r3,0(sp)
10006a5c:	1dc00415 	stw	r23,16(r3)
10006a60:	9005883a 	mov	r2,r18
10006a64:	dfc00d17 	ldw	ra,52(sp)
10006a68:	df000c17 	ldw	fp,48(sp)
10006a6c:	ddc00b17 	ldw	r23,44(sp)
10006a70:	dd800a17 	ldw	r22,40(sp)
10006a74:	dd400917 	ldw	r21,36(sp)
10006a78:	dd000817 	ldw	r20,32(sp)
10006a7c:	dcc00717 	ldw	r19,28(sp)
10006a80:	dc800617 	ldw	r18,24(sp)
10006a84:	dc400517 	ldw	r17,20(sp)
10006a88:	dc000417 	ldw	r16,16(sp)
10006a8c:	dec00e04 	addi	sp,sp,56
10006a90:	f800283a 	ret
10006a94:	0005883a 	mov	r2,zero
10006a98:	003ff206 	br	10006a64 <__alt_data_end+0xf8006a64>

10006a9c <_dtoa_r>:
10006a9c:	20801017 	ldw	r2,64(r4)
10006aa0:	deffde04 	addi	sp,sp,-136
10006aa4:	df002015 	stw	fp,128(sp)
10006aa8:	dcc01b15 	stw	r19,108(sp)
10006aac:	dc801a15 	stw	r18,104(sp)
10006ab0:	dc401915 	stw	r17,100(sp)
10006ab4:	dc001815 	stw	r16,96(sp)
10006ab8:	dfc02115 	stw	ra,132(sp)
10006abc:	ddc01f15 	stw	r23,124(sp)
10006ac0:	dd801e15 	stw	r22,120(sp)
10006ac4:	dd401d15 	stw	r21,116(sp)
10006ac8:	dd001c15 	stw	r20,112(sp)
10006acc:	d9c00315 	stw	r7,12(sp)
10006ad0:	2039883a 	mov	fp,r4
10006ad4:	3023883a 	mov	r17,r6
10006ad8:	2825883a 	mov	r18,r5
10006adc:	dc002417 	ldw	r16,144(sp)
10006ae0:	3027883a 	mov	r19,r6
10006ae4:	10000826 	beq	r2,zero,10006b08 <_dtoa_r+0x6c>
10006ae8:	21801117 	ldw	r6,68(r4)
10006aec:	00c00044 	movi	r3,1
10006af0:	100b883a 	mov	r5,r2
10006af4:	1986983a 	sll	r3,r3,r6
10006af8:	11800115 	stw	r6,4(r2)
10006afc:	10c00215 	stw	r3,8(r2)
10006b00:	000a0d40 	call	1000a0d4 <_Bfree>
10006b04:	e0001015 	stw	zero,64(fp)
10006b08:	88002e16 	blt	r17,zero,10006bc4 <_dtoa_r+0x128>
10006b0c:	80000015 	stw	zero,0(r16)
10006b10:	889ffc2c 	andhi	r2,r17,32752
10006b14:	00dffc34 	movhi	r3,32752
10006b18:	10c01c26 	beq	r2,r3,10006b8c <_dtoa_r+0xf0>
10006b1c:	000d883a 	mov	r6,zero
10006b20:	000f883a 	mov	r7,zero
10006b24:	9009883a 	mov	r4,r18
10006b28:	980b883a 	mov	r5,r19
10006b2c:	000f7d00 	call	1000f7d0 <__eqdf2>
10006b30:	10002b1e 	bne	r2,zero,10006be0 <_dtoa_r+0x144>
10006b34:	d9c02317 	ldw	r7,140(sp)
10006b38:	00800044 	movi	r2,1
10006b3c:	38800015 	stw	r2,0(r7)
10006b40:	d8802517 	ldw	r2,148(sp)
10006b44:	10019e26 	beq	r2,zero,100071c0 <_dtoa_r+0x724>
10006b48:	d8c02517 	ldw	r3,148(sp)
10006b4c:	00840074 	movhi	r2,4097
10006b50:	108f6d44 	addi	r2,r2,15797
10006b54:	18800015 	stw	r2,0(r3)
10006b58:	10bfffc4 	addi	r2,r2,-1
10006b5c:	dfc02117 	ldw	ra,132(sp)
10006b60:	df002017 	ldw	fp,128(sp)
10006b64:	ddc01f17 	ldw	r23,124(sp)
10006b68:	dd801e17 	ldw	r22,120(sp)
10006b6c:	dd401d17 	ldw	r21,116(sp)
10006b70:	dd001c17 	ldw	r20,112(sp)
10006b74:	dcc01b17 	ldw	r19,108(sp)
10006b78:	dc801a17 	ldw	r18,104(sp)
10006b7c:	dc401917 	ldw	r17,100(sp)
10006b80:	dc001817 	ldw	r16,96(sp)
10006b84:	dec02204 	addi	sp,sp,136
10006b88:	f800283a 	ret
10006b8c:	d8c02317 	ldw	r3,140(sp)
10006b90:	0089c3c4 	movi	r2,9999
10006b94:	18800015 	stw	r2,0(r3)
10006b98:	90017726 	beq	r18,zero,10007178 <_dtoa_r+0x6dc>
10006b9c:	00840074 	movhi	r2,4097
10006ba0:	108f7904 	addi	r2,r2,15844
10006ba4:	d9002517 	ldw	r4,148(sp)
10006ba8:	203fec26 	beq	r4,zero,10006b5c <__alt_data_end+0xf8006b5c>
10006bac:	10c000c7 	ldb	r3,3(r2)
10006bb0:	1801781e 	bne	r3,zero,10007194 <_dtoa_r+0x6f8>
10006bb4:	10c000c4 	addi	r3,r2,3
10006bb8:	d9802517 	ldw	r6,148(sp)
10006bbc:	30c00015 	stw	r3,0(r6)
10006bc0:	003fe606 	br	10006b5c <__alt_data_end+0xf8006b5c>
10006bc4:	04e00034 	movhi	r19,32768
10006bc8:	9cffffc4 	addi	r19,r19,-1
10006bcc:	00800044 	movi	r2,1
10006bd0:	8ce6703a 	and	r19,r17,r19
10006bd4:	80800015 	stw	r2,0(r16)
10006bd8:	9823883a 	mov	r17,r19
10006bdc:	003fcc06 	br	10006b10 <__alt_data_end+0xf8006b10>
10006be0:	d8800204 	addi	r2,sp,8
10006be4:	d8800015 	stw	r2,0(sp)
10006be8:	d9c00104 	addi	r7,sp,4
10006bec:	900b883a 	mov	r5,r18
10006bf0:	980d883a 	mov	r6,r19
10006bf4:	e009883a 	mov	r4,fp
10006bf8:	8820d53a 	srli	r16,r17,20
10006bfc:	000ad7c0 	call	1000ad7c <__d2b>
10006c00:	d8800915 	stw	r2,36(sp)
10006c04:	8001651e 	bne	r16,zero,1000719c <_dtoa_r+0x700>
10006c08:	dd800217 	ldw	r22,8(sp)
10006c0c:	dc000117 	ldw	r16,4(sp)
10006c10:	00800804 	movi	r2,32
10006c14:	b421883a 	add	r16,r22,r16
10006c18:	80c10c84 	addi	r3,r16,1074
10006c1c:	10c2d10e 	bge	r2,r3,10007764 <_dtoa_r+0xcc8>
10006c20:	00801004 	movi	r2,64
10006c24:	81010484 	addi	r4,r16,1042
10006c28:	10c7c83a 	sub	r3,r2,r3
10006c2c:	9108d83a 	srl	r4,r18,r4
10006c30:	88e2983a 	sll	r17,r17,r3
10006c34:	2448b03a 	or	r4,r4,r17
10006c38:	0010cec0 	call	10010cec <__floatunsidf>
10006c3c:	017f8434 	movhi	r5,65040
10006c40:	01800044 	movi	r6,1
10006c44:	1009883a 	mov	r4,r2
10006c48:	194b883a 	add	r5,r3,r5
10006c4c:	843fffc4 	addi	r16,r16,-1
10006c50:	d9801115 	stw	r6,68(sp)
10006c54:	000d883a 	mov	r6,zero
10006c58:	01cffe34 	movhi	r7,16376
10006c5c:	00102940 	call	10010294 <__subdf3>
10006c60:	0198dbf4 	movhi	r6,25455
10006c64:	01cff4f4 	movhi	r7,16339
10006c68:	3190d844 	addi	r6,r6,17249
10006c6c:	39e1e9c4 	addi	r7,r7,-30809
10006c70:	1009883a 	mov	r4,r2
10006c74:	180b883a 	mov	r5,r3
10006c78:	000fa280 	call	1000fa28 <__muldf3>
10006c7c:	01a2d874 	movhi	r6,35681
10006c80:	01cff1f4 	movhi	r7,16327
10006c84:	31b22cc4 	addi	r6,r6,-14157
10006c88:	39e28a04 	addi	r7,r7,-30168
10006c8c:	180b883a 	mov	r5,r3
10006c90:	1009883a 	mov	r4,r2
10006c94:	000e5540 	call	1000e554 <__adddf3>
10006c98:	8009883a 	mov	r4,r16
10006c9c:	1029883a 	mov	r20,r2
10006ca0:	1823883a 	mov	r17,r3
10006ca4:	0010c100 	call	10010c10 <__floatsidf>
10006ca8:	019427f4 	movhi	r6,20639
10006cac:	01cff4f4 	movhi	r7,16339
10006cb0:	319e7ec4 	addi	r6,r6,31227
10006cb4:	39d104c4 	addi	r7,r7,17427
10006cb8:	1009883a 	mov	r4,r2
10006cbc:	180b883a 	mov	r5,r3
10006cc0:	000fa280 	call	1000fa28 <__muldf3>
10006cc4:	100d883a 	mov	r6,r2
10006cc8:	180f883a 	mov	r7,r3
10006ccc:	a009883a 	mov	r4,r20
10006cd0:	880b883a 	mov	r5,r17
10006cd4:	000e5540 	call	1000e554 <__adddf3>
10006cd8:	1009883a 	mov	r4,r2
10006cdc:	180b883a 	mov	r5,r3
10006ce0:	1029883a 	mov	r20,r2
10006ce4:	1823883a 	mov	r17,r3
10006ce8:	0010b900 	call	10010b90 <__fixdfsi>
10006cec:	000d883a 	mov	r6,zero
10006cf0:	000f883a 	mov	r7,zero
10006cf4:	a009883a 	mov	r4,r20
10006cf8:	880b883a 	mov	r5,r17
10006cfc:	d8800515 	stw	r2,20(sp)
10006d00:	000f9340 	call	1000f934 <__ledf2>
10006d04:	10028716 	blt	r2,zero,10007724 <_dtoa_r+0xc88>
10006d08:	d8c00517 	ldw	r3,20(sp)
10006d0c:	00800584 	movi	r2,22
10006d10:	10c27536 	bltu	r2,r3,100076e8 <_dtoa_r+0xc4c>
10006d14:	180490fa 	slli	r2,r3,3
10006d18:	00c40074 	movhi	r3,4097
10006d1c:	18cf9504 	addi	r3,r3,15956
10006d20:	1885883a 	add	r2,r3,r2
10006d24:	11000017 	ldw	r4,0(r2)
10006d28:	11400117 	ldw	r5,4(r2)
10006d2c:	900d883a 	mov	r6,r18
10006d30:	980f883a 	mov	r7,r19
10006d34:	000f8580 	call	1000f858 <__gedf2>
10006d38:	00828d0e 	bge	zero,r2,10007770 <_dtoa_r+0xcd4>
10006d3c:	d9000517 	ldw	r4,20(sp)
10006d40:	d8000e15 	stw	zero,56(sp)
10006d44:	213fffc4 	addi	r4,r4,-1
10006d48:	d9000515 	stw	r4,20(sp)
10006d4c:	b42dc83a 	sub	r22,r22,r16
10006d50:	b5bfffc4 	addi	r22,r22,-1
10006d54:	b0026f16 	blt	r22,zero,10007714 <_dtoa_r+0xc78>
10006d58:	d8000815 	stw	zero,32(sp)
10006d5c:	d9c00517 	ldw	r7,20(sp)
10006d60:	38026416 	blt	r7,zero,100076f4 <_dtoa_r+0xc58>
10006d64:	b1ed883a 	add	r22,r22,r7
10006d68:	d9c00d15 	stw	r7,52(sp)
10006d6c:	d8000a15 	stw	zero,40(sp)
10006d70:	d9800317 	ldw	r6,12(sp)
10006d74:	00800244 	movi	r2,9
10006d78:	11811436 	bltu	r2,r6,100071cc <_dtoa_r+0x730>
10006d7c:	00800144 	movi	r2,5
10006d80:	1184e10e 	bge	r2,r6,10008108 <_dtoa_r+0x166c>
10006d84:	31bfff04 	addi	r6,r6,-4
10006d88:	d9800315 	stw	r6,12(sp)
10006d8c:	0023883a 	mov	r17,zero
10006d90:	d9800317 	ldw	r6,12(sp)
10006d94:	008000c4 	movi	r2,3
10006d98:	30836726 	beq	r6,r2,10007b38 <_dtoa_r+0x109c>
10006d9c:	1183410e 	bge	r2,r6,10007aa4 <_dtoa_r+0x1008>
10006da0:	d9c00317 	ldw	r7,12(sp)
10006da4:	00800104 	movi	r2,4
10006da8:	38827c26 	beq	r7,r2,1000779c <_dtoa_r+0xd00>
10006dac:	00800144 	movi	r2,5
10006db0:	3884c41e 	bne	r7,r2,100080c4 <_dtoa_r+0x1628>
10006db4:	00800044 	movi	r2,1
10006db8:	d8800b15 	stw	r2,44(sp)
10006dbc:	d8c00517 	ldw	r3,20(sp)
10006dc0:	d9002217 	ldw	r4,136(sp)
10006dc4:	1907883a 	add	r3,r3,r4
10006dc8:	19800044 	addi	r6,r3,1
10006dcc:	d8c00c15 	stw	r3,48(sp)
10006dd0:	d9800615 	stw	r6,24(sp)
10006dd4:	0183a40e 	bge	zero,r6,10007c68 <_dtoa_r+0x11cc>
10006dd8:	d9800617 	ldw	r6,24(sp)
10006ddc:	3021883a 	mov	r16,r6
10006de0:	e0001115 	stw	zero,68(fp)
10006de4:	008005c4 	movi	r2,23
10006de8:	1184c92e 	bgeu	r2,r6,10008110 <_dtoa_r+0x1674>
10006dec:	00c00044 	movi	r3,1
10006df0:	00800104 	movi	r2,4
10006df4:	1085883a 	add	r2,r2,r2
10006df8:	11000504 	addi	r4,r2,20
10006dfc:	180b883a 	mov	r5,r3
10006e00:	18c00044 	addi	r3,r3,1
10006e04:	313ffb2e 	bgeu	r6,r4,10006df4 <__alt_data_end+0xf8006df4>
10006e08:	e1401115 	stw	r5,68(fp)
10006e0c:	e009883a 	mov	r4,fp
10006e10:	000a02c0 	call	1000a02c <_Balloc>
10006e14:	d8800715 	stw	r2,28(sp)
10006e18:	e0801015 	stw	r2,64(fp)
10006e1c:	00800384 	movi	r2,14
10006e20:	1400f736 	bltu	r2,r16,10007200 <_dtoa_r+0x764>
10006e24:	8800f626 	beq	r17,zero,10007200 <_dtoa_r+0x764>
10006e28:	d9c00517 	ldw	r7,20(sp)
10006e2c:	01c39a0e 	bge	zero,r7,10007c98 <_dtoa_r+0x11fc>
10006e30:	388003cc 	andi	r2,r7,15
10006e34:	100490fa 	slli	r2,r2,3
10006e38:	382bd13a 	srai	r21,r7,4
10006e3c:	00c40074 	movhi	r3,4097
10006e40:	18cf9504 	addi	r3,r3,15956
10006e44:	1885883a 	add	r2,r3,r2
10006e48:	a8c0040c 	andi	r3,r21,16
10006e4c:	12400017 	ldw	r9,0(r2)
10006e50:	12000117 	ldw	r8,4(r2)
10006e54:	18037926 	beq	r3,zero,10007c3c <_dtoa_r+0x11a0>
10006e58:	00840074 	movhi	r2,4097
10006e5c:	108f8b04 	addi	r2,r2,15916
10006e60:	11800817 	ldw	r6,32(r2)
10006e64:	11c00917 	ldw	r7,36(r2)
10006e68:	9009883a 	mov	r4,r18
10006e6c:	980b883a 	mov	r5,r19
10006e70:	da001715 	stw	r8,92(sp)
10006e74:	da401615 	stw	r9,88(sp)
10006e78:	000ee000 	call	1000ee00 <__divdf3>
10006e7c:	da001717 	ldw	r8,92(sp)
10006e80:	da401617 	ldw	r9,88(sp)
10006e84:	ad4003cc 	andi	r21,r21,15
10006e88:	040000c4 	movi	r16,3
10006e8c:	1023883a 	mov	r17,r2
10006e90:	1829883a 	mov	r20,r3
10006e94:	a8001126 	beq	r21,zero,10006edc <_dtoa_r+0x440>
10006e98:	05c40074 	movhi	r23,4097
10006e9c:	bdcf8b04 	addi	r23,r23,15916
10006ea0:	4805883a 	mov	r2,r9
10006ea4:	4007883a 	mov	r3,r8
10006ea8:	a980004c 	andi	r6,r21,1
10006eac:	1009883a 	mov	r4,r2
10006eb0:	a82bd07a 	srai	r21,r21,1
10006eb4:	180b883a 	mov	r5,r3
10006eb8:	30000426 	beq	r6,zero,10006ecc <_dtoa_r+0x430>
10006ebc:	b9800017 	ldw	r6,0(r23)
10006ec0:	b9c00117 	ldw	r7,4(r23)
10006ec4:	84000044 	addi	r16,r16,1
10006ec8:	000fa280 	call	1000fa28 <__muldf3>
10006ecc:	bdc00204 	addi	r23,r23,8
10006ed0:	a83ff51e 	bne	r21,zero,10006ea8 <__alt_data_end+0xf8006ea8>
10006ed4:	1013883a 	mov	r9,r2
10006ed8:	1811883a 	mov	r8,r3
10006edc:	480d883a 	mov	r6,r9
10006ee0:	400f883a 	mov	r7,r8
10006ee4:	8809883a 	mov	r4,r17
10006ee8:	a00b883a 	mov	r5,r20
10006eec:	000ee000 	call	1000ee00 <__divdf3>
10006ef0:	d8800f15 	stw	r2,60(sp)
10006ef4:	d8c01015 	stw	r3,64(sp)
10006ef8:	d8c00e17 	ldw	r3,56(sp)
10006efc:	18000626 	beq	r3,zero,10006f18 <_dtoa_r+0x47c>
10006f00:	d9000f17 	ldw	r4,60(sp)
10006f04:	d9401017 	ldw	r5,64(sp)
10006f08:	000d883a 	mov	r6,zero
10006f0c:	01cffc34 	movhi	r7,16368
10006f10:	000f9340 	call	1000f934 <__ledf2>
10006f14:	10040b16 	blt	r2,zero,10007f44 <_dtoa_r+0x14a8>
10006f18:	8009883a 	mov	r4,r16
10006f1c:	0010c100 	call	10010c10 <__floatsidf>
10006f20:	d9800f17 	ldw	r6,60(sp)
10006f24:	d9c01017 	ldw	r7,64(sp)
10006f28:	1009883a 	mov	r4,r2
10006f2c:	180b883a 	mov	r5,r3
10006f30:	000fa280 	call	1000fa28 <__muldf3>
10006f34:	000d883a 	mov	r6,zero
10006f38:	01d00734 	movhi	r7,16412
10006f3c:	1009883a 	mov	r4,r2
10006f40:	180b883a 	mov	r5,r3
10006f44:	000e5540 	call	1000e554 <__adddf3>
10006f48:	1021883a 	mov	r16,r2
10006f4c:	d8800617 	ldw	r2,24(sp)
10006f50:	047f3034 	movhi	r17,64704
10006f54:	1c63883a 	add	r17,r3,r17
10006f58:	10031826 	beq	r2,zero,10007bbc <_dtoa_r+0x1120>
10006f5c:	d8c00517 	ldw	r3,20(sp)
10006f60:	db000617 	ldw	r12,24(sp)
10006f64:	d8c01315 	stw	r3,76(sp)
10006f68:	d9000b17 	ldw	r4,44(sp)
10006f6c:	20038f26 	beq	r4,zero,10007dac <_dtoa_r+0x1310>
10006f70:	60bfffc4 	addi	r2,r12,-1
10006f74:	100490fa 	slli	r2,r2,3
10006f78:	00c40074 	movhi	r3,4097
10006f7c:	18cf9504 	addi	r3,r3,15956
10006f80:	1885883a 	add	r2,r3,r2
10006f84:	11800017 	ldw	r6,0(r2)
10006f88:	11c00117 	ldw	r7,4(r2)
10006f8c:	d8800717 	ldw	r2,28(sp)
10006f90:	0009883a 	mov	r4,zero
10006f94:	014ff834 	movhi	r5,16352
10006f98:	db001615 	stw	r12,88(sp)
10006f9c:	15c00044 	addi	r23,r2,1
10006fa0:	000ee000 	call	1000ee00 <__divdf3>
10006fa4:	800d883a 	mov	r6,r16
10006fa8:	880f883a 	mov	r7,r17
10006fac:	1009883a 	mov	r4,r2
10006fb0:	180b883a 	mov	r5,r3
10006fb4:	00102940 	call	10010294 <__subdf3>
10006fb8:	d9401017 	ldw	r5,64(sp)
10006fbc:	d9000f17 	ldw	r4,60(sp)
10006fc0:	102b883a 	mov	r21,r2
10006fc4:	d8c01215 	stw	r3,72(sp)
10006fc8:	0010b900 	call	10010b90 <__fixdfsi>
10006fcc:	1009883a 	mov	r4,r2
10006fd0:	1029883a 	mov	r20,r2
10006fd4:	0010c100 	call	10010c10 <__floatsidf>
10006fd8:	d9000f17 	ldw	r4,60(sp)
10006fdc:	d9401017 	ldw	r5,64(sp)
10006fe0:	100d883a 	mov	r6,r2
10006fe4:	180f883a 	mov	r7,r3
10006fe8:	00102940 	call	10010294 <__subdf3>
10006fec:	1823883a 	mov	r17,r3
10006ff0:	d8c00717 	ldw	r3,28(sp)
10006ff4:	d9401217 	ldw	r5,72(sp)
10006ff8:	a2000c04 	addi	r8,r20,48
10006ffc:	1021883a 	mov	r16,r2
10007000:	1a000005 	stb	r8,0(r3)
10007004:	800d883a 	mov	r6,r16
10007008:	880f883a 	mov	r7,r17
1000700c:	a809883a 	mov	r4,r21
10007010:	4029883a 	mov	r20,r8
10007014:	000f8580 	call	1000f858 <__gedf2>
10007018:	00841d16 	blt	zero,r2,10008090 <_dtoa_r+0x15f4>
1000701c:	800d883a 	mov	r6,r16
10007020:	880f883a 	mov	r7,r17
10007024:	0009883a 	mov	r4,zero
10007028:	014ffc34 	movhi	r5,16368
1000702c:	00102940 	call	10010294 <__subdf3>
10007030:	d9401217 	ldw	r5,72(sp)
10007034:	100d883a 	mov	r6,r2
10007038:	180f883a 	mov	r7,r3
1000703c:	a809883a 	mov	r4,r21
10007040:	000f8580 	call	1000f858 <__gedf2>
10007044:	db001617 	ldw	r12,88(sp)
10007048:	00840e16 	blt	zero,r2,10008084 <_dtoa_r+0x15e8>
1000704c:	00800044 	movi	r2,1
10007050:	13006b0e 	bge	r2,r12,10007200 <_dtoa_r+0x764>
10007054:	d9000717 	ldw	r4,28(sp)
10007058:	dd800f15 	stw	r22,60(sp)
1000705c:	dcc01015 	stw	r19,64(sp)
10007060:	2319883a 	add	r12,r4,r12
10007064:	dcc01217 	ldw	r19,72(sp)
10007068:	602d883a 	mov	r22,r12
1000706c:	dc801215 	stw	r18,72(sp)
10007070:	b825883a 	mov	r18,r23
10007074:	00000906 	br	1000709c <_dtoa_r+0x600>
10007078:	00102940 	call	10010294 <__subdf3>
1000707c:	a80d883a 	mov	r6,r21
10007080:	980f883a 	mov	r7,r19
10007084:	1009883a 	mov	r4,r2
10007088:	180b883a 	mov	r5,r3
1000708c:	000f9340 	call	1000f934 <__ledf2>
10007090:	1003e816 	blt	r2,zero,10008034 <_dtoa_r+0x1598>
10007094:	b825883a 	mov	r18,r23
10007098:	bd83e926 	beq	r23,r22,10008040 <_dtoa_r+0x15a4>
1000709c:	a809883a 	mov	r4,r21
100070a0:	980b883a 	mov	r5,r19
100070a4:	000d883a 	mov	r6,zero
100070a8:	01d00934 	movhi	r7,16420
100070ac:	000fa280 	call	1000fa28 <__muldf3>
100070b0:	000d883a 	mov	r6,zero
100070b4:	01d00934 	movhi	r7,16420
100070b8:	8009883a 	mov	r4,r16
100070bc:	880b883a 	mov	r5,r17
100070c0:	102b883a 	mov	r21,r2
100070c4:	1827883a 	mov	r19,r3
100070c8:	000fa280 	call	1000fa28 <__muldf3>
100070cc:	180b883a 	mov	r5,r3
100070d0:	1009883a 	mov	r4,r2
100070d4:	1821883a 	mov	r16,r3
100070d8:	1023883a 	mov	r17,r2
100070dc:	0010b900 	call	10010b90 <__fixdfsi>
100070e0:	1009883a 	mov	r4,r2
100070e4:	1029883a 	mov	r20,r2
100070e8:	0010c100 	call	10010c10 <__floatsidf>
100070ec:	8809883a 	mov	r4,r17
100070f0:	800b883a 	mov	r5,r16
100070f4:	100d883a 	mov	r6,r2
100070f8:	180f883a 	mov	r7,r3
100070fc:	00102940 	call	10010294 <__subdf3>
10007100:	a5000c04 	addi	r20,r20,48
10007104:	a80d883a 	mov	r6,r21
10007108:	980f883a 	mov	r7,r19
1000710c:	1009883a 	mov	r4,r2
10007110:	180b883a 	mov	r5,r3
10007114:	95000005 	stb	r20,0(r18)
10007118:	1021883a 	mov	r16,r2
1000711c:	1823883a 	mov	r17,r3
10007120:	000f9340 	call	1000f934 <__ledf2>
10007124:	bdc00044 	addi	r23,r23,1
10007128:	800d883a 	mov	r6,r16
1000712c:	880f883a 	mov	r7,r17
10007130:	0009883a 	mov	r4,zero
10007134:	014ffc34 	movhi	r5,16368
10007138:	103fcf0e 	bge	r2,zero,10007078 <__alt_data_end+0xf8007078>
1000713c:	d8c01317 	ldw	r3,76(sp)
10007140:	d8c00515 	stw	r3,20(sp)
10007144:	d9400917 	ldw	r5,36(sp)
10007148:	e009883a 	mov	r4,fp
1000714c:	000a0d40 	call	1000a0d4 <_Bfree>
10007150:	d9000517 	ldw	r4,20(sp)
10007154:	d9802317 	ldw	r6,140(sp)
10007158:	d9c02517 	ldw	r7,148(sp)
1000715c:	b8000005 	stb	zero,0(r23)
10007160:	20800044 	addi	r2,r4,1
10007164:	30800015 	stw	r2,0(r6)
10007168:	3802aa26 	beq	r7,zero,10007c14 <_dtoa_r+0x1178>
1000716c:	3dc00015 	stw	r23,0(r7)
10007170:	d8800717 	ldw	r2,28(sp)
10007174:	003e7906 	br	10006b5c <__alt_data_end+0xf8006b5c>
10007178:	00800434 	movhi	r2,16
1000717c:	10bfffc4 	addi	r2,r2,-1
10007180:	88a2703a 	and	r17,r17,r2
10007184:	883e851e 	bne	r17,zero,10006b9c <__alt_data_end+0xf8006b9c>
10007188:	00840074 	movhi	r2,4097
1000718c:	108f7604 	addi	r2,r2,15832
10007190:	003e8406 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10007194:	10c00204 	addi	r3,r2,8
10007198:	003e8706 	br	10006bb8 <__alt_data_end+0xf8006bb8>
1000719c:	01400434 	movhi	r5,16
100071a0:	297fffc4 	addi	r5,r5,-1
100071a4:	994a703a 	and	r5,r19,r5
100071a8:	9009883a 	mov	r4,r18
100071ac:	843f0044 	addi	r16,r16,-1023
100071b0:	294ffc34 	orhi	r5,r5,16368
100071b4:	dd800217 	ldw	r22,8(sp)
100071b8:	d8001115 	stw	zero,68(sp)
100071bc:	003ea506 	br	10006c54 <__alt_data_end+0xf8006c54>
100071c0:	00840074 	movhi	r2,4097
100071c4:	108f6d04 	addi	r2,r2,15796
100071c8:	003e6406 	br	10006b5c <__alt_data_end+0xf8006b5c>
100071cc:	e0001115 	stw	zero,68(fp)
100071d0:	000b883a 	mov	r5,zero
100071d4:	e009883a 	mov	r4,fp
100071d8:	000a02c0 	call	1000a02c <_Balloc>
100071dc:	01bfffc4 	movi	r6,-1
100071e0:	01c00044 	movi	r7,1
100071e4:	d8800715 	stw	r2,28(sp)
100071e8:	d9800c15 	stw	r6,48(sp)
100071ec:	e0801015 	stw	r2,64(fp)
100071f0:	d8000315 	stw	zero,12(sp)
100071f4:	d9c00b15 	stw	r7,44(sp)
100071f8:	d9800615 	stw	r6,24(sp)
100071fc:	d8002215 	stw	zero,136(sp)
10007200:	d8800117 	ldw	r2,4(sp)
10007204:	10008916 	blt	r2,zero,1000742c <_dtoa_r+0x990>
10007208:	d9000517 	ldw	r4,20(sp)
1000720c:	00c00384 	movi	r3,14
10007210:	19008616 	blt	r3,r4,1000742c <_dtoa_r+0x990>
10007214:	200490fa 	slli	r2,r4,3
10007218:	00c40074 	movhi	r3,4097
1000721c:	d9802217 	ldw	r6,136(sp)
10007220:	18cf9504 	addi	r3,r3,15956
10007224:	1885883a 	add	r2,r3,r2
10007228:	14000017 	ldw	r16,0(r2)
1000722c:	14400117 	ldw	r17,4(r2)
10007230:	30016316 	blt	r6,zero,100077c0 <_dtoa_r+0xd24>
10007234:	800d883a 	mov	r6,r16
10007238:	880f883a 	mov	r7,r17
1000723c:	9009883a 	mov	r4,r18
10007240:	980b883a 	mov	r5,r19
10007244:	000ee000 	call	1000ee00 <__divdf3>
10007248:	180b883a 	mov	r5,r3
1000724c:	1009883a 	mov	r4,r2
10007250:	0010b900 	call	10010b90 <__fixdfsi>
10007254:	1009883a 	mov	r4,r2
10007258:	102b883a 	mov	r21,r2
1000725c:	0010c100 	call	10010c10 <__floatsidf>
10007260:	800d883a 	mov	r6,r16
10007264:	880f883a 	mov	r7,r17
10007268:	1009883a 	mov	r4,r2
1000726c:	180b883a 	mov	r5,r3
10007270:	000fa280 	call	1000fa28 <__muldf3>
10007274:	100d883a 	mov	r6,r2
10007278:	180f883a 	mov	r7,r3
1000727c:	9009883a 	mov	r4,r18
10007280:	980b883a 	mov	r5,r19
10007284:	00102940 	call	10010294 <__subdf3>
10007288:	d9c00717 	ldw	r7,28(sp)
1000728c:	1009883a 	mov	r4,r2
10007290:	a8800c04 	addi	r2,r21,48
10007294:	38800005 	stb	r2,0(r7)
10007298:	3dc00044 	addi	r23,r7,1
1000729c:	d9c00617 	ldw	r7,24(sp)
100072a0:	01800044 	movi	r6,1
100072a4:	180b883a 	mov	r5,r3
100072a8:	2005883a 	mov	r2,r4
100072ac:	39803826 	beq	r7,r6,10007390 <_dtoa_r+0x8f4>
100072b0:	000d883a 	mov	r6,zero
100072b4:	01d00934 	movhi	r7,16420
100072b8:	000fa280 	call	1000fa28 <__muldf3>
100072bc:	000d883a 	mov	r6,zero
100072c0:	000f883a 	mov	r7,zero
100072c4:	1009883a 	mov	r4,r2
100072c8:	180b883a 	mov	r5,r3
100072cc:	1025883a 	mov	r18,r2
100072d0:	1827883a 	mov	r19,r3
100072d4:	000f7d00 	call	1000f7d0 <__eqdf2>
100072d8:	103f9a26 	beq	r2,zero,10007144 <__alt_data_end+0xf8007144>
100072dc:	d9c00617 	ldw	r7,24(sp)
100072e0:	d8c00717 	ldw	r3,28(sp)
100072e4:	b829883a 	mov	r20,r23
100072e8:	38bfffc4 	addi	r2,r7,-1
100072ec:	18ad883a 	add	r22,r3,r2
100072f0:	00000a06 	br	1000731c <_dtoa_r+0x880>
100072f4:	000fa280 	call	1000fa28 <__muldf3>
100072f8:	000d883a 	mov	r6,zero
100072fc:	000f883a 	mov	r7,zero
10007300:	1009883a 	mov	r4,r2
10007304:	180b883a 	mov	r5,r3
10007308:	1025883a 	mov	r18,r2
1000730c:	1827883a 	mov	r19,r3
10007310:	b829883a 	mov	r20,r23
10007314:	000f7d00 	call	1000f7d0 <__eqdf2>
10007318:	103f8a26 	beq	r2,zero,10007144 <__alt_data_end+0xf8007144>
1000731c:	800d883a 	mov	r6,r16
10007320:	880f883a 	mov	r7,r17
10007324:	9009883a 	mov	r4,r18
10007328:	980b883a 	mov	r5,r19
1000732c:	000ee000 	call	1000ee00 <__divdf3>
10007330:	180b883a 	mov	r5,r3
10007334:	1009883a 	mov	r4,r2
10007338:	0010b900 	call	10010b90 <__fixdfsi>
1000733c:	1009883a 	mov	r4,r2
10007340:	102b883a 	mov	r21,r2
10007344:	0010c100 	call	10010c10 <__floatsidf>
10007348:	800d883a 	mov	r6,r16
1000734c:	880f883a 	mov	r7,r17
10007350:	1009883a 	mov	r4,r2
10007354:	180b883a 	mov	r5,r3
10007358:	000fa280 	call	1000fa28 <__muldf3>
1000735c:	100d883a 	mov	r6,r2
10007360:	180f883a 	mov	r7,r3
10007364:	9009883a 	mov	r4,r18
10007368:	980b883a 	mov	r5,r19
1000736c:	00102940 	call	10010294 <__subdf3>
10007370:	aa000c04 	addi	r8,r21,48
10007374:	a2000005 	stb	r8,0(r20)
10007378:	000d883a 	mov	r6,zero
1000737c:	01d00934 	movhi	r7,16420
10007380:	1009883a 	mov	r4,r2
10007384:	180b883a 	mov	r5,r3
10007388:	a5c00044 	addi	r23,r20,1
1000738c:	b53fd91e 	bne	r22,r20,100072f4 <__alt_data_end+0xf80072f4>
10007390:	100d883a 	mov	r6,r2
10007394:	180f883a 	mov	r7,r3
10007398:	1009883a 	mov	r4,r2
1000739c:	180b883a 	mov	r5,r3
100073a0:	000e5540 	call	1000e554 <__adddf3>
100073a4:	100d883a 	mov	r6,r2
100073a8:	180f883a 	mov	r7,r3
100073ac:	8009883a 	mov	r4,r16
100073b0:	880b883a 	mov	r5,r17
100073b4:	1027883a 	mov	r19,r2
100073b8:	1825883a 	mov	r18,r3
100073bc:	000f9340 	call	1000f934 <__ledf2>
100073c0:	10000816 	blt	r2,zero,100073e4 <_dtoa_r+0x948>
100073c4:	980d883a 	mov	r6,r19
100073c8:	900f883a 	mov	r7,r18
100073cc:	8009883a 	mov	r4,r16
100073d0:	880b883a 	mov	r5,r17
100073d4:	000f7d00 	call	1000f7d0 <__eqdf2>
100073d8:	103f5a1e 	bne	r2,zero,10007144 <__alt_data_end+0xf8007144>
100073dc:	ad40004c 	andi	r21,r21,1
100073e0:	a83f5826 	beq	r21,zero,10007144 <__alt_data_end+0xf8007144>
100073e4:	bd3fffc3 	ldbu	r20,-1(r23)
100073e8:	b8bfffc4 	addi	r2,r23,-1
100073ec:	1007883a 	mov	r3,r2
100073f0:	01400e44 	movi	r5,57
100073f4:	d9800717 	ldw	r6,28(sp)
100073f8:	00000506 	br	10007410 <_dtoa_r+0x974>
100073fc:	18ffffc4 	addi	r3,r3,-1
10007400:	11824726 	beq	r2,r6,10007d20 <_dtoa_r+0x1284>
10007404:	1d000003 	ldbu	r20,0(r3)
10007408:	102f883a 	mov	r23,r2
1000740c:	10bfffc4 	addi	r2,r2,-1
10007410:	a1003fcc 	andi	r4,r20,255
10007414:	2100201c 	xori	r4,r4,128
10007418:	213fe004 	addi	r4,r4,-128
1000741c:	217ff726 	beq	r4,r5,100073fc <__alt_data_end+0xf80073fc>
10007420:	a2000044 	addi	r8,r20,1
10007424:	12000005 	stb	r8,0(r2)
10007428:	003f4606 	br	10007144 <__alt_data_end+0xf8007144>
1000742c:	d9000b17 	ldw	r4,44(sp)
10007430:	2000c826 	beq	r4,zero,10007754 <_dtoa_r+0xcb8>
10007434:	d9800317 	ldw	r6,12(sp)
10007438:	00c00044 	movi	r3,1
1000743c:	1980f90e 	bge	r3,r6,10007824 <_dtoa_r+0xd88>
10007440:	d8800617 	ldw	r2,24(sp)
10007444:	d8c00a17 	ldw	r3,40(sp)
10007448:	157fffc4 	addi	r21,r2,-1
1000744c:	1d41f316 	blt	r3,r21,10007c1c <_dtoa_r+0x1180>
10007450:	1d6bc83a 	sub	r21,r3,r21
10007454:	d9c00617 	ldw	r7,24(sp)
10007458:	3802aa16 	blt	r7,zero,10007f04 <_dtoa_r+0x1468>
1000745c:	dd000817 	ldw	r20,32(sp)
10007460:	d8800617 	ldw	r2,24(sp)
10007464:	d8c00817 	ldw	r3,32(sp)
10007468:	01400044 	movi	r5,1
1000746c:	e009883a 	mov	r4,fp
10007470:	1887883a 	add	r3,r3,r2
10007474:	d8c00815 	stw	r3,32(sp)
10007478:	b0ad883a 	add	r22,r22,r2
1000747c:	000a4600 	call	1000a460 <__i2b>
10007480:	1023883a 	mov	r17,r2
10007484:	a0000826 	beq	r20,zero,100074a8 <_dtoa_r+0xa0c>
10007488:	0580070e 	bge	zero,r22,100074a8 <_dtoa_r+0xa0c>
1000748c:	a005883a 	mov	r2,r20
10007490:	b500b916 	blt	r22,r20,10007778 <_dtoa_r+0xcdc>
10007494:	d9000817 	ldw	r4,32(sp)
10007498:	a0a9c83a 	sub	r20,r20,r2
1000749c:	b0adc83a 	sub	r22,r22,r2
100074a0:	2089c83a 	sub	r4,r4,r2
100074a4:	d9000815 	stw	r4,32(sp)
100074a8:	d9800a17 	ldw	r6,40(sp)
100074ac:	0181810e 	bge	zero,r6,10007ab4 <_dtoa_r+0x1018>
100074b0:	d9c00b17 	ldw	r7,44(sp)
100074b4:	3800b326 	beq	r7,zero,10007784 <_dtoa_r+0xce8>
100074b8:	a800b226 	beq	r21,zero,10007784 <_dtoa_r+0xce8>
100074bc:	880b883a 	mov	r5,r17
100074c0:	a80d883a 	mov	r6,r21
100074c4:	e009883a 	mov	r4,fp
100074c8:	000a7280 	call	1000a728 <__pow5mult>
100074cc:	d9800917 	ldw	r6,36(sp)
100074d0:	100b883a 	mov	r5,r2
100074d4:	e009883a 	mov	r4,fp
100074d8:	1023883a 	mov	r17,r2
100074dc:	000a49c0 	call	1000a49c <__multiply>
100074e0:	1021883a 	mov	r16,r2
100074e4:	d8800a17 	ldw	r2,40(sp)
100074e8:	d9400917 	ldw	r5,36(sp)
100074ec:	e009883a 	mov	r4,fp
100074f0:	1545c83a 	sub	r2,r2,r21
100074f4:	d8800a15 	stw	r2,40(sp)
100074f8:	000a0d40 	call	1000a0d4 <_Bfree>
100074fc:	d8c00a17 	ldw	r3,40(sp)
10007500:	18009f1e 	bne	r3,zero,10007780 <_dtoa_r+0xce4>
10007504:	05c00044 	movi	r23,1
10007508:	e009883a 	mov	r4,fp
1000750c:	b80b883a 	mov	r5,r23
10007510:	000a4600 	call	1000a460 <__i2b>
10007514:	d9000d17 	ldw	r4,52(sp)
10007518:	102b883a 	mov	r21,r2
1000751c:	2000ce26 	beq	r4,zero,10007858 <_dtoa_r+0xdbc>
10007520:	200d883a 	mov	r6,r4
10007524:	100b883a 	mov	r5,r2
10007528:	e009883a 	mov	r4,fp
1000752c:	000a7280 	call	1000a728 <__pow5mult>
10007530:	d9800317 	ldw	r6,12(sp)
10007534:	102b883a 	mov	r21,r2
10007538:	b981810e 	bge	r23,r6,10007b40 <_dtoa_r+0x10a4>
1000753c:	0027883a 	mov	r19,zero
10007540:	a8800417 	ldw	r2,16(r21)
10007544:	05c00804 	movi	r23,32
10007548:	10800104 	addi	r2,r2,4
1000754c:	1085883a 	add	r2,r2,r2
10007550:	1085883a 	add	r2,r2,r2
10007554:	a885883a 	add	r2,r21,r2
10007558:	11000017 	ldw	r4,0(r2)
1000755c:	000a3480 	call	1000a348 <__hi0bits>
10007560:	b885c83a 	sub	r2,r23,r2
10007564:	1585883a 	add	r2,r2,r22
10007568:	108007cc 	andi	r2,r2,31
1000756c:	1000b326 	beq	r2,zero,1000783c <_dtoa_r+0xda0>
10007570:	00c00804 	movi	r3,32
10007574:	1887c83a 	sub	r3,r3,r2
10007578:	01000104 	movi	r4,4
1000757c:	20c2cd0e 	bge	r4,r3,100080b4 <_dtoa_r+0x1618>
10007580:	00c00704 	movi	r3,28
10007584:	1885c83a 	sub	r2,r3,r2
10007588:	d8c00817 	ldw	r3,32(sp)
1000758c:	a0a9883a 	add	r20,r20,r2
10007590:	b0ad883a 	add	r22,r22,r2
10007594:	1887883a 	add	r3,r3,r2
10007598:	d8c00815 	stw	r3,32(sp)
1000759c:	d9800817 	ldw	r6,32(sp)
100075a0:	0180040e 	bge	zero,r6,100075b4 <_dtoa_r+0xb18>
100075a4:	800b883a 	mov	r5,r16
100075a8:	e009883a 	mov	r4,fp
100075ac:	000a8680 	call	1000a868 <__lshift>
100075b0:	1021883a 	mov	r16,r2
100075b4:	0580050e 	bge	zero,r22,100075cc <_dtoa_r+0xb30>
100075b8:	a80b883a 	mov	r5,r21
100075bc:	b00d883a 	mov	r6,r22
100075c0:	e009883a 	mov	r4,fp
100075c4:	000a8680 	call	1000a868 <__lshift>
100075c8:	102b883a 	mov	r21,r2
100075cc:	d9c00e17 	ldw	r7,56(sp)
100075d0:	3801211e 	bne	r7,zero,10007a58 <_dtoa_r+0xfbc>
100075d4:	d9800617 	ldw	r6,24(sp)
100075d8:	0181380e 	bge	zero,r6,10007abc <_dtoa_r+0x1020>
100075dc:	d8c00b17 	ldw	r3,44(sp)
100075e0:	1800ab1e 	bne	r3,zero,10007890 <_dtoa_r+0xdf4>
100075e4:	dc800717 	ldw	r18,28(sp)
100075e8:	dcc00617 	ldw	r19,24(sp)
100075ec:	9029883a 	mov	r20,r18
100075f0:	00000206 	br	100075fc <_dtoa_r+0xb60>
100075f4:	000a0fc0 	call	1000a0fc <__multadd>
100075f8:	1021883a 	mov	r16,r2
100075fc:	a80b883a 	mov	r5,r21
10007600:	8009883a 	mov	r4,r16
10007604:	00068740 	call	10006874 <quorem>
10007608:	10800c04 	addi	r2,r2,48
1000760c:	90800005 	stb	r2,0(r18)
10007610:	94800044 	addi	r18,r18,1
10007614:	9507c83a 	sub	r3,r18,r20
10007618:	000f883a 	mov	r7,zero
1000761c:	01800284 	movi	r6,10
10007620:	800b883a 	mov	r5,r16
10007624:	e009883a 	mov	r4,fp
10007628:	1cfff216 	blt	r3,r19,100075f4 <__alt_data_end+0xf80075f4>
1000762c:	1011883a 	mov	r8,r2
10007630:	d8800617 	ldw	r2,24(sp)
10007634:	0082370e 	bge	zero,r2,10007f14 <_dtoa_r+0x1478>
10007638:	d9000717 	ldw	r4,28(sp)
1000763c:	0025883a 	mov	r18,zero
10007640:	20af883a 	add	r23,r4,r2
10007644:	01800044 	movi	r6,1
10007648:	800b883a 	mov	r5,r16
1000764c:	e009883a 	mov	r4,fp
10007650:	da001715 	stw	r8,92(sp)
10007654:	000a8680 	call	1000a868 <__lshift>
10007658:	a80b883a 	mov	r5,r21
1000765c:	1009883a 	mov	r4,r2
10007660:	d8800915 	stw	r2,36(sp)
10007664:	000a9b00 	call	1000a9b0 <__mcmp>
10007668:	da001717 	ldw	r8,92(sp)
1000766c:	0081800e 	bge	zero,r2,10007c70 <_dtoa_r+0x11d4>
10007670:	b93fffc3 	ldbu	r4,-1(r23)
10007674:	b8bfffc4 	addi	r2,r23,-1
10007678:	1007883a 	mov	r3,r2
1000767c:	01800e44 	movi	r6,57
10007680:	d9c00717 	ldw	r7,28(sp)
10007684:	00000506 	br	1000769c <_dtoa_r+0xc00>
10007688:	18ffffc4 	addi	r3,r3,-1
1000768c:	11c12326 	beq	r2,r7,10007b1c <_dtoa_r+0x1080>
10007690:	19000003 	ldbu	r4,0(r3)
10007694:	102f883a 	mov	r23,r2
10007698:	10bfffc4 	addi	r2,r2,-1
1000769c:	21403fcc 	andi	r5,r4,255
100076a0:	2940201c 	xori	r5,r5,128
100076a4:	297fe004 	addi	r5,r5,-128
100076a8:	29bff726 	beq	r5,r6,10007688 <__alt_data_end+0xf8007688>
100076ac:	21000044 	addi	r4,r4,1
100076b0:	11000005 	stb	r4,0(r2)
100076b4:	a80b883a 	mov	r5,r21
100076b8:	e009883a 	mov	r4,fp
100076bc:	000a0d40 	call	1000a0d4 <_Bfree>
100076c0:	883ea026 	beq	r17,zero,10007144 <__alt_data_end+0xf8007144>
100076c4:	90000426 	beq	r18,zero,100076d8 <_dtoa_r+0xc3c>
100076c8:	94400326 	beq	r18,r17,100076d8 <_dtoa_r+0xc3c>
100076cc:	900b883a 	mov	r5,r18
100076d0:	e009883a 	mov	r4,fp
100076d4:	000a0d40 	call	1000a0d4 <_Bfree>
100076d8:	880b883a 	mov	r5,r17
100076dc:	e009883a 	mov	r4,fp
100076e0:	000a0d40 	call	1000a0d4 <_Bfree>
100076e4:	003e9706 	br	10007144 <__alt_data_end+0xf8007144>
100076e8:	01800044 	movi	r6,1
100076ec:	d9800e15 	stw	r6,56(sp)
100076f0:	003d9606 	br	10006d4c <__alt_data_end+0xf8006d4c>
100076f4:	d8800817 	ldw	r2,32(sp)
100076f8:	d8c00517 	ldw	r3,20(sp)
100076fc:	d8000d15 	stw	zero,52(sp)
10007700:	10c5c83a 	sub	r2,r2,r3
10007704:	00c9c83a 	sub	r4,zero,r3
10007708:	d8800815 	stw	r2,32(sp)
1000770c:	d9000a15 	stw	r4,40(sp)
10007710:	003d9706 	br	10006d70 <__alt_data_end+0xf8006d70>
10007714:	05adc83a 	sub	r22,zero,r22
10007718:	dd800815 	stw	r22,32(sp)
1000771c:	002d883a 	mov	r22,zero
10007720:	003d8e06 	br	10006d5c <__alt_data_end+0xf8006d5c>
10007724:	d9000517 	ldw	r4,20(sp)
10007728:	0010c100 	call	10010c10 <__floatsidf>
1000772c:	100d883a 	mov	r6,r2
10007730:	180f883a 	mov	r7,r3
10007734:	a009883a 	mov	r4,r20
10007738:	880b883a 	mov	r5,r17
1000773c:	000f7d00 	call	1000f7d0 <__eqdf2>
10007740:	103d7126 	beq	r2,zero,10006d08 <__alt_data_end+0xf8006d08>
10007744:	d9c00517 	ldw	r7,20(sp)
10007748:	39ffffc4 	addi	r7,r7,-1
1000774c:	d9c00515 	stw	r7,20(sp)
10007750:	003d6d06 	br	10006d08 <__alt_data_end+0xf8006d08>
10007754:	dd400a17 	ldw	r21,40(sp)
10007758:	dd000817 	ldw	r20,32(sp)
1000775c:	0023883a 	mov	r17,zero
10007760:	003f4806 	br	10007484 <__alt_data_end+0xf8007484>
10007764:	10e3c83a 	sub	r17,r2,r3
10007768:	9448983a 	sll	r4,r18,r17
1000776c:	003d3206 	br	10006c38 <__alt_data_end+0xf8006c38>
10007770:	d8000e15 	stw	zero,56(sp)
10007774:	003d7506 	br	10006d4c <__alt_data_end+0xf8006d4c>
10007778:	b005883a 	mov	r2,r22
1000777c:	003f4506 	br	10007494 <__alt_data_end+0xf8007494>
10007780:	dc000915 	stw	r16,36(sp)
10007784:	d9800a17 	ldw	r6,40(sp)
10007788:	d9400917 	ldw	r5,36(sp)
1000778c:	e009883a 	mov	r4,fp
10007790:	000a7280 	call	1000a728 <__pow5mult>
10007794:	1021883a 	mov	r16,r2
10007798:	003f5a06 	br	10007504 <__alt_data_end+0xf8007504>
1000779c:	01c00044 	movi	r7,1
100077a0:	d9c00b15 	stw	r7,44(sp)
100077a4:	d8802217 	ldw	r2,136(sp)
100077a8:	0081280e 	bge	zero,r2,10007c4c <_dtoa_r+0x11b0>
100077ac:	100d883a 	mov	r6,r2
100077b0:	1021883a 	mov	r16,r2
100077b4:	d8800c15 	stw	r2,48(sp)
100077b8:	d8800615 	stw	r2,24(sp)
100077bc:	003d8806 	br	10006de0 <__alt_data_end+0xf8006de0>
100077c0:	d8800617 	ldw	r2,24(sp)
100077c4:	00be9b16 	blt	zero,r2,10007234 <__alt_data_end+0xf8007234>
100077c8:	10010f1e 	bne	r2,zero,10007c08 <_dtoa_r+0x116c>
100077cc:	880b883a 	mov	r5,r17
100077d0:	000d883a 	mov	r6,zero
100077d4:	01d00534 	movhi	r7,16404
100077d8:	8009883a 	mov	r4,r16
100077dc:	000fa280 	call	1000fa28 <__muldf3>
100077e0:	900d883a 	mov	r6,r18
100077e4:	980f883a 	mov	r7,r19
100077e8:	1009883a 	mov	r4,r2
100077ec:	180b883a 	mov	r5,r3
100077f0:	000f8580 	call	1000f858 <__gedf2>
100077f4:	002b883a 	mov	r21,zero
100077f8:	0023883a 	mov	r17,zero
100077fc:	1000bf16 	blt	r2,zero,10007afc <_dtoa_r+0x1060>
10007800:	d9802217 	ldw	r6,136(sp)
10007804:	ddc00717 	ldw	r23,28(sp)
10007808:	018c303a 	nor	r6,zero,r6
1000780c:	d9800515 	stw	r6,20(sp)
10007810:	a80b883a 	mov	r5,r21
10007814:	e009883a 	mov	r4,fp
10007818:	000a0d40 	call	1000a0d4 <_Bfree>
1000781c:	883e4926 	beq	r17,zero,10007144 <__alt_data_end+0xf8007144>
10007820:	003fad06 	br	100076d8 <__alt_data_end+0xf80076d8>
10007824:	d9c01117 	ldw	r7,68(sp)
10007828:	3801bc26 	beq	r7,zero,10007f1c <_dtoa_r+0x1480>
1000782c:	10810cc4 	addi	r2,r2,1075
10007830:	dd400a17 	ldw	r21,40(sp)
10007834:	dd000817 	ldw	r20,32(sp)
10007838:	003f0a06 	br	10007464 <__alt_data_end+0xf8007464>
1000783c:	00800704 	movi	r2,28
10007840:	d9000817 	ldw	r4,32(sp)
10007844:	a0a9883a 	add	r20,r20,r2
10007848:	b0ad883a 	add	r22,r22,r2
1000784c:	2089883a 	add	r4,r4,r2
10007850:	d9000815 	stw	r4,32(sp)
10007854:	003f5106 	br	1000759c <__alt_data_end+0xf800759c>
10007858:	d8c00317 	ldw	r3,12(sp)
1000785c:	b8c1fc0e 	bge	r23,r3,10008050 <_dtoa_r+0x15b4>
10007860:	0027883a 	mov	r19,zero
10007864:	b805883a 	mov	r2,r23
10007868:	003f3e06 	br	10007564 <__alt_data_end+0xf8007564>
1000786c:	880b883a 	mov	r5,r17
10007870:	e009883a 	mov	r4,fp
10007874:	000f883a 	mov	r7,zero
10007878:	01800284 	movi	r6,10
1000787c:	000a0fc0 	call	1000a0fc <__multadd>
10007880:	d9000c17 	ldw	r4,48(sp)
10007884:	1023883a 	mov	r17,r2
10007888:	0102040e 	bge	zero,r4,1000809c <_dtoa_r+0x1600>
1000788c:	d9000615 	stw	r4,24(sp)
10007890:	0500050e 	bge	zero,r20,100078a8 <_dtoa_r+0xe0c>
10007894:	880b883a 	mov	r5,r17
10007898:	a00d883a 	mov	r6,r20
1000789c:	e009883a 	mov	r4,fp
100078a0:	000a8680 	call	1000a868 <__lshift>
100078a4:	1023883a 	mov	r17,r2
100078a8:	9801241e 	bne	r19,zero,10007d3c <_dtoa_r+0x12a0>
100078ac:	8829883a 	mov	r20,r17
100078b0:	d9000617 	ldw	r4,24(sp)
100078b4:	dcc00717 	ldw	r19,28(sp)
100078b8:	9480004c 	andi	r18,r18,1
100078bc:	20bfffc4 	addi	r2,r4,-1
100078c0:	9885883a 	add	r2,r19,r2
100078c4:	d8800415 	stw	r2,16(sp)
100078c8:	dc800615 	stw	r18,24(sp)
100078cc:	a80b883a 	mov	r5,r21
100078d0:	8009883a 	mov	r4,r16
100078d4:	00068740 	call	10006874 <quorem>
100078d8:	880b883a 	mov	r5,r17
100078dc:	8009883a 	mov	r4,r16
100078e0:	102f883a 	mov	r23,r2
100078e4:	000a9b00 	call	1000a9b0 <__mcmp>
100078e8:	a80b883a 	mov	r5,r21
100078ec:	a00d883a 	mov	r6,r20
100078f0:	e009883a 	mov	r4,fp
100078f4:	102d883a 	mov	r22,r2
100078f8:	000aa100 	call	1000aa10 <__mdiff>
100078fc:	1007883a 	mov	r3,r2
10007900:	10800317 	ldw	r2,12(r2)
10007904:	bc800c04 	addi	r18,r23,48
10007908:	180b883a 	mov	r5,r3
1000790c:	10004e1e 	bne	r2,zero,10007a48 <_dtoa_r+0xfac>
10007910:	8009883a 	mov	r4,r16
10007914:	d8c01615 	stw	r3,88(sp)
10007918:	000a9b00 	call	1000a9b0 <__mcmp>
1000791c:	d8c01617 	ldw	r3,88(sp)
10007920:	e009883a 	mov	r4,fp
10007924:	d8801615 	stw	r2,88(sp)
10007928:	180b883a 	mov	r5,r3
1000792c:	000a0d40 	call	1000a0d4 <_Bfree>
10007930:	d8801617 	ldw	r2,88(sp)
10007934:	1000041e 	bne	r2,zero,10007948 <_dtoa_r+0xeac>
10007938:	d9800317 	ldw	r6,12(sp)
1000793c:	3000021e 	bne	r6,zero,10007948 <_dtoa_r+0xeac>
10007940:	d8c00617 	ldw	r3,24(sp)
10007944:	18003726 	beq	r3,zero,10007a24 <_dtoa_r+0xf88>
10007948:	b0002016 	blt	r22,zero,100079cc <_dtoa_r+0xf30>
1000794c:	b000041e 	bne	r22,zero,10007960 <_dtoa_r+0xec4>
10007950:	d9000317 	ldw	r4,12(sp)
10007954:	2000021e 	bne	r4,zero,10007960 <_dtoa_r+0xec4>
10007958:	d8c00617 	ldw	r3,24(sp)
1000795c:	18001b26 	beq	r3,zero,100079cc <_dtoa_r+0xf30>
10007960:	00810716 	blt	zero,r2,10007d80 <_dtoa_r+0x12e4>
10007964:	d8c00417 	ldw	r3,16(sp)
10007968:	9d800044 	addi	r22,r19,1
1000796c:	9c800005 	stb	r18,0(r19)
10007970:	b02f883a 	mov	r23,r22
10007974:	98c10626 	beq	r19,r3,10007d90 <_dtoa_r+0x12f4>
10007978:	800b883a 	mov	r5,r16
1000797c:	000f883a 	mov	r7,zero
10007980:	01800284 	movi	r6,10
10007984:	e009883a 	mov	r4,fp
10007988:	000a0fc0 	call	1000a0fc <__multadd>
1000798c:	1021883a 	mov	r16,r2
10007990:	000f883a 	mov	r7,zero
10007994:	01800284 	movi	r6,10
10007998:	880b883a 	mov	r5,r17
1000799c:	e009883a 	mov	r4,fp
100079a0:	8d002526 	beq	r17,r20,10007a38 <_dtoa_r+0xf9c>
100079a4:	000a0fc0 	call	1000a0fc <__multadd>
100079a8:	a00b883a 	mov	r5,r20
100079ac:	000f883a 	mov	r7,zero
100079b0:	01800284 	movi	r6,10
100079b4:	e009883a 	mov	r4,fp
100079b8:	1023883a 	mov	r17,r2
100079bc:	000a0fc0 	call	1000a0fc <__multadd>
100079c0:	1029883a 	mov	r20,r2
100079c4:	b027883a 	mov	r19,r22
100079c8:	003fc006 	br	100078cc <__alt_data_end+0xf80078cc>
100079cc:	9011883a 	mov	r8,r18
100079d0:	00800e0e 	bge	zero,r2,10007a0c <_dtoa_r+0xf70>
100079d4:	800b883a 	mov	r5,r16
100079d8:	01800044 	movi	r6,1
100079dc:	e009883a 	mov	r4,fp
100079e0:	da001715 	stw	r8,92(sp)
100079e4:	000a8680 	call	1000a868 <__lshift>
100079e8:	a80b883a 	mov	r5,r21
100079ec:	1009883a 	mov	r4,r2
100079f0:	1021883a 	mov	r16,r2
100079f4:	000a9b00 	call	1000a9b0 <__mcmp>
100079f8:	da001717 	ldw	r8,92(sp)
100079fc:	0081960e 	bge	zero,r2,10008058 <_dtoa_r+0x15bc>
10007a00:	00800e44 	movi	r2,57
10007a04:	40817026 	beq	r8,r2,10007fc8 <_dtoa_r+0x152c>
10007a08:	ba000c44 	addi	r8,r23,49
10007a0c:	8825883a 	mov	r18,r17
10007a10:	9dc00044 	addi	r23,r19,1
10007a14:	9a000005 	stb	r8,0(r19)
10007a18:	a023883a 	mov	r17,r20
10007a1c:	dc000915 	stw	r16,36(sp)
10007a20:	003f2406 	br	100076b4 <__alt_data_end+0xf80076b4>
10007a24:	00800e44 	movi	r2,57
10007a28:	9011883a 	mov	r8,r18
10007a2c:	90816626 	beq	r18,r2,10007fc8 <_dtoa_r+0x152c>
10007a30:	05bff516 	blt	zero,r22,10007a08 <__alt_data_end+0xf8007a08>
10007a34:	003ff506 	br	10007a0c <__alt_data_end+0xf8007a0c>
10007a38:	000a0fc0 	call	1000a0fc <__multadd>
10007a3c:	1023883a 	mov	r17,r2
10007a40:	1029883a 	mov	r20,r2
10007a44:	003fdf06 	br	100079c4 <__alt_data_end+0xf80079c4>
10007a48:	e009883a 	mov	r4,fp
10007a4c:	000a0d40 	call	1000a0d4 <_Bfree>
10007a50:	00800044 	movi	r2,1
10007a54:	003fbc06 	br	10007948 <__alt_data_end+0xf8007948>
10007a58:	a80b883a 	mov	r5,r21
10007a5c:	8009883a 	mov	r4,r16
10007a60:	000a9b00 	call	1000a9b0 <__mcmp>
10007a64:	103edb0e 	bge	r2,zero,100075d4 <__alt_data_end+0xf80075d4>
10007a68:	800b883a 	mov	r5,r16
10007a6c:	000f883a 	mov	r7,zero
10007a70:	01800284 	movi	r6,10
10007a74:	e009883a 	mov	r4,fp
10007a78:	000a0fc0 	call	1000a0fc <__multadd>
10007a7c:	1021883a 	mov	r16,r2
10007a80:	d8800517 	ldw	r2,20(sp)
10007a84:	d8c00b17 	ldw	r3,44(sp)
10007a88:	10bfffc4 	addi	r2,r2,-1
10007a8c:	d8800515 	stw	r2,20(sp)
10007a90:	183f761e 	bne	r3,zero,1000786c <__alt_data_end+0xf800786c>
10007a94:	d9000c17 	ldw	r4,48(sp)
10007a98:	0101730e 	bge	zero,r4,10008068 <_dtoa_r+0x15cc>
10007a9c:	d9000615 	stw	r4,24(sp)
10007aa0:	003ed006 	br	100075e4 <__alt_data_end+0xf80075e4>
10007aa4:	00800084 	movi	r2,2
10007aa8:	3081861e 	bne	r6,r2,100080c4 <_dtoa_r+0x1628>
10007aac:	d8000b15 	stw	zero,44(sp)
10007ab0:	003f3c06 	br	100077a4 <__alt_data_end+0xf80077a4>
10007ab4:	dc000917 	ldw	r16,36(sp)
10007ab8:	003e9206 	br	10007504 <__alt_data_end+0xf8007504>
10007abc:	d9c00317 	ldw	r7,12(sp)
10007ac0:	00800084 	movi	r2,2
10007ac4:	11fec50e 	bge	r2,r7,100075dc <__alt_data_end+0xf80075dc>
10007ac8:	d9000617 	ldw	r4,24(sp)
10007acc:	20013c1e 	bne	r4,zero,10007fc0 <_dtoa_r+0x1524>
10007ad0:	a80b883a 	mov	r5,r21
10007ad4:	000f883a 	mov	r7,zero
10007ad8:	01800144 	movi	r6,5
10007adc:	e009883a 	mov	r4,fp
10007ae0:	000a0fc0 	call	1000a0fc <__multadd>
10007ae4:	100b883a 	mov	r5,r2
10007ae8:	8009883a 	mov	r4,r16
10007aec:	102b883a 	mov	r21,r2
10007af0:	000a9b00 	call	1000a9b0 <__mcmp>
10007af4:	dc000915 	stw	r16,36(sp)
10007af8:	00bf410e 	bge	zero,r2,10007800 <__alt_data_end+0xf8007800>
10007afc:	d9c00717 	ldw	r7,28(sp)
10007b00:	00800c44 	movi	r2,49
10007b04:	38800005 	stb	r2,0(r7)
10007b08:	d8800517 	ldw	r2,20(sp)
10007b0c:	3dc00044 	addi	r23,r7,1
10007b10:	10800044 	addi	r2,r2,1
10007b14:	d8800515 	stw	r2,20(sp)
10007b18:	003f3d06 	br	10007810 <__alt_data_end+0xf8007810>
10007b1c:	d9800517 	ldw	r6,20(sp)
10007b20:	d9c00717 	ldw	r7,28(sp)
10007b24:	00800c44 	movi	r2,49
10007b28:	31800044 	addi	r6,r6,1
10007b2c:	d9800515 	stw	r6,20(sp)
10007b30:	38800005 	stb	r2,0(r7)
10007b34:	003edf06 	br	100076b4 <__alt_data_end+0xf80076b4>
10007b38:	d8000b15 	stw	zero,44(sp)
10007b3c:	003c9f06 	br	10006dbc <__alt_data_end+0xf8006dbc>
10007b40:	903e7e1e 	bne	r18,zero,1000753c <__alt_data_end+0xf800753c>
10007b44:	00800434 	movhi	r2,16
10007b48:	10bfffc4 	addi	r2,r2,-1
10007b4c:	9884703a 	and	r2,r19,r2
10007b50:	1000ea1e 	bne	r2,zero,10007efc <_dtoa_r+0x1460>
10007b54:	9cdffc2c 	andhi	r19,r19,32752
10007b58:	9800e826 	beq	r19,zero,10007efc <_dtoa_r+0x1460>
10007b5c:	d9c00817 	ldw	r7,32(sp)
10007b60:	b5800044 	addi	r22,r22,1
10007b64:	04c00044 	movi	r19,1
10007b68:	39c00044 	addi	r7,r7,1
10007b6c:	d9c00815 	stw	r7,32(sp)
10007b70:	d8800d17 	ldw	r2,52(sp)
10007b74:	103e721e 	bne	r2,zero,10007540 <__alt_data_end+0xf8007540>
10007b78:	00800044 	movi	r2,1
10007b7c:	003e7906 	br	10007564 <__alt_data_end+0xf8007564>
10007b80:	8009883a 	mov	r4,r16
10007b84:	0010c100 	call	10010c10 <__floatsidf>
10007b88:	d9800f17 	ldw	r6,60(sp)
10007b8c:	d9c01017 	ldw	r7,64(sp)
10007b90:	1009883a 	mov	r4,r2
10007b94:	180b883a 	mov	r5,r3
10007b98:	000fa280 	call	1000fa28 <__muldf3>
10007b9c:	000d883a 	mov	r6,zero
10007ba0:	01d00734 	movhi	r7,16412
10007ba4:	1009883a 	mov	r4,r2
10007ba8:	180b883a 	mov	r5,r3
10007bac:	000e5540 	call	1000e554 <__adddf3>
10007bb0:	047f3034 	movhi	r17,64704
10007bb4:	1021883a 	mov	r16,r2
10007bb8:	1c63883a 	add	r17,r3,r17
10007bbc:	d9000f17 	ldw	r4,60(sp)
10007bc0:	d9401017 	ldw	r5,64(sp)
10007bc4:	000d883a 	mov	r6,zero
10007bc8:	01d00534 	movhi	r7,16404
10007bcc:	00102940 	call	10010294 <__subdf3>
10007bd0:	800d883a 	mov	r6,r16
10007bd4:	880f883a 	mov	r7,r17
10007bd8:	1009883a 	mov	r4,r2
10007bdc:	180b883a 	mov	r5,r3
10007be0:	102b883a 	mov	r21,r2
10007be4:	1829883a 	mov	r20,r3
10007be8:	000f8580 	call	1000f858 <__gedf2>
10007bec:	00806c16 	blt	zero,r2,10007da0 <_dtoa_r+0x1304>
10007bf0:	89e0003c 	xorhi	r7,r17,32768
10007bf4:	800d883a 	mov	r6,r16
10007bf8:	a809883a 	mov	r4,r21
10007bfc:	a00b883a 	mov	r5,r20
10007c00:	000f9340 	call	1000f934 <__ledf2>
10007c04:	103d7e0e 	bge	r2,zero,10007200 <__alt_data_end+0xf8007200>
10007c08:	002b883a 	mov	r21,zero
10007c0c:	0023883a 	mov	r17,zero
10007c10:	003efb06 	br	10007800 <__alt_data_end+0xf8007800>
10007c14:	d8800717 	ldw	r2,28(sp)
10007c18:	003bd006 	br	10006b5c <__alt_data_end+0xf8006b5c>
10007c1c:	d9000a17 	ldw	r4,40(sp)
10007c20:	d9800d17 	ldw	r6,52(sp)
10007c24:	dd400a15 	stw	r21,40(sp)
10007c28:	a905c83a 	sub	r2,r21,r4
10007c2c:	308d883a 	add	r6,r6,r2
10007c30:	d9800d15 	stw	r6,52(sp)
10007c34:	002b883a 	mov	r21,zero
10007c38:	003e0606 	br	10007454 <__alt_data_end+0xf8007454>
10007c3c:	9023883a 	mov	r17,r18
10007c40:	9829883a 	mov	r20,r19
10007c44:	04000084 	movi	r16,2
10007c48:	003c9206 	br	10006e94 <__alt_data_end+0xf8006e94>
10007c4c:	04000044 	movi	r16,1
10007c50:	dc000c15 	stw	r16,48(sp)
10007c54:	dc000615 	stw	r16,24(sp)
10007c58:	dc002215 	stw	r16,136(sp)
10007c5c:	e0001115 	stw	zero,68(fp)
10007c60:	000b883a 	mov	r5,zero
10007c64:	003c6906 	br	10006e0c <__alt_data_end+0xf8006e0c>
10007c68:	3021883a 	mov	r16,r6
10007c6c:	003ffb06 	br	10007c5c <__alt_data_end+0xf8007c5c>
10007c70:	1000021e 	bne	r2,zero,10007c7c <_dtoa_r+0x11e0>
10007c74:	4200004c 	andi	r8,r8,1
10007c78:	403e7d1e 	bne	r8,zero,10007670 <__alt_data_end+0xf8007670>
10007c7c:	01000c04 	movi	r4,48
10007c80:	00000106 	br	10007c88 <_dtoa_r+0x11ec>
10007c84:	102f883a 	mov	r23,r2
10007c88:	b8bfffc4 	addi	r2,r23,-1
10007c8c:	10c00007 	ldb	r3,0(r2)
10007c90:	193ffc26 	beq	r3,r4,10007c84 <__alt_data_end+0xf8007c84>
10007c94:	003e8706 	br	100076b4 <__alt_data_end+0xf80076b4>
10007c98:	d8800517 	ldw	r2,20(sp)
10007c9c:	00a3c83a 	sub	r17,zero,r2
10007ca0:	8800a426 	beq	r17,zero,10007f34 <_dtoa_r+0x1498>
10007ca4:	888003cc 	andi	r2,r17,15
10007ca8:	100490fa 	slli	r2,r2,3
10007cac:	00c40074 	movhi	r3,4097
10007cb0:	18cf9504 	addi	r3,r3,15956
10007cb4:	1885883a 	add	r2,r3,r2
10007cb8:	11800017 	ldw	r6,0(r2)
10007cbc:	11c00117 	ldw	r7,4(r2)
10007cc0:	9009883a 	mov	r4,r18
10007cc4:	980b883a 	mov	r5,r19
10007cc8:	8823d13a 	srai	r17,r17,4
10007ccc:	000fa280 	call	1000fa28 <__muldf3>
10007cd0:	d8800f15 	stw	r2,60(sp)
10007cd4:	d8c01015 	stw	r3,64(sp)
10007cd8:	8800e826 	beq	r17,zero,1000807c <_dtoa_r+0x15e0>
10007cdc:	05040074 	movhi	r20,4097
10007ce0:	a50f8b04 	addi	r20,r20,15916
10007ce4:	04000084 	movi	r16,2
10007ce8:	8980004c 	andi	r6,r17,1
10007cec:	1009883a 	mov	r4,r2
10007cf0:	8823d07a 	srai	r17,r17,1
10007cf4:	180b883a 	mov	r5,r3
10007cf8:	30000426 	beq	r6,zero,10007d0c <_dtoa_r+0x1270>
10007cfc:	a1800017 	ldw	r6,0(r20)
10007d00:	a1c00117 	ldw	r7,4(r20)
10007d04:	84000044 	addi	r16,r16,1
10007d08:	000fa280 	call	1000fa28 <__muldf3>
10007d0c:	a5000204 	addi	r20,r20,8
10007d10:	883ff51e 	bne	r17,zero,10007ce8 <__alt_data_end+0xf8007ce8>
10007d14:	d8800f15 	stw	r2,60(sp)
10007d18:	d8c01015 	stw	r3,64(sp)
10007d1c:	003c7606 	br	10006ef8 <__alt_data_end+0xf8006ef8>
10007d20:	00c00c04 	movi	r3,48
10007d24:	10c00005 	stb	r3,0(r2)
10007d28:	d8c00517 	ldw	r3,20(sp)
10007d2c:	bd3fffc3 	ldbu	r20,-1(r23)
10007d30:	18c00044 	addi	r3,r3,1
10007d34:	d8c00515 	stw	r3,20(sp)
10007d38:	003db906 	br	10007420 <__alt_data_end+0xf8007420>
10007d3c:	89400117 	ldw	r5,4(r17)
10007d40:	e009883a 	mov	r4,fp
10007d44:	000a02c0 	call	1000a02c <_Balloc>
10007d48:	89800417 	ldw	r6,16(r17)
10007d4c:	89400304 	addi	r5,r17,12
10007d50:	11000304 	addi	r4,r2,12
10007d54:	31800084 	addi	r6,r6,2
10007d58:	318d883a 	add	r6,r6,r6
10007d5c:	318d883a 	add	r6,r6,r6
10007d60:	1027883a 	mov	r19,r2
10007d64:	0009d880 	call	10009d88 <memcpy>
10007d68:	01800044 	movi	r6,1
10007d6c:	980b883a 	mov	r5,r19
10007d70:	e009883a 	mov	r4,fp
10007d74:	000a8680 	call	1000a868 <__lshift>
10007d78:	1029883a 	mov	r20,r2
10007d7c:	003ecc06 	br	100078b0 <__alt_data_end+0xf80078b0>
10007d80:	00800e44 	movi	r2,57
10007d84:	90809026 	beq	r18,r2,10007fc8 <_dtoa_r+0x152c>
10007d88:	92000044 	addi	r8,r18,1
10007d8c:	003f1f06 	br	10007a0c <__alt_data_end+0xf8007a0c>
10007d90:	9011883a 	mov	r8,r18
10007d94:	8825883a 	mov	r18,r17
10007d98:	a023883a 	mov	r17,r20
10007d9c:	003e2906 	br	10007644 <__alt_data_end+0xf8007644>
10007da0:	002b883a 	mov	r21,zero
10007da4:	0023883a 	mov	r17,zero
10007da8:	003f5406 	br	10007afc <__alt_data_end+0xf8007afc>
10007dac:	61bfffc4 	addi	r6,r12,-1
10007db0:	300490fa 	slli	r2,r6,3
10007db4:	00c40074 	movhi	r3,4097
10007db8:	18cf9504 	addi	r3,r3,15956
10007dbc:	1885883a 	add	r2,r3,r2
10007dc0:	11000017 	ldw	r4,0(r2)
10007dc4:	11400117 	ldw	r5,4(r2)
10007dc8:	d8800717 	ldw	r2,28(sp)
10007dcc:	880f883a 	mov	r7,r17
10007dd0:	d9801215 	stw	r6,72(sp)
10007dd4:	800d883a 	mov	r6,r16
10007dd8:	db001615 	stw	r12,88(sp)
10007ddc:	15c00044 	addi	r23,r2,1
10007de0:	000fa280 	call	1000fa28 <__muldf3>
10007de4:	d9401017 	ldw	r5,64(sp)
10007de8:	d9000f17 	ldw	r4,60(sp)
10007dec:	d8c01515 	stw	r3,84(sp)
10007df0:	d8801415 	stw	r2,80(sp)
10007df4:	0010b900 	call	10010b90 <__fixdfsi>
10007df8:	1009883a 	mov	r4,r2
10007dfc:	1021883a 	mov	r16,r2
10007e00:	0010c100 	call	10010c10 <__floatsidf>
10007e04:	d9000f17 	ldw	r4,60(sp)
10007e08:	d9401017 	ldw	r5,64(sp)
10007e0c:	100d883a 	mov	r6,r2
10007e10:	180f883a 	mov	r7,r3
10007e14:	00102940 	call	10010294 <__subdf3>
10007e18:	1829883a 	mov	r20,r3
10007e1c:	d8c00717 	ldw	r3,28(sp)
10007e20:	84000c04 	addi	r16,r16,48
10007e24:	1023883a 	mov	r17,r2
10007e28:	1c000005 	stb	r16,0(r3)
10007e2c:	db001617 	ldw	r12,88(sp)
10007e30:	00800044 	movi	r2,1
10007e34:	60802226 	beq	r12,r2,10007ec0 <_dtoa_r+0x1424>
10007e38:	d9c00717 	ldw	r7,28(sp)
10007e3c:	8805883a 	mov	r2,r17
10007e40:	b82b883a 	mov	r21,r23
10007e44:	3b19883a 	add	r12,r7,r12
10007e48:	6023883a 	mov	r17,r12
10007e4c:	a007883a 	mov	r3,r20
10007e50:	dc800f15 	stw	r18,60(sp)
10007e54:	000d883a 	mov	r6,zero
10007e58:	01d00934 	movhi	r7,16420
10007e5c:	1009883a 	mov	r4,r2
10007e60:	180b883a 	mov	r5,r3
10007e64:	000fa280 	call	1000fa28 <__muldf3>
10007e68:	180b883a 	mov	r5,r3
10007e6c:	1009883a 	mov	r4,r2
10007e70:	1829883a 	mov	r20,r3
10007e74:	1025883a 	mov	r18,r2
10007e78:	0010b900 	call	10010b90 <__fixdfsi>
10007e7c:	1009883a 	mov	r4,r2
10007e80:	1021883a 	mov	r16,r2
10007e84:	0010c100 	call	10010c10 <__floatsidf>
10007e88:	100d883a 	mov	r6,r2
10007e8c:	180f883a 	mov	r7,r3
10007e90:	9009883a 	mov	r4,r18
10007e94:	a00b883a 	mov	r5,r20
10007e98:	84000c04 	addi	r16,r16,48
10007e9c:	00102940 	call	10010294 <__subdf3>
10007ea0:	ad400044 	addi	r21,r21,1
10007ea4:	ac3fffc5 	stb	r16,-1(r21)
10007ea8:	ac7fea1e 	bne	r21,r17,10007e54 <__alt_data_end+0xf8007e54>
10007eac:	1023883a 	mov	r17,r2
10007eb0:	d8801217 	ldw	r2,72(sp)
10007eb4:	dc800f17 	ldw	r18,60(sp)
10007eb8:	1829883a 	mov	r20,r3
10007ebc:	b8af883a 	add	r23,r23,r2
10007ec0:	d9001417 	ldw	r4,80(sp)
10007ec4:	d9401517 	ldw	r5,84(sp)
10007ec8:	000d883a 	mov	r6,zero
10007ecc:	01cff834 	movhi	r7,16352
10007ed0:	000e5540 	call	1000e554 <__adddf3>
10007ed4:	880d883a 	mov	r6,r17
10007ed8:	a00f883a 	mov	r7,r20
10007edc:	1009883a 	mov	r4,r2
10007ee0:	180b883a 	mov	r5,r3
10007ee4:	000f9340 	call	1000f934 <__ledf2>
10007ee8:	10003e0e 	bge	r2,zero,10007fe4 <_dtoa_r+0x1548>
10007eec:	d9001317 	ldw	r4,76(sp)
10007ef0:	bd3fffc3 	ldbu	r20,-1(r23)
10007ef4:	d9000515 	stw	r4,20(sp)
10007ef8:	003d3b06 	br	100073e8 <__alt_data_end+0xf80073e8>
10007efc:	0027883a 	mov	r19,zero
10007f00:	003f1b06 	br	10007b70 <__alt_data_end+0xf8007b70>
10007f04:	d8800817 	ldw	r2,32(sp)
10007f08:	11e9c83a 	sub	r20,r2,r7
10007f0c:	0005883a 	mov	r2,zero
10007f10:	003d5406 	br	10007464 <__alt_data_end+0xf8007464>
10007f14:	00800044 	movi	r2,1
10007f18:	003dc706 	br	10007638 <__alt_data_end+0xf8007638>
10007f1c:	d8c00217 	ldw	r3,8(sp)
10007f20:	00800d84 	movi	r2,54
10007f24:	dd400a17 	ldw	r21,40(sp)
10007f28:	10c5c83a 	sub	r2,r2,r3
10007f2c:	dd000817 	ldw	r20,32(sp)
10007f30:	003d4c06 	br	10007464 <__alt_data_end+0xf8007464>
10007f34:	dc800f15 	stw	r18,60(sp)
10007f38:	dcc01015 	stw	r19,64(sp)
10007f3c:	04000084 	movi	r16,2
10007f40:	003bed06 	br	10006ef8 <__alt_data_end+0xf8006ef8>
10007f44:	d9000617 	ldw	r4,24(sp)
10007f48:	203f0d26 	beq	r4,zero,10007b80 <__alt_data_end+0xf8007b80>
10007f4c:	d9800c17 	ldw	r6,48(sp)
10007f50:	01bcab0e 	bge	zero,r6,10007200 <__alt_data_end+0xf8007200>
10007f54:	d9401017 	ldw	r5,64(sp)
10007f58:	d9000f17 	ldw	r4,60(sp)
10007f5c:	000d883a 	mov	r6,zero
10007f60:	01d00934 	movhi	r7,16420
10007f64:	000fa280 	call	1000fa28 <__muldf3>
10007f68:	81000044 	addi	r4,r16,1
10007f6c:	d8800f15 	stw	r2,60(sp)
10007f70:	d8c01015 	stw	r3,64(sp)
10007f74:	0010c100 	call	10010c10 <__floatsidf>
10007f78:	d9800f17 	ldw	r6,60(sp)
10007f7c:	d9c01017 	ldw	r7,64(sp)
10007f80:	1009883a 	mov	r4,r2
10007f84:	180b883a 	mov	r5,r3
10007f88:	000fa280 	call	1000fa28 <__muldf3>
10007f8c:	01d00734 	movhi	r7,16412
10007f90:	000d883a 	mov	r6,zero
10007f94:	1009883a 	mov	r4,r2
10007f98:	180b883a 	mov	r5,r3
10007f9c:	000e5540 	call	1000e554 <__adddf3>
10007fa0:	d9c00517 	ldw	r7,20(sp)
10007fa4:	047f3034 	movhi	r17,64704
10007fa8:	1021883a 	mov	r16,r2
10007fac:	39ffffc4 	addi	r7,r7,-1
10007fb0:	d9c01315 	stw	r7,76(sp)
10007fb4:	1c63883a 	add	r17,r3,r17
10007fb8:	db000c17 	ldw	r12,48(sp)
10007fbc:	003bea06 	br	10006f68 <__alt_data_end+0xf8006f68>
10007fc0:	dc000915 	stw	r16,36(sp)
10007fc4:	003e0e06 	br	10007800 <__alt_data_end+0xf8007800>
10007fc8:	01000e44 	movi	r4,57
10007fcc:	8825883a 	mov	r18,r17
10007fd0:	9dc00044 	addi	r23,r19,1
10007fd4:	99000005 	stb	r4,0(r19)
10007fd8:	a023883a 	mov	r17,r20
10007fdc:	dc000915 	stw	r16,36(sp)
10007fe0:	003da406 	br	10007674 <__alt_data_end+0xf8007674>
10007fe4:	d9801417 	ldw	r6,80(sp)
10007fe8:	d9c01517 	ldw	r7,84(sp)
10007fec:	0009883a 	mov	r4,zero
10007ff0:	014ff834 	movhi	r5,16352
10007ff4:	00102940 	call	10010294 <__subdf3>
10007ff8:	880d883a 	mov	r6,r17
10007ffc:	a00f883a 	mov	r7,r20
10008000:	1009883a 	mov	r4,r2
10008004:	180b883a 	mov	r5,r3
10008008:	000f8580 	call	1000f858 <__gedf2>
1000800c:	00bc7c0e 	bge	zero,r2,10007200 <__alt_data_end+0xf8007200>
10008010:	01000c04 	movi	r4,48
10008014:	00000106 	br	1000801c <_dtoa_r+0x1580>
10008018:	102f883a 	mov	r23,r2
1000801c:	b8bfffc4 	addi	r2,r23,-1
10008020:	10c00007 	ldb	r3,0(r2)
10008024:	193ffc26 	beq	r3,r4,10008018 <__alt_data_end+0xf8008018>
10008028:	d9801317 	ldw	r6,76(sp)
1000802c:	d9800515 	stw	r6,20(sp)
10008030:	003c4406 	br	10007144 <__alt_data_end+0xf8007144>
10008034:	d9801317 	ldw	r6,76(sp)
10008038:	d9800515 	stw	r6,20(sp)
1000803c:	003cea06 	br	100073e8 <__alt_data_end+0xf80073e8>
10008040:	dd800f17 	ldw	r22,60(sp)
10008044:	dcc01017 	ldw	r19,64(sp)
10008048:	dc801217 	ldw	r18,72(sp)
1000804c:	003c6c06 	br	10007200 <__alt_data_end+0xf8007200>
10008050:	903e031e 	bne	r18,zero,10007860 <__alt_data_end+0xf8007860>
10008054:	003ebb06 	br	10007b44 <__alt_data_end+0xf8007b44>
10008058:	103e6c1e 	bne	r2,zero,10007a0c <__alt_data_end+0xf8007a0c>
1000805c:	4080004c 	andi	r2,r8,1
10008060:	103e6a26 	beq	r2,zero,10007a0c <__alt_data_end+0xf8007a0c>
10008064:	003e6606 	br	10007a00 <__alt_data_end+0xf8007a00>
10008068:	d8c00317 	ldw	r3,12(sp)
1000806c:	00800084 	movi	r2,2
10008070:	10c02916 	blt	r2,r3,10008118 <_dtoa_r+0x167c>
10008074:	d9000c17 	ldw	r4,48(sp)
10008078:	003e8806 	br	10007a9c <__alt_data_end+0xf8007a9c>
1000807c:	04000084 	movi	r16,2
10008080:	003b9d06 	br	10006ef8 <__alt_data_end+0xf8006ef8>
10008084:	d9001317 	ldw	r4,76(sp)
10008088:	d9000515 	stw	r4,20(sp)
1000808c:	003cd606 	br	100073e8 <__alt_data_end+0xf80073e8>
10008090:	d8801317 	ldw	r2,76(sp)
10008094:	d8800515 	stw	r2,20(sp)
10008098:	003c2a06 	br	10007144 <__alt_data_end+0xf8007144>
1000809c:	d9800317 	ldw	r6,12(sp)
100080a0:	00800084 	movi	r2,2
100080a4:	11801516 	blt	r2,r6,100080fc <_dtoa_r+0x1660>
100080a8:	d9c00c17 	ldw	r7,48(sp)
100080ac:	d9c00615 	stw	r7,24(sp)
100080b0:	003df706 	br	10007890 <__alt_data_end+0xf8007890>
100080b4:	193d3926 	beq	r3,r4,1000759c <__alt_data_end+0xf800759c>
100080b8:	00c00f04 	movi	r3,60
100080bc:	1885c83a 	sub	r2,r3,r2
100080c0:	003ddf06 	br	10007840 <__alt_data_end+0xf8007840>
100080c4:	e009883a 	mov	r4,fp
100080c8:	e0001115 	stw	zero,68(fp)
100080cc:	000b883a 	mov	r5,zero
100080d0:	000a02c0 	call	1000a02c <_Balloc>
100080d4:	d8800715 	stw	r2,28(sp)
100080d8:	d8c00717 	ldw	r3,28(sp)
100080dc:	00bfffc4 	movi	r2,-1
100080e0:	01000044 	movi	r4,1
100080e4:	d8800c15 	stw	r2,48(sp)
100080e8:	e0c01015 	stw	r3,64(fp)
100080ec:	d9000b15 	stw	r4,44(sp)
100080f0:	d8800615 	stw	r2,24(sp)
100080f4:	d8002215 	stw	zero,136(sp)
100080f8:	003c4106 	br	10007200 <__alt_data_end+0xf8007200>
100080fc:	d8c00c17 	ldw	r3,48(sp)
10008100:	d8c00615 	stw	r3,24(sp)
10008104:	003e7006 	br	10007ac8 <__alt_data_end+0xf8007ac8>
10008108:	04400044 	movi	r17,1
1000810c:	003b2006 	br	10006d90 <__alt_data_end+0xf8006d90>
10008110:	000b883a 	mov	r5,zero
10008114:	003b3d06 	br	10006e0c <__alt_data_end+0xf8006e0c>
10008118:	d8800c17 	ldw	r2,48(sp)
1000811c:	d8800615 	stw	r2,24(sp)
10008120:	003e6906 	br	10007ac8 <__alt_data_end+0xf8007ac8>

10008124 <__sflush_r>:
10008124:	2880030b 	ldhu	r2,12(r5)
10008128:	defffb04 	addi	sp,sp,-20
1000812c:	dcc00315 	stw	r19,12(sp)
10008130:	dc400115 	stw	r17,4(sp)
10008134:	dfc00415 	stw	ra,16(sp)
10008138:	dc800215 	stw	r18,8(sp)
1000813c:	dc000015 	stw	r16,0(sp)
10008140:	10c0020c 	andi	r3,r2,8
10008144:	2823883a 	mov	r17,r5
10008148:	2027883a 	mov	r19,r4
1000814c:	1800311e 	bne	r3,zero,10008214 <__sflush_r+0xf0>
10008150:	28c00117 	ldw	r3,4(r5)
10008154:	10820014 	ori	r2,r2,2048
10008158:	2880030d 	sth	r2,12(r5)
1000815c:	00c04b0e 	bge	zero,r3,1000828c <__sflush_r+0x168>
10008160:	8a000a17 	ldw	r8,40(r17)
10008164:	40002326 	beq	r8,zero,100081f4 <__sflush_r+0xd0>
10008168:	9c000017 	ldw	r16,0(r19)
1000816c:	10c4000c 	andi	r3,r2,4096
10008170:	98000015 	stw	zero,0(r19)
10008174:	18004826 	beq	r3,zero,10008298 <__sflush_r+0x174>
10008178:	89801417 	ldw	r6,80(r17)
1000817c:	10c0010c 	andi	r3,r2,4
10008180:	18000626 	beq	r3,zero,1000819c <__sflush_r+0x78>
10008184:	88c00117 	ldw	r3,4(r17)
10008188:	88800c17 	ldw	r2,48(r17)
1000818c:	30cdc83a 	sub	r6,r6,r3
10008190:	10000226 	beq	r2,zero,1000819c <__sflush_r+0x78>
10008194:	88800f17 	ldw	r2,60(r17)
10008198:	308dc83a 	sub	r6,r6,r2
1000819c:	89400717 	ldw	r5,28(r17)
100081a0:	000f883a 	mov	r7,zero
100081a4:	9809883a 	mov	r4,r19
100081a8:	403ee83a 	callr	r8
100081ac:	00ffffc4 	movi	r3,-1
100081b0:	10c04426 	beq	r2,r3,100082c4 <__sflush_r+0x1a0>
100081b4:	88c0030b 	ldhu	r3,12(r17)
100081b8:	89000417 	ldw	r4,16(r17)
100081bc:	88000115 	stw	zero,4(r17)
100081c0:	197dffcc 	andi	r5,r3,63487
100081c4:	8940030d 	sth	r5,12(r17)
100081c8:	89000015 	stw	r4,0(r17)
100081cc:	18c4000c 	andi	r3,r3,4096
100081d0:	18002c1e 	bne	r3,zero,10008284 <__sflush_r+0x160>
100081d4:	89400c17 	ldw	r5,48(r17)
100081d8:	9c000015 	stw	r16,0(r19)
100081dc:	28000526 	beq	r5,zero,100081f4 <__sflush_r+0xd0>
100081e0:	88801004 	addi	r2,r17,64
100081e4:	28800226 	beq	r5,r2,100081f0 <__sflush_r+0xcc>
100081e8:	9809883a 	mov	r4,r19
100081ec:	00088a00 	call	100088a0 <_free_r>
100081f0:	88000c15 	stw	zero,48(r17)
100081f4:	0005883a 	mov	r2,zero
100081f8:	dfc00417 	ldw	ra,16(sp)
100081fc:	dcc00317 	ldw	r19,12(sp)
10008200:	dc800217 	ldw	r18,8(sp)
10008204:	dc400117 	ldw	r17,4(sp)
10008208:	dc000017 	ldw	r16,0(sp)
1000820c:	dec00504 	addi	sp,sp,20
10008210:	f800283a 	ret
10008214:	2c800417 	ldw	r18,16(r5)
10008218:	903ff626 	beq	r18,zero,100081f4 <__alt_data_end+0xf80081f4>
1000821c:	2c000017 	ldw	r16,0(r5)
10008220:	108000cc 	andi	r2,r2,3
10008224:	2c800015 	stw	r18,0(r5)
10008228:	84a1c83a 	sub	r16,r16,r18
1000822c:	1000131e 	bne	r2,zero,1000827c <__sflush_r+0x158>
10008230:	28800517 	ldw	r2,20(r5)
10008234:	88800215 	stw	r2,8(r17)
10008238:	04000316 	blt	zero,r16,10008248 <__sflush_r+0x124>
1000823c:	003fed06 	br	100081f4 <__alt_data_end+0xf80081f4>
10008240:	90a5883a 	add	r18,r18,r2
10008244:	043feb0e 	bge	zero,r16,100081f4 <__alt_data_end+0xf80081f4>
10008248:	88800917 	ldw	r2,36(r17)
1000824c:	89400717 	ldw	r5,28(r17)
10008250:	800f883a 	mov	r7,r16
10008254:	900d883a 	mov	r6,r18
10008258:	9809883a 	mov	r4,r19
1000825c:	103ee83a 	callr	r2
10008260:	80a1c83a 	sub	r16,r16,r2
10008264:	00bff616 	blt	zero,r2,10008240 <__alt_data_end+0xf8008240>
10008268:	88c0030b 	ldhu	r3,12(r17)
1000826c:	00bfffc4 	movi	r2,-1
10008270:	18c01014 	ori	r3,r3,64
10008274:	88c0030d 	sth	r3,12(r17)
10008278:	003fdf06 	br	100081f8 <__alt_data_end+0xf80081f8>
1000827c:	0005883a 	mov	r2,zero
10008280:	003fec06 	br	10008234 <__alt_data_end+0xf8008234>
10008284:	88801415 	stw	r2,80(r17)
10008288:	003fd206 	br	100081d4 <__alt_data_end+0xf80081d4>
1000828c:	28c00f17 	ldw	r3,60(r5)
10008290:	00ffb316 	blt	zero,r3,10008160 <__alt_data_end+0xf8008160>
10008294:	003fd706 	br	100081f4 <__alt_data_end+0xf80081f4>
10008298:	89400717 	ldw	r5,28(r17)
1000829c:	000d883a 	mov	r6,zero
100082a0:	01c00044 	movi	r7,1
100082a4:	9809883a 	mov	r4,r19
100082a8:	403ee83a 	callr	r8
100082ac:	100d883a 	mov	r6,r2
100082b0:	00bfffc4 	movi	r2,-1
100082b4:	30801426 	beq	r6,r2,10008308 <__sflush_r+0x1e4>
100082b8:	8880030b 	ldhu	r2,12(r17)
100082bc:	8a000a17 	ldw	r8,40(r17)
100082c0:	003fae06 	br	1000817c <__alt_data_end+0xf800817c>
100082c4:	98c00017 	ldw	r3,0(r19)
100082c8:	183fba26 	beq	r3,zero,100081b4 <__alt_data_end+0xf80081b4>
100082cc:	01000744 	movi	r4,29
100082d0:	19000626 	beq	r3,r4,100082ec <__sflush_r+0x1c8>
100082d4:	01000584 	movi	r4,22
100082d8:	19000426 	beq	r3,r4,100082ec <__sflush_r+0x1c8>
100082dc:	88c0030b 	ldhu	r3,12(r17)
100082e0:	18c01014 	ori	r3,r3,64
100082e4:	88c0030d 	sth	r3,12(r17)
100082e8:	003fc306 	br	100081f8 <__alt_data_end+0xf80081f8>
100082ec:	8880030b 	ldhu	r2,12(r17)
100082f0:	88c00417 	ldw	r3,16(r17)
100082f4:	88000115 	stw	zero,4(r17)
100082f8:	10bdffcc 	andi	r2,r2,63487
100082fc:	8880030d 	sth	r2,12(r17)
10008300:	88c00015 	stw	r3,0(r17)
10008304:	003fb306 	br	100081d4 <__alt_data_end+0xf80081d4>
10008308:	98800017 	ldw	r2,0(r19)
1000830c:	103fea26 	beq	r2,zero,100082b8 <__alt_data_end+0xf80082b8>
10008310:	00c00744 	movi	r3,29
10008314:	10c00226 	beq	r2,r3,10008320 <__sflush_r+0x1fc>
10008318:	00c00584 	movi	r3,22
1000831c:	10c0031e 	bne	r2,r3,1000832c <__sflush_r+0x208>
10008320:	9c000015 	stw	r16,0(r19)
10008324:	0005883a 	mov	r2,zero
10008328:	003fb306 	br	100081f8 <__alt_data_end+0xf80081f8>
1000832c:	88c0030b 	ldhu	r3,12(r17)
10008330:	3005883a 	mov	r2,r6
10008334:	18c01014 	ori	r3,r3,64
10008338:	88c0030d 	sth	r3,12(r17)
1000833c:	003fae06 	br	100081f8 <__alt_data_end+0xf80081f8>

10008340 <_fflush_r>:
10008340:	defffd04 	addi	sp,sp,-12
10008344:	dc000115 	stw	r16,4(sp)
10008348:	dfc00215 	stw	ra,8(sp)
1000834c:	2021883a 	mov	r16,r4
10008350:	20000226 	beq	r4,zero,1000835c <_fflush_r+0x1c>
10008354:	20800e17 	ldw	r2,56(r4)
10008358:	10000c26 	beq	r2,zero,1000838c <_fflush_r+0x4c>
1000835c:	2880030f 	ldh	r2,12(r5)
10008360:	1000051e 	bne	r2,zero,10008378 <_fflush_r+0x38>
10008364:	0005883a 	mov	r2,zero
10008368:	dfc00217 	ldw	ra,8(sp)
1000836c:	dc000117 	ldw	r16,4(sp)
10008370:	dec00304 	addi	sp,sp,12
10008374:	f800283a 	ret
10008378:	8009883a 	mov	r4,r16
1000837c:	dfc00217 	ldw	ra,8(sp)
10008380:	dc000117 	ldw	r16,4(sp)
10008384:	dec00304 	addi	sp,sp,12
10008388:	00081241 	jmpi	10008124 <__sflush_r>
1000838c:	d9400015 	stw	r5,0(sp)
10008390:	000872c0 	call	1000872c <__sinit>
10008394:	d9400017 	ldw	r5,0(sp)
10008398:	003ff006 	br	1000835c <__alt_data_end+0xf800835c>

1000839c <fflush>:
1000839c:	20000526 	beq	r4,zero,100083b4 <fflush+0x18>
100083a0:	00840074 	movhi	r2,4097
100083a4:	1096c804 	addi	r2,r2,23328
100083a8:	200b883a 	mov	r5,r4
100083ac:	11000017 	ldw	r4,0(r2)
100083b0:	00083401 	jmpi	10008340 <_fflush_r>
100083b4:	00840074 	movhi	r2,4097
100083b8:	1096c704 	addi	r2,r2,23324
100083bc:	11000017 	ldw	r4,0(r2)
100083c0:	01440074 	movhi	r5,4097
100083c4:	2960d004 	addi	r5,r5,-31936
100083c8:	000913c1 	jmpi	1000913c <_fwalk_reent>

100083cc <__fp_unlock>:
100083cc:	0005883a 	mov	r2,zero
100083d0:	f800283a 	ret

100083d4 <_cleanup_r>:
100083d4:	01440074 	movhi	r5,4097
100083d8:	29746c04 	addi	r5,r5,-11856
100083dc:	000913c1 	jmpi	1000913c <_fwalk_reent>

100083e0 <__sinit.part.1>:
100083e0:	defff704 	addi	sp,sp,-36
100083e4:	00c40074 	movhi	r3,4097
100083e8:	dfc00815 	stw	ra,32(sp)
100083ec:	ddc00715 	stw	r23,28(sp)
100083f0:	dd800615 	stw	r22,24(sp)
100083f4:	dd400515 	stw	r21,20(sp)
100083f8:	dd000415 	stw	r20,16(sp)
100083fc:	dcc00315 	stw	r19,12(sp)
10008400:	dc800215 	stw	r18,8(sp)
10008404:	dc400115 	stw	r17,4(sp)
10008408:	dc000015 	stw	r16,0(sp)
1000840c:	18e0f504 	addi	r3,r3,-31788
10008410:	24000117 	ldw	r16,4(r4)
10008414:	20c00f15 	stw	r3,60(r4)
10008418:	2080bb04 	addi	r2,r4,748
1000841c:	00c000c4 	movi	r3,3
10008420:	20c0b915 	stw	r3,740(r4)
10008424:	2080ba15 	stw	r2,744(r4)
10008428:	2000b815 	stw	zero,736(r4)
1000842c:	05c00204 	movi	r23,8
10008430:	00800104 	movi	r2,4
10008434:	2025883a 	mov	r18,r4
10008438:	b80d883a 	mov	r6,r23
1000843c:	81001704 	addi	r4,r16,92
10008440:	000b883a 	mov	r5,zero
10008444:	80000015 	stw	zero,0(r16)
10008448:	80000115 	stw	zero,4(r16)
1000844c:	80000215 	stw	zero,8(r16)
10008450:	8080030d 	sth	r2,12(r16)
10008454:	80001915 	stw	zero,100(r16)
10008458:	8000038d 	sth	zero,14(r16)
1000845c:	80000415 	stw	zero,16(r16)
10008460:	80000515 	stw	zero,20(r16)
10008464:	80000615 	stw	zero,24(r16)
10008468:	000406c0 	call	1000406c <memset>
1000846c:	05840074 	movhi	r22,4097
10008470:	94400217 	ldw	r17,8(r18)
10008474:	05440074 	movhi	r21,4097
10008478:	05040074 	movhi	r20,4097
1000847c:	04c40074 	movhi	r19,4097
10008480:	b5adc404 	addi	r22,r22,-18672
10008484:	ad6ddb04 	addi	r21,r21,-18580
10008488:	a52dfa04 	addi	r20,r20,-18456
1000848c:	9cee1104 	addi	r19,r19,-18364
10008490:	85800815 	stw	r22,32(r16)
10008494:	85400915 	stw	r21,36(r16)
10008498:	85000a15 	stw	r20,40(r16)
1000849c:	84c00b15 	stw	r19,44(r16)
100084a0:	84000715 	stw	r16,28(r16)
100084a4:	00800284 	movi	r2,10
100084a8:	8880030d 	sth	r2,12(r17)
100084ac:	00800044 	movi	r2,1
100084b0:	b80d883a 	mov	r6,r23
100084b4:	89001704 	addi	r4,r17,92
100084b8:	000b883a 	mov	r5,zero
100084bc:	88000015 	stw	zero,0(r17)
100084c0:	88000115 	stw	zero,4(r17)
100084c4:	88000215 	stw	zero,8(r17)
100084c8:	88001915 	stw	zero,100(r17)
100084cc:	8880038d 	sth	r2,14(r17)
100084d0:	88000415 	stw	zero,16(r17)
100084d4:	88000515 	stw	zero,20(r17)
100084d8:	88000615 	stw	zero,24(r17)
100084dc:	000406c0 	call	1000406c <memset>
100084e0:	94000317 	ldw	r16,12(r18)
100084e4:	00800484 	movi	r2,18
100084e8:	8c400715 	stw	r17,28(r17)
100084ec:	8d800815 	stw	r22,32(r17)
100084f0:	8d400915 	stw	r21,36(r17)
100084f4:	8d000a15 	stw	r20,40(r17)
100084f8:	8cc00b15 	stw	r19,44(r17)
100084fc:	8080030d 	sth	r2,12(r16)
10008500:	00800084 	movi	r2,2
10008504:	80000015 	stw	zero,0(r16)
10008508:	80000115 	stw	zero,4(r16)
1000850c:	80000215 	stw	zero,8(r16)
10008510:	80001915 	stw	zero,100(r16)
10008514:	8080038d 	sth	r2,14(r16)
10008518:	80000415 	stw	zero,16(r16)
1000851c:	80000515 	stw	zero,20(r16)
10008520:	80000615 	stw	zero,24(r16)
10008524:	b80d883a 	mov	r6,r23
10008528:	000b883a 	mov	r5,zero
1000852c:	81001704 	addi	r4,r16,92
10008530:	000406c0 	call	1000406c <memset>
10008534:	00800044 	movi	r2,1
10008538:	84000715 	stw	r16,28(r16)
1000853c:	85800815 	stw	r22,32(r16)
10008540:	85400915 	stw	r21,36(r16)
10008544:	85000a15 	stw	r20,40(r16)
10008548:	84c00b15 	stw	r19,44(r16)
1000854c:	90800e15 	stw	r2,56(r18)
10008550:	dfc00817 	ldw	ra,32(sp)
10008554:	ddc00717 	ldw	r23,28(sp)
10008558:	dd800617 	ldw	r22,24(sp)
1000855c:	dd400517 	ldw	r21,20(sp)
10008560:	dd000417 	ldw	r20,16(sp)
10008564:	dcc00317 	ldw	r19,12(sp)
10008568:	dc800217 	ldw	r18,8(sp)
1000856c:	dc400117 	ldw	r17,4(sp)
10008570:	dc000017 	ldw	r16,0(sp)
10008574:	dec00904 	addi	sp,sp,36
10008578:	f800283a 	ret

1000857c <__fp_lock>:
1000857c:	0005883a 	mov	r2,zero
10008580:	f800283a 	ret

10008584 <__sfmoreglue>:
10008584:	defffc04 	addi	sp,sp,-16
10008588:	dc800215 	stw	r18,8(sp)
1000858c:	2825883a 	mov	r18,r5
10008590:	dc000015 	stw	r16,0(sp)
10008594:	01401a04 	movi	r5,104
10008598:	2021883a 	mov	r16,r4
1000859c:	913fffc4 	addi	r4,r18,-1
100085a0:	dfc00315 	stw	ra,12(sp)
100085a4:	dc400115 	stw	r17,4(sp)
100085a8:	000e52c0 	call	1000e52c <__mulsi3>
100085ac:	8009883a 	mov	r4,r16
100085b0:	11401d04 	addi	r5,r2,116
100085b4:	1023883a 	mov	r17,r2
100085b8:	00094980 	call	10009498 <_malloc_r>
100085bc:	1021883a 	mov	r16,r2
100085c0:	10000726 	beq	r2,zero,100085e0 <__sfmoreglue+0x5c>
100085c4:	11000304 	addi	r4,r2,12
100085c8:	10000015 	stw	zero,0(r2)
100085cc:	14800115 	stw	r18,4(r2)
100085d0:	11000215 	stw	r4,8(r2)
100085d4:	89801a04 	addi	r6,r17,104
100085d8:	000b883a 	mov	r5,zero
100085dc:	000406c0 	call	1000406c <memset>
100085e0:	8005883a 	mov	r2,r16
100085e4:	dfc00317 	ldw	ra,12(sp)
100085e8:	dc800217 	ldw	r18,8(sp)
100085ec:	dc400117 	ldw	r17,4(sp)
100085f0:	dc000017 	ldw	r16,0(sp)
100085f4:	dec00404 	addi	sp,sp,16
100085f8:	f800283a 	ret

100085fc <__sfp>:
100085fc:	defffb04 	addi	sp,sp,-20
10008600:	dc000015 	stw	r16,0(sp)
10008604:	04040074 	movhi	r16,4097
10008608:	8416c704 	addi	r16,r16,23324
1000860c:	dcc00315 	stw	r19,12(sp)
10008610:	2027883a 	mov	r19,r4
10008614:	81000017 	ldw	r4,0(r16)
10008618:	dfc00415 	stw	ra,16(sp)
1000861c:	dc800215 	stw	r18,8(sp)
10008620:	20800e17 	ldw	r2,56(r4)
10008624:	dc400115 	stw	r17,4(sp)
10008628:	1000021e 	bne	r2,zero,10008634 <__sfp+0x38>
1000862c:	00083e00 	call	100083e0 <__sinit.part.1>
10008630:	81000017 	ldw	r4,0(r16)
10008634:	2480b804 	addi	r18,r4,736
10008638:	047fffc4 	movi	r17,-1
1000863c:	91000117 	ldw	r4,4(r18)
10008640:	94000217 	ldw	r16,8(r18)
10008644:	213fffc4 	addi	r4,r4,-1
10008648:	20000a16 	blt	r4,zero,10008674 <__sfp+0x78>
1000864c:	8080030f 	ldh	r2,12(r16)
10008650:	10000c26 	beq	r2,zero,10008684 <__sfp+0x88>
10008654:	80c01d04 	addi	r3,r16,116
10008658:	00000206 	br	10008664 <__sfp+0x68>
1000865c:	18bfe60f 	ldh	r2,-104(r3)
10008660:	10000826 	beq	r2,zero,10008684 <__sfp+0x88>
10008664:	213fffc4 	addi	r4,r4,-1
10008668:	1c3ffd04 	addi	r16,r3,-12
1000866c:	18c01a04 	addi	r3,r3,104
10008670:	247ffa1e 	bne	r4,r17,1000865c <__alt_data_end+0xf800865c>
10008674:	90800017 	ldw	r2,0(r18)
10008678:	10001d26 	beq	r2,zero,100086f0 <__sfp+0xf4>
1000867c:	1025883a 	mov	r18,r2
10008680:	003fee06 	br	1000863c <__alt_data_end+0xf800863c>
10008684:	00bfffc4 	movi	r2,-1
10008688:	8080038d 	sth	r2,14(r16)
1000868c:	00800044 	movi	r2,1
10008690:	8080030d 	sth	r2,12(r16)
10008694:	80001915 	stw	zero,100(r16)
10008698:	80000015 	stw	zero,0(r16)
1000869c:	80000215 	stw	zero,8(r16)
100086a0:	80000115 	stw	zero,4(r16)
100086a4:	80000415 	stw	zero,16(r16)
100086a8:	80000515 	stw	zero,20(r16)
100086ac:	80000615 	stw	zero,24(r16)
100086b0:	01800204 	movi	r6,8
100086b4:	000b883a 	mov	r5,zero
100086b8:	81001704 	addi	r4,r16,92
100086bc:	000406c0 	call	1000406c <memset>
100086c0:	8005883a 	mov	r2,r16
100086c4:	80000c15 	stw	zero,48(r16)
100086c8:	80000d15 	stw	zero,52(r16)
100086cc:	80001115 	stw	zero,68(r16)
100086d0:	80001215 	stw	zero,72(r16)
100086d4:	dfc00417 	ldw	ra,16(sp)
100086d8:	dcc00317 	ldw	r19,12(sp)
100086dc:	dc800217 	ldw	r18,8(sp)
100086e0:	dc400117 	ldw	r17,4(sp)
100086e4:	dc000017 	ldw	r16,0(sp)
100086e8:	dec00504 	addi	sp,sp,20
100086ec:	f800283a 	ret
100086f0:	01400104 	movi	r5,4
100086f4:	9809883a 	mov	r4,r19
100086f8:	00085840 	call	10008584 <__sfmoreglue>
100086fc:	90800015 	stw	r2,0(r18)
10008700:	103fde1e 	bne	r2,zero,1000867c <__alt_data_end+0xf800867c>
10008704:	00800304 	movi	r2,12
10008708:	98800015 	stw	r2,0(r19)
1000870c:	0005883a 	mov	r2,zero
10008710:	003ff006 	br	100086d4 <__alt_data_end+0xf80086d4>

10008714 <_cleanup>:
10008714:	00840074 	movhi	r2,4097
10008718:	1096c704 	addi	r2,r2,23324
1000871c:	11000017 	ldw	r4,0(r2)
10008720:	01440074 	movhi	r5,4097
10008724:	29746c04 	addi	r5,r5,-11856
10008728:	000913c1 	jmpi	1000913c <_fwalk_reent>

1000872c <__sinit>:
1000872c:	20800e17 	ldw	r2,56(r4)
10008730:	10000126 	beq	r2,zero,10008738 <__sinit+0xc>
10008734:	f800283a 	ret
10008738:	00083e01 	jmpi	100083e0 <__sinit.part.1>

1000873c <__sfp_lock_acquire>:
1000873c:	f800283a 	ret

10008740 <__sfp_lock_release>:
10008740:	f800283a 	ret

10008744 <__sinit_lock_acquire>:
10008744:	f800283a 	ret

10008748 <__sinit_lock_release>:
10008748:	f800283a 	ret

1000874c <__fp_lock_all>:
1000874c:	00840074 	movhi	r2,4097
10008750:	1096c804 	addi	r2,r2,23328
10008754:	11000017 	ldw	r4,0(r2)
10008758:	01440074 	movhi	r5,4097
1000875c:	29615f04 	addi	r5,r5,-31364
10008760:	00090781 	jmpi	10009078 <_fwalk>

10008764 <__fp_unlock_all>:
10008764:	00840074 	movhi	r2,4097
10008768:	1096c804 	addi	r2,r2,23328
1000876c:	11000017 	ldw	r4,0(r2)
10008770:	01440074 	movhi	r5,4097
10008774:	2960f304 	addi	r5,r5,-31796
10008778:	00090781 	jmpi	10009078 <_fwalk>

1000877c <_malloc_trim_r>:
1000877c:	defffb04 	addi	sp,sp,-20
10008780:	dcc00315 	stw	r19,12(sp)
10008784:	04c40074 	movhi	r19,4097
10008788:	dc800215 	stw	r18,8(sp)
1000878c:	dc400115 	stw	r17,4(sp)
10008790:	dc000015 	stw	r16,0(sp)
10008794:	dfc00415 	stw	ra,16(sp)
10008798:	2821883a 	mov	r16,r5
1000879c:	9cd14304 	addi	r19,r19,17676
100087a0:	2025883a 	mov	r18,r4
100087a4:	00113940 	call	10011394 <__malloc_lock>
100087a8:	98800217 	ldw	r2,8(r19)
100087ac:	14400117 	ldw	r17,4(r2)
100087b0:	00bfff04 	movi	r2,-4
100087b4:	88a2703a 	and	r17,r17,r2
100087b8:	8c21c83a 	sub	r16,r17,r16
100087bc:	8403fbc4 	addi	r16,r16,4079
100087c0:	8020d33a 	srli	r16,r16,12
100087c4:	0083ffc4 	movi	r2,4095
100087c8:	843fffc4 	addi	r16,r16,-1
100087cc:	8020933a 	slli	r16,r16,12
100087d0:	1400060e 	bge	r2,r16,100087ec <_malloc_trim_r+0x70>
100087d4:	000b883a 	mov	r5,zero
100087d8:	9009883a 	mov	r4,r18
100087dc:	000b6bc0 	call	1000b6bc <_sbrk_r>
100087e0:	98c00217 	ldw	r3,8(r19)
100087e4:	1c47883a 	add	r3,r3,r17
100087e8:	10c00a26 	beq	r2,r3,10008814 <_malloc_trim_r+0x98>
100087ec:	9009883a 	mov	r4,r18
100087f0:	00113b80 	call	100113b8 <__malloc_unlock>
100087f4:	0005883a 	mov	r2,zero
100087f8:	dfc00417 	ldw	ra,16(sp)
100087fc:	dcc00317 	ldw	r19,12(sp)
10008800:	dc800217 	ldw	r18,8(sp)
10008804:	dc400117 	ldw	r17,4(sp)
10008808:	dc000017 	ldw	r16,0(sp)
1000880c:	dec00504 	addi	sp,sp,20
10008810:	f800283a 	ret
10008814:	040bc83a 	sub	r5,zero,r16
10008818:	9009883a 	mov	r4,r18
1000881c:	000b6bc0 	call	1000b6bc <_sbrk_r>
10008820:	00ffffc4 	movi	r3,-1
10008824:	10c00d26 	beq	r2,r3,1000885c <_malloc_trim_r+0xe0>
10008828:	00c40074 	movhi	r3,4097
1000882c:	18de7704 	addi	r3,r3,31196
10008830:	18800017 	ldw	r2,0(r3)
10008834:	99000217 	ldw	r4,8(r19)
10008838:	8c23c83a 	sub	r17,r17,r16
1000883c:	8c400054 	ori	r17,r17,1
10008840:	1421c83a 	sub	r16,r2,r16
10008844:	24400115 	stw	r17,4(r4)
10008848:	9009883a 	mov	r4,r18
1000884c:	1c000015 	stw	r16,0(r3)
10008850:	00113b80 	call	100113b8 <__malloc_unlock>
10008854:	00800044 	movi	r2,1
10008858:	003fe706 	br	100087f8 <__alt_data_end+0xf80087f8>
1000885c:	000b883a 	mov	r5,zero
10008860:	9009883a 	mov	r4,r18
10008864:	000b6bc0 	call	1000b6bc <_sbrk_r>
10008868:	99000217 	ldw	r4,8(r19)
1000886c:	014003c4 	movi	r5,15
10008870:	1107c83a 	sub	r3,r2,r4
10008874:	28ffdd0e 	bge	r5,r3,100087ec <__alt_data_end+0xf80087ec>
10008878:	01440074 	movhi	r5,4097
1000887c:	2956ca04 	addi	r5,r5,23336
10008880:	29400017 	ldw	r5,0(r5)
10008884:	18c00054 	ori	r3,r3,1
10008888:	20c00115 	stw	r3,4(r4)
1000888c:	00c40074 	movhi	r3,4097
10008890:	1145c83a 	sub	r2,r2,r5
10008894:	18de7704 	addi	r3,r3,31196
10008898:	18800015 	stw	r2,0(r3)
1000889c:	003fd306 	br	100087ec <__alt_data_end+0xf80087ec>

100088a0 <_free_r>:
100088a0:	28004126 	beq	r5,zero,100089a8 <_free_r+0x108>
100088a4:	defffd04 	addi	sp,sp,-12
100088a8:	dc400115 	stw	r17,4(sp)
100088ac:	dc000015 	stw	r16,0(sp)
100088b0:	2023883a 	mov	r17,r4
100088b4:	2821883a 	mov	r16,r5
100088b8:	dfc00215 	stw	ra,8(sp)
100088bc:	00113940 	call	10011394 <__malloc_lock>
100088c0:	81ffff17 	ldw	r7,-4(r16)
100088c4:	00bfff84 	movi	r2,-2
100088c8:	01040074 	movhi	r4,4097
100088cc:	81bffe04 	addi	r6,r16,-8
100088d0:	3884703a 	and	r2,r7,r2
100088d4:	21114304 	addi	r4,r4,17676
100088d8:	308b883a 	add	r5,r6,r2
100088dc:	2a400117 	ldw	r9,4(r5)
100088e0:	22000217 	ldw	r8,8(r4)
100088e4:	00ffff04 	movi	r3,-4
100088e8:	48c6703a 	and	r3,r9,r3
100088ec:	2a005726 	beq	r5,r8,10008a4c <_free_r+0x1ac>
100088f0:	28c00115 	stw	r3,4(r5)
100088f4:	39c0004c 	andi	r7,r7,1
100088f8:	3800091e 	bne	r7,zero,10008920 <_free_r+0x80>
100088fc:	823ffe17 	ldw	r8,-8(r16)
10008900:	22400204 	addi	r9,r4,8
10008904:	320dc83a 	sub	r6,r6,r8
10008908:	31c00217 	ldw	r7,8(r6)
1000890c:	1205883a 	add	r2,r2,r8
10008910:	3a406526 	beq	r7,r9,10008aa8 <_free_r+0x208>
10008914:	32000317 	ldw	r8,12(r6)
10008918:	3a000315 	stw	r8,12(r7)
1000891c:	41c00215 	stw	r7,8(r8)
10008920:	28cf883a 	add	r7,r5,r3
10008924:	39c00117 	ldw	r7,4(r7)
10008928:	39c0004c 	andi	r7,r7,1
1000892c:	38003a26 	beq	r7,zero,10008a18 <_free_r+0x178>
10008930:	10c00054 	ori	r3,r2,1
10008934:	30c00115 	stw	r3,4(r6)
10008938:	3087883a 	add	r3,r6,r2
1000893c:	18800015 	stw	r2,0(r3)
10008940:	00c07fc4 	movi	r3,511
10008944:	18801936 	bltu	r3,r2,100089ac <_free_r+0x10c>
10008948:	1004d0fa 	srli	r2,r2,3
1000894c:	01c00044 	movi	r7,1
10008950:	21400117 	ldw	r5,4(r4)
10008954:	10c00044 	addi	r3,r2,1
10008958:	18c7883a 	add	r3,r3,r3
1000895c:	1005d0ba 	srai	r2,r2,2
10008960:	18c7883a 	add	r3,r3,r3
10008964:	18c7883a 	add	r3,r3,r3
10008968:	1907883a 	add	r3,r3,r4
1000896c:	3884983a 	sll	r2,r7,r2
10008970:	19c00017 	ldw	r7,0(r3)
10008974:	1a3ffe04 	addi	r8,r3,-8
10008978:	1144b03a 	or	r2,r2,r5
1000897c:	32000315 	stw	r8,12(r6)
10008980:	31c00215 	stw	r7,8(r6)
10008984:	20800115 	stw	r2,4(r4)
10008988:	19800015 	stw	r6,0(r3)
1000898c:	39800315 	stw	r6,12(r7)
10008990:	8809883a 	mov	r4,r17
10008994:	dfc00217 	ldw	ra,8(sp)
10008998:	dc400117 	ldw	r17,4(sp)
1000899c:	dc000017 	ldw	r16,0(sp)
100089a0:	dec00304 	addi	sp,sp,12
100089a4:	00113b81 	jmpi	100113b8 <__malloc_unlock>
100089a8:	f800283a 	ret
100089ac:	100ad27a 	srli	r5,r2,9
100089b0:	00c00104 	movi	r3,4
100089b4:	19404a36 	bltu	r3,r5,10008ae0 <_free_r+0x240>
100089b8:	100ad1ba 	srli	r5,r2,6
100089bc:	28c00e44 	addi	r3,r5,57
100089c0:	18c7883a 	add	r3,r3,r3
100089c4:	29400e04 	addi	r5,r5,56
100089c8:	18c7883a 	add	r3,r3,r3
100089cc:	18c7883a 	add	r3,r3,r3
100089d0:	1909883a 	add	r4,r3,r4
100089d4:	20c00017 	ldw	r3,0(r4)
100089d8:	01c40074 	movhi	r7,4097
100089dc:	213ffe04 	addi	r4,r4,-8
100089e0:	39d14304 	addi	r7,r7,17676
100089e4:	20c04426 	beq	r4,r3,10008af8 <_free_r+0x258>
100089e8:	01ffff04 	movi	r7,-4
100089ec:	19400117 	ldw	r5,4(r3)
100089f0:	29ca703a 	and	r5,r5,r7
100089f4:	1140022e 	bgeu	r2,r5,10008a00 <_free_r+0x160>
100089f8:	18c00217 	ldw	r3,8(r3)
100089fc:	20fffb1e 	bne	r4,r3,100089ec <__alt_data_end+0xf80089ec>
10008a00:	19000317 	ldw	r4,12(r3)
10008a04:	31000315 	stw	r4,12(r6)
10008a08:	30c00215 	stw	r3,8(r6)
10008a0c:	21800215 	stw	r6,8(r4)
10008a10:	19800315 	stw	r6,12(r3)
10008a14:	003fde06 	br	10008990 <__alt_data_end+0xf8008990>
10008a18:	29c00217 	ldw	r7,8(r5)
10008a1c:	10c5883a 	add	r2,r2,r3
10008a20:	00c40074 	movhi	r3,4097
10008a24:	18d14504 	addi	r3,r3,17684
10008a28:	38c03b26 	beq	r7,r3,10008b18 <_free_r+0x278>
10008a2c:	2a000317 	ldw	r8,12(r5)
10008a30:	11400054 	ori	r5,r2,1
10008a34:	3087883a 	add	r3,r6,r2
10008a38:	3a000315 	stw	r8,12(r7)
10008a3c:	41c00215 	stw	r7,8(r8)
10008a40:	31400115 	stw	r5,4(r6)
10008a44:	18800015 	stw	r2,0(r3)
10008a48:	003fbd06 	br	10008940 <__alt_data_end+0xf8008940>
10008a4c:	39c0004c 	andi	r7,r7,1
10008a50:	10c5883a 	add	r2,r2,r3
10008a54:	3800071e 	bne	r7,zero,10008a74 <_free_r+0x1d4>
10008a58:	81fffe17 	ldw	r7,-8(r16)
10008a5c:	31cdc83a 	sub	r6,r6,r7
10008a60:	30c00317 	ldw	r3,12(r6)
10008a64:	31400217 	ldw	r5,8(r6)
10008a68:	11c5883a 	add	r2,r2,r7
10008a6c:	28c00315 	stw	r3,12(r5)
10008a70:	19400215 	stw	r5,8(r3)
10008a74:	10c00054 	ori	r3,r2,1
10008a78:	30c00115 	stw	r3,4(r6)
10008a7c:	00c40074 	movhi	r3,4097
10008a80:	18d6cb04 	addi	r3,r3,23340
10008a84:	18c00017 	ldw	r3,0(r3)
10008a88:	21800215 	stw	r6,8(r4)
10008a8c:	10ffc036 	bltu	r2,r3,10008990 <__alt_data_end+0xf8008990>
10008a90:	00840074 	movhi	r2,4097
10008a94:	109d9a04 	addi	r2,r2,30312
10008a98:	11400017 	ldw	r5,0(r2)
10008a9c:	8809883a 	mov	r4,r17
10008aa0:	000877c0 	call	1000877c <_malloc_trim_r>
10008aa4:	003fba06 	br	10008990 <__alt_data_end+0xf8008990>
10008aa8:	28c9883a 	add	r4,r5,r3
10008aac:	21000117 	ldw	r4,4(r4)
10008ab0:	2100004c 	andi	r4,r4,1
10008ab4:	2000391e 	bne	r4,zero,10008b9c <_free_r+0x2fc>
10008ab8:	29c00217 	ldw	r7,8(r5)
10008abc:	29000317 	ldw	r4,12(r5)
10008ac0:	1885883a 	add	r2,r3,r2
10008ac4:	10c00054 	ori	r3,r2,1
10008ac8:	39000315 	stw	r4,12(r7)
10008acc:	21c00215 	stw	r7,8(r4)
10008ad0:	30c00115 	stw	r3,4(r6)
10008ad4:	308d883a 	add	r6,r6,r2
10008ad8:	30800015 	stw	r2,0(r6)
10008adc:	003fac06 	br	10008990 <__alt_data_end+0xf8008990>
10008ae0:	00c00504 	movi	r3,20
10008ae4:	19401536 	bltu	r3,r5,10008b3c <_free_r+0x29c>
10008ae8:	28c01704 	addi	r3,r5,92
10008aec:	18c7883a 	add	r3,r3,r3
10008af0:	294016c4 	addi	r5,r5,91
10008af4:	003fb406 	br	100089c8 <__alt_data_end+0xf80089c8>
10008af8:	280bd0ba 	srai	r5,r5,2
10008afc:	00c00044 	movi	r3,1
10008b00:	38800117 	ldw	r2,4(r7)
10008b04:	194a983a 	sll	r5,r3,r5
10008b08:	2007883a 	mov	r3,r4
10008b0c:	2884b03a 	or	r2,r5,r2
10008b10:	38800115 	stw	r2,4(r7)
10008b14:	003fbb06 	br	10008a04 <__alt_data_end+0xf8008a04>
10008b18:	21800515 	stw	r6,20(r4)
10008b1c:	21800415 	stw	r6,16(r4)
10008b20:	10c00054 	ori	r3,r2,1
10008b24:	31c00315 	stw	r7,12(r6)
10008b28:	31c00215 	stw	r7,8(r6)
10008b2c:	30c00115 	stw	r3,4(r6)
10008b30:	308d883a 	add	r6,r6,r2
10008b34:	30800015 	stw	r2,0(r6)
10008b38:	003f9506 	br	10008990 <__alt_data_end+0xf8008990>
10008b3c:	00c01504 	movi	r3,84
10008b40:	19400536 	bltu	r3,r5,10008b58 <_free_r+0x2b8>
10008b44:	100ad33a 	srli	r5,r2,12
10008b48:	28c01bc4 	addi	r3,r5,111
10008b4c:	18c7883a 	add	r3,r3,r3
10008b50:	29401b84 	addi	r5,r5,110
10008b54:	003f9c06 	br	100089c8 <__alt_data_end+0xf80089c8>
10008b58:	00c05504 	movi	r3,340
10008b5c:	19400536 	bltu	r3,r5,10008b74 <_free_r+0x2d4>
10008b60:	100ad3fa 	srli	r5,r2,15
10008b64:	28c01e04 	addi	r3,r5,120
10008b68:	18c7883a 	add	r3,r3,r3
10008b6c:	29401dc4 	addi	r5,r5,119
10008b70:	003f9506 	br	100089c8 <__alt_data_end+0xf80089c8>
10008b74:	00c15504 	movi	r3,1364
10008b78:	19400536 	bltu	r3,r5,10008b90 <_free_r+0x2f0>
10008b7c:	100ad4ba 	srli	r5,r2,18
10008b80:	28c01f44 	addi	r3,r5,125
10008b84:	18c7883a 	add	r3,r3,r3
10008b88:	29401f04 	addi	r5,r5,124
10008b8c:	003f8e06 	br	100089c8 <__alt_data_end+0xf80089c8>
10008b90:	00c03f84 	movi	r3,254
10008b94:	01401f84 	movi	r5,126
10008b98:	003f8b06 	br	100089c8 <__alt_data_end+0xf80089c8>
10008b9c:	10c00054 	ori	r3,r2,1
10008ba0:	30c00115 	stw	r3,4(r6)
10008ba4:	308d883a 	add	r6,r6,r2
10008ba8:	30800015 	stw	r2,0(r6)
10008bac:	003f7806 	br	10008990 <__alt_data_end+0xf8008990>

10008bb0 <__sfvwrite_r>:
10008bb0:	30800217 	ldw	r2,8(r6)
10008bb4:	10006726 	beq	r2,zero,10008d54 <__sfvwrite_r+0x1a4>
10008bb8:	28c0030b 	ldhu	r3,12(r5)
10008bbc:	defff404 	addi	sp,sp,-48
10008bc0:	dd400715 	stw	r21,28(sp)
10008bc4:	dd000615 	stw	r20,24(sp)
10008bc8:	dc000215 	stw	r16,8(sp)
10008bcc:	dfc00b15 	stw	ra,44(sp)
10008bd0:	df000a15 	stw	fp,40(sp)
10008bd4:	ddc00915 	stw	r23,36(sp)
10008bd8:	dd800815 	stw	r22,32(sp)
10008bdc:	dcc00515 	stw	r19,20(sp)
10008be0:	dc800415 	stw	r18,16(sp)
10008be4:	dc400315 	stw	r17,12(sp)
10008be8:	1880020c 	andi	r2,r3,8
10008bec:	2821883a 	mov	r16,r5
10008bf0:	202b883a 	mov	r21,r4
10008bf4:	3029883a 	mov	r20,r6
10008bf8:	10002726 	beq	r2,zero,10008c98 <__sfvwrite_r+0xe8>
10008bfc:	28800417 	ldw	r2,16(r5)
10008c00:	10002526 	beq	r2,zero,10008c98 <__sfvwrite_r+0xe8>
10008c04:	1880008c 	andi	r2,r3,2
10008c08:	a4400017 	ldw	r17,0(r20)
10008c0c:	10002a26 	beq	r2,zero,10008cb8 <__sfvwrite_r+0x108>
10008c10:	05a00034 	movhi	r22,32768
10008c14:	0027883a 	mov	r19,zero
10008c18:	0025883a 	mov	r18,zero
10008c1c:	b5bf0004 	addi	r22,r22,-1024
10008c20:	980d883a 	mov	r6,r19
10008c24:	a809883a 	mov	r4,r21
10008c28:	90004626 	beq	r18,zero,10008d44 <__sfvwrite_r+0x194>
10008c2c:	900f883a 	mov	r7,r18
10008c30:	b480022e 	bgeu	r22,r18,10008c3c <__sfvwrite_r+0x8c>
10008c34:	01e00034 	movhi	r7,32768
10008c38:	39ff0004 	addi	r7,r7,-1024
10008c3c:	80800917 	ldw	r2,36(r16)
10008c40:	81400717 	ldw	r5,28(r16)
10008c44:	103ee83a 	callr	r2
10008c48:	00805a0e 	bge	zero,r2,10008db4 <__sfvwrite_r+0x204>
10008c4c:	a0c00217 	ldw	r3,8(r20)
10008c50:	98a7883a 	add	r19,r19,r2
10008c54:	90a5c83a 	sub	r18,r18,r2
10008c58:	1885c83a 	sub	r2,r3,r2
10008c5c:	a0800215 	stw	r2,8(r20)
10008c60:	103fef1e 	bne	r2,zero,10008c20 <__alt_data_end+0xf8008c20>
10008c64:	0005883a 	mov	r2,zero
10008c68:	dfc00b17 	ldw	ra,44(sp)
10008c6c:	df000a17 	ldw	fp,40(sp)
10008c70:	ddc00917 	ldw	r23,36(sp)
10008c74:	dd800817 	ldw	r22,32(sp)
10008c78:	dd400717 	ldw	r21,28(sp)
10008c7c:	dd000617 	ldw	r20,24(sp)
10008c80:	dcc00517 	ldw	r19,20(sp)
10008c84:	dc800417 	ldw	r18,16(sp)
10008c88:	dc400317 	ldw	r17,12(sp)
10008c8c:	dc000217 	ldw	r16,8(sp)
10008c90:	dec00c04 	addi	sp,sp,48
10008c94:	f800283a 	ret
10008c98:	800b883a 	mov	r5,r16
10008c9c:	a809883a 	mov	r4,r21
10008ca0:	00067200 	call	10006720 <__swsetup_r>
10008ca4:	1000ee1e 	bne	r2,zero,10009060 <__sfvwrite_r+0x4b0>
10008ca8:	80c0030b 	ldhu	r3,12(r16)
10008cac:	a4400017 	ldw	r17,0(r20)
10008cb0:	1880008c 	andi	r2,r3,2
10008cb4:	103fd61e 	bne	r2,zero,10008c10 <__alt_data_end+0xf8008c10>
10008cb8:	1880004c 	andi	r2,r3,1
10008cbc:	1000421e 	bne	r2,zero,10008dc8 <__sfvwrite_r+0x218>
10008cc0:	0039883a 	mov	fp,zero
10008cc4:	0025883a 	mov	r18,zero
10008cc8:	90001a26 	beq	r18,zero,10008d34 <__sfvwrite_r+0x184>
10008ccc:	1880800c 	andi	r2,r3,512
10008cd0:	84c00217 	ldw	r19,8(r16)
10008cd4:	10002126 	beq	r2,zero,10008d5c <__sfvwrite_r+0x1ac>
10008cd8:	982f883a 	mov	r23,r19
10008cdc:	94c09636 	bltu	r18,r19,10008f38 <__sfvwrite_r+0x388>
10008ce0:	1881200c 	andi	r2,r3,1152
10008ce4:	1000a11e 	bne	r2,zero,10008f6c <__sfvwrite_r+0x3bc>
10008ce8:	81000017 	ldw	r4,0(r16)
10008cec:	b80d883a 	mov	r6,r23
10008cf0:	e00b883a 	mov	r5,fp
10008cf4:	0009ed00 	call	10009ed0 <memmove>
10008cf8:	80c00217 	ldw	r3,8(r16)
10008cfc:	81000017 	ldw	r4,0(r16)
10008d00:	9005883a 	mov	r2,r18
10008d04:	1ce7c83a 	sub	r19,r3,r19
10008d08:	25cf883a 	add	r7,r4,r23
10008d0c:	84c00215 	stw	r19,8(r16)
10008d10:	81c00015 	stw	r7,0(r16)
10008d14:	a0c00217 	ldw	r3,8(r20)
10008d18:	e0b9883a 	add	fp,fp,r2
10008d1c:	90a5c83a 	sub	r18,r18,r2
10008d20:	18a7c83a 	sub	r19,r3,r2
10008d24:	a4c00215 	stw	r19,8(r20)
10008d28:	983fce26 	beq	r19,zero,10008c64 <__alt_data_end+0xf8008c64>
10008d2c:	80c0030b 	ldhu	r3,12(r16)
10008d30:	903fe61e 	bne	r18,zero,10008ccc <__alt_data_end+0xf8008ccc>
10008d34:	8f000017 	ldw	fp,0(r17)
10008d38:	8c800117 	ldw	r18,4(r17)
10008d3c:	8c400204 	addi	r17,r17,8
10008d40:	003fe106 	br	10008cc8 <__alt_data_end+0xf8008cc8>
10008d44:	8cc00017 	ldw	r19,0(r17)
10008d48:	8c800117 	ldw	r18,4(r17)
10008d4c:	8c400204 	addi	r17,r17,8
10008d50:	003fb306 	br	10008c20 <__alt_data_end+0xf8008c20>
10008d54:	0005883a 	mov	r2,zero
10008d58:	f800283a 	ret
10008d5c:	81000017 	ldw	r4,0(r16)
10008d60:	80800417 	ldw	r2,16(r16)
10008d64:	11005a36 	bltu	r2,r4,10008ed0 <__sfvwrite_r+0x320>
10008d68:	85c00517 	ldw	r23,20(r16)
10008d6c:	95c05836 	bltu	r18,r23,10008ed0 <__sfvwrite_r+0x320>
10008d70:	00a00034 	movhi	r2,32768
10008d74:	10bfffc4 	addi	r2,r2,-1
10008d78:	9009883a 	mov	r4,r18
10008d7c:	1480012e 	bgeu	r2,r18,10008d84 <__sfvwrite_r+0x1d4>
10008d80:	1009883a 	mov	r4,r2
10008d84:	b80b883a 	mov	r5,r23
10008d88:	0003eb80 	call	10003eb8 <__divsi3>
10008d8c:	b80b883a 	mov	r5,r23
10008d90:	1009883a 	mov	r4,r2
10008d94:	000e52c0 	call	1000e52c <__mulsi3>
10008d98:	81400717 	ldw	r5,28(r16)
10008d9c:	80c00917 	ldw	r3,36(r16)
10008da0:	100f883a 	mov	r7,r2
10008da4:	e00d883a 	mov	r6,fp
10008da8:	a809883a 	mov	r4,r21
10008dac:	183ee83a 	callr	r3
10008db0:	00bfd816 	blt	zero,r2,10008d14 <__alt_data_end+0xf8008d14>
10008db4:	8080030b 	ldhu	r2,12(r16)
10008db8:	10801014 	ori	r2,r2,64
10008dbc:	8080030d 	sth	r2,12(r16)
10008dc0:	00bfffc4 	movi	r2,-1
10008dc4:	003fa806 	br	10008c68 <__alt_data_end+0xf8008c68>
10008dc8:	0027883a 	mov	r19,zero
10008dcc:	0011883a 	mov	r8,zero
10008dd0:	0039883a 	mov	fp,zero
10008dd4:	0025883a 	mov	r18,zero
10008dd8:	90001f26 	beq	r18,zero,10008e58 <__sfvwrite_r+0x2a8>
10008ddc:	40005a26 	beq	r8,zero,10008f48 <__sfvwrite_r+0x398>
10008de0:	982d883a 	mov	r22,r19
10008de4:	94c0012e 	bgeu	r18,r19,10008dec <__sfvwrite_r+0x23c>
10008de8:	902d883a 	mov	r22,r18
10008dec:	81000017 	ldw	r4,0(r16)
10008df0:	80800417 	ldw	r2,16(r16)
10008df4:	b02f883a 	mov	r23,r22
10008df8:	81c00517 	ldw	r7,20(r16)
10008dfc:	1100032e 	bgeu	r2,r4,10008e0c <__sfvwrite_r+0x25c>
10008e00:	80c00217 	ldw	r3,8(r16)
10008e04:	38c7883a 	add	r3,r7,r3
10008e08:	1d801816 	blt	r3,r22,10008e6c <__sfvwrite_r+0x2bc>
10008e0c:	b1c03e16 	blt	r22,r7,10008f08 <__sfvwrite_r+0x358>
10008e10:	80800917 	ldw	r2,36(r16)
10008e14:	81400717 	ldw	r5,28(r16)
10008e18:	e00d883a 	mov	r6,fp
10008e1c:	da000115 	stw	r8,4(sp)
10008e20:	a809883a 	mov	r4,r21
10008e24:	103ee83a 	callr	r2
10008e28:	102f883a 	mov	r23,r2
10008e2c:	da000117 	ldw	r8,4(sp)
10008e30:	00bfe00e 	bge	zero,r2,10008db4 <__alt_data_end+0xf8008db4>
10008e34:	9de7c83a 	sub	r19,r19,r23
10008e38:	98001f26 	beq	r19,zero,10008eb8 <__sfvwrite_r+0x308>
10008e3c:	a0800217 	ldw	r2,8(r20)
10008e40:	e5f9883a 	add	fp,fp,r23
10008e44:	95e5c83a 	sub	r18,r18,r23
10008e48:	15efc83a 	sub	r23,r2,r23
10008e4c:	a5c00215 	stw	r23,8(r20)
10008e50:	b83f8426 	beq	r23,zero,10008c64 <__alt_data_end+0xf8008c64>
10008e54:	903fe11e 	bne	r18,zero,10008ddc <__alt_data_end+0xf8008ddc>
10008e58:	8f000017 	ldw	fp,0(r17)
10008e5c:	8c800117 	ldw	r18,4(r17)
10008e60:	0011883a 	mov	r8,zero
10008e64:	8c400204 	addi	r17,r17,8
10008e68:	003fdb06 	br	10008dd8 <__alt_data_end+0xf8008dd8>
10008e6c:	180d883a 	mov	r6,r3
10008e70:	e00b883a 	mov	r5,fp
10008e74:	da000115 	stw	r8,4(sp)
10008e78:	d8c00015 	stw	r3,0(sp)
10008e7c:	0009ed00 	call	10009ed0 <memmove>
10008e80:	d8c00017 	ldw	r3,0(sp)
10008e84:	80800017 	ldw	r2,0(r16)
10008e88:	800b883a 	mov	r5,r16
10008e8c:	a809883a 	mov	r4,r21
10008e90:	10c5883a 	add	r2,r2,r3
10008e94:	80800015 	stw	r2,0(r16)
10008e98:	d8c00015 	stw	r3,0(sp)
10008e9c:	00083400 	call	10008340 <_fflush_r>
10008ea0:	d8c00017 	ldw	r3,0(sp)
10008ea4:	da000117 	ldw	r8,4(sp)
10008ea8:	103fc21e 	bne	r2,zero,10008db4 <__alt_data_end+0xf8008db4>
10008eac:	182f883a 	mov	r23,r3
10008eb0:	9de7c83a 	sub	r19,r19,r23
10008eb4:	983fe11e 	bne	r19,zero,10008e3c <__alt_data_end+0xf8008e3c>
10008eb8:	800b883a 	mov	r5,r16
10008ebc:	a809883a 	mov	r4,r21
10008ec0:	00083400 	call	10008340 <_fflush_r>
10008ec4:	103fbb1e 	bne	r2,zero,10008db4 <__alt_data_end+0xf8008db4>
10008ec8:	0011883a 	mov	r8,zero
10008ecc:	003fdb06 	br	10008e3c <__alt_data_end+0xf8008e3c>
10008ed0:	94c0012e 	bgeu	r18,r19,10008ed8 <__sfvwrite_r+0x328>
10008ed4:	9027883a 	mov	r19,r18
10008ed8:	980d883a 	mov	r6,r19
10008edc:	e00b883a 	mov	r5,fp
10008ee0:	0009ed00 	call	10009ed0 <memmove>
10008ee4:	80800217 	ldw	r2,8(r16)
10008ee8:	80c00017 	ldw	r3,0(r16)
10008eec:	14c5c83a 	sub	r2,r2,r19
10008ef0:	1cc7883a 	add	r3,r3,r19
10008ef4:	80800215 	stw	r2,8(r16)
10008ef8:	80c00015 	stw	r3,0(r16)
10008efc:	10004326 	beq	r2,zero,1000900c <__sfvwrite_r+0x45c>
10008f00:	9805883a 	mov	r2,r19
10008f04:	003f8306 	br	10008d14 <__alt_data_end+0xf8008d14>
10008f08:	b00d883a 	mov	r6,r22
10008f0c:	e00b883a 	mov	r5,fp
10008f10:	da000115 	stw	r8,4(sp)
10008f14:	0009ed00 	call	10009ed0 <memmove>
10008f18:	80800217 	ldw	r2,8(r16)
10008f1c:	80c00017 	ldw	r3,0(r16)
10008f20:	da000117 	ldw	r8,4(sp)
10008f24:	1585c83a 	sub	r2,r2,r22
10008f28:	1dad883a 	add	r22,r3,r22
10008f2c:	80800215 	stw	r2,8(r16)
10008f30:	85800015 	stw	r22,0(r16)
10008f34:	003fbf06 	br	10008e34 <__alt_data_end+0xf8008e34>
10008f38:	81000017 	ldw	r4,0(r16)
10008f3c:	9027883a 	mov	r19,r18
10008f40:	902f883a 	mov	r23,r18
10008f44:	003f6906 	br	10008cec <__alt_data_end+0xf8008cec>
10008f48:	900d883a 	mov	r6,r18
10008f4c:	01400284 	movi	r5,10
10008f50:	e009883a 	mov	r4,fp
10008f54:	0009ca40 	call	10009ca4 <memchr>
10008f58:	10003e26 	beq	r2,zero,10009054 <__sfvwrite_r+0x4a4>
10008f5c:	10800044 	addi	r2,r2,1
10008f60:	1727c83a 	sub	r19,r2,fp
10008f64:	02000044 	movi	r8,1
10008f68:	003f9d06 	br	10008de0 <__alt_data_end+0xf8008de0>
10008f6c:	80800517 	ldw	r2,20(r16)
10008f70:	81400417 	ldw	r5,16(r16)
10008f74:	81c00017 	ldw	r7,0(r16)
10008f78:	10a7883a 	add	r19,r2,r2
10008f7c:	9885883a 	add	r2,r19,r2
10008f80:	1026d7fa 	srli	r19,r2,31
10008f84:	396dc83a 	sub	r22,r7,r5
10008f88:	b1000044 	addi	r4,r22,1
10008f8c:	9885883a 	add	r2,r19,r2
10008f90:	1027d07a 	srai	r19,r2,1
10008f94:	2485883a 	add	r2,r4,r18
10008f98:	980d883a 	mov	r6,r19
10008f9c:	9880022e 	bgeu	r19,r2,10008fa8 <__sfvwrite_r+0x3f8>
10008fa0:	1027883a 	mov	r19,r2
10008fa4:	100d883a 	mov	r6,r2
10008fa8:	18c1000c 	andi	r3,r3,1024
10008fac:	18001c26 	beq	r3,zero,10009020 <__sfvwrite_r+0x470>
10008fb0:	300b883a 	mov	r5,r6
10008fb4:	a809883a 	mov	r4,r21
10008fb8:	00094980 	call	10009498 <_malloc_r>
10008fbc:	102f883a 	mov	r23,r2
10008fc0:	10002926 	beq	r2,zero,10009068 <__sfvwrite_r+0x4b8>
10008fc4:	81400417 	ldw	r5,16(r16)
10008fc8:	b00d883a 	mov	r6,r22
10008fcc:	1009883a 	mov	r4,r2
10008fd0:	0009d880 	call	10009d88 <memcpy>
10008fd4:	8080030b 	ldhu	r2,12(r16)
10008fd8:	00fedfc4 	movi	r3,-1153
10008fdc:	10c4703a 	and	r2,r2,r3
10008fe0:	10802014 	ori	r2,r2,128
10008fe4:	8080030d 	sth	r2,12(r16)
10008fe8:	bd89883a 	add	r4,r23,r22
10008fec:	9d8fc83a 	sub	r7,r19,r22
10008ff0:	85c00415 	stw	r23,16(r16)
10008ff4:	84c00515 	stw	r19,20(r16)
10008ff8:	81000015 	stw	r4,0(r16)
10008ffc:	9027883a 	mov	r19,r18
10009000:	81c00215 	stw	r7,8(r16)
10009004:	902f883a 	mov	r23,r18
10009008:	003f3806 	br	10008cec <__alt_data_end+0xf8008cec>
1000900c:	800b883a 	mov	r5,r16
10009010:	a809883a 	mov	r4,r21
10009014:	00083400 	call	10008340 <_fflush_r>
10009018:	103fb926 	beq	r2,zero,10008f00 <__alt_data_end+0xf8008f00>
1000901c:	003f6506 	br	10008db4 <__alt_data_end+0xf8008db4>
10009020:	a809883a 	mov	r4,r21
10009024:	000b0e40 	call	1000b0e4 <_realloc_r>
10009028:	102f883a 	mov	r23,r2
1000902c:	103fee1e 	bne	r2,zero,10008fe8 <__alt_data_end+0xf8008fe8>
10009030:	81400417 	ldw	r5,16(r16)
10009034:	a809883a 	mov	r4,r21
10009038:	00088a00 	call	100088a0 <_free_r>
1000903c:	8080030b 	ldhu	r2,12(r16)
10009040:	00ffdfc4 	movi	r3,-129
10009044:	1884703a 	and	r2,r3,r2
10009048:	00c00304 	movi	r3,12
1000904c:	a8c00015 	stw	r3,0(r21)
10009050:	003f5906 	br	10008db8 <__alt_data_end+0xf8008db8>
10009054:	94c00044 	addi	r19,r18,1
10009058:	02000044 	movi	r8,1
1000905c:	003f6006 	br	10008de0 <__alt_data_end+0xf8008de0>
10009060:	00bfffc4 	movi	r2,-1
10009064:	003f0006 	br	10008c68 <__alt_data_end+0xf8008c68>
10009068:	00800304 	movi	r2,12
1000906c:	a8800015 	stw	r2,0(r21)
10009070:	8080030b 	ldhu	r2,12(r16)
10009074:	003f5006 	br	10008db8 <__alt_data_end+0xf8008db8>

10009078 <_fwalk>:
10009078:	defff704 	addi	sp,sp,-36
1000907c:	dd000415 	stw	r20,16(sp)
10009080:	dfc00815 	stw	ra,32(sp)
10009084:	ddc00715 	stw	r23,28(sp)
10009088:	dd800615 	stw	r22,24(sp)
1000908c:	dd400515 	stw	r21,20(sp)
10009090:	dcc00315 	stw	r19,12(sp)
10009094:	dc800215 	stw	r18,8(sp)
10009098:	dc400115 	stw	r17,4(sp)
1000909c:	dc000015 	stw	r16,0(sp)
100090a0:	2500b804 	addi	r20,r4,736
100090a4:	a0002326 	beq	r20,zero,10009134 <_fwalk+0xbc>
100090a8:	282b883a 	mov	r21,r5
100090ac:	002f883a 	mov	r23,zero
100090b0:	05800044 	movi	r22,1
100090b4:	04ffffc4 	movi	r19,-1
100090b8:	a4400117 	ldw	r17,4(r20)
100090bc:	a4800217 	ldw	r18,8(r20)
100090c0:	8c7fffc4 	addi	r17,r17,-1
100090c4:	88000d16 	blt	r17,zero,100090fc <_fwalk+0x84>
100090c8:	94000304 	addi	r16,r18,12
100090cc:	94800384 	addi	r18,r18,14
100090d0:	8080000b 	ldhu	r2,0(r16)
100090d4:	8c7fffc4 	addi	r17,r17,-1
100090d8:	813ffd04 	addi	r4,r16,-12
100090dc:	b080042e 	bgeu	r22,r2,100090f0 <_fwalk+0x78>
100090e0:	9080000f 	ldh	r2,0(r18)
100090e4:	14c00226 	beq	r2,r19,100090f0 <_fwalk+0x78>
100090e8:	a83ee83a 	callr	r21
100090ec:	b8aeb03a 	or	r23,r23,r2
100090f0:	84001a04 	addi	r16,r16,104
100090f4:	94801a04 	addi	r18,r18,104
100090f8:	8cfff51e 	bne	r17,r19,100090d0 <__alt_data_end+0xf80090d0>
100090fc:	a5000017 	ldw	r20,0(r20)
10009100:	a03fed1e 	bne	r20,zero,100090b8 <__alt_data_end+0xf80090b8>
10009104:	b805883a 	mov	r2,r23
10009108:	dfc00817 	ldw	ra,32(sp)
1000910c:	ddc00717 	ldw	r23,28(sp)
10009110:	dd800617 	ldw	r22,24(sp)
10009114:	dd400517 	ldw	r21,20(sp)
10009118:	dd000417 	ldw	r20,16(sp)
1000911c:	dcc00317 	ldw	r19,12(sp)
10009120:	dc800217 	ldw	r18,8(sp)
10009124:	dc400117 	ldw	r17,4(sp)
10009128:	dc000017 	ldw	r16,0(sp)
1000912c:	dec00904 	addi	sp,sp,36
10009130:	f800283a 	ret
10009134:	002f883a 	mov	r23,zero
10009138:	003ff206 	br	10009104 <__alt_data_end+0xf8009104>

1000913c <_fwalk_reent>:
1000913c:	defff704 	addi	sp,sp,-36
10009140:	dd000415 	stw	r20,16(sp)
10009144:	dfc00815 	stw	ra,32(sp)
10009148:	ddc00715 	stw	r23,28(sp)
1000914c:	dd800615 	stw	r22,24(sp)
10009150:	dd400515 	stw	r21,20(sp)
10009154:	dcc00315 	stw	r19,12(sp)
10009158:	dc800215 	stw	r18,8(sp)
1000915c:	dc400115 	stw	r17,4(sp)
10009160:	dc000015 	stw	r16,0(sp)
10009164:	2500b804 	addi	r20,r4,736
10009168:	a0002326 	beq	r20,zero,100091f8 <_fwalk_reent+0xbc>
1000916c:	282b883a 	mov	r21,r5
10009170:	2027883a 	mov	r19,r4
10009174:	002f883a 	mov	r23,zero
10009178:	05800044 	movi	r22,1
1000917c:	04bfffc4 	movi	r18,-1
10009180:	a4400117 	ldw	r17,4(r20)
10009184:	a4000217 	ldw	r16,8(r20)
10009188:	8c7fffc4 	addi	r17,r17,-1
1000918c:	88000c16 	blt	r17,zero,100091c0 <_fwalk_reent+0x84>
10009190:	84000304 	addi	r16,r16,12
10009194:	8080000b 	ldhu	r2,0(r16)
10009198:	8c7fffc4 	addi	r17,r17,-1
1000919c:	817ffd04 	addi	r5,r16,-12
100091a0:	b080052e 	bgeu	r22,r2,100091b8 <_fwalk_reent+0x7c>
100091a4:	8080008f 	ldh	r2,2(r16)
100091a8:	9809883a 	mov	r4,r19
100091ac:	14800226 	beq	r2,r18,100091b8 <_fwalk_reent+0x7c>
100091b0:	a83ee83a 	callr	r21
100091b4:	b8aeb03a 	or	r23,r23,r2
100091b8:	84001a04 	addi	r16,r16,104
100091bc:	8cbff51e 	bne	r17,r18,10009194 <__alt_data_end+0xf8009194>
100091c0:	a5000017 	ldw	r20,0(r20)
100091c4:	a03fee1e 	bne	r20,zero,10009180 <__alt_data_end+0xf8009180>
100091c8:	b805883a 	mov	r2,r23
100091cc:	dfc00817 	ldw	ra,32(sp)
100091d0:	ddc00717 	ldw	r23,28(sp)
100091d4:	dd800617 	ldw	r22,24(sp)
100091d8:	dd400517 	ldw	r21,20(sp)
100091dc:	dd000417 	ldw	r20,16(sp)
100091e0:	dcc00317 	ldw	r19,12(sp)
100091e4:	dc800217 	ldw	r18,8(sp)
100091e8:	dc400117 	ldw	r17,4(sp)
100091ec:	dc000017 	ldw	r16,0(sp)
100091f0:	dec00904 	addi	sp,sp,36
100091f4:	f800283a 	ret
100091f8:	002f883a 	mov	r23,zero
100091fc:	003ff206 	br	100091c8 <__alt_data_end+0xf80091c8>

10009200 <_setlocale_r>:
10009200:	30001b26 	beq	r6,zero,10009270 <_setlocale_r+0x70>
10009204:	01440074 	movhi	r5,4097
10009208:	defffe04 	addi	sp,sp,-8
1000920c:	294f7b04 	addi	r5,r5,15852
10009210:	3009883a 	mov	r4,r6
10009214:	dc000015 	stw	r16,0(sp)
10009218:	dfc00115 	stw	ra,4(sp)
1000921c:	3021883a 	mov	r16,r6
10009220:	000b84c0 	call	1000b84c <strcmp>
10009224:	1000061e 	bne	r2,zero,10009240 <_setlocale_r+0x40>
10009228:	00840074 	movhi	r2,4097
1000922c:	108f7a04 	addi	r2,r2,15848
10009230:	dfc00117 	ldw	ra,4(sp)
10009234:	dc000017 	ldw	r16,0(sp)
10009238:	dec00204 	addi	sp,sp,8
1000923c:	f800283a 	ret
10009240:	01440074 	movhi	r5,4097
10009244:	294f7a04 	addi	r5,r5,15848
10009248:	8009883a 	mov	r4,r16
1000924c:	000b84c0 	call	1000b84c <strcmp>
10009250:	103ff526 	beq	r2,zero,10009228 <__alt_data_end+0xf8009228>
10009254:	01440074 	movhi	r5,4097
10009258:	294f6504 	addi	r5,r5,15764
1000925c:	8009883a 	mov	r4,r16
10009260:	000b84c0 	call	1000b84c <strcmp>
10009264:	103ff026 	beq	r2,zero,10009228 <__alt_data_end+0xf8009228>
10009268:	0005883a 	mov	r2,zero
1000926c:	003ff006 	br	10009230 <__alt_data_end+0xf8009230>
10009270:	00840074 	movhi	r2,4097
10009274:	108f7a04 	addi	r2,r2,15848
10009278:	f800283a 	ret

1000927c <__locale_charset>:
1000927c:	00840074 	movhi	r2,4097
10009280:	10912d04 	addi	r2,r2,17588
10009284:	f800283a 	ret

10009288 <__locale_mb_cur_max>:
10009288:	00840074 	movhi	r2,4097
1000928c:	1096c904 	addi	r2,r2,23332
10009290:	10800017 	ldw	r2,0(r2)
10009294:	f800283a 	ret

10009298 <__locale_msgcharset>:
10009298:	00840074 	movhi	r2,4097
1000929c:	10912504 	addi	r2,r2,17556
100092a0:	f800283a 	ret

100092a4 <__locale_cjk_lang>:
100092a4:	0005883a 	mov	r2,zero
100092a8:	f800283a 	ret

100092ac <_localeconv_r>:
100092ac:	00840074 	movhi	r2,4097
100092b0:	10913504 	addi	r2,r2,17620
100092b4:	f800283a 	ret

100092b8 <setlocale>:
100092b8:	00840074 	movhi	r2,4097
100092bc:	1096c804 	addi	r2,r2,23328
100092c0:	280d883a 	mov	r6,r5
100092c4:	200b883a 	mov	r5,r4
100092c8:	11000017 	ldw	r4,0(r2)
100092cc:	00092001 	jmpi	10009200 <_setlocale_r>

100092d0 <localeconv>:
100092d0:	00840074 	movhi	r2,4097
100092d4:	10913504 	addi	r2,r2,17620
100092d8:	f800283a 	ret

100092dc <__smakebuf_r>:
100092dc:	2880030b 	ldhu	r2,12(r5)
100092e0:	10c0008c 	andi	r3,r2,2
100092e4:	1800411e 	bne	r3,zero,100093ec <__smakebuf_r+0x110>
100092e8:	deffec04 	addi	sp,sp,-80
100092ec:	dc000f15 	stw	r16,60(sp)
100092f0:	2821883a 	mov	r16,r5
100092f4:	2940038f 	ldh	r5,14(r5)
100092f8:	dc401015 	stw	r17,64(sp)
100092fc:	dfc01315 	stw	ra,76(sp)
10009300:	dcc01215 	stw	r19,72(sp)
10009304:	dc801115 	stw	r18,68(sp)
10009308:	2023883a 	mov	r17,r4
1000930c:	28001c16 	blt	r5,zero,10009380 <__smakebuf_r+0xa4>
10009310:	d80d883a 	mov	r6,sp
10009314:	000d4bc0 	call	1000d4bc <_fstat_r>
10009318:	10001816 	blt	r2,zero,1000937c <__smakebuf_r+0xa0>
1000931c:	d8800117 	ldw	r2,4(sp)
10009320:	00e00014 	movui	r3,32768
10009324:	10bc000c 	andi	r2,r2,61440
10009328:	14c80020 	cmpeqi	r19,r2,8192
1000932c:	10c03726 	beq	r2,r3,1000940c <__smakebuf_r+0x130>
10009330:	80c0030b 	ldhu	r3,12(r16)
10009334:	18c20014 	ori	r3,r3,2048
10009338:	80c0030d 	sth	r3,12(r16)
1000933c:	00c80004 	movi	r3,8192
10009340:	10c0521e 	bne	r2,r3,1000948c <__smakebuf_r+0x1b0>
10009344:	8140038f 	ldh	r5,14(r16)
10009348:	8809883a 	mov	r4,r17
1000934c:	000d5180 	call	1000d518 <_isatty_r>
10009350:	10004c26 	beq	r2,zero,10009484 <__smakebuf_r+0x1a8>
10009354:	8080030b 	ldhu	r2,12(r16)
10009358:	80c010c4 	addi	r3,r16,67
1000935c:	80c00015 	stw	r3,0(r16)
10009360:	10800054 	ori	r2,r2,1
10009364:	8080030d 	sth	r2,12(r16)
10009368:	00800044 	movi	r2,1
1000936c:	80c00415 	stw	r3,16(r16)
10009370:	80800515 	stw	r2,20(r16)
10009374:	04810004 	movi	r18,1024
10009378:	00000706 	br	10009398 <__smakebuf_r+0xbc>
1000937c:	8080030b 	ldhu	r2,12(r16)
10009380:	10c0200c 	andi	r3,r2,128
10009384:	18001f1e 	bne	r3,zero,10009404 <__smakebuf_r+0x128>
10009388:	04810004 	movi	r18,1024
1000938c:	10820014 	ori	r2,r2,2048
10009390:	8080030d 	sth	r2,12(r16)
10009394:	0027883a 	mov	r19,zero
10009398:	900b883a 	mov	r5,r18
1000939c:	8809883a 	mov	r4,r17
100093a0:	00094980 	call	10009498 <_malloc_r>
100093a4:	10002c26 	beq	r2,zero,10009458 <__smakebuf_r+0x17c>
100093a8:	80c0030b 	ldhu	r3,12(r16)
100093ac:	01040074 	movhi	r4,4097
100093b0:	2120f504 	addi	r4,r4,-31788
100093b4:	89000f15 	stw	r4,60(r17)
100093b8:	18c02014 	ori	r3,r3,128
100093bc:	80c0030d 	sth	r3,12(r16)
100093c0:	80800015 	stw	r2,0(r16)
100093c4:	80800415 	stw	r2,16(r16)
100093c8:	84800515 	stw	r18,20(r16)
100093cc:	98001a1e 	bne	r19,zero,10009438 <__smakebuf_r+0x15c>
100093d0:	dfc01317 	ldw	ra,76(sp)
100093d4:	dcc01217 	ldw	r19,72(sp)
100093d8:	dc801117 	ldw	r18,68(sp)
100093dc:	dc401017 	ldw	r17,64(sp)
100093e0:	dc000f17 	ldw	r16,60(sp)
100093e4:	dec01404 	addi	sp,sp,80
100093e8:	f800283a 	ret
100093ec:	288010c4 	addi	r2,r5,67
100093f0:	28800015 	stw	r2,0(r5)
100093f4:	28800415 	stw	r2,16(r5)
100093f8:	00800044 	movi	r2,1
100093fc:	28800515 	stw	r2,20(r5)
10009400:	f800283a 	ret
10009404:	04801004 	movi	r18,64
10009408:	003fe006 	br	1000938c <__alt_data_end+0xf800938c>
1000940c:	81000a17 	ldw	r4,40(r16)
10009410:	00c40074 	movhi	r3,4097
10009414:	18edfa04 	addi	r3,r3,-18456
10009418:	20ffc51e 	bne	r4,r3,10009330 <__alt_data_end+0xf8009330>
1000941c:	8080030b 	ldhu	r2,12(r16)
10009420:	04810004 	movi	r18,1024
10009424:	84801315 	stw	r18,76(r16)
10009428:	1484b03a 	or	r2,r2,r18
1000942c:	8080030d 	sth	r2,12(r16)
10009430:	0027883a 	mov	r19,zero
10009434:	003fd806 	br	10009398 <__alt_data_end+0xf8009398>
10009438:	8140038f 	ldh	r5,14(r16)
1000943c:	8809883a 	mov	r4,r17
10009440:	000d5180 	call	1000d518 <_isatty_r>
10009444:	103fe226 	beq	r2,zero,100093d0 <__alt_data_end+0xf80093d0>
10009448:	8080030b 	ldhu	r2,12(r16)
1000944c:	10800054 	ori	r2,r2,1
10009450:	8080030d 	sth	r2,12(r16)
10009454:	003fde06 	br	100093d0 <__alt_data_end+0xf80093d0>
10009458:	8080030b 	ldhu	r2,12(r16)
1000945c:	10c0800c 	andi	r3,r2,512
10009460:	183fdb1e 	bne	r3,zero,100093d0 <__alt_data_end+0xf80093d0>
10009464:	10800094 	ori	r2,r2,2
10009468:	80c010c4 	addi	r3,r16,67
1000946c:	8080030d 	sth	r2,12(r16)
10009470:	00800044 	movi	r2,1
10009474:	80c00015 	stw	r3,0(r16)
10009478:	80c00415 	stw	r3,16(r16)
1000947c:	80800515 	stw	r2,20(r16)
10009480:	003fd306 	br	100093d0 <__alt_data_end+0xf80093d0>
10009484:	04810004 	movi	r18,1024
10009488:	003fc306 	br	10009398 <__alt_data_end+0xf8009398>
1000948c:	0027883a 	mov	r19,zero
10009490:	04810004 	movi	r18,1024
10009494:	003fc006 	br	10009398 <__alt_data_end+0xf8009398>

10009498 <_malloc_r>:
10009498:	defff504 	addi	sp,sp,-44
1000949c:	dc800315 	stw	r18,12(sp)
100094a0:	dfc00a15 	stw	ra,40(sp)
100094a4:	df000915 	stw	fp,36(sp)
100094a8:	ddc00815 	stw	r23,32(sp)
100094ac:	dd800715 	stw	r22,28(sp)
100094b0:	dd400615 	stw	r21,24(sp)
100094b4:	dd000515 	stw	r20,20(sp)
100094b8:	dcc00415 	stw	r19,16(sp)
100094bc:	dc400215 	stw	r17,8(sp)
100094c0:	dc000115 	stw	r16,4(sp)
100094c4:	288002c4 	addi	r2,r5,11
100094c8:	00c00584 	movi	r3,22
100094cc:	2025883a 	mov	r18,r4
100094d0:	18807f2e 	bgeu	r3,r2,100096d0 <_malloc_r+0x238>
100094d4:	047ffe04 	movi	r17,-8
100094d8:	1462703a 	and	r17,r2,r17
100094dc:	8800a316 	blt	r17,zero,1000976c <_malloc_r+0x2d4>
100094e0:	8940a236 	bltu	r17,r5,1000976c <_malloc_r+0x2d4>
100094e4:	00113940 	call	10011394 <__malloc_lock>
100094e8:	00807dc4 	movi	r2,503
100094ec:	1441e92e 	bgeu	r2,r17,10009c94 <_malloc_r+0x7fc>
100094f0:	8804d27a 	srli	r2,r17,9
100094f4:	1000a126 	beq	r2,zero,1000977c <_malloc_r+0x2e4>
100094f8:	00c00104 	movi	r3,4
100094fc:	18811e36 	bltu	r3,r2,10009978 <_malloc_r+0x4e0>
10009500:	8804d1ba 	srli	r2,r17,6
10009504:	12000e44 	addi	r8,r2,57
10009508:	11c00e04 	addi	r7,r2,56
1000950c:	4209883a 	add	r4,r8,r8
10009510:	04c40074 	movhi	r19,4097
10009514:	2109883a 	add	r4,r4,r4
10009518:	9cd14304 	addi	r19,r19,17676
1000951c:	2109883a 	add	r4,r4,r4
10009520:	9909883a 	add	r4,r19,r4
10009524:	24000117 	ldw	r16,4(r4)
10009528:	213ffe04 	addi	r4,r4,-8
1000952c:	24009726 	beq	r4,r16,1000978c <_malloc_r+0x2f4>
10009530:	80800117 	ldw	r2,4(r16)
10009534:	01bfff04 	movi	r6,-4
10009538:	014003c4 	movi	r5,15
1000953c:	1184703a 	and	r2,r2,r6
10009540:	1447c83a 	sub	r3,r2,r17
10009544:	28c00716 	blt	r5,r3,10009564 <_malloc_r+0xcc>
10009548:	1800920e 	bge	r3,zero,10009794 <_malloc_r+0x2fc>
1000954c:	84000317 	ldw	r16,12(r16)
10009550:	24008e26 	beq	r4,r16,1000978c <_malloc_r+0x2f4>
10009554:	80800117 	ldw	r2,4(r16)
10009558:	1184703a 	and	r2,r2,r6
1000955c:	1447c83a 	sub	r3,r2,r17
10009560:	28fff90e 	bge	r5,r3,10009548 <__alt_data_end+0xf8009548>
10009564:	3809883a 	mov	r4,r7
10009568:	01840074 	movhi	r6,4097
1000956c:	9c000417 	ldw	r16,16(r19)
10009570:	31914304 	addi	r6,r6,17676
10009574:	32000204 	addi	r8,r6,8
10009578:	82013426 	beq	r16,r8,10009a4c <_malloc_r+0x5b4>
1000957c:	80c00117 	ldw	r3,4(r16)
10009580:	00bfff04 	movi	r2,-4
10009584:	188e703a 	and	r7,r3,r2
10009588:	3c45c83a 	sub	r2,r7,r17
1000958c:	00c003c4 	movi	r3,15
10009590:	18811f16 	blt	r3,r2,10009a10 <_malloc_r+0x578>
10009594:	32000515 	stw	r8,20(r6)
10009598:	32000415 	stw	r8,16(r6)
1000959c:	10007f0e 	bge	r2,zero,1000979c <_malloc_r+0x304>
100095a0:	00807fc4 	movi	r2,511
100095a4:	11c0fd36 	bltu	r2,r7,1000999c <_malloc_r+0x504>
100095a8:	3806d0fa 	srli	r3,r7,3
100095ac:	01c00044 	movi	r7,1
100095b0:	30800117 	ldw	r2,4(r6)
100095b4:	19400044 	addi	r5,r3,1
100095b8:	294b883a 	add	r5,r5,r5
100095bc:	1807d0ba 	srai	r3,r3,2
100095c0:	294b883a 	add	r5,r5,r5
100095c4:	294b883a 	add	r5,r5,r5
100095c8:	298b883a 	add	r5,r5,r6
100095cc:	38c6983a 	sll	r3,r7,r3
100095d0:	29c00017 	ldw	r7,0(r5)
100095d4:	2a7ffe04 	addi	r9,r5,-8
100095d8:	1886b03a 	or	r3,r3,r2
100095dc:	82400315 	stw	r9,12(r16)
100095e0:	81c00215 	stw	r7,8(r16)
100095e4:	30c00115 	stw	r3,4(r6)
100095e8:	2c000015 	stw	r16,0(r5)
100095ec:	3c000315 	stw	r16,12(r7)
100095f0:	2005d0ba 	srai	r2,r4,2
100095f4:	01400044 	movi	r5,1
100095f8:	288a983a 	sll	r5,r5,r2
100095fc:	19406f36 	bltu	r3,r5,100097bc <_malloc_r+0x324>
10009600:	28c4703a 	and	r2,r5,r3
10009604:	10000a1e 	bne	r2,zero,10009630 <_malloc_r+0x198>
10009608:	00bfff04 	movi	r2,-4
1000960c:	294b883a 	add	r5,r5,r5
10009610:	2088703a 	and	r4,r4,r2
10009614:	28c4703a 	and	r2,r5,r3
10009618:	21000104 	addi	r4,r4,4
1000961c:	1000041e 	bne	r2,zero,10009630 <_malloc_r+0x198>
10009620:	294b883a 	add	r5,r5,r5
10009624:	28c4703a 	and	r2,r5,r3
10009628:	21000104 	addi	r4,r4,4
1000962c:	103ffc26 	beq	r2,zero,10009620 <__alt_data_end+0xf8009620>
10009630:	02bfff04 	movi	r10,-4
10009634:	024003c4 	movi	r9,15
10009638:	21800044 	addi	r6,r4,1
1000963c:	318d883a 	add	r6,r6,r6
10009640:	318d883a 	add	r6,r6,r6
10009644:	318d883a 	add	r6,r6,r6
10009648:	998d883a 	add	r6,r19,r6
1000964c:	333ffe04 	addi	r12,r6,-8
10009650:	2017883a 	mov	r11,r4
10009654:	31800104 	addi	r6,r6,4
10009658:	34000017 	ldw	r16,0(r6)
1000965c:	31fffd04 	addi	r7,r6,-12
10009660:	81c0041e 	bne	r16,r7,10009674 <_malloc_r+0x1dc>
10009664:	0000fb06 	br	10009a54 <_malloc_r+0x5bc>
10009668:	1801030e 	bge	r3,zero,10009a78 <_malloc_r+0x5e0>
1000966c:	84000317 	ldw	r16,12(r16)
10009670:	81c0f826 	beq	r16,r7,10009a54 <_malloc_r+0x5bc>
10009674:	80800117 	ldw	r2,4(r16)
10009678:	1284703a 	and	r2,r2,r10
1000967c:	1447c83a 	sub	r3,r2,r17
10009680:	48fff90e 	bge	r9,r3,10009668 <__alt_data_end+0xf8009668>
10009684:	80800317 	ldw	r2,12(r16)
10009688:	81000217 	ldw	r4,8(r16)
1000968c:	89400054 	ori	r5,r17,1
10009690:	81400115 	stw	r5,4(r16)
10009694:	20800315 	stw	r2,12(r4)
10009698:	11000215 	stw	r4,8(r2)
1000969c:	8463883a 	add	r17,r16,r17
100096a0:	9c400515 	stw	r17,20(r19)
100096a4:	9c400415 	stw	r17,16(r19)
100096a8:	18800054 	ori	r2,r3,1
100096ac:	88800115 	stw	r2,4(r17)
100096b0:	8a000315 	stw	r8,12(r17)
100096b4:	8a000215 	stw	r8,8(r17)
100096b8:	88e3883a 	add	r17,r17,r3
100096bc:	88c00015 	stw	r3,0(r17)
100096c0:	9009883a 	mov	r4,r18
100096c4:	00113b80 	call	100113b8 <__malloc_unlock>
100096c8:	80800204 	addi	r2,r16,8
100096cc:	00001b06 	br	1000973c <_malloc_r+0x2a4>
100096d0:	04400404 	movi	r17,16
100096d4:	89402536 	bltu	r17,r5,1000976c <_malloc_r+0x2d4>
100096d8:	00113940 	call	10011394 <__malloc_lock>
100096dc:	00800184 	movi	r2,6
100096e0:	01000084 	movi	r4,2
100096e4:	04c40074 	movhi	r19,4097
100096e8:	1085883a 	add	r2,r2,r2
100096ec:	9cd14304 	addi	r19,r19,17676
100096f0:	1085883a 	add	r2,r2,r2
100096f4:	9885883a 	add	r2,r19,r2
100096f8:	14000117 	ldw	r16,4(r2)
100096fc:	10fffe04 	addi	r3,r2,-8
10009700:	80c0d926 	beq	r16,r3,10009a68 <_malloc_r+0x5d0>
10009704:	80c00117 	ldw	r3,4(r16)
10009708:	81000317 	ldw	r4,12(r16)
1000970c:	00bfff04 	movi	r2,-4
10009710:	1884703a 	and	r2,r3,r2
10009714:	81400217 	ldw	r5,8(r16)
10009718:	8085883a 	add	r2,r16,r2
1000971c:	10c00117 	ldw	r3,4(r2)
10009720:	29000315 	stw	r4,12(r5)
10009724:	21400215 	stw	r5,8(r4)
10009728:	18c00054 	ori	r3,r3,1
1000972c:	10c00115 	stw	r3,4(r2)
10009730:	9009883a 	mov	r4,r18
10009734:	00113b80 	call	100113b8 <__malloc_unlock>
10009738:	80800204 	addi	r2,r16,8
1000973c:	dfc00a17 	ldw	ra,40(sp)
10009740:	df000917 	ldw	fp,36(sp)
10009744:	ddc00817 	ldw	r23,32(sp)
10009748:	dd800717 	ldw	r22,28(sp)
1000974c:	dd400617 	ldw	r21,24(sp)
10009750:	dd000517 	ldw	r20,20(sp)
10009754:	dcc00417 	ldw	r19,16(sp)
10009758:	dc800317 	ldw	r18,12(sp)
1000975c:	dc400217 	ldw	r17,8(sp)
10009760:	dc000117 	ldw	r16,4(sp)
10009764:	dec00b04 	addi	sp,sp,44
10009768:	f800283a 	ret
1000976c:	00800304 	movi	r2,12
10009770:	90800015 	stw	r2,0(r18)
10009774:	0005883a 	mov	r2,zero
10009778:	003ff006 	br	1000973c <__alt_data_end+0xf800973c>
1000977c:	01002004 	movi	r4,128
10009780:	02001004 	movi	r8,64
10009784:	01c00fc4 	movi	r7,63
10009788:	003f6106 	br	10009510 <__alt_data_end+0xf8009510>
1000978c:	4009883a 	mov	r4,r8
10009790:	003f7506 	br	10009568 <__alt_data_end+0xf8009568>
10009794:	81000317 	ldw	r4,12(r16)
10009798:	003fde06 	br	10009714 <__alt_data_end+0xf8009714>
1000979c:	81c5883a 	add	r2,r16,r7
100097a0:	11400117 	ldw	r5,4(r2)
100097a4:	9009883a 	mov	r4,r18
100097a8:	29400054 	ori	r5,r5,1
100097ac:	11400115 	stw	r5,4(r2)
100097b0:	00113b80 	call	100113b8 <__malloc_unlock>
100097b4:	80800204 	addi	r2,r16,8
100097b8:	003fe006 	br	1000973c <__alt_data_end+0xf800973c>
100097bc:	9c000217 	ldw	r16,8(r19)
100097c0:	00bfff04 	movi	r2,-4
100097c4:	85800117 	ldw	r22,4(r16)
100097c8:	b0ac703a 	and	r22,r22,r2
100097cc:	b4400336 	bltu	r22,r17,100097dc <_malloc_r+0x344>
100097d0:	b445c83a 	sub	r2,r22,r17
100097d4:	00c003c4 	movi	r3,15
100097d8:	18805d16 	blt	r3,r2,10009950 <_malloc_r+0x4b8>
100097dc:	05c40074 	movhi	r23,4097
100097e0:	00840074 	movhi	r2,4097
100097e4:	109d9a04 	addi	r2,r2,30312
100097e8:	bdd6ca04 	addi	r23,r23,23336
100097ec:	15400017 	ldw	r21,0(r2)
100097f0:	b8c00017 	ldw	r3,0(r23)
100097f4:	00bfffc4 	movi	r2,-1
100097f8:	858d883a 	add	r6,r16,r22
100097fc:	8d6b883a 	add	r21,r17,r21
10009800:	1880ea26 	beq	r3,r2,10009bac <_malloc_r+0x714>
10009804:	ad4403c4 	addi	r21,r21,4111
10009808:	00bc0004 	movi	r2,-4096
1000980c:	a8aa703a 	and	r21,r21,r2
10009810:	a80b883a 	mov	r5,r21
10009814:	9009883a 	mov	r4,r18
10009818:	d9800015 	stw	r6,0(sp)
1000981c:	000b6bc0 	call	1000b6bc <_sbrk_r>
10009820:	1029883a 	mov	r20,r2
10009824:	00bfffc4 	movi	r2,-1
10009828:	d9800017 	ldw	r6,0(sp)
1000982c:	a080e826 	beq	r20,r2,10009bd0 <_malloc_r+0x738>
10009830:	a180a636 	bltu	r20,r6,10009acc <_malloc_r+0x634>
10009834:	07040074 	movhi	fp,4097
10009838:	e71e7704 	addi	fp,fp,31196
1000983c:	e0800017 	ldw	r2,0(fp)
10009840:	a887883a 	add	r3,r21,r2
10009844:	e0c00015 	stw	r3,0(fp)
10009848:	3500e626 	beq	r6,r20,10009be4 <_malloc_r+0x74c>
1000984c:	b9000017 	ldw	r4,0(r23)
10009850:	00bfffc4 	movi	r2,-1
10009854:	2080ee26 	beq	r4,r2,10009c10 <_malloc_r+0x778>
10009858:	a185c83a 	sub	r2,r20,r6
1000985c:	10c5883a 	add	r2,r2,r3
10009860:	e0800015 	stw	r2,0(fp)
10009864:	a0c001cc 	andi	r3,r20,7
10009868:	1800bc26 	beq	r3,zero,10009b5c <_malloc_r+0x6c4>
1000986c:	a0e9c83a 	sub	r20,r20,r3
10009870:	00840204 	movi	r2,4104
10009874:	a5000204 	addi	r20,r20,8
10009878:	10c7c83a 	sub	r3,r2,r3
1000987c:	a545883a 	add	r2,r20,r21
10009880:	1083ffcc 	andi	r2,r2,4095
10009884:	18abc83a 	sub	r21,r3,r2
10009888:	a80b883a 	mov	r5,r21
1000988c:	9009883a 	mov	r4,r18
10009890:	000b6bc0 	call	1000b6bc <_sbrk_r>
10009894:	00ffffc4 	movi	r3,-1
10009898:	10c0e126 	beq	r2,r3,10009c20 <_malloc_r+0x788>
1000989c:	1505c83a 	sub	r2,r2,r20
100098a0:	1545883a 	add	r2,r2,r21
100098a4:	10800054 	ori	r2,r2,1
100098a8:	e0c00017 	ldw	r3,0(fp)
100098ac:	9d000215 	stw	r20,8(r19)
100098b0:	a0800115 	stw	r2,4(r20)
100098b4:	a8c7883a 	add	r3,r21,r3
100098b8:	e0c00015 	stw	r3,0(fp)
100098bc:	84c00e26 	beq	r16,r19,100098f8 <_malloc_r+0x460>
100098c0:	018003c4 	movi	r6,15
100098c4:	3580a72e 	bgeu	r6,r22,10009b64 <_malloc_r+0x6cc>
100098c8:	81400117 	ldw	r5,4(r16)
100098cc:	013ffe04 	movi	r4,-8
100098d0:	b0bffd04 	addi	r2,r22,-12
100098d4:	1104703a 	and	r2,r2,r4
100098d8:	2900004c 	andi	r4,r5,1
100098dc:	2088b03a 	or	r4,r4,r2
100098e0:	81000115 	stw	r4,4(r16)
100098e4:	01400144 	movi	r5,5
100098e8:	8089883a 	add	r4,r16,r2
100098ec:	21400115 	stw	r5,4(r4)
100098f0:	21400215 	stw	r5,8(r4)
100098f4:	3080cd36 	bltu	r6,r2,10009c2c <_malloc_r+0x794>
100098f8:	00840074 	movhi	r2,4097
100098fc:	109d9904 	addi	r2,r2,30308
10009900:	11000017 	ldw	r4,0(r2)
10009904:	20c0012e 	bgeu	r4,r3,1000990c <_malloc_r+0x474>
10009908:	10c00015 	stw	r3,0(r2)
1000990c:	00840074 	movhi	r2,4097
10009910:	109d9804 	addi	r2,r2,30304
10009914:	11000017 	ldw	r4,0(r2)
10009918:	9c000217 	ldw	r16,8(r19)
1000991c:	20c0012e 	bgeu	r4,r3,10009924 <_malloc_r+0x48c>
10009920:	10c00015 	stw	r3,0(r2)
10009924:	80c00117 	ldw	r3,4(r16)
10009928:	00bfff04 	movi	r2,-4
1000992c:	1886703a 	and	r3,r3,r2
10009930:	1c45c83a 	sub	r2,r3,r17
10009934:	1c400236 	bltu	r3,r17,10009940 <_malloc_r+0x4a8>
10009938:	00c003c4 	movi	r3,15
1000993c:	18800416 	blt	r3,r2,10009950 <_malloc_r+0x4b8>
10009940:	9009883a 	mov	r4,r18
10009944:	00113b80 	call	100113b8 <__malloc_unlock>
10009948:	0005883a 	mov	r2,zero
1000994c:	003f7b06 	br	1000973c <__alt_data_end+0xf800973c>
10009950:	88c00054 	ori	r3,r17,1
10009954:	80c00115 	stw	r3,4(r16)
10009958:	8463883a 	add	r17,r16,r17
1000995c:	10800054 	ori	r2,r2,1
10009960:	9c400215 	stw	r17,8(r19)
10009964:	88800115 	stw	r2,4(r17)
10009968:	9009883a 	mov	r4,r18
1000996c:	00113b80 	call	100113b8 <__malloc_unlock>
10009970:	80800204 	addi	r2,r16,8
10009974:	003f7106 	br	1000973c <__alt_data_end+0xf800973c>
10009978:	00c00504 	movi	r3,20
1000997c:	18804a2e 	bgeu	r3,r2,10009aa8 <_malloc_r+0x610>
10009980:	00c01504 	movi	r3,84
10009984:	18806e36 	bltu	r3,r2,10009b40 <_malloc_r+0x6a8>
10009988:	8804d33a 	srli	r2,r17,12
1000998c:	12001bc4 	addi	r8,r2,111
10009990:	11c01b84 	addi	r7,r2,110
10009994:	4209883a 	add	r4,r8,r8
10009998:	003edd06 	br	10009510 <__alt_data_end+0xf8009510>
1000999c:	3804d27a 	srli	r2,r7,9
100099a0:	00c00104 	movi	r3,4
100099a4:	1880442e 	bgeu	r3,r2,10009ab8 <_malloc_r+0x620>
100099a8:	00c00504 	movi	r3,20
100099ac:	18808136 	bltu	r3,r2,10009bb4 <_malloc_r+0x71c>
100099b0:	11401704 	addi	r5,r2,92
100099b4:	10c016c4 	addi	r3,r2,91
100099b8:	294b883a 	add	r5,r5,r5
100099bc:	294b883a 	add	r5,r5,r5
100099c0:	294b883a 	add	r5,r5,r5
100099c4:	994b883a 	add	r5,r19,r5
100099c8:	28800017 	ldw	r2,0(r5)
100099cc:	01840074 	movhi	r6,4097
100099d0:	297ffe04 	addi	r5,r5,-8
100099d4:	31914304 	addi	r6,r6,17676
100099d8:	28806526 	beq	r5,r2,10009b70 <_malloc_r+0x6d8>
100099dc:	01bfff04 	movi	r6,-4
100099e0:	10c00117 	ldw	r3,4(r2)
100099e4:	1986703a 	and	r3,r3,r6
100099e8:	38c0022e 	bgeu	r7,r3,100099f4 <_malloc_r+0x55c>
100099ec:	10800217 	ldw	r2,8(r2)
100099f0:	28bffb1e 	bne	r5,r2,100099e0 <__alt_data_end+0xf80099e0>
100099f4:	11400317 	ldw	r5,12(r2)
100099f8:	98c00117 	ldw	r3,4(r19)
100099fc:	81400315 	stw	r5,12(r16)
10009a00:	80800215 	stw	r2,8(r16)
10009a04:	2c000215 	stw	r16,8(r5)
10009a08:	14000315 	stw	r16,12(r2)
10009a0c:	003ef806 	br	100095f0 <__alt_data_end+0xf80095f0>
10009a10:	88c00054 	ori	r3,r17,1
10009a14:	80c00115 	stw	r3,4(r16)
10009a18:	8463883a 	add	r17,r16,r17
10009a1c:	34400515 	stw	r17,20(r6)
10009a20:	34400415 	stw	r17,16(r6)
10009a24:	10c00054 	ori	r3,r2,1
10009a28:	8a000315 	stw	r8,12(r17)
10009a2c:	8a000215 	stw	r8,8(r17)
10009a30:	88c00115 	stw	r3,4(r17)
10009a34:	88a3883a 	add	r17,r17,r2
10009a38:	88800015 	stw	r2,0(r17)
10009a3c:	9009883a 	mov	r4,r18
10009a40:	00113b80 	call	100113b8 <__malloc_unlock>
10009a44:	80800204 	addi	r2,r16,8
10009a48:	003f3c06 	br	1000973c <__alt_data_end+0xf800973c>
10009a4c:	30c00117 	ldw	r3,4(r6)
10009a50:	003ee706 	br	100095f0 <__alt_data_end+0xf80095f0>
10009a54:	5ac00044 	addi	r11,r11,1
10009a58:	588000cc 	andi	r2,r11,3
10009a5c:	31800204 	addi	r6,r6,8
10009a60:	103efd1e 	bne	r2,zero,10009658 <__alt_data_end+0xf8009658>
10009a64:	00002406 	br	10009af8 <_malloc_r+0x660>
10009a68:	14000317 	ldw	r16,12(r2)
10009a6c:	143f251e 	bne	r2,r16,10009704 <__alt_data_end+0xf8009704>
10009a70:	21000084 	addi	r4,r4,2
10009a74:	003ebc06 	br	10009568 <__alt_data_end+0xf8009568>
10009a78:	8085883a 	add	r2,r16,r2
10009a7c:	10c00117 	ldw	r3,4(r2)
10009a80:	81000317 	ldw	r4,12(r16)
10009a84:	81400217 	ldw	r5,8(r16)
10009a88:	18c00054 	ori	r3,r3,1
10009a8c:	10c00115 	stw	r3,4(r2)
10009a90:	29000315 	stw	r4,12(r5)
10009a94:	21400215 	stw	r5,8(r4)
10009a98:	9009883a 	mov	r4,r18
10009a9c:	00113b80 	call	100113b8 <__malloc_unlock>
10009aa0:	80800204 	addi	r2,r16,8
10009aa4:	003f2506 	br	1000973c <__alt_data_end+0xf800973c>
10009aa8:	12001704 	addi	r8,r2,92
10009aac:	11c016c4 	addi	r7,r2,91
10009ab0:	4209883a 	add	r4,r8,r8
10009ab4:	003e9606 	br	10009510 <__alt_data_end+0xf8009510>
10009ab8:	3804d1ba 	srli	r2,r7,6
10009abc:	11400e44 	addi	r5,r2,57
10009ac0:	10c00e04 	addi	r3,r2,56
10009ac4:	294b883a 	add	r5,r5,r5
10009ac8:	003fbc06 	br	100099bc <__alt_data_end+0xf80099bc>
10009acc:	84ff5926 	beq	r16,r19,10009834 <__alt_data_end+0xf8009834>
10009ad0:	00840074 	movhi	r2,4097
10009ad4:	10914304 	addi	r2,r2,17676
10009ad8:	14000217 	ldw	r16,8(r2)
10009adc:	00bfff04 	movi	r2,-4
10009ae0:	80c00117 	ldw	r3,4(r16)
10009ae4:	1886703a 	and	r3,r3,r2
10009ae8:	003f9106 	br	10009930 <__alt_data_end+0xf8009930>
10009aec:	60800217 	ldw	r2,8(r12)
10009af0:	213fffc4 	addi	r4,r4,-1
10009af4:	1300651e 	bne	r2,r12,10009c8c <_malloc_r+0x7f4>
10009af8:	208000cc 	andi	r2,r4,3
10009afc:	633ffe04 	addi	r12,r12,-8
10009b00:	103ffa1e 	bne	r2,zero,10009aec <__alt_data_end+0xf8009aec>
10009b04:	98800117 	ldw	r2,4(r19)
10009b08:	0146303a 	nor	r3,zero,r5
10009b0c:	1884703a 	and	r2,r3,r2
10009b10:	98800115 	stw	r2,4(r19)
10009b14:	294b883a 	add	r5,r5,r5
10009b18:	117f2836 	bltu	r2,r5,100097bc <__alt_data_end+0xf80097bc>
10009b1c:	283f2726 	beq	r5,zero,100097bc <__alt_data_end+0xf80097bc>
10009b20:	2886703a 	and	r3,r5,r2
10009b24:	5809883a 	mov	r4,r11
10009b28:	183ec31e 	bne	r3,zero,10009638 <__alt_data_end+0xf8009638>
10009b2c:	294b883a 	add	r5,r5,r5
10009b30:	2886703a 	and	r3,r5,r2
10009b34:	21000104 	addi	r4,r4,4
10009b38:	183ffc26 	beq	r3,zero,10009b2c <__alt_data_end+0xf8009b2c>
10009b3c:	003ebe06 	br	10009638 <__alt_data_end+0xf8009638>
10009b40:	00c05504 	movi	r3,340
10009b44:	18801236 	bltu	r3,r2,10009b90 <_malloc_r+0x6f8>
10009b48:	8804d3fa 	srli	r2,r17,15
10009b4c:	12001e04 	addi	r8,r2,120
10009b50:	11c01dc4 	addi	r7,r2,119
10009b54:	4209883a 	add	r4,r8,r8
10009b58:	003e6d06 	br	10009510 <__alt_data_end+0xf8009510>
10009b5c:	00c40004 	movi	r3,4096
10009b60:	003f4606 	br	1000987c <__alt_data_end+0xf800987c>
10009b64:	00800044 	movi	r2,1
10009b68:	a0800115 	stw	r2,4(r20)
10009b6c:	003f7406 	br	10009940 <__alt_data_end+0xf8009940>
10009b70:	1805d0ba 	srai	r2,r3,2
10009b74:	01c00044 	movi	r7,1
10009b78:	30c00117 	ldw	r3,4(r6)
10009b7c:	388e983a 	sll	r7,r7,r2
10009b80:	2805883a 	mov	r2,r5
10009b84:	38c6b03a 	or	r3,r7,r3
10009b88:	30c00115 	stw	r3,4(r6)
10009b8c:	003f9b06 	br	100099fc <__alt_data_end+0xf80099fc>
10009b90:	00c15504 	movi	r3,1364
10009b94:	18801a36 	bltu	r3,r2,10009c00 <_malloc_r+0x768>
10009b98:	8804d4ba 	srli	r2,r17,18
10009b9c:	12001f44 	addi	r8,r2,125
10009ba0:	11c01f04 	addi	r7,r2,124
10009ba4:	4209883a 	add	r4,r8,r8
10009ba8:	003e5906 	br	10009510 <__alt_data_end+0xf8009510>
10009bac:	ad400404 	addi	r21,r21,16
10009bb0:	003f1706 	br	10009810 <__alt_data_end+0xf8009810>
10009bb4:	00c01504 	movi	r3,84
10009bb8:	18802336 	bltu	r3,r2,10009c48 <_malloc_r+0x7b0>
10009bbc:	3804d33a 	srli	r2,r7,12
10009bc0:	11401bc4 	addi	r5,r2,111
10009bc4:	10c01b84 	addi	r3,r2,110
10009bc8:	294b883a 	add	r5,r5,r5
10009bcc:	003f7b06 	br	100099bc <__alt_data_end+0xf80099bc>
10009bd0:	9c000217 	ldw	r16,8(r19)
10009bd4:	00bfff04 	movi	r2,-4
10009bd8:	80c00117 	ldw	r3,4(r16)
10009bdc:	1886703a 	and	r3,r3,r2
10009be0:	003f5306 	br	10009930 <__alt_data_end+0xf8009930>
10009be4:	3083ffcc 	andi	r2,r6,4095
10009be8:	103f181e 	bne	r2,zero,1000984c <__alt_data_end+0xf800984c>
10009bec:	99000217 	ldw	r4,8(r19)
10009bf0:	b545883a 	add	r2,r22,r21
10009bf4:	10800054 	ori	r2,r2,1
10009bf8:	20800115 	stw	r2,4(r4)
10009bfc:	003f3e06 	br	100098f8 <__alt_data_end+0xf80098f8>
10009c00:	01003f84 	movi	r4,254
10009c04:	02001fc4 	movi	r8,127
10009c08:	01c01f84 	movi	r7,126
10009c0c:	003e4006 	br	10009510 <__alt_data_end+0xf8009510>
10009c10:	00840074 	movhi	r2,4097
10009c14:	1096ca04 	addi	r2,r2,23336
10009c18:	15000015 	stw	r20,0(r2)
10009c1c:	003f1106 	br	10009864 <__alt_data_end+0xf8009864>
10009c20:	00800044 	movi	r2,1
10009c24:	002b883a 	mov	r21,zero
10009c28:	003f1f06 	br	100098a8 <__alt_data_end+0xf80098a8>
10009c2c:	81400204 	addi	r5,r16,8
10009c30:	9009883a 	mov	r4,r18
10009c34:	00088a00 	call	100088a0 <_free_r>
10009c38:	00840074 	movhi	r2,4097
10009c3c:	109e7704 	addi	r2,r2,31196
10009c40:	10c00017 	ldw	r3,0(r2)
10009c44:	003f2c06 	br	100098f8 <__alt_data_end+0xf80098f8>
10009c48:	00c05504 	movi	r3,340
10009c4c:	18800536 	bltu	r3,r2,10009c64 <_malloc_r+0x7cc>
10009c50:	3804d3fa 	srli	r2,r7,15
10009c54:	11401e04 	addi	r5,r2,120
10009c58:	10c01dc4 	addi	r3,r2,119
10009c5c:	294b883a 	add	r5,r5,r5
10009c60:	003f5606 	br	100099bc <__alt_data_end+0xf80099bc>
10009c64:	00c15504 	movi	r3,1364
10009c68:	18800536 	bltu	r3,r2,10009c80 <_malloc_r+0x7e8>
10009c6c:	3804d4ba 	srli	r2,r7,18
10009c70:	11401f44 	addi	r5,r2,125
10009c74:	10c01f04 	addi	r3,r2,124
10009c78:	294b883a 	add	r5,r5,r5
10009c7c:	003f4f06 	br	100099bc <__alt_data_end+0xf80099bc>
10009c80:	01403f84 	movi	r5,254
10009c84:	00c01f84 	movi	r3,126
10009c88:	003f4c06 	br	100099bc <__alt_data_end+0xf80099bc>
10009c8c:	98800117 	ldw	r2,4(r19)
10009c90:	003fa006 	br	10009b14 <__alt_data_end+0xf8009b14>
10009c94:	8808d0fa 	srli	r4,r17,3
10009c98:	20800044 	addi	r2,r4,1
10009c9c:	1085883a 	add	r2,r2,r2
10009ca0:	003e9006 	br	100096e4 <__alt_data_end+0xf80096e4>

10009ca4 <memchr>:
10009ca4:	208000cc 	andi	r2,r4,3
10009ca8:	280f883a 	mov	r7,r5
10009cac:	10003426 	beq	r2,zero,10009d80 <memchr+0xdc>
10009cb0:	30bfffc4 	addi	r2,r6,-1
10009cb4:	30001a26 	beq	r6,zero,10009d20 <memchr+0x7c>
10009cb8:	20c00003 	ldbu	r3,0(r4)
10009cbc:	29803fcc 	andi	r6,r5,255
10009cc0:	30c0051e 	bne	r6,r3,10009cd8 <memchr+0x34>
10009cc4:	00001806 	br	10009d28 <memchr+0x84>
10009cc8:	10001526 	beq	r2,zero,10009d20 <memchr+0x7c>
10009ccc:	20c00003 	ldbu	r3,0(r4)
10009cd0:	10bfffc4 	addi	r2,r2,-1
10009cd4:	30c01426 	beq	r6,r3,10009d28 <memchr+0x84>
10009cd8:	21000044 	addi	r4,r4,1
10009cdc:	20c000cc 	andi	r3,r4,3
10009ce0:	183ff91e 	bne	r3,zero,10009cc8 <__alt_data_end+0xf8009cc8>
10009ce4:	020000c4 	movi	r8,3
10009ce8:	40801136 	bltu	r8,r2,10009d30 <memchr+0x8c>
10009cec:	10000c26 	beq	r2,zero,10009d20 <memchr+0x7c>
10009cf0:	20c00003 	ldbu	r3,0(r4)
10009cf4:	29403fcc 	andi	r5,r5,255
10009cf8:	28c00b26 	beq	r5,r3,10009d28 <memchr+0x84>
10009cfc:	20c00044 	addi	r3,r4,1
10009d00:	39803fcc 	andi	r6,r7,255
10009d04:	2089883a 	add	r4,r4,r2
10009d08:	00000306 	br	10009d18 <memchr+0x74>
10009d0c:	18c00044 	addi	r3,r3,1
10009d10:	197fffc3 	ldbu	r5,-1(r3)
10009d14:	31400526 	beq	r6,r5,10009d2c <memchr+0x88>
10009d18:	1805883a 	mov	r2,r3
10009d1c:	20fffb1e 	bne	r4,r3,10009d0c <__alt_data_end+0xf8009d0c>
10009d20:	0005883a 	mov	r2,zero
10009d24:	f800283a 	ret
10009d28:	2005883a 	mov	r2,r4
10009d2c:	f800283a 	ret
10009d30:	28c03fcc 	andi	r3,r5,255
10009d34:	1812923a 	slli	r9,r3,8
10009d38:	02ffbff4 	movhi	r11,65279
10009d3c:	02a02074 	movhi	r10,32897
10009d40:	48d2b03a 	or	r9,r9,r3
10009d44:	4806943a 	slli	r3,r9,16
10009d48:	5affbfc4 	addi	r11,r11,-257
10009d4c:	52a02004 	addi	r10,r10,-32640
10009d50:	48d2b03a 	or	r9,r9,r3
10009d54:	20c00017 	ldw	r3,0(r4)
10009d58:	48c6f03a 	xor	r3,r9,r3
10009d5c:	1acd883a 	add	r6,r3,r11
10009d60:	00c6303a 	nor	r3,zero,r3
10009d64:	30c6703a 	and	r3,r6,r3
10009d68:	1a86703a 	and	r3,r3,r10
10009d6c:	183fe01e 	bne	r3,zero,10009cf0 <__alt_data_end+0xf8009cf0>
10009d70:	10bfff04 	addi	r2,r2,-4
10009d74:	21000104 	addi	r4,r4,4
10009d78:	40bff636 	bltu	r8,r2,10009d54 <__alt_data_end+0xf8009d54>
10009d7c:	003fdb06 	br	10009cec <__alt_data_end+0xf8009cec>
10009d80:	3005883a 	mov	r2,r6
10009d84:	003fd706 	br	10009ce4 <__alt_data_end+0xf8009ce4>

10009d88 <memcpy>:
10009d88:	defffd04 	addi	sp,sp,-12
10009d8c:	dfc00215 	stw	ra,8(sp)
10009d90:	dc400115 	stw	r17,4(sp)
10009d94:	dc000015 	stw	r16,0(sp)
10009d98:	00c003c4 	movi	r3,15
10009d9c:	2005883a 	mov	r2,r4
10009da0:	1980452e 	bgeu	r3,r6,10009eb8 <memcpy+0x130>
10009da4:	2906b03a 	or	r3,r5,r4
10009da8:	18c000cc 	andi	r3,r3,3
10009dac:	1800441e 	bne	r3,zero,10009ec0 <memcpy+0x138>
10009db0:	347ffc04 	addi	r17,r6,-16
10009db4:	8822d13a 	srli	r17,r17,4
10009db8:	28c00104 	addi	r3,r5,4
10009dbc:	23400104 	addi	r13,r4,4
10009dc0:	8820913a 	slli	r16,r17,4
10009dc4:	2b000204 	addi	r12,r5,8
10009dc8:	22c00204 	addi	r11,r4,8
10009dcc:	84000504 	addi	r16,r16,20
10009dd0:	2a800304 	addi	r10,r5,12
10009dd4:	22400304 	addi	r9,r4,12
10009dd8:	2c21883a 	add	r16,r5,r16
10009ddc:	2811883a 	mov	r8,r5
10009de0:	200f883a 	mov	r7,r4
10009de4:	41000017 	ldw	r4,0(r8)
10009de8:	1fc00017 	ldw	ra,0(r3)
10009dec:	63c00017 	ldw	r15,0(r12)
10009df0:	39000015 	stw	r4,0(r7)
10009df4:	53800017 	ldw	r14,0(r10)
10009df8:	6fc00015 	stw	ra,0(r13)
10009dfc:	5bc00015 	stw	r15,0(r11)
10009e00:	4b800015 	stw	r14,0(r9)
10009e04:	18c00404 	addi	r3,r3,16
10009e08:	39c00404 	addi	r7,r7,16
10009e0c:	42000404 	addi	r8,r8,16
10009e10:	6b400404 	addi	r13,r13,16
10009e14:	63000404 	addi	r12,r12,16
10009e18:	5ac00404 	addi	r11,r11,16
10009e1c:	52800404 	addi	r10,r10,16
10009e20:	4a400404 	addi	r9,r9,16
10009e24:	1c3fef1e 	bne	r3,r16,10009de4 <__alt_data_end+0xf8009de4>
10009e28:	89c00044 	addi	r7,r17,1
10009e2c:	380e913a 	slli	r7,r7,4
10009e30:	310003cc 	andi	r4,r6,15
10009e34:	02c000c4 	movi	r11,3
10009e38:	11c7883a 	add	r3,r2,r7
10009e3c:	29cb883a 	add	r5,r5,r7
10009e40:	5900212e 	bgeu	r11,r4,10009ec8 <memcpy+0x140>
10009e44:	1813883a 	mov	r9,r3
10009e48:	2811883a 	mov	r8,r5
10009e4c:	200f883a 	mov	r7,r4
10009e50:	42800017 	ldw	r10,0(r8)
10009e54:	4a400104 	addi	r9,r9,4
10009e58:	39ffff04 	addi	r7,r7,-4
10009e5c:	4abfff15 	stw	r10,-4(r9)
10009e60:	42000104 	addi	r8,r8,4
10009e64:	59fffa36 	bltu	r11,r7,10009e50 <__alt_data_end+0xf8009e50>
10009e68:	213fff04 	addi	r4,r4,-4
10009e6c:	2008d0ba 	srli	r4,r4,2
10009e70:	318000cc 	andi	r6,r6,3
10009e74:	21000044 	addi	r4,r4,1
10009e78:	2109883a 	add	r4,r4,r4
10009e7c:	2109883a 	add	r4,r4,r4
10009e80:	1907883a 	add	r3,r3,r4
10009e84:	290b883a 	add	r5,r5,r4
10009e88:	30000626 	beq	r6,zero,10009ea4 <memcpy+0x11c>
10009e8c:	198d883a 	add	r6,r3,r6
10009e90:	29c00003 	ldbu	r7,0(r5)
10009e94:	18c00044 	addi	r3,r3,1
10009e98:	29400044 	addi	r5,r5,1
10009e9c:	19ffffc5 	stb	r7,-1(r3)
10009ea0:	19bffb1e 	bne	r3,r6,10009e90 <__alt_data_end+0xf8009e90>
10009ea4:	dfc00217 	ldw	ra,8(sp)
10009ea8:	dc400117 	ldw	r17,4(sp)
10009eac:	dc000017 	ldw	r16,0(sp)
10009eb0:	dec00304 	addi	sp,sp,12
10009eb4:	f800283a 	ret
10009eb8:	2007883a 	mov	r3,r4
10009ebc:	003ff206 	br	10009e88 <__alt_data_end+0xf8009e88>
10009ec0:	2007883a 	mov	r3,r4
10009ec4:	003ff106 	br	10009e8c <__alt_data_end+0xf8009e8c>
10009ec8:	200d883a 	mov	r6,r4
10009ecc:	003fee06 	br	10009e88 <__alt_data_end+0xf8009e88>

10009ed0 <memmove>:
10009ed0:	2005883a 	mov	r2,r4
10009ed4:	29000b2e 	bgeu	r5,r4,10009f04 <memmove+0x34>
10009ed8:	298f883a 	add	r7,r5,r6
10009edc:	21c0092e 	bgeu	r4,r7,10009f04 <memmove+0x34>
10009ee0:	2187883a 	add	r3,r4,r6
10009ee4:	198bc83a 	sub	r5,r3,r6
10009ee8:	30004826 	beq	r6,zero,1000a00c <memmove+0x13c>
10009eec:	39ffffc4 	addi	r7,r7,-1
10009ef0:	39000003 	ldbu	r4,0(r7)
10009ef4:	18ffffc4 	addi	r3,r3,-1
10009ef8:	19000005 	stb	r4,0(r3)
10009efc:	28fffb1e 	bne	r5,r3,10009eec <__alt_data_end+0xf8009eec>
10009f00:	f800283a 	ret
10009f04:	00c003c4 	movi	r3,15
10009f08:	1980412e 	bgeu	r3,r6,1000a010 <memmove+0x140>
10009f0c:	2886b03a 	or	r3,r5,r2
10009f10:	18c000cc 	andi	r3,r3,3
10009f14:	1800401e 	bne	r3,zero,1000a018 <memmove+0x148>
10009f18:	33fffc04 	addi	r15,r6,-16
10009f1c:	781ed13a 	srli	r15,r15,4
10009f20:	28c00104 	addi	r3,r5,4
10009f24:	13400104 	addi	r13,r2,4
10009f28:	781c913a 	slli	r14,r15,4
10009f2c:	2b000204 	addi	r12,r5,8
10009f30:	12c00204 	addi	r11,r2,8
10009f34:	73800504 	addi	r14,r14,20
10009f38:	2a800304 	addi	r10,r5,12
10009f3c:	12400304 	addi	r9,r2,12
10009f40:	2b9d883a 	add	r14,r5,r14
10009f44:	2811883a 	mov	r8,r5
10009f48:	100f883a 	mov	r7,r2
10009f4c:	41000017 	ldw	r4,0(r8)
10009f50:	39c00404 	addi	r7,r7,16
10009f54:	18c00404 	addi	r3,r3,16
10009f58:	393ffc15 	stw	r4,-16(r7)
10009f5c:	193ffc17 	ldw	r4,-16(r3)
10009f60:	6b400404 	addi	r13,r13,16
10009f64:	5ac00404 	addi	r11,r11,16
10009f68:	693ffc15 	stw	r4,-16(r13)
10009f6c:	61000017 	ldw	r4,0(r12)
10009f70:	4a400404 	addi	r9,r9,16
10009f74:	42000404 	addi	r8,r8,16
10009f78:	593ffc15 	stw	r4,-16(r11)
10009f7c:	51000017 	ldw	r4,0(r10)
10009f80:	63000404 	addi	r12,r12,16
10009f84:	52800404 	addi	r10,r10,16
10009f88:	493ffc15 	stw	r4,-16(r9)
10009f8c:	1bbfef1e 	bne	r3,r14,10009f4c <__alt_data_end+0xf8009f4c>
10009f90:	79000044 	addi	r4,r15,1
10009f94:	2008913a 	slli	r4,r4,4
10009f98:	328003cc 	andi	r10,r6,15
10009f9c:	02c000c4 	movi	r11,3
10009fa0:	1107883a 	add	r3,r2,r4
10009fa4:	290b883a 	add	r5,r5,r4
10009fa8:	5a801e2e 	bgeu	r11,r10,1000a024 <memmove+0x154>
10009fac:	1813883a 	mov	r9,r3
10009fb0:	2811883a 	mov	r8,r5
10009fb4:	500f883a 	mov	r7,r10
10009fb8:	41000017 	ldw	r4,0(r8)
10009fbc:	4a400104 	addi	r9,r9,4
10009fc0:	39ffff04 	addi	r7,r7,-4
10009fc4:	493fff15 	stw	r4,-4(r9)
10009fc8:	42000104 	addi	r8,r8,4
10009fcc:	59fffa36 	bltu	r11,r7,10009fb8 <__alt_data_end+0xf8009fb8>
10009fd0:	513fff04 	addi	r4,r10,-4
10009fd4:	2008d0ba 	srli	r4,r4,2
10009fd8:	318000cc 	andi	r6,r6,3
10009fdc:	21000044 	addi	r4,r4,1
10009fe0:	2109883a 	add	r4,r4,r4
10009fe4:	2109883a 	add	r4,r4,r4
10009fe8:	1907883a 	add	r3,r3,r4
10009fec:	290b883a 	add	r5,r5,r4
10009ff0:	30000b26 	beq	r6,zero,1000a020 <memmove+0x150>
10009ff4:	198d883a 	add	r6,r3,r6
10009ff8:	29c00003 	ldbu	r7,0(r5)
10009ffc:	18c00044 	addi	r3,r3,1
1000a000:	29400044 	addi	r5,r5,1
1000a004:	19ffffc5 	stb	r7,-1(r3)
1000a008:	19bffb1e 	bne	r3,r6,10009ff8 <__alt_data_end+0xf8009ff8>
1000a00c:	f800283a 	ret
1000a010:	1007883a 	mov	r3,r2
1000a014:	003ff606 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a018:	1007883a 	mov	r3,r2
1000a01c:	003ff506 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a020:	f800283a 	ret
1000a024:	500d883a 	mov	r6,r10
1000a028:	003ff106 	br	10009ff0 <__alt_data_end+0xf8009ff0>

1000a02c <_Balloc>:
1000a02c:	20801317 	ldw	r2,76(r4)
1000a030:	defffc04 	addi	sp,sp,-16
1000a034:	dc400115 	stw	r17,4(sp)
1000a038:	dc000015 	stw	r16,0(sp)
1000a03c:	dfc00315 	stw	ra,12(sp)
1000a040:	dc800215 	stw	r18,8(sp)
1000a044:	2023883a 	mov	r17,r4
1000a048:	2821883a 	mov	r16,r5
1000a04c:	10000f26 	beq	r2,zero,1000a08c <_Balloc+0x60>
1000a050:	8407883a 	add	r3,r16,r16
1000a054:	18c7883a 	add	r3,r3,r3
1000a058:	10c7883a 	add	r3,r2,r3
1000a05c:	18800017 	ldw	r2,0(r3)
1000a060:	10001126 	beq	r2,zero,1000a0a8 <_Balloc+0x7c>
1000a064:	11000017 	ldw	r4,0(r2)
1000a068:	19000015 	stw	r4,0(r3)
1000a06c:	10000415 	stw	zero,16(r2)
1000a070:	10000315 	stw	zero,12(r2)
1000a074:	dfc00317 	ldw	ra,12(sp)
1000a078:	dc800217 	ldw	r18,8(sp)
1000a07c:	dc400117 	ldw	r17,4(sp)
1000a080:	dc000017 	ldw	r16,0(sp)
1000a084:	dec00404 	addi	sp,sp,16
1000a088:	f800283a 	ret
1000a08c:	01800844 	movi	r6,33
1000a090:	01400104 	movi	r5,4
1000a094:	000d0d40 	call	1000d0d4 <_calloc_r>
1000a098:	88801315 	stw	r2,76(r17)
1000a09c:	103fec1e 	bne	r2,zero,1000a050 <__alt_data_end+0xf800a050>
1000a0a0:	0005883a 	mov	r2,zero
1000a0a4:	003ff306 	br	1000a074 <__alt_data_end+0xf800a074>
1000a0a8:	01400044 	movi	r5,1
1000a0ac:	2c24983a 	sll	r18,r5,r16
1000a0b0:	8809883a 	mov	r4,r17
1000a0b4:	91800144 	addi	r6,r18,5
1000a0b8:	318d883a 	add	r6,r6,r6
1000a0bc:	318d883a 	add	r6,r6,r6
1000a0c0:	000d0d40 	call	1000d0d4 <_calloc_r>
1000a0c4:	103ff626 	beq	r2,zero,1000a0a0 <__alt_data_end+0xf800a0a0>
1000a0c8:	14000115 	stw	r16,4(r2)
1000a0cc:	14800215 	stw	r18,8(r2)
1000a0d0:	003fe606 	br	1000a06c <__alt_data_end+0xf800a06c>

1000a0d4 <_Bfree>:
1000a0d4:	28000826 	beq	r5,zero,1000a0f8 <_Bfree+0x24>
1000a0d8:	28c00117 	ldw	r3,4(r5)
1000a0dc:	20801317 	ldw	r2,76(r4)
1000a0e0:	18c7883a 	add	r3,r3,r3
1000a0e4:	18c7883a 	add	r3,r3,r3
1000a0e8:	10c5883a 	add	r2,r2,r3
1000a0ec:	10c00017 	ldw	r3,0(r2)
1000a0f0:	28c00015 	stw	r3,0(r5)
1000a0f4:	11400015 	stw	r5,0(r2)
1000a0f8:	f800283a 	ret

1000a0fc <__multadd>:
1000a0fc:	defff704 	addi	sp,sp,-36
1000a100:	dc800215 	stw	r18,8(sp)
1000a104:	2c800417 	ldw	r18,16(r5)
1000a108:	dd800615 	stw	r22,24(sp)
1000a10c:	dd400515 	stw	r21,20(sp)
1000a110:	dd000415 	stw	r20,16(sp)
1000a114:	dcc00315 	stw	r19,12(sp)
1000a118:	dc400115 	stw	r17,4(sp)
1000a11c:	dc000015 	stw	r16,0(sp)
1000a120:	dfc00815 	stw	ra,32(sp)
1000a124:	ddc00715 	stw	r23,28(sp)
1000a128:	2827883a 	mov	r19,r5
1000a12c:	2029883a 	mov	r20,r4
1000a130:	3023883a 	mov	r17,r6
1000a134:	3821883a 	mov	r16,r7
1000a138:	2d400504 	addi	r21,r5,20
1000a13c:	002d883a 	mov	r22,zero
1000a140:	adc00017 	ldw	r23,0(r21)
1000a144:	880b883a 	mov	r5,r17
1000a148:	ad400104 	addi	r21,r21,4
1000a14c:	b93fffcc 	andi	r4,r23,65535
1000a150:	000e52c0 	call	1000e52c <__mulsi3>
1000a154:	b808d43a 	srli	r4,r23,16
1000a158:	880b883a 	mov	r5,r17
1000a15c:	1421883a 	add	r16,r2,r16
1000a160:	000e52c0 	call	1000e52c <__mulsi3>
1000a164:	800ed43a 	srli	r7,r16,16
1000a168:	80ffffcc 	andi	r3,r16,65535
1000a16c:	b5800044 	addi	r22,r22,1
1000a170:	11c5883a 	add	r2,r2,r7
1000a174:	100e943a 	slli	r7,r2,16
1000a178:	1020d43a 	srli	r16,r2,16
1000a17c:	38c7883a 	add	r3,r7,r3
1000a180:	a8ffff15 	stw	r3,-4(r21)
1000a184:	b4bfee16 	blt	r22,r18,1000a140 <__alt_data_end+0xf800a140>
1000a188:	80000926 	beq	r16,zero,1000a1b0 <__multadd+0xb4>
1000a18c:	98800217 	ldw	r2,8(r19)
1000a190:	9080130e 	bge	r18,r2,1000a1e0 <__multadd+0xe4>
1000a194:	90800144 	addi	r2,r18,5
1000a198:	1085883a 	add	r2,r2,r2
1000a19c:	1085883a 	add	r2,r2,r2
1000a1a0:	9885883a 	add	r2,r19,r2
1000a1a4:	14000015 	stw	r16,0(r2)
1000a1a8:	94800044 	addi	r18,r18,1
1000a1ac:	9c800415 	stw	r18,16(r19)
1000a1b0:	9805883a 	mov	r2,r19
1000a1b4:	dfc00817 	ldw	ra,32(sp)
1000a1b8:	ddc00717 	ldw	r23,28(sp)
1000a1bc:	dd800617 	ldw	r22,24(sp)
1000a1c0:	dd400517 	ldw	r21,20(sp)
1000a1c4:	dd000417 	ldw	r20,16(sp)
1000a1c8:	dcc00317 	ldw	r19,12(sp)
1000a1cc:	dc800217 	ldw	r18,8(sp)
1000a1d0:	dc400117 	ldw	r17,4(sp)
1000a1d4:	dc000017 	ldw	r16,0(sp)
1000a1d8:	dec00904 	addi	sp,sp,36
1000a1dc:	f800283a 	ret
1000a1e0:	99400117 	ldw	r5,4(r19)
1000a1e4:	a009883a 	mov	r4,r20
1000a1e8:	29400044 	addi	r5,r5,1
1000a1ec:	000a02c0 	call	1000a02c <_Balloc>
1000a1f0:	99800417 	ldw	r6,16(r19)
1000a1f4:	99400304 	addi	r5,r19,12
1000a1f8:	11000304 	addi	r4,r2,12
1000a1fc:	31800084 	addi	r6,r6,2
1000a200:	318d883a 	add	r6,r6,r6
1000a204:	318d883a 	add	r6,r6,r6
1000a208:	1023883a 	mov	r17,r2
1000a20c:	0009d880 	call	10009d88 <memcpy>
1000a210:	98000a26 	beq	r19,zero,1000a23c <__multadd+0x140>
1000a214:	98c00117 	ldw	r3,4(r19)
1000a218:	a0801317 	ldw	r2,76(r20)
1000a21c:	18c7883a 	add	r3,r3,r3
1000a220:	18c7883a 	add	r3,r3,r3
1000a224:	10c5883a 	add	r2,r2,r3
1000a228:	10c00017 	ldw	r3,0(r2)
1000a22c:	98c00015 	stw	r3,0(r19)
1000a230:	14c00015 	stw	r19,0(r2)
1000a234:	8827883a 	mov	r19,r17
1000a238:	003fd606 	br	1000a194 <__alt_data_end+0xf800a194>
1000a23c:	8827883a 	mov	r19,r17
1000a240:	003fd406 	br	1000a194 <__alt_data_end+0xf800a194>

1000a244 <__s2b>:
1000a244:	defff904 	addi	sp,sp,-28
1000a248:	dc400115 	stw	r17,4(sp)
1000a24c:	dc000015 	stw	r16,0(sp)
1000a250:	2023883a 	mov	r17,r4
1000a254:	2821883a 	mov	r16,r5
1000a258:	39000204 	addi	r4,r7,8
1000a25c:	01400244 	movi	r5,9
1000a260:	dcc00315 	stw	r19,12(sp)
1000a264:	dc800215 	stw	r18,8(sp)
1000a268:	dfc00615 	stw	ra,24(sp)
1000a26c:	dd400515 	stw	r21,20(sp)
1000a270:	dd000415 	stw	r20,16(sp)
1000a274:	3825883a 	mov	r18,r7
1000a278:	3027883a 	mov	r19,r6
1000a27c:	0003eb80 	call	10003eb8 <__divsi3>
1000a280:	00c00044 	movi	r3,1
1000a284:	000b883a 	mov	r5,zero
1000a288:	1880030e 	bge	r3,r2,1000a298 <__s2b+0x54>
1000a28c:	18c7883a 	add	r3,r3,r3
1000a290:	29400044 	addi	r5,r5,1
1000a294:	18bffd16 	blt	r3,r2,1000a28c <__alt_data_end+0xf800a28c>
1000a298:	8809883a 	mov	r4,r17
1000a29c:	000a02c0 	call	1000a02c <_Balloc>
1000a2a0:	d8c00717 	ldw	r3,28(sp)
1000a2a4:	10c00515 	stw	r3,20(r2)
1000a2a8:	00c00044 	movi	r3,1
1000a2ac:	10c00415 	stw	r3,16(r2)
1000a2b0:	00c00244 	movi	r3,9
1000a2b4:	1cc0210e 	bge	r3,r19,1000a33c <__s2b+0xf8>
1000a2b8:	80eb883a 	add	r21,r16,r3
1000a2bc:	a829883a 	mov	r20,r21
1000a2c0:	84e1883a 	add	r16,r16,r19
1000a2c4:	a1c00007 	ldb	r7,0(r20)
1000a2c8:	01800284 	movi	r6,10
1000a2cc:	a5000044 	addi	r20,r20,1
1000a2d0:	100b883a 	mov	r5,r2
1000a2d4:	39fff404 	addi	r7,r7,-48
1000a2d8:	8809883a 	mov	r4,r17
1000a2dc:	000a0fc0 	call	1000a0fc <__multadd>
1000a2e0:	a43ff81e 	bne	r20,r16,1000a2c4 <__alt_data_end+0xf800a2c4>
1000a2e4:	ace1883a 	add	r16,r21,r19
1000a2e8:	843ffe04 	addi	r16,r16,-8
1000a2ec:	9c800a0e 	bge	r19,r18,1000a318 <__s2b+0xd4>
1000a2f0:	94e5c83a 	sub	r18,r18,r19
1000a2f4:	84a5883a 	add	r18,r16,r18
1000a2f8:	81c00007 	ldb	r7,0(r16)
1000a2fc:	01800284 	movi	r6,10
1000a300:	84000044 	addi	r16,r16,1
1000a304:	100b883a 	mov	r5,r2
1000a308:	39fff404 	addi	r7,r7,-48
1000a30c:	8809883a 	mov	r4,r17
1000a310:	000a0fc0 	call	1000a0fc <__multadd>
1000a314:	84bff81e 	bne	r16,r18,1000a2f8 <__alt_data_end+0xf800a2f8>
1000a318:	dfc00617 	ldw	ra,24(sp)
1000a31c:	dd400517 	ldw	r21,20(sp)
1000a320:	dd000417 	ldw	r20,16(sp)
1000a324:	dcc00317 	ldw	r19,12(sp)
1000a328:	dc800217 	ldw	r18,8(sp)
1000a32c:	dc400117 	ldw	r17,4(sp)
1000a330:	dc000017 	ldw	r16,0(sp)
1000a334:	dec00704 	addi	sp,sp,28
1000a338:	f800283a 	ret
1000a33c:	84000284 	addi	r16,r16,10
1000a340:	1827883a 	mov	r19,r3
1000a344:	003fe906 	br	1000a2ec <__alt_data_end+0xf800a2ec>

1000a348 <__hi0bits>:
1000a348:	20bfffec 	andhi	r2,r4,65535
1000a34c:	1000141e 	bne	r2,zero,1000a3a0 <__hi0bits+0x58>
1000a350:	2008943a 	slli	r4,r4,16
1000a354:	00800404 	movi	r2,16
1000a358:	20ffc02c 	andhi	r3,r4,65280
1000a35c:	1800021e 	bne	r3,zero,1000a368 <__hi0bits+0x20>
1000a360:	2008923a 	slli	r4,r4,8
1000a364:	10800204 	addi	r2,r2,8
1000a368:	20fc002c 	andhi	r3,r4,61440
1000a36c:	1800021e 	bne	r3,zero,1000a378 <__hi0bits+0x30>
1000a370:	2008913a 	slli	r4,r4,4
1000a374:	10800104 	addi	r2,r2,4
1000a378:	20f0002c 	andhi	r3,r4,49152
1000a37c:	1800031e 	bne	r3,zero,1000a38c <__hi0bits+0x44>
1000a380:	2109883a 	add	r4,r4,r4
1000a384:	10800084 	addi	r2,r2,2
1000a388:	2109883a 	add	r4,r4,r4
1000a38c:	20000316 	blt	r4,zero,1000a39c <__hi0bits+0x54>
1000a390:	2110002c 	andhi	r4,r4,16384
1000a394:	2000041e 	bne	r4,zero,1000a3a8 <__hi0bits+0x60>
1000a398:	00800804 	movi	r2,32
1000a39c:	f800283a 	ret
1000a3a0:	0005883a 	mov	r2,zero
1000a3a4:	003fec06 	br	1000a358 <__alt_data_end+0xf800a358>
1000a3a8:	10800044 	addi	r2,r2,1
1000a3ac:	f800283a 	ret

1000a3b0 <__lo0bits>:
1000a3b0:	20c00017 	ldw	r3,0(r4)
1000a3b4:	188001cc 	andi	r2,r3,7
1000a3b8:	10000826 	beq	r2,zero,1000a3dc <__lo0bits+0x2c>
1000a3bc:	1880004c 	andi	r2,r3,1
1000a3c0:	1000211e 	bne	r2,zero,1000a448 <__lo0bits+0x98>
1000a3c4:	1880008c 	andi	r2,r3,2
1000a3c8:	1000211e 	bne	r2,zero,1000a450 <__lo0bits+0xa0>
1000a3cc:	1806d0ba 	srli	r3,r3,2
1000a3d0:	00800084 	movi	r2,2
1000a3d4:	20c00015 	stw	r3,0(r4)
1000a3d8:	f800283a 	ret
1000a3dc:	18bfffcc 	andi	r2,r3,65535
1000a3e0:	10001326 	beq	r2,zero,1000a430 <__lo0bits+0x80>
1000a3e4:	0005883a 	mov	r2,zero
1000a3e8:	19403fcc 	andi	r5,r3,255
1000a3ec:	2800021e 	bne	r5,zero,1000a3f8 <__lo0bits+0x48>
1000a3f0:	1806d23a 	srli	r3,r3,8
1000a3f4:	10800204 	addi	r2,r2,8
1000a3f8:	194003cc 	andi	r5,r3,15
1000a3fc:	2800021e 	bne	r5,zero,1000a408 <__lo0bits+0x58>
1000a400:	1806d13a 	srli	r3,r3,4
1000a404:	10800104 	addi	r2,r2,4
1000a408:	194000cc 	andi	r5,r3,3
1000a40c:	2800021e 	bne	r5,zero,1000a418 <__lo0bits+0x68>
1000a410:	1806d0ba 	srli	r3,r3,2
1000a414:	10800084 	addi	r2,r2,2
1000a418:	1940004c 	andi	r5,r3,1
1000a41c:	2800081e 	bne	r5,zero,1000a440 <__lo0bits+0x90>
1000a420:	1806d07a 	srli	r3,r3,1
1000a424:	1800051e 	bne	r3,zero,1000a43c <__lo0bits+0x8c>
1000a428:	00800804 	movi	r2,32
1000a42c:	f800283a 	ret
1000a430:	1806d43a 	srli	r3,r3,16
1000a434:	00800404 	movi	r2,16
1000a438:	003feb06 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000a43c:	10800044 	addi	r2,r2,1
1000a440:	20c00015 	stw	r3,0(r4)
1000a444:	f800283a 	ret
1000a448:	0005883a 	mov	r2,zero
1000a44c:	f800283a 	ret
1000a450:	1806d07a 	srli	r3,r3,1
1000a454:	00800044 	movi	r2,1
1000a458:	20c00015 	stw	r3,0(r4)
1000a45c:	f800283a 	ret

1000a460 <__i2b>:
1000a460:	defffd04 	addi	sp,sp,-12
1000a464:	dc000015 	stw	r16,0(sp)
1000a468:	04000044 	movi	r16,1
1000a46c:	dc400115 	stw	r17,4(sp)
1000a470:	2823883a 	mov	r17,r5
1000a474:	800b883a 	mov	r5,r16
1000a478:	dfc00215 	stw	ra,8(sp)
1000a47c:	000a02c0 	call	1000a02c <_Balloc>
1000a480:	14400515 	stw	r17,20(r2)
1000a484:	14000415 	stw	r16,16(r2)
1000a488:	dfc00217 	ldw	ra,8(sp)
1000a48c:	dc400117 	ldw	r17,4(sp)
1000a490:	dc000017 	ldw	r16,0(sp)
1000a494:	dec00304 	addi	sp,sp,12
1000a498:	f800283a 	ret

1000a49c <__multiply>:
1000a49c:	deffef04 	addi	sp,sp,-68
1000a4a0:	dc400815 	stw	r17,32(sp)
1000a4a4:	dc000715 	stw	r16,28(sp)
1000a4a8:	34400417 	ldw	r17,16(r6)
1000a4ac:	2c000417 	ldw	r16,16(r5)
1000a4b0:	dd800d15 	stw	r22,52(sp)
1000a4b4:	dc800915 	stw	r18,36(sp)
1000a4b8:	dfc01015 	stw	ra,64(sp)
1000a4bc:	df000f15 	stw	fp,60(sp)
1000a4c0:	ddc00e15 	stw	r23,56(sp)
1000a4c4:	dd400c15 	stw	r21,48(sp)
1000a4c8:	dd000b15 	stw	r20,44(sp)
1000a4cc:	dcc00a15 	stw	r19,40(sp)
1000a4d0:	2825883a 	mov	r18,r5
1000a4d4:	302d883a 	mov	r22,r6
1000a4d8:	8440050e 	bge	r16,r17,1000a4f0 <__multiply+0x54>
1000a4dc:	8007883a 	mov	r3,r16
1000a4e0:	3025883a 	mov	r18,r6
1000a4e4:	8821883a 	mov	r16,r17
1000a4e8:	282d883a 	mov	r22,r5
1000a4ec:	1823883a 	mov	r17,r3
1000a4f0:	90800217 	ldw	r2,8(r18)
1000a4f4:	8447883a 	add	r3,r16,r17
1000a4f8:	d8c00215 	stw	r3,8(sp)
1000a4fc:	91400117 	ldw	r5,4(r18)
1000a500:	10c0010e 	bge	r2,r3,1000a508 <__multiply+0x6c>
1000a504:	29400044 	addi	r5,r5,1
1000a508:	000a02c0 	call	1000a02c <_Balloc>
1000a50c:	d8c00217 	ldw	r3,8(sp)
1000a510:	d8800615 	stw	r2,24(sp)
1000a514:	18eb883a 	add	r21,r3,r3
1000a518:	ad6b883a 	add	r21,r21,r21
1000a51c:	10c00504 	addi	r3,r2,20
1000a520:	1d6b883a 	add	r21,r3,r21
1000a524:	d8c00115 	stw	r3,4(sp)
1000a528:	dd400315 	stw	r21,12(sp)
1000a52c:	1805883a 	mov	r2,r3
1000a530:	1d40042e 	bgeu	r3,r21,1000a544 <__multiply+0xa8>
1000a534:	d8c00317 	ldw	r3,12(sp)
1000a538:	10000015 	stw	zero,0(r2)
1000a53c:	10800104 	addi	r2,r2,4
1000a540:	10fffc36 	bltu	r2,r3,1000a534 <__alt_data_end+0xf800a534>
1000a544:	8c63883a 	add	r17,r17,r17
1000a548:	b5800504 	addi	r22,r22,20
1000a54c:	8c63883a 	add	r17,r17,r17
1000a550:	94800504 	addi	r18,r18,20
1000a554:	8421883a 	add	r16,r16,r16
1000a558:	b463883a 	add	r17,r22,r17
1000a55c:	8421883a 	add	r16,r16,r16
1000a560:	dd800015 	stw	r22,0(sp)
1000a564:	dc800415 	stw	r18,16(sp)
1000a568:	dc400515 	stw	r17,20(sp)
1000a56c:	9429883a 	add	r20,r18,r16
1000a570:	b4404f2e 	bgeu	r22,r17,1000a6b0 <__multiply+0x214>
1000a574:	d8c00017 	ldw	r3,0(sp)
1000a578:	1c800017 	ldw	r18,0(r3)
1000a57c:	947fffcc 	andi	r17,r18,65535
1000a580:	88001e26 	beq	r17,zero,1000a5fc <__multiply+0x160>
1000a584:	dd800117 	ldw	r22,4(sp)
1000a588:	dd400417 	ldw	r21,16(sp)
1000a58c:	0027883a 	mov	r19,zero
1000a590:	ac800017 	ldw	r18,0(r21)
1000a594:	b4000017 	ldw	r16,0(r22)
1000a598:	880b883a 	mov	r5,r17
1000a59c:	913fffcc 	andi	r4,r18,65535
1000a5a0:	000e52c0 	call	1000e52c <__mulsi3>
1000a5a4:	9008d43a 	srli	r4,r18,16
1000a5a8:	84bfffcc 	andi	r18,r16,65535
1000a5ac:	1485883a 	add	r2,r2,r18
1000a5b0:	14e5883a 	add	r18,r2,r19
1000a5b4:	8020d43a 	srli	r16,r16,16
1000a5b8:	9026d43a 	srli	r19,r18,16
1000a5bc:	880b883a 	mov	r5,r17
1000a5c0:	000e52c0 	call	1000e52c <__mulsi3>
1000a5c4:	1405883a 	add	r2,r2,r16
1000a5c8:	14e1883a 	add	r16,r2,r19
1000a5cc:	90ffffcc 	andi	r3,r18,65535
1000a5d0:	8024943a 	slli	r18,r16,16
1000a5d4:	ad400104 	addi	r21,r21,4
1000a5d8:	b005883a 	mov	r2,r22
1000a5dc:	90c6b03a 	or	r3,r18,r3
1000a5e0:	b0c00015 	stw	r3,0(r22)
1000a5e4:	8026d43a 	srli	r19,r16,16
1000a5e8:	b5800104 	addi	r22,r22,4
1000a5ec:	ad3fe836 	bltu	r21,r20,1000a590 <__alt_data_end+0xf800a590>
1000a5f0:	d8c00017 	ldw	r3,0(sp)
1000a5f4:	14c00115 	stw	r19,4(r2)
1000a5f8:	1c800017 	ldw	r18,0(r3)
1000a5fc:	9024d43a 	srli	r18,r18,16
1000a600:	90002226 	beq	r18,zero,1000a68c <__multiply+0x1f0>
1000a604:	d8c00117 	ldw	r3,4(sp)
1000a608:	dd800417 	ldw	r22,16(sp)
1000a60c:	002f883a 	mov	r23,zero
1000a610:	1f000017 	ldw	fp,0(r3)
1000a614:	1823883a 	mov	r17,r3
1000a618:	182b883a 	mov	r21,r3
1000a61c:	e021883a 	mov	r16,fp
1000a620:	00000106 	br	1000a628 <__multiply+0x18c>
1000a624:	982b883a 	mov	r21,r19
1000a628:	b100000b 	ldhu	r4,0(r22)
1000a62c:	8020d43a 	srli	r16,r16,16
1000a630:	900b883a 	mov	r5,r18
1000a634:	000e52c0 	call	1000e52c <__mulsi3>
1000a638:	1405883a 	add	r2,r2,r16
1000a63c:	15ef883a 	add	r23,r2,r23
1000a640:	b804943a 	slli	r2,r23,16
1000a644:	e0ffffcc 	andi	r3,fp,65535
1000a648:	8c400104 	addi	r17,r17,4
1000a64c:	10c6b03a 	or	r3,r2,r3
1000a650:	88ffff15 	stw	r3,-4(r17)
1000a654:	b5800104 	addi	r22,r22,4
1000a658:	b13fff17 	ldw	r4,-4(r22)
1000a65c:	acc00104 	addi	r19,r21,4
1000a660:	900b883a 	mov	r5,r18
1000a664:	2008d43a 	srli	r4,r4,16
1000a668:	9c000017 	ldw	r16,0(r19)
1000a66c:	000e52c0 	call	1000e52c <__mulsi3>
1000a670:	b806d43a 	srli	r3,r23,16
1000a674:	813fffcc 	andi	r4,r16,65535
1000a678:	1105883a 	add	r2,r2,r4
1000a67c:	10f9883a 	add	fp,r2,r3
1000a680:	e02ed43a 	srli	r23,fp,16
1000a684:	b53fe736 	bltu	r22,r20,1000a624 <__alt_data_end+0xf800a624>
1000a688:	af000115 	stw	fp,4(r21)
1000a68c:	d8c00017 	ldw	r3,0(sp)
1000a690:	d9000517 	ldw	r4,20(sp)
1000a694:	18c00104 	addi	r3,r3,4
1000a698:	d8c00015 	stw	r3,0(sp)
1000a69c:	d8c00117 	ldw	r3,4(sp)
1000a6a0:	18c00104 	addi	r3,r3,4
1000a6a4:	d8c00115 	stw	r3,4(sp)
1000a6a8:	d8c00017 	ldw	r3,0(sp)
1000a6ac:	193fb136 	bltu	r3,r4,1000a574 <__alt_data_end+0xf800a574>
1000a6b0:	d8c00217 	ldw	r3,8(sp)
1000a6b4:	00c00c0e 	bge	zero,r3,1000a6e8 <__multiply+0x24c>
1000a6b8:	d8c00317 	ldw	r3,12(sp)
1000a6bc:	18bfff17 	ldw	r2,-4(r3)
1000a6c0:	1d7fff04 	addi	r21,r3,-4
1000a6c4:	10000326 	beq	r2,zero,1000a6d4 <__multiply+0x238>
1000a6c8:	00000706 	br	1000a6e8 <__multiply+0x24c>
1000a6cc:	a8800017 	ldw	r2,0(r21)
1000a6d0:	1000051e 	bne	r2,zero,1000a6e8 <__multiply+0x24c>
1000a6d4:	d8c00217 	ldw	r3,8(sp)
1000a6d8:	ad7fff04 	addi	r21,r21,-4
1000a6dc:	18ffffc4 	addi	r3,r3,-1
1000a6e0:	d8c00215 	stw	r3,8(sp)
1000a6e4:	183ff91e 	bne	r3,zero,1000a6cc <__alt_data_end+0xf800a6cc>
1000a6e8:	d8c00617 	ldw	r3,24(sp)
1000a6ec:	d9000217 	ldw	r4,8(sp)
1000a6f0:	1805883a 	mov	r2,r3
1000a6f4:	19000415 	stw	r4,16(r3)
1000a6f8:	dfc01017 	ldw	ra,64(sp)
1000a6fc:	df000f17 	ldw	fp,60(sp)
1000a700:	ddc00e17 	ldw	r23,56(sp)
1000a704:	dd800d17 	ldw	r22,52(sp)
1000a708:	dd400c17 	ldw	r21,48(sp)
1000a70c:	dd000b17 	ldw	r20,44(sp)
1000a710:	dcc00a17 	ldw	r19,40(sp)
1000a714:	dc800917 	ldw	r18,36(sp)
1000a718:	dc400817 	ldw	r17,32(sp)
1000a71c:	dc000717 	ldw	r16,28(sp)
1000a720:	dec01104 	addi	sp,sp,68
1000a724:	f800283a 	ret

1000a728 <__pow5mult>:
1000a728:	defffa04 	addi	sp,sp,-24
1000a72c:	dcc00315 	stw	r19,12(sp)
1000a730:	dc000015 	stw	r16,0(sp)
1000a734:	dfc00515 	stw	ra,20(sp)
1000a738:	dd000415 	stw	r20,16(sp)
1000a73c:	dc800215 	stw	r18,8(sp)
1000a740:	dc400115 	stw	r17,4(sp)
1000a744:	308000cc 	andi	r2,r6,3
1000a748:	3021883a 	mov	r16,r6
1000a74c:	2027883a 	mov	r19,r4
1000a750:	10002f1e 	bne	r2,zero,1000a810 <__pow5mult+0xe8>
1000a754:	2825883a 	mov	r18,r5
1000a758:	8021d0ba 	srai	r16,r16,2
1000a75c:	80001a26 	beq	r16,zero,1000a7c8 <__pow5mult+0xa0>
1000a760:	9c401217 	ldw	r17,72(r19)
1000a764:	8800061e 	bne	r17,zero,1000a780 <__pow5mult+0x58>
1000a768:	00003406 	br	1000a83c <__pow5mult+0x114>
1000a76c:	8021d07a 	srai	r16,r16,1
1000a770:	80001526 	beq	r16,zero,1000a7c8 <__pow5mult+0xa0>
1000a774:	88800017 	ldw	r2,0(r17)
1000a778:	10001c26 	beq	r2,zero,1000a7ec <__pow5mult+0xc4>
1000a77c:	1023883a 	mov	r17,r2
1000a780:	8080004c 	andi	r2,r16,1
1000a784:	103ff926 	beq	r2,zero,1000a76c <__alt_data_end+0xf800a76c>
1000a788:	880d883a 	mov	r6,r17
1000a78c:	900b883a 	mov	r5,r18
1000a790:	9809883a 	mov	r4,r19
1000a794:	000a49c0 	call	1000a49c <__multiply>
1000a798:	90001b26 	beq	r18,zero,1000a808 <__pow5mult+0xe0>
1000a79c:	91000117 	ldw	r4,4(r18)
1000a7a0:	98c01317 	ldw	r3,76(r19)
1000a7a4:	8021d07a 	srai	r16,r16,1
1000a7a8:	2109883a 	add	r4,r4,r4
1000a7ac:	2109883a 	add	r4,r4,r4
1000a7b0:	1907883a 	add	r3,r3,r4
1000a7b4:	19000017 	ldw	r4,0(r3)
1000a7b8:	91000015 	stw	r4,0(r18)
1000a7bc:	1c800015 	stw	r18,0(r3)
1000a7c0:	1025883a 	mov	r18,r2
1000a7c4:	803feb1e 	bne	r16,zero,1000a774 <__alt_data_end+0xf800a774>
1000a7c8:	9005883a 	mov	r2,r18
1000a7cc:	dfc00517 	ldw	ra,20(sp)
1000a7d0:	dd000417 	ldw	r20,16(sp)
1000a7d4:	dcc00317 	ldw	r19,12(sp)
1000a7d8:	dc800217 	ldw	r18,8(sp)
1000a7dc:	dc400117 	ldw	r17,4(sp)
1000a7e0:	dc000017 	ldw	r16,0(sp)
1000a7e4:	dec00604 	addi	sp,sp,24
1000a7e8:	f800283a 	ret
1000a7ec:	880d883a 	mov	r6,r17
1000a7f0:	880b883a 	mov	r5,r17
1000a7f4:	9809883a 	mov	r4,r19
1000a7f8:	000a49c0 	call	1000a49c <__multiply>
1000a7fc:	88800015 	stw	r2,0(r17)
1000a800:	10000015 	stw	zero,0(r2)
1000a804:	003fdd06 	br	1000a77c <__alt_data_end+0xf800a77c>
1000a808:	1025883a 	mov	r18,r2
1000a80c:	003fd706 	br	1000a76c <__alt_data_end+0xf800a76c>
1000a810:	10bfffc4 	addi	r2,r2,-1
1000a814:	1085883a 	add	r2,r2,r2
1000a818:	00c40074 	movhi	r3,4097
1000a81c:	18cf7e04 	addi	r3,r3,15864
1000a820:	1085883a 	add	r2,r2,r2
1000a824:	1885883a 	add	r2,r3,r2
1000a828:	11800017 	ldw	r6,0(r2)
1000a82c:	000f883a 	mov	r7,zero
1000a830:	000a0fc0 	call	1000a0fc <__multadd>
1000a834:	1025883a 	mov	r18,r2
1000a838:	003fc706 	br	1000a758 <__alt_data_end+0xf800a758>
1000a83c:	05000044 	movi	r20,1
1000a840:	a00b883a 	mov	r5,r20
1000a844:	9809883a 	mov	r4,r19
1000a848:	000a02c0 	call	1000a02c <_Balloc>
1000a84c:	1023883a 	mov	r17,r2
1000a850:	00809c44 	movi	r2,625
1000a854:	88800515 	stw	r2,20(r17)
1000a858:	8d000415 	stw	r20,16(r17)
1000a85c:	9c401215 	stw	r17,72(r19)
1000a860:	88000015 	stw	zero,0(r17)
1000a864:	003fc606 	br	1000a780 <__alt_data_end+0xf800a780>

1000a868 <__lshift>:
1000a868:	defff904 	addi	sp,sp,-28
1000a86c:	dd400515 	stw	r21,20(sp)
1000a870:	dcc00315 	stw	r19,12(sp)
1000a874:	302bd17a 	srai	r21,r6,5
1000a878:	2cc00417 	ldw	r19,16(r5)
1000a87c:	28800217 	ldw	r2,8(r5)
1000a880:	dd000415 	stw	r20,16(sp)
1000a884:	ace7883a 	add	r19,r21,r19
1000a888:	dc800215 	stw	r18,8(sp)
1000a88c:	dc400115 	stw	r17,4(sp)
1000a890:	dc000015 	stw	r16,0(sp)
1000a894:	dfc00615 	stw	ra,24(sp)
1000a898:	9c000044 	addi	r16,r19,1
1000a89c:	2823883a 	mov	r17,r5
1000a8a0:	3029883a 	mov	r20,r6
1000a8a4:	2025883a 	mov	r18,r4
1000a8a8:	29400117 	ldw	r5,4(r5)
1000a8ac:	1400030e 	bge	r2,r16,1000a8bc <__lshift+0x54>
1000a8b0:	1085883a 	add	r2,r2,r2
1000a8b4:	29400044 	addi	r5,r5,1
1000a8b8:	143ffd16 	blt	r2,r16,1000a8b0 <__alt_data_end+0xf800a8b0>
1000a8bc:	9009883a 	mov	r4,r18
1000a8c0:	000a02c0 	call	1000a02c <_Balloc>
1000a8c4:	10c00504 	addi	r3,r2,20
1000a8c8:	0540070e 	bge	zero,r21,1000a8e8 <__lshift+0x80>
1000a8cc:	ad6b883a 	add	r21,r21,r21
1000a8d0:	ad6b883a 	add	r21,r21,r21
1000a8d4:	1809883a 	mov	r4,r3
1000a8d8:	1d47883a 	add	r3,r3,r21
1000a8dc:	20000015 	stw	zero,0(r4)
1000a8e0:	21000104 	addi	r4,r4,4
1000a8e4:	193ffd1e 	bne	r3,r4,1000a8dc <__alt_data_end+0xf800a8dc>
1000a8e8:	8a000417 	ldw	r8,16(r17)
1000a8ec:	89000504 	addi	r4,r17,20
1000a8f0:	a18007cc 	andi	r6,r20,31
1000a8f4:	4211883a 	add	r8,r8,r8
1000a8f8:	4211883a 	add	r8,r8,r8
1000a8fc:	2211883a 	add	r8,r4,r8
1000a900:	30002326 	beq	r6,zero,1000a990 <__lshift+0x128>
1000a904:	02400804 	movi	r9,32
1000a908:	4993c83a 	sub	r9,r9,r6
1000a90c:	000b883a 	mov	r5,zero
1000a910:	21c00017 	ldw	r7,0(r4)
1000a914:	1815883a 	mov	r10,r3
1000a918:	18c00104 	addi	r3,r3,4
1000a91c:	398e983a 	sll	r7,r7,r6
1000a920:	21000104 	addi	r4,r4,4
1000a924:	394ab03a 	or	r5,r7,r5
1000a928:	197fff15 	stw	r5,-4(r3)
1000a92c:	217fff17 	ldw	r5,-4(r4)
1000a930:	2a4ad83a 	srl	r5,r5,r9
1000a934:	223ff636 	bltu	r4,r8,1000a910 <__alt_data_end+0xf800a910>
1000a938:	51400115 	stw	r5,4(r10)
1000a93c:	28001a1e 	bne	r5,zero,1000a9a8 <__lshift+0x140>
1000a940:	843fffc4 	addi	r16,r16,-1
1000a944:	14000415 	stw	r16,16(r2)
1000a948:	88000826 	beq	r17,zero,1000a96c <__lshift+0x104>
1000a94c:	89000117 	ldw	r4,4(r17)
1000a950:	90c01317 	ldw	r3,76(r18)
1000a954:	2109883a 	add	r4,r4,r4
1000a958:	2109883a 	add	r4,r4,r4
1000a95c:	1907883a 	add	r3,r3,r4
1000a960:	19000017 	ldw	r4,0(r3)
1000a964:	89000015 	stw	r4,0(r17)
1000a968:	1c400015 	stw	r17,0(r3)
1000a96c:	dfc00617 	ldw	ra,24(sp)
1000a970:	dd400517 	ldw	r21,20(sp)
1000a974:	dd000417 	ldw	r20,16(sp)
1000a978:	dcc00317 	ldw	r19,12(sp)
1000a97c:	dc800217 	ldw	r18,8(sp)
1000a980:	dc400117 	ldw	r17,4(sp)
1000a984:	dc000017 	ldw	r16,0(sp)
1000a988:	dec00704 	addi	sp,sp,28
1000a98c:	f800283a 	ret
1000a990:	21400017 	ldw	r5,0(r4)
1000a994:	18c00104 	addi	r3,r3,4
1000a998:	21000104 	addi	r4,r4,4
1000a99c:	197fff15 	stw	r5,-4(r3)
1000a9a0:	223ffb36 	bltu	r4,r8,1000a990 <__alt_data_end+0xf800a990>
1000a9a4:	003fe606 	br	1000a940 <__alt_data_end+0xf800a940>
1000a9a8:	9c000084 	addi	r16,r19,2
1000a9ac:	003fe406 	br	1000a940 <__alt_data_end+0xf800a940>

1000a9b0 <__mcmp>:
1000a9b0:	20800417 	ldw	r2,16(r4)
1000a9b4:	28c00417 	ldw	r3,16(r5)
1000a9b8:	10c5c83a 	sub	r2,r2,r3
1000a9bc:	1000111e 	bne	r2,zero,1000aa04 <__mcmp+0x54>
1000a9c0:	18c7883a 	add	r3,r3,r3
1000a9c4:	18c7883a 	add	r3,r3,r3
1000a9c8:	21000504 	addi	r4,r4,20
1000a9cc:	29400504 	addi	r5,r5,20
1000a9d0:	20c5883a 	add	r2,r4,r3
1000a9d4:	28cb883a 	add	r5,r5,r3
1000a9d8:	00000106 	br	1000a9e0 <__mcmp+0x30>
1000a9dc:	20800a2e 	bgeu	r4,r2,1000aa08 <__mcmp+0x58>
1000a9e0:	10bfff04 	addi	r2,r2,-4
1000a9e4:	297fff04 	addi	r5,r5,-4
1000a9e8:	11800017 	ldw	r6,0(r2)
1000a9ec:	28c00017 	ldw	r3,0(r5)
1000a9f0:	30fffa26 	beq	r6,r3,1000a9dc <__alt_data_end+0xf800a9dc>
1000a9f4:	30c00236 	bltu	r6,r3,1000aa00 <__mcmp+0x50>
1000a9f8:	00800044 	movi	r2,1
1000a9fc:	f800283a 	ret
1000aa00:	00bfffc4 	movi	r2,-1
1000aa04:	f800283a 	ret
1000aa08:	0005883a 	mov	r2,zero
1000aa0c:	f800283a 	ret

1000aa10 <__mdiff>:
1000aa10:	28c00417 	ldw	r3,16(r5)
1000aa14:	30800417 	ldw	r2,16(r6)
1000aa18:	defffa04 	addi	sp,sp,-24
1000aa1c:	dcc00315 	stw	r19,12(sp)
1000aa20:	dc800215 	stw	r18,8(sp)
1000aa24:	dfc00515 	stw	ra,20(sp)
1000aa28:	dd000415 	stw	r20,16(sp)
1000aa2c:	dc400115 	stw	r17,4(sp)
1000aa30:	dc000015 	stw	r16,0(sp)
1000aa34:	1887c83a 	sub	r3,r3,r2
1000aa38:	2825883a 	mov	r18,r5
1000aa3c:	3027883a 	mov	r19,r6
1000aa40:	1800141e 	bne	r3,zero,1000aa94 <__mdiff+0x84>
1000aa44:	1085883a 	add	r2,r2,r2
1000aa48:	1085883a 	add	r2,r2,r2
1000aa4c:	2a000504 	addi	r8,r5,20
1000aa50:	34000504 	addi	r16,r6,20
1000aa54:	4087883a 	add	r3,r8,r2
1000aa58:	8085883a 	add	r2,r16,r2
1000aa5c:	00000106 	br	1000aa64 <__mdiff+0x54>
1000aa60:	40c0592e 	bgeu	r8,r3,1000abc8 <__mdiff+0x1b8>
1000aa64:	18ffff04 	addi	r3,r3,-4
1000aa68:	10bfff04 	addi	r2,r2,-4
1000aa6c:	19c00017 	ldw	r7,0(r3)
1000aa70:	11400017 	ldw	r5,0(r2)
1000aa74:	397ffa26 	beq	r7,r5,1000aa60 <__alt_data_end+0xf800aa60>
1000aa78:	3940592e 	bgeu	r7,r5,1000abe0 <__mdiff+0x1d0>
1000aa7c:	9005883a 	mov	r2,r18
1000aa80:	4023883a 	mov	r17,r8
1000aa84:	9825883a 	mov	r18,r19
1000aa88:	05000044 	movi	r20,1
1000aa8c:	1027883a 	mov	r19,r2
1000aa90:	00000406 	br	1000aaa4 <__mdiff+0x94>
1000aa94:	18005616 	blt	r3,zero,1000abf0 <__mdiff+0x1e0>
1000aa98:	34400504 	addi	r17,r6,20
1000aa9c:	2c000504 	addi	r16,r5,20
1000aaa0:	0029883a 	mov	r20,zero
1000aaa4:	91400117 	ldw	r5,4(r18)
1000aaa8:	000a02c0 	call	1000a02c <_Balloc>
1000aaac:	92400417 	ldw	r9,16(r18)
1000aab0:	9b000417 	ldw	r12,16(r19)
1000aab4:	12c00504 	addi	r11,r2,20
1000aab8:	4a51883a 	add	r8,r9,r9
1000aabc:	6319883a 	add	r12,r12,r12
1000aac0:	4211883a 	add	r8,r8,r8
1000aac4:	6319883a 	add	r12,r12,r12
1000aac8:	15000315 	stw	r20,12(r2)
1000aacc:	8211883a 	add	r8,r16,r8
1000aad0:	8b19883a 	add	r12,r17,r12
1000aad4:	0007883a 	mov	r3,zero
1000aad8:	81400017 	ldw	r5,0(r16)
1000aadc:	89c00017 	ldw	r7,0(r17)
1000aae0:	59800104 	addi	r6,r11,4
1000aae4:	293fffcc 	andi	r4,r5,65535
1000aae8:	20c7883a 	add	r3,r4,r3
1000aaec:	393fffcc 	andi	r4,r7,65535
1000aaf0:	1909c83a 	sub	r4,r3,r4
1000aaf4:	280ad43a 	srli	r5,r5,16
1000aaf8:	380ed43a 	srli	r7,r7,16
1000aafc:	2007d43a 	srai	r3,r4,16
1000ab00:	213fffcc 	andi	r4,r4,65535
1000ab04:	29cbc83a 	sub	r5,r5,r7
1000ab08:	28c7883a 	add	r3,r5,r3
1000ab0c:	180a943a 	slli	r5,r3,16
1000ab10:	8c400104 	addi	r17,r17,4
1000ab14:	84000104 	addi	r16,r16,4
1000ab18:	2908b03a 	or	r4,r5,r4
1000ab1c:	59000015 	stw	r4,0(r11)
1000ab20:	1807d43a 	srai	r3,r3,16
1000ab24:	3015883a 	mov	r10,r6
1000ab28:	3017883a 	mov	r11,r6
1000ab2c:	8b3fea36 	bltu	r17,r12,1000aad8 <__alt_data_end+0xf800aad8>
1000ab30:	8200162e 	bgeu	r16,r8,1000ab8c <__mdiff+0x17c>
1000ab34:	8017883a 	mov	r11,r16
1000ab38:	59400017 	ldw	r5,0(r11)
1000ab3c:	31800104 	addi	r6,r6,4
1000ab40:	5ac00104 	addi	r11,r11,4
1000ab44:	293fffcc 	andi	r4,r5,65535
1000ab48:	20c7883a 	add	r3,r4,r3
1000ab4c:	280ed43a 	srli	r7,r5,16
1000ab50:	180bd43a 	srai	r5,r3,16
1000ab54:	193fffcc 	andi	r4,r3,65535
1000ab58:	3947883a 	add	r3,r7,r5
1000ab5c:	180a943a 	slli	r5,r3,16
1000ab60:	1807d43a 	srai	r3,r3,16
1000ab64:	2908b03a 	or	r4,r5,r4
1000ab68:	313fff15 	stw	r4,-4(r6)
1000ab6c:	5a3ff236 	bltu	r11,r8,1000ab38 <__alt_data_end+0xf800ab38>
1000ab70:	0406303a 	nor	r3,zero,r16
1000ab74:	1a07883a 	add	r3,r3,r8
1000ab78:	1806d0ba 	srli	r3,r3,2
1000ab7c:	18c00044 	addi	r3,r3,1
1000ab80:	18c7883a 	add	r3,r3,r3
1000ab84:	18c7883a 	add	r3,r3,r3
1000ab88:	50d5883a 	add	r10,r10,r3
1000ab8c:	50ffff04 	addi	r3,r10,-4
1000ab90:	2000041e 	bne	r4,zero,1000aba4 <__mdiff+0x194>
1000ab94:	18ffff04 	addi	r3,r3,-4
1000ab98:	19000017 	ldw	r4,0(r3)
1000ab9c:	4a7fffc4 	addi	r9,r9,-1
1000aba0:	203ffc26 	beq	r4,zero,1000ab94 <__alt_data_end+0xf800ab94>
1000aba4:	12400415 	stw	r9,16(r2)
1000aba8:	dfc00517 	ldw	ra,20(sp)
1000abac:	dd000417 	ldw	r20,16(sp)
1000abb0:	dcc00317 	ldw	r19,12(sp)
1000abb4:	dc800217 	ldw	r18,8(sp)
1000abb8:	dc400117 	ldw	r17,4(sp)
1000abbc:	dc000017 	ldw	r16,0(sp)
1000abc0:	dec00604 	addi	sp,sp,24
1000abc4:	f800283a 	ret
1000abc8:	000b883a 	mov	r5,zero
1000abcc:	000a02c0 	call	1000a02c <_Balloc>
1000abd0:	00c00044 	movi	r3,1
1000abd4:	10c00415 	stw	r3,16(r2)
1000abd8:	10000515 	stw	zero,20(r2)
1000abdc:	003ff206 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000abe0:	8023883a 	mov	r17,r16
1000abe4:	0029883a 	mov	r20,zero
1000abe8:	4021883a 	mov	r16,r8
1000abec:	003fad06 	br	1000aaa4 <__alt_data_end+0xf800aaa4>
1000abf0:	9005883a 	mov	r2,r18
1000abf4:	94400504 	addi	r17,r18,20
1000abf8:	9c000504 	addi	r16,r19,20
1000abfc:	9825883a 	mov	r18,r19
1000ac00:	05000044 	movi	r20,1
1000ac04:	1027883a 	mov	r19,r2
1000ac08:	003fa606 	br	1000aaa4 <__alt_data_end+0xf800aaa4>

1000ac0c <__ulp>:
1000ac0c:	295ffc2c 	andhi	r5,r5,32752
1000ac10:	00bf3034 	movhi	r2,64704
1000ac14:	2887883a 	add	r3,r5,r2
1000ac18:	00c0020e 	bge	zero,r3,1000ac24 <__ulp+0x18>
1000ac1c:	0005883a 	mov	r2,zero
1000ac20:	f800283a 	ret
1000ac24:	00c7c83a 	sub	r3,zero,r3
1000ac28:	1807d53a 	srai	r3,r3,20
1000ac2c:	008004c4 	movi	r2,19
1000ac30:	10c00b0e 	bge	r2,r3,1000ac60 <__ulp+0x54>
1000ac34:	18bffb04 	addi	r2,r3,-20
1000ac38:	01000784 	movi	r4,30
1000ac3c:	0007883a 	mov	r3,zero
1000ac40:	20800516 	blt	r4,r2,1000ac58 <__ulp+0x4c>
1000ac44:	010007c4 	movi	r4,31
1000ac48:	2089c83a 	sub	r4,r4,r2
1000ac4c:	00800044 	movi	r2,1
1000ac50:	1104983a 	sll	r2,r2,r4
1000ac54:	f800283a 	ret
1000ac58:	00800044 	movi	r2,1
1000ac5c:	f800283a 	ret
1000ac60:	01400234 	movhi	r5,8
1000ac64:	28c7d83a 	sra	r3,r5,r3
1000ac68:	0005883a 	mov	r2,zero
1000ac6c:	f800283a 	ret

1000ac70 <__b2d>:
1000ac70:	defffa04 	addi	sp,sp,-24
1000ac74:	dc000015 	stw	r16,0(sp)
1000ac78:	24000417 	ldw	r16,16(r4)
1000ac7c:	dc400115 	stw	r17,4(sp)
1000ac80:	24400504 	addi	r17,r4,20
1000ac84:	8421883a 	add	r16,r16,r16
1000ac88:	8421883a 	add	r16,r16,r16
1000ac8c:	8c21883a 	add	r16,r17,r16
1000ac90:	dc800215 	stw	r18,8(sp)
1000ac94:	84bfff17 	ldw	r18,-4(r16)
1000ac98:	dd000415 	stw	r20,16(sp)
1000ac9c:	dcc00315 	stw	r19,12(sp)
1000aca0:	9009883a 	mov	r4,r18
1000aca4:	2829883a 	mov	r20,r5
1000aca8:	dfc00515 	stw	ra,20(sp)
1000acac:	000a3480 	call	1000a348 <__hi0bits>
1000acb0:	00c00804 	movi	r3,32
1000acb4:	1889c83a 	sub	r4,r3,r2
1000acb8:	a1000015 	stw	r4,0(r20)
1000acbc:	01000284 	movi	r4,10
1000acc0:	84ffff04 	addi	r19,r16,-4
1000acc4:	20801216 	blt	r4,r2,1000ad10 <__b2d+0xa0>
1000acc8:	018002c4 	movi	r6,11
1000accc:	308dc83a 	sub	r6,r6,r2
1000acd0:	9186d83a 	srl	r3,r18,r6
1000acd4:	18cffc34 	orhi	r3,r3,16368
1000acd8:	8cc0212e 	bgeu	r17,r19,1000ad60 <__b2d+0xf0>
1000acdc:	813ffe17 	ldw	r4,-8(r16)
1000ace0:	218cd83a 	srl	r6,r4,r6
1000ace4:	10800544 	addi	r2,r2,21
1000ace8:	9084983a 	sll	r2,r18,r2
1000acec:	1184b03a 	or	r2,r2,r6
1000acf0:	dfc00517 	ldw	ra,20(sp)
1000acf4:	dd000417 	ldw	r20,16(sp)
1000acf8:	dcc00317 	ldw	r19,12(sp)
1000acfc:	dc800217 	ldw	r18,8(sp)
1000ad00:	dc400117 	ldw	r17,4(sp)
1000ad04:	dc000017 	ldw	r16,0(sp)
1000ad08:	dec00604 	addi	sp,sp,24
1000ad0c:	f800283a 	ret
1000ad10:	8cc00f2e 	bgeu	r17,r19,1000ad50 <__b2d+0xe0>
1000ad14:	117ffd44 	addi	r5,r2,-11
1000ad18:	80bffe17 	ldw	r2,-8(r16)
1000ad1c:	28000e26 	beq	r5,zero,1000ad58 <__b2d+0xe8>
1000ad20:	1949c83a 	sub	r4,r3,r5
1000ad24:	9164983a 	sll	r18,r18,r5
1000ad28:	1106d83a 	srl	r3,r2,r4
1000ad2c:	81bffe04 	addi	r6,r16,-8
1000ad30:	948ffc34 	orhi	r18,r18,16368
1000ad34:	90c6b03a 	or	r3,r18,r3
1000ad38:	89800e2e 	bgeu	r17,r6,1000ad74 <__b2d+0x104>
1000ad3c:	81bffd17 	ldw	r6,-12(r16)
1000ad40:	1144983a 	sll	r2,r2,r5
1000ad44:	310ad83a 	srl	r5,r6,r4
1000ad48:	2884b03a 	or	r2,r5,r2
1000ad4c:	003fe806 	br	1000acf0 <__alt_data_end+0xf800acf0>
1000ad50:	10bffd44 	addi	r2,r2,-11
1000ad54:	1000041e 	bne	r2,zero,1000ad68 <__b2d+0xf8>
1000ad58:	90cffc34 	orhi	r3,r18,16368
1000ad5c:	003fe406 	br	1000acf0 <__alt_data_end+0xf800acf0>
1000ad60:	000d883a 	mov	r6,zero
1000ad64:	003fdf06 	br	1000ace4 <__alt_data_end+0xf800ace4>
1000ad68:	90a4983a 	sll	r18,r18,r2
1000ad6c:	0005883a 	mov	r2,zero
1000ad70:	003ff906 	br	1000ad58 <__alt_data_end+0xf800ad58>
1000ad74:	1144983a 	sll	r2,r2,r5
1000ad78:	003fdd06 	br	1000acf0 <__alt_data_end+0xf800acf0>

1000ad7c <__d2b>:
1000ad7c:	defff804 	addi	sp,sp,-32
1000ad80:	dc000215 	stw	r16,8(sp)
1000ad84:	3021883a 	mov	r16,r6
1000ad88:	dc400315 	stw	r17,12(sp)
1000ad8c:	8022907a 	slli	r17,r16,1
1000ad90:	dd000615 	stw	r20,24(sp)
1000ad94:	2829883a 	mov	r20,r5
1000ad98:	01400044 	movi	r5,1
1000ad9c:	dcc00515 	stw	r19,20(sp)
1000ada0:	dc800415 	stw	r18,16(sp)
1000ada4:	dfc00715 	stw	ra,28(sp)
1000ada8:	3825883a 	mov	r18,r7
1000adac:	8822d57a 	srli	r17,r17,21
1000adb0:	000a02c0 	call	1000a02c <_Balloc>
1000adb4:	1027883a 	mov	r19,r2
1000adb8:	00800434 	movhi	r2,16
1000adbc:	10bfffc4 	addi	r2,r2,-1
1000adc0:	808c703a 	and	r6,r16,r2
1000adc4:	88000126 	beq	r17,zero,1000adcc <__d2b+0x50>
1000adc8:	31800434 	orhi	r6,r6,16
1000adcc:	d9800015 	stw	r6,0(sp)
1000add0:	a0002426 	beq	r20,zero,1000ae64 <__d2b+0xe8>
1000add4:	d9000104 	addi	r4,sp,4
1000add8:	dd000115 	stw	r20,4(sp)
1000addc:	000a3b00 	call	1000a3b0 <__lo0bits>
1000ade0:	d8c00017 	ldw	r3,0(sp)
1000ade4:	10002f1e 	bne	r2,zero,1000aea4 <__d2b+0x128>
1000ade8:	d9000117 	ldw	r4,4(sp)
1000adec:	99000515 	stw	r4,20(r19)
1000adf0:	1821003a 	cmpeq	r16,r3,zero
1000adf4:	01000084 	movi	r4,2
1000adf8:	2421c83a 	sub	r16,r4,r16
1000adfc:	98c00615 	stw	r3,24(r19)
1000ae00:	9c000415 	stw	r16,16(r19)
1000ae04:	88001f1e 	bne	r17,zero,1000ae84 <__d2b+0x108>
1000ae08:	10bef384 	addi	r2,r2,-1074
1000ae0c:	90800015 	stw	r2,0(r18)
1000ae10:	00900034 	movhi	r2,16384
1000ae14:	10bfffc4 	addi	r2,r2,-1
1000ae18:	8085883a 	add	r2,r16,r2
1000ae1c:	1085883a 	add	r2,r2,r2
1000ae20:	1085883a 	add	r2,r2,r2
1000ae24:	9885883a 	add	r2,r19,r2
1000ae28:	11000517 	ldw	r4,20(r2)
1000ae2c:	8020917a 	slli	r16,r16,5
1000ae30:	000a3480 	call	1000a348 <__hi0bits>
1000ae34:	d8c00817 	ldw	r3,32(sp)
1000ae38:	8085c83a 	sub	r2,r16,r2
1000ae3c:	18800015 	stw	r2,0(r3)
1000ae40:	9805883a 	mov	r2,r19
1000ae44:	dfc00717 	ldw	ra,28(sp)
1000ae48:	dd000617 	ldw	r20,24(sp)
1000ae4c:	dcc00517 	ldw	r19,20(sp)
1000ae50:	dc800417 	ldw	r18,16(sp)
1000ae54:	dc400317 	ldw	r17,12(sp)
1000ae58:	dc000217 	ldw	r16,8(sp)
1000ae5c:	dec00804 	addi	sp,sp,32
1000ae60:	f800283a 	ret
1000ae64:	d809883a 	mov	r4,sp
1000ae68:	000a3b00 	call	1000a3b0 <__lo0bits>
1000ae6c:	d8c00017 	ldw	r3,0(sp)
1000ae70:	04000044 	movi	r16,1
1000ae74:	9c000415 	stw	r16,16(r19)
1000ae78:	98c00515 	stw	r3,20(r19)
1000ae7c:	10800804 	addi	r2,r2,32
1000ae80:	883fe126 	beq	r17,zero,1000ae08 <__alt_data_end+0xf800ae08>
1000ae84:	00c00d44 	movi	r3,53
1000ae88:	8c7ef344 	addi	r17,r17,-1075
1000ae8c:	88a3883a 	add	r17,r17,r2
1000ae90:	1885c83a 	sub	r2,r3,r2
1000ae94:	d8c00817 	ldw	r3,32(sp)
1000ae98:	94400015 	stw	r17,0(r18)
1000ae9c:	18800015 	stw	r2,0(r3)
1000aea0:	003fe706 	br	1000ae40 <__alt_data_end+0xf800ae40>
1000aea4:	01000804 	movi	r4,32
1000aea8:	2089c83a 	sub	r4,r4,r2
1000aeac:	1908983a 	sll	r4,r3,r4
1000aeb0:	d9400117 	ldw	r5,4(sp)
1000aeb4:	1886d83a 	srl	r3,r3,r2
1000aeb8:	2148b03a 	or	r4,r4,r5
1000aebc:	99000515 	stw	r4,20(r19)
1000aec0:	d8c00015 	stw	r3,0(sp)
1000aec4:	003fca06 	br	1000adf0 <__alt_data_end+0xf800adf0>

1000aec8 <__ratio>:
1000aec8:	defff904 	addi	sp,sp,-28
1000aecc:	dc400315 	stw	r17,12(sp)
1000aed0:	2823883a 	mov	r17,r5
1000aed4:	d9400104 	addi	r5,sp,4
1000aed8:	dfc00615 	stw	ra,24(sp)
1000aedc:	dcc00515 	stw	r19,20(sp)
1000aee0:	dc800415 	stw	r18,16(sp)
1000aee4:	2027883a 	mov	r19,r4
1000aee8:	dc000215 	stw	r16,8(sp)
1000aeec:	000ac700 	call	1000ac70 <__b2d>
1000aef0:	d80b883a 	mov	r5,sp
1000aef4:	8809883a 	mov	r4,r17
1000aef8:	1025883a 	mov	r18,r2
1000aefc:	1821883a 	mov	r16,r3
1000af00:	000ac700 	call	1000ac70 <__b2d>
1000af04:	8a000417 	ldw	r8,16(r17)
1000af08:	99000417 	ldw	r4,16(r19)
1000af0c:	d9400117 	ldw	r5,4(sp)
1000af10:	2209c83a 	sub	r4,r4,r8
1000af14:	2010917a 	slli	r8,r4,5
1000af18:	d9000017 	ldw	r4,0(sp)
1000af1c:	2909c83a 	sub	r4,r5,r4
1000af20:	4109883a 	add	r4,r8,r4
1000af24:	01000e0e 	bge	zero,r4,1000af60 <__ratio+0x98>
1000af28:	2008953a 	slli	r4,r4,20
1000af2c:	2421883a 	add	r16,r4,r16
1000af30:	100d883a 	mov	r6,r2
1000af34:	180f883a 	mov	r7,r3
1000af38:	9009883a 	mov	r4,r18
1000af3c:	800b883a 	mov	r5,r16
1000af40:	000ee000 	call	1000ee00 <__divdf3>
1000af44:	dfc00617 	ldw	ra,24(sp)
1000af48:	dcc00517 	ldw	r19,20(sp)
1000af4c:	dc800417 	ldw	r18,16(sp)
1000af50:	dc400317 	ldw	r17,12(sp)
1000af54:	dc000217 	ldw	r16,8(sp)
1000af58:	dec00704 	addi	sp,sp,28
1000af5c:	f800283a 	ret
1000af60:	2008953a 	slli	r4,r4,20
1000af64:	1907c83a 	sub	r3,r3,r4
1000af68:	003ff106 	br	1000af30 <__alt_data_end+0xf800af30>

1000af6c <_mprec_log10>:
1000af6c:	defffe04 	addi	sp,sp,-8
1000af70:	dc000015 	stw	r16,0(sp)
1000af74:	dfc00115 	stw	ra,4(sp)
1000af78:	008005c4 	movi	r2,23
1000af7c:	2021883a 	mov	r16,r4
1000af80:	11000d0e 	bge	r2,r4,1000afb8 <_mprec_log10+0x4c>
1000af84:	0005883a 	mov	r2,zero
1000af88:	00cffc34 	movhi	r3,16368
1000af8c:	843fffc4 	addi	r16,r16,-1
1000af90:	000d883a 	mov	r6,zero
1000af94:	01d00934 	movhi	r7,16420
1000af98:	1009883a 	mov	r4,r2
1000af9c:	180b883a 	mov	r5,r3
1000afa0:	000fa280 	call	1000fa28 <__muldf3>
1000afa4:	803ff91e 	bne	r16,zero,1000af8c <__alt_data_end+0xf800af8c>
1000afa8:	dfc00117 	ldw	ra,4(sp)
1000afac:	dc000017 	ldw	r16,0(sp)
1000afb0:	dec00204 	addi	sp,sp,8
1000afb4:	f800283a 	ret
1000afb8:	202090fa 	slli	r16,r4,3
1000afbc:	00840074 	movhi	r2,4097
1000afc0:	108f9504 	addi	r2,r2,15956
1000afc4:	1421883a 	add	r16,r2,r16
1000afc8:	80800017 	ldw	r2,0(r16)
1000afcc:	80c00117 	ldw	r3,4(r16)
1000afd0:	dfc00117 	ldw	ra,4(sp)
1000afd4:	dc000017 	ldw	r16,0(sp)
1000afd8:	dec00204 	addi	sp,sp,8
1000afdc:	f800283a 	ret

1000afe0 <__copybits>:
1000afe0:	297fffc4 	addi	r5,r5,-1
1000afe4:	280fd17a 	srai	r7,r5,5
1000afe8:	30c00417 	ldw	r3,16(r6)
1000afec:	30800504 	addi	r2,r6,20
1000aff0:	39c00044 	addi	r7,r7,1
1000aff4:	18c7883a 	add	r3,r3,r3
1000aff8:	39cf883a 	add	r7,r7,r7
1000affc:	18c7883a 	add	r3,r3,r3
1000b000:	39cf883a 	add	r7,r7,r7
1000b004:	10c7883a 	add	r3,r2,r3
1000b008:	21cf883a 	add	r7,r4,r7
1000b00c:	10c00d2e 	bgeu	r2,r3,1000b044 <__copybits+0x64>
1000b010:	200b883a 	mov	r5,r4
1000b014:	12000017 	ldw	r8,0(r2)
1000b018:	29400104 	addi	r5,r5,4
1000b01c:	10800104 	addi	r2,r2,4
1000b020:	2a3fff15 	stw	r8,-4(r5)
1000b024:	10fffb36 	bltu	r2,r3,1000b014 <__alt_data_end+0xf800b014>
1000b028:	1985c83a 	sub	r2,r3,r6
1000b02c:	10bffac4 	addi	r2,r2,-21
1000b030:	1004d0ba 	srli	r2,r2,2
1000b034:	10800044 	addi	r2,r2,1
1000b038:	1085883a 	add	r2,r2,r2
1000b03c:	1085883a 	add	r2,r2,r2
1000b040:	2089883a 	add	r4,r4,r2
1000b044:	21c0032e 	bgeu	r4,r7,1000b054 <__copybits+0x74>
1000b048:	20000015 	stw	zero,0(r4)
1000b04c:	21000104 	addi	r4,r4,4
1000b050:	21fffd36 	bltu	r4,r7,1000b048 <__alt_data_end+0xf800b048>
1000b054:	f800283a 	ret

1000b058 <__any_on>:
1000b058:	20c00417 	ldw	r3,16(r4)
1000b05c:	2805d17a 	srai	r2,r5,5
1000b060:	21000504 	addi	r4,r4,20
1000b064:	18800d0e 	bge	r3,r2,1000b09c <__any_on+0x44>
1000b068:	18c7883a 	add	r3,r3,r3
1000b06c:	18c7883a 	add	r3,r3,r3
1000b070:	20c7883a 	add	r3,r4,r3
1000b074:	20c0192e 	bgeu	r4,r3,1000b0dc <__any_on+0x84>
1000b078:	18bfff17 	ldw	r2,-4(r3)
1000b07c:	18ffff04 	addi	r3,r3,-4
1000b080:	1000041e 	bne	r2,zero,1000b094 <__any_on+0x3c>
1000b084:	20c0142e 	bgeu	r4,r3,1000b0d8 <__any_on+0x80>
1000b088:	18ffff04 	addi	r3,r3,-4
1000b08c:	19400017 	ldw	r5,0(r3)
1000b090:	283ffc26 	beq	r5,zero,1000b084 <__alt_data_end+0xf800b084>
1000b094:	00800044 	movi	r2,1
1000b098:	f800283a 	ret
1000b09c:	10c00a0e 	bge	r2,r3,1000b0c8 <__any_on+0x70>
1000b0a0:	1085883a 	add	r2,r2,r2
1000b0a4:	1085883a 	add	r2,r2,r2
1000b0a8:	294007cc 	andi	r5,r5,31
1000b0ac:	2087883a 	add	r3,r4,r2
1000b0b0:	283ff026 	beq	r5,zero,1000b074 <__alt_data_end+0xf800b074>
1000b0b4:	19800017 	ldw	r6,0(r3)
1000b0b8:	3144d83a 	srl	r2,r6,r5
1000b0bc:	114a983a 	sll	r5,r2,r5
1000b0c0:	317ff41e 	bne	r6,r5,1000b094 <__alt_data_end+0xf800b094>
1000b0c4:	003feb06 	br	1000b074 <__alt_data_end+0xf800b074>
1000b0c8:	1085883a 	add	r2,r2,r2
1000b0cc:	1085883a 	add	r2,r2,r2
1000b0d0:	2087883a 	add	r3,r4,r2
1000b0d4:	003fe706 	br	1000b074 <__alt_data_end+0xf800b074>
1000b0d8:	f800283a 	ret
1000b0dc:	0005883a 	mov	r2,zero
1000b0e0:	f800283a 	ret

1000b0e4 <_realloc_r>:
1000b0e4:	defff604 	addi	sp,sp,-40
1000b0e8:	dc800215 	stw	r18,8(sp)
1000b0ec:	dfc00915 	stw	ra,36(sp)
1000b0f0:	df000815 	stw	fp,32(sp)
1000b0f4:	ddc00715 	stw	r23,28(sp)
1000b0f8:	dd800615 	stw	r22,24(sp)
1000b0fc:	dd400515 	stw	r21,20(sp)
1000b100:	dd000415 	stw	r20,16(sp)
1000b104:	dcc00315 	stw	r19,12(sp)
1000b108:	dc400115 	stw	r17,4(sp)
1000b10c:	dc000015 	stw	r16,0(sp)
1000b110:	3025883a 	mov	r18,r6
1000b114:	2800b726 	beq	r5,zero,1000b3f4 <_realloc_r+0x310>
1000b118:	282b883a 	mov	r21,r5
1000b11c:	2029883a 	mov	r20,r4
1000b120:	00113940 	call	10011394 <__malloc_lock>
1000b124:	a8bfff17 	ldw	r2,-4(r21)
1000b128:	043fff04 	movi	r16,-4
1000b12c:	90c002c4 	addi	r3,r18,11
1000b130:	01000584 	movi	r4,22
1000b134:	acfffe04 	addi	r19,r21,-8
1000b138:	1420703a 	and	r16,r2,r16
1000b13c:	20c0332e 	bgeu	r4,r3,1000b20c <_realloc_r+0x128>
1000b140:	047ffe04 	movi	r17,-8
1000b144:	1c62703a 	and	r17,r3,r17
1000b148:	8807883a 	mov	r3,r17
1000b14c:	88005816 	blt	r17,zero,1000b2b0 <_realloc_r+0x1cc>
1000b150:	8c805736 	bltu	r17,r18,1000b2b0 <_realloc_r+0x1cc>
1000b154:	80c0300e 	bge	r16,r3,1000b218 <_realloc_r+0x134>
1000b158:	07040074 	movhi	fp,4097
1000b15c:	e7114304 	addi	fp,fp,17676
1000b160:	e1c00217 	ldw	r7,8(fp)
1000b164:	9c09883a 	add	r4,r19,r16
1000b168:	22000117 	ldw	r8,4(r4)
1000b16c:	21c06326 	beq	r4,r7,1000b2fc <_realloc_r+0x218>
1000b170:	017fff84 	movi	r5,-2
1000b174:	414a703a 	and	r5,r8,r5
1000b178:	214b883a 	add	r5,r4,r5
1000b17c:	29800117 	ldw	r6,4(r5)
1000b180:	3180004c 	andi	r6,r6,1
1000b184:	30003f26 	beq	r6,zero,1000b284 <_realloc_r+0x1a0>
1000b188:	1080004c 	andi	r2,r2,1
1000b18c:	10008326 	beq	r2,zero,1000b39c <_realloc_r+0x2b8>
1000b190:	900b883a 	mov	r5,r18
1000b194:	a009883a 	mov	r4,r20
1000b198:	00094980 	call	10009498 <_malloc_r>
1000b19c:	1025883a 	mov	r18,r2
1000b1a0:	10011e26 	beq	r2,zero,1000b61c <_realloc_r+0x538>
1000b1a4:	a93fff17 	ldw	r4,-4(r21)
1000b1a8:	10fffe04 	addi	r3,r2,-8
1000b1ac:	00bfff84 	movi	r2,-2
1000b1b0:	2084703a 	and	r2,r4,r2
1000b1b4:	9885883a 	add	r2,r19,r2
1000b1b8:	1880ee26 	beq	r3,r2,1000b574 <_realloc_r+0x490>
1000b1bc:	81bfff04 	addi	r6,r16,-4
1000b1c0:	00800904 	movi	r2,36
1000b1c4:	1180b836 	bltu	r2,r6,1000b4a8 <_realloc_r+0x3c4>
1000b1c8:	00c004c4 	movi	r3,19
1000b1cc:	19809636 	bltu	r3,r6,1000b428 <_realloc_r+0x344>
1000b1d0:	9005883a 	mov	r2,r18
1000b1d4:	a807883a 	mov	r3,r21
1000b1d8:	19000017 	ldw	r4,0(r3)
1000b1dc:	11000015 	stw	r4,0(r2)
1000b1e0:	19000117 	ldw	r4,4(r3)
1000b1e4:	11000115 	stw	r4,4(r2)
1000b1e8:	18c00217 	ldw	r3,8(r3)
1000b1ec:	10c00215 	stw	r3,8(r2)
1000b1f0:	a80b883a 	mov	r5,r21
1000b1f4:	a009883a 	mov	r4,r20
1000b1f8:	00088a00 	call	100088a0 <_free_r>
1000b1fc:	a009883a 	mov	r4,r20
1000b200:	00113b80 	call	100113b8 <__malloc_unlock>
1000b204:	9005883a 	mov	r2,r18
1000b208:	00001206 	br	1000b254 <_realloc_r+0x170>
1000b20c:	00c00404 	movi	r3,16
1000b210:	1823883a 	mov	r17,r3
1000b214:	003fce06 	br	1000b150 <__alt_data_end+0xf800b150>
1000b218:	a825883a 	mov	r18,r21
1000b21c:	8445c83a 	sub	r2,r16,r17
1000b220:	00c003c4 	movi	r3,15
1000b224:	18802636 	bltu	r3,r2,1000b2c0 <_realloc_r+0x1dc>
1000b228:	99800117 	ldw	r6,4(r19)
1000b22c:	9c07883a 	add	r3,r19,r16
1000b230:	3180004c 	andi	r6,r6,1
1000b234:	3420b03a 	or	r16,r6,r16
1000b238:	9c000115 	stw	r16,4(r19)
1000b23c:	18800117 	ldw	r2,4(r3)
1000b240:	10800054 	ori	r2,r2,1
1000b244:	18800115 	stw	r2,4(r3)
1000b248:	a009883a 	mov	r4,r20
1000b24c:	00113b80 	call	100113b8 <__malloc_unlock>
1000b250:	9005883a 	mov	r2,r18
1000b254:	dfc00917 	ldw	ra,36(sp)
1000b258:	df000817 	ldw	fp,32(sp)
1000b25c:	ddc00717 	ldw	r23,28(sp)
1000b260:	dd800617 	ldw	r22,24(sp)
1000b264:	dd400517 	ldw	r21,20(sp)
1000b268:	dd000417 	ldw	r20,16(sp)
1000b26c:	dcc00317 	ldw	r19,12(sp)
1000b270:	dc800217 	ldw	r18,8(sp)
1000b274:	dc400117 	ldw	r17,4(sp)
1000b278:	dc000017 	ldw	r16,0(sp)
1000b27c:	dec00a04 	addi	sp,sp,40
1000b280:	f800283a 	ret
1000b284:	017fff04 	movi	r5,-4
1000b288:	414a703a 	and	r5,r8,r5
1000b28c:	814d883a 	add	r6,r16,r5
1000b290:	30c01f16 	blt	r6,r3,1000b310 <_realloc_r+0x22c>
1000b294:	20800317 	ldw	r2,12(r4)
1000b298:	20c00217 	ldw	r3,8(r4)
1000b29c:	a825883a 	mov	r18,r21
1000b2a0:	3021883a 	mov	r16,r6
1000b2a4:	18800315 	stw	r2,12(r3)
1000b2a8:	10c00215 	stw	r3,8(r2)
1000b2ac:	003fdb06 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b2b0:	00800304 	movi	r2,12
1000b2b4:	a0800015 	stw	r2,0(r20)
1000b2b8:	0005883a 	mov	r2,zero
1000b2bc:	003fe506 	br	1000b254 <__alt_data_end+0xf800b254>
1000b2c0:	98c00117 	ldw	r3,4(r19)
1000b2c4:	9c4b883a 	add	r5,r19,r17
1000b2c8:	11000054 	ori	r4,r2,1
1000b2cc:	18c0004c 	andi	r3,r3,1
1000b2d0:	1c62b03a 	or	r17,r3,r17
1000b2d4:	9c400115 	stw	r17,4(r19)
1000b2d8:	29000115 	stw	r4,4(r5)
1000b2dc:	2885883a 	add	r2,r5,r2
1000b2e0:	10c00117 	ldw	r3,4(r2)
1000b2e4:	29400204 	addi	r5,r5,8
1000b2e8:	a009883a 	mov	r4,r20
1000b2ec:	18c00054 	ori	r3,r3,1
1000b2f0:	10c00115 	stw	r3,4(r2)
1000b2f4:	00088a00 	call	100088a0 <_free_r>
1000b2f8:	003fd306 	br	1000b248 <__alt_data_end+0xf800b248>
1000b2fc:	017fff04 	movi	r5,-4
1000b300:	414a703a 	and	r5,r8,r5
1000b304:	89800404 	addi	r6,r17,16
1000b308:	8151883a 	add	r8,r16,r5
1000b30c:	4180590e 	bge	r8,r6,1000b474 <_realloc_r+0x390>
1000b310:	1080004c 	andi	r2,r2,1
1000b314:	103f9e1e 	bne	r2,zero,1000b190 <__alt_data_end+0xf800b190>
1000b318:	adbffe17 	ldw	r22,-8(r21)
1000b31c:	00bfff04 	movi	r2,-4
1000b320:	9dadc83a 	sub	r22,r19,r22
1000b324:	b1800117 	ldw	r6,4(r22)
1000b328:	3084703a 	and	r2,r6,r2
1000b32c:	20002026 	beq	r4,zero,1000b3b0 <_realloc_r+0x2cc>
1000b330:	80af883a 	add	r23,r16,r2
1000b334:	b96f883a 	add	r23,r23,r5
1000b338:	21c05f26 	beq	r4,r7,1000b4b8 <_realloc_r+0x3d4>
1000b33c:	b8c01c16 	blt	r23,r3,1000b3b0 <_realloc_r+0x2cc>
1000b340:	20800317 	ldw	r2,12(r4)
1000b344:	20c00217 	ldw	r3,8(r4)
1000b348:	81bfff04 	addi	r6,r16,-4
1000b34c:	01000904 	movi	r4,36
1000b350:	18800315 	stw	r2,12(r3)
1000b354:	10c00215 	stw	r3,8(r2)
1000b358:	b0c00217 	ldw	r3,8(r22)
1000b35c:	b0800317 	ldw	r2,12(r22)
1000b360:	b4800204 	addi	r18,r22,8
1000b364:	18800315 	stw	r2,12(r3)
1000b368:	10c00215 	stw	r3,8(r2)
1000b36c:	21801b36 	bltu	r4,r6,1000b3dc <_realloc_r+0x2f8>
1000b370:	008004c4 	movi	r2,19
1000b374:	1180352e 	bgeu	r2,r6,1000b44c <_realloc_r+0x368>
1000b378:	a8800017 	ldw	r2,0(r21)
1000b37c:	b0800215 	stw	r2,8(r22)
1000b380:	a8800117 	ldw	r2,4(r21)
1000b384:	b0800315 	stw	r2,12(r22)
1000b388:	008006c4 	movi	r2,27
1000b38c:	11807f36 	bltu	r2,r6,1000b58c <_realloc_r+0x4a8>
1000b390:	b0800404 	addi	r2,r22,16
1000b394:	ad400204 	addi	r21,r21,8
1000b398:	00002d06 	br	1000b450 <_realloc_r+0x36c>
1000b39c:	adbffe17 	ldw	r22,-8(r21)
1000b3a0:	00bfff04 	movi	r2,-4
1000b3a4:	9dadc83a 	sub	r22,r19,r22
1000b3a8:	b1000117 	ldw	r4,4(r22)
1000b3ac:	2084703a 	and	r2,r4,r2
1000b3b0:	b03f7726 	beq	r22,zero,1000b190 <__alt_data_end+0xf800b190>
1000b3b4:	80af883a 	add	r23,r16,r2
1000b3b8:	b8ff7516 	blt	r23,r3,1000b190 <__alt_data_end+0xf800b190>
1000b3bc:	b0800317 	ldw	r2,12(r22)
1000b3c0:	b0c00217 	ldw	r3,8(r22)
1000b3c4:	81bfff04 	addi	r6,r16,-4
1000b3c8:	01000904 	movi	r4,36
1000b3cc:	18800315 	stw	r2,12(r3)
1000b3d0:	10c00215 	stw	r3,8(r2)
1000b3d4:	b4800204 	addi	r18,r22,8
1000b3d8:	21bfe52e 	bgeu	r4,r6,1000b370 <__alt_data_end+0xf800b370>
1000b3dc:	a80b883a 	mov	r5,r21
1000b3e0:	9009883a 	mov	r4,r18
1000b3e4:	0009ed00 	call	10009ed0 <memmove>
1000b3e8:	b821883a 	mov	r16,r23
1000b3ec:	b027883a 	mov	r19,r22
1000b3f0:	003f8a06 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b3f4:	300b883a 	mov	r5,r6
1000b3f8:	dfc00917 	ldw	ra,36(sp)
1000b3fc:	df000817 	ldw	fp,32(sp)
1000b400:	ddc00717 	ldw	r23,28(sp)
1000b404:	dd800617 	ldw	r22,24(sp)
1000b408:	dd400517 	ldw	r21,20(sp)
1000b40c:	dd000417 	ldw	r20,16(sp)
1000b410:	dcc00317 	ldw	r19,12(sp)
1000b414:	dc800217 	ldw	r18,8(sp)
1000b418:	dc400117 	ldw	r17,4(sp)
1000b41c:	dc000017 	ldw	r16,0(sp)
1000b420:	dec00a04 	addi	sp,sp,40
1000b424:	00094981 	jmpi	10009498 <_malloc_r>
1000b428:	a8c00017 	ldw	r3,0(r21)
1000b42c:	90c00015 	stw	r3,0(r18)
1000b430:	a8c00117 	ldw	r3,4(r21)
1000b434:	90c00115 	stw	r3,4(r18)
1000b438:	00c006c4 	movi	r3,27
1000b43c:	19804536 	bltu	r3,r6,1000b554 <_realloc_r+0x470>
1000b440:	90800204 	addi	r2,r18,8
1000b444:	a8c00204 	addi	r3,r21,8
1000b448:	003f6306 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b44c:	9005883a 	mov	r2,r18
1000b450:	a8c00017 	ldw	r3,0(r21)
1000b454:	b821883a 	mov	r16,r23
1000b458:	b027883a 	mov	r19,r22
1000b45c:	10c00015 	stw	r3,0(r2)
1000b460:	a8c00117 	ldw	r3,4(r21)
1000b464:	10c00115 	stw	r3,4(r2)
1000b468:	a8c00217 	ldw	r3,8(r21)
1000b46c:	10c00215 	stw	r3,8(r2)
1000b470:	003f6a06 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b474:	9c67883a 	add	r19,r19,r17
1000b478:	4445c83a 	sub	r2,r8,r17
1000b47c:	e4c00215 	stw	r19,8(fp)
1000b480:	10800054 	ori	r2,r2,1
1000b484:	98800115 	stw	r2,4(r19)
1000b488:	a8bfff17 	ldw	r2,-4(r21)
1000b48c:	a009883a 	mov	r4,r20
1000b490:	1080004c 	andi	r2,r2,1
1000b494:	1462b03a 	or	r17,r2,r17
1000b498:	ac7fff15 	stw	r17,-4(r21)
1000b49c:	00113b80 	call	100113b8 <__malloc_unlock>
1000b4a0:	a805883a 	mov	r2,r21
1000b4a4:	003f6b06 	br	1000b254 <__alt_data_end+0xf800b254>
1000b4a8:	a80b883a 	mov	r5,r21
1000b4ac:	9009883a 	mov	r4,r18
1000b4b0:	0009ed00 	call	10009ed0 <memmove>
1000b4b4:	003f4e06 	br	1000b1f0 <__alt_data_end+0xf800b1f0>
1000b4b8:	89000404 	addi	r4,r17,16
1000b4bc:	b93fbc16 	blt	r23,r4,1000b3b0 <__alt_data_end+0xf800b3b0>
1000b4c0:	b0800317 	ldw	r2,12(r22)
1000b4c4:	b0c00217 	ldw	r3,8(r22)
1000b4c8:	81bfff04 	addi	r6,r16,-4
1000b4cc:	01000904 	movi	r4,36
1000b4d0:	18800315 	stw	r2,12(r3)
1000b4d4:	10c00215 	stw	r3,8(r2)
1000b4d8:	b4800204 	addi	r18,r22,8
1000b4dc:	21804336 	bltu	r4,r6,1000b5ec <_realloc_r+0x508>
1000b4e0:	008004c4 	movi	r2,19
1000b4e4:	11803f2e 	bgeu	r2,r6,1000b5e4 <_realloc_r+0x500>
1000b4e8:	a8800017 	ldw	r2,0(r21)
1000b4ec:	b0800215 	stw	r2,8(r22)
1000b4f0:	a8800117 	ldw	r2,4(r21)
1000b4f4:	b0800315 	stw	r2,12(r22)
1000b4f8:	008006c4 	movi	r2,27
1000b4fc:	11803f36 	bltu	r2,r6,1000b5fc <_realloc_r+0x518>
1000b500:	b0800404 	addi	r2,r22,16
1000b504:	ad400204 	addi	r21,r21,8
1000b508:	a8c00017 	ldw	r3,0(r21)
1000b50c:	10c00015 	stw	r3,0(r2)
1000b510:	a8c00117 	ldw	r3,4(r21)
1000b514:	10c00115 	stw	r3,4(r2)
1000b518:	a8c00217 	ldw	r3,8(r21)
1000b51c:	10c00215 	stw	r3,8(r2)
1000b520:	b447883a 	add	r3,r22,r17
1000b524:	bc45c83a 	sub	r2,r23,r17
1000b528:	e0c00215 	stw	r3,8(fp)
1000b52c:	10800054 	ori	r2,r2,1
1000b530:	18800115 	stw	r2,4(r3)
1000b534:	b0800117 	ldw	r2,4(r22)
1000b538:	a009883a 	mov	r4,r20
1000b53c:	1080004c 	andi	r2,r2,1
1000b540:	1462b03a 	or	r17,r2,r17
1000b544:	b4400115 	stw	r17,4(r22)
1000b548:	00113b80 	call	100113b8 <__malloc_unlock>
1000b54c:	9005883a 	mov	r2,r18
1000b550:	003f4006 	br	1000b254 <__alt_data_end+0xf800b254>
1000b554:	a8c00217 	ldw	r3,8(r21)
1000b558:	90c00215 	stw	r3,8(r18)
1000b55c:	a8c00317 	ldw	r3,12(r21)
1000b560:	90c00315 	stw	r3,12(r18)
1000b564:	30801126 	beq	r6,r2,1000b5ac <_realloc_r+0x4c8>
1000b568:	90800404 	addi	r2,r18,16
1000b56c:	a8c00404 	addi	r3,r21,16
1000b570:	003f1906 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b574:	90ffff17 	ldw	r3,-4(r18)
1000b578:	00bfff04 	movi	r2,-4
1000b57c:	a825883a 	mov	r18,r21
1000b580:	1884703a 	and	r2,r3,r2
1000b584:	80a1883a 	add	r16,r16,r2
1000b588:	003f2406 	br	1000b21c <__alt_data_end+0xf800b21c>
1000b58c:	a8800217 	ldw	r2,8(r21)
1000b590:	b0800415 	stw	r2,16(r22)
1000b594:	a8800317 	ldw	r2,12(r21)
1000b598:	b0800515 	stw	r2,20(r22)
1000b59c:	31000a26 	beq	r6,r4,1000b5c8 <_realloc_r+0x4e4>
1000b5a0:	b0800604 	addi	r2,r22,24
1000b5a4:	ad400404 	addi	r21,r21,16
1000b5a8:	003fa906 	br	1000b450 <__alt_data_end+0xf800b450>
1000b5ac:	a9000417 	ldw	r4,16(r21)
1000b5b0:	90800604 	addi	r2,r18,24
1000b5b4:	a8c00604 	addi	r3,r21,24
1000b5b8:	91000415 	stw	r4,16(r18)
1000b5bc:	a9000517 	ldw	r4,20(r21)
1000b5c0:	91000515 	stw	r4,20(r18)
1000b5c4:	003f0406 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b5c8:	a8c00417 	ldw	r3,16(r21)
1000b5cc:	ad400604 	addi	r21,r21,24
1000b5d0:	b0800804 	addi	r2,r22,32
1000b5d4:	b0c00615 	stw	r3,24(r22)
1000b5d8:	a8ffff17 	ldw	r3,-4(r21)
1000b5dc:	b0c00715 	stw	r3,28(r22)
1000b5e0:	003f9b06 	br	1000b450 <__alt_data_end+0xf800b450>
1000b5e4:	9005883a 	mov	r2,r18
1000b5e8:	003fc706 	br	1000b508 <__alt_data_end+0xf800b508>
1000b5ec:	a80b883a 	mov	r5,r21
1000b5f0:	9009883a 	mov	r4,r18
1000b5f4:	0009ed00 	call	10009ed0 <memmove>
1000b5f8:	003fc906 	br	1000b520 <__alt_data_end+0xf800b520>
1000b5fc:	a8800217 	ldw	r2,8(r21)
1000b600:	b0800415 	stw	r2,16(r22)
1000b604:	a8800317 	ldw	r2,12(r21)
1000b608:	b0800515 	stw	r2,20(r22)
1000b60c:	31000726 	beq	r6,r4,1000b62c <_realloc_r+0x548>
1000b610:	b0800604 	addi	r2,r22,24
1000b614:	ad400404 	addi	r21,r21,16
1000b618:	003fbb06 	br	1000b508 <__alt_data_end+0xf800b508>
1000b61c:	a009883a 	mov	r4,r20
1000b620:	00113b80 	call	100113b8 <__malloc_unlock>
1000b624:	0005883a 	mov	r2,zero
1000b628:	003f0a06 	br	1000b254 <__alt_data_end+0xf800b254>
1000b62c:	a8c00417 	ldw	r3,16(r21)
1000b630:	ad400604 	addi	r21,r21,24
1000b634:	b0800804 	addi	r2,r22,32
1000b638:	b0c00615 	stw	r3,24(r22)
1000b63c:	a8ffff17 	ldw	r3,-4(r21)
1000b640:	b0c00715 	stw	r3,28(r22)
1000b644:	003fb006 	br	1000b508 <__alt_data_end+0xf800b508>

1000b648 <__fpclassifyd>:
1000b648:	00a00034 	movhi	r2,32768
1000b64c:	10bfffc4 	addi	r2,r2,-1
1000b650:	2884703a 	and	r2,r5,r2
1000b654:	10000726 	beq	r2,zero,1000b674 <__fpclassifyd+0x2c>
1000b658:	00fffc34 	movhi	r3,65520
1000b65c:	019ff834 	movhi	r6,32736
1000b660:	28c7883a 	add	r3,r5,r3
1000b664:	31bfffc4 	addi	r6,r6,-1
1000b668:	30c00536 	bltu	r6,r3,1000b680 <__fpclassifyd+0x38>
1000b66c:	00800104 	movi	r2,4
1000b670:	f800283a 	ret
1000b674:	2000021e 	bne	r4,zero,1000b680 <__fpclassifyd+0x38>
1000b678:	00800084 	movi	r2,2
1000b67c:	f800283a 	ret
1000b680:	00dffc34 	movhi	r3,32752
1000b684:	019ff834 	movhi	r6,32736
1000b688:	28cb883a 	add	r5,r5,r3
1000b68c:	31bfffc4 	addi	r6,r6,-1
1000b690:	317ff62e 	bgeu	r6,r5,1000b66c <__alt_data_end+0xf800b66c>
1000b694:	01400434 	movhi	r5,16
1000b698:	297fffc4 	addi	r5,r5,-1
1000b69c:	28800236 	bltu	r5,r2,1000b6a8 <__fpclassifyd+0x60>
1000b6a0:	008000c4 	movi	r2,3
1000b6a4:	f800283a 	ret
1000b6a8:	10c00226 	beq	r2,r3,1000b6b4 <__fpclassifyd+0x6c>
1000b6ac:	0005883a 	mov	r2,zero
1000b6b0:	f800283a 	ret
1000b6b4:	2005003a 	cmpeq	r2,r4,zero
1000b6b8:	f800283a 	ret

1000b6bc <_sbrk_r>:
1000b6bc:	defffd04 	addi	sp,sp,-12
1000b6c0:	dc000015 	stw	r16,0(sp)
1000b6c4:	04040074 	movhi	r16,4097
1000b6c8:	dc400115 	stw	r17,4(sp)
1000b6cc:	841d9b04 	addi	r16,r16,30316
1000b6d0:	2023883a 	mov	r17,r4
1000b6d4:	2809883a 	mov	r4,r5
1000b6d8:	dfc00215 	stw	ra,8(sp)
1000b6dc:	80000015 	stw	zero,0(r16)
1000b6e0:	00115a00 	call	100115a0 <sbrk>
1000b6e4:	00ffffc4 	movi	r3,-1
1000b6e8:	10c00526 	beq	r2,r3,1000b700 <_sbrk_r+0x44>
1000b6ec:	dfc00217 	ldw	ra,8(sp)
1000b6f0:	dc400117 	ldw	r17,4(sp)
1000b6f4:	dc000017 	ldw	r16,0(sp)
1000b6f8:	dec00304 	addi	sp,sp,12
1000b6fc:	f800283a 	ret
1000b700:	80c00017 	ldw	r3,0(r16)
1000b704:	183ff926 	beq	r3,zero,1000b6ec <__alt_data_end+0xf800b6ec>
1000b708:	88c00015 	stw	r3,0(r17)
1000b70c:	003ff706 	br	1000b6ec <__alt_data_end+0xf800b6ec>

1000b710 <__sread>:
1000b710:	defffe04 	addi	sp,sp,-8
1000b714:	dc000015 	stw	r16,0(sp)
1000b718:	2821883a 	mov	r16,r5
1000b71c:	2940038f 	ldh	r5,14(r5)
1000b720:	dfc00115 	stw	ra,4(sp)
1000b724:	000d5cc0 	call	1000d5cc <_read_r>
1000b728:	10000716 	blt	r2,zero,1000b748 <__sread+0x38>
1000b72c:	80c01417 	ldw	r3,80(r16)
1000b730:	1887883a 	add	r3,r3,r2
1000b734:	80c01415 	stw	r3,80(r16)
1000b738:	dfc00117 	ldw	ra,4(sp)
1000b73c:	dc000017 	ldw	r16,0(sp)
1000b740:	dec00204 	addi	sp,sp,8
1000b744:	f800283a 	ret
1000b748:	80c0030b 	ldhu	r3,12(r16)
1000b74c:	18fbffcc 	andi	r3,r3,61439
1000b750:	80c0030d 	sth	r3,12(r16)
1000b754:	dfc00117 	ldw	ra,4(sp)
1000b758:	dc000017 	ldw	r16,0(sp)
1000b75c:	dec00204 	addi	sp,sp,8
1000b760:	f800283a 	ret

1000b764 <__seofread>:
1000b764:	0005883a 	mov	r2,zero
1000b768:	f800283a 	ret

1000b76c <__swrite>:
1000b76c:	2880030b 	ldhu	r2,12(r5)
1000b770:	defffb04 	addi	sp,sp,-20
1000b774:	dcc00315 	stw	r19,12(sp)
1000b778:	dc800215 	stw	r18,8(sp)
1000b77c:	dc400115 	stw	r17,4(sp)
1000b780:	dc000015 	stw	r16,0(sp)
1000b784:	dfc00415 	stw	ra,16(sp)
1000b788:	10c0400c 	andi	r3,r2,256
1000b78c:	2821883a 	mov	r16,r5
1000b790:	2023883a 	mov	r17,r4
1000b794:	3025883a 	mov	r18,r6
1000b798:	3827883a 	mov	r19,r7
1000b79c:	18000526 	beq	r3,zero,1000b7b4 <__swrite+0x48>
1000b7a0:	2940038f 	ldh	r5,14(r5)
1000b7a4:	01c00084 	movi	r7,2
1000b7a8:	000d883a 	mov	r6,zero
1000b7ac:	000d56c0 	call	1000d56c <_lseek_r>
1000b7b0:	8080030b 	ldhu	r2,12(r16)
1000b7b4:	8140038f 	ldh	r5,14(r16)
1000b7b8:	10bbffcc 	andi	r2,r2,61439
1000b7bc:	980f883a 	mov	r7,r19
1000b7c0:	900d883a 	mov	r6,r18
1000b7c4:	8809883a 	mov	r4,r17
1000b7c8:	8080030d 	sth	r2,12(r16)
1000b7cc:	dfc00417 	ldw	ra,16(sp)
1000b7d0:	dcc00317 	ldw	r19,12(sp)
1000b7d4:	dc800217 	ldw	r18,8(sp)
1000b7d8:	dc400117 	ldw	r17,4(sp)
1000b7dc:	dc000017 	ldw	r16,0(sp)
1000b7e0:	dec00504 	addi	sp,sp,20
1000b7e4:	000d0201 	jmpi	1000d020 <_write_r>

1000b7e8 <__sseek>:
1000b7e8:	defffe04 	addi	sp,sp,-8
1000b7ec:	dc000015 	stw	r16,0(sp)
1000b7f0:	2821883a 	mov	r16,r5
1000b7f4:	2940038f 	ldh	r5,14(r5)
1000b7f8:	dfc00115 	stw	ra,4(sp)
1000b7fc:	000d56c0 	call	1000d56c <_lseek_r>
1000b800:	00ffffc4 	movi	r3,-1
1000b804:	10c00826 	beq	r2,r3,1000b828 <__sseek+0x40>
1000b808:	80c0030b 	ldhu	r3,12(r16)
1000b80c:	80801415 	stw	r2,80(r16)
1000b810:	18c40014 	ori	r3,r3,4096
1000b814:	80c0030d 	sth	r3,12(r16)
1000b818:	dfc00117 	ldw	ra,4(sp)
1000b81c:	dc000017 	ldw	r16,0(sp)
1000b820:	dec00204 	addi	sp,sp,8
1000b824:	f800283a 	ret
1000b828:	80c0030b 	ldhu	r3,12(r16)
1000b82c:	18fbffcc 	andi	r3,r3,61439
1000b830:	80c0030d 	sth	r3,12(r16)
1000b834:	dfc00117 	ldw	ra,4(sp)
1000b838:	dc000017 	ldw	r16,0(sp)
1000b83c:	dec00204 	addi	sp,sp,8
1000b840:	f800283a 	ret

1000b844 <__sclose>:
1000b844:	2940038f 	ldh	r5,14(r5)
1000b848:	000d0801 	jmpi	1000d080 <_close_r>

1000b84c <strcmp>:
1000b84c:	2144b03a 	or	r2,r4,r5
1000b850:	108000cc 	andi	r2,r2,3
1000b854:	1000171e 	bne	r2,zero,1000b8b4 <strcmp+0x68>
1000b858:	20800017 	ldw	r2,0(r4)
1000b85c:	28c00017 	ldw	r3,0(r5)
1000b860:	10c0141e 	bne	r2,r3,1000b8b4 <strcmp+0x68>
1000b864:	027fbff4 	movhi	r9,65279
1000b868:	4a7fbfc4 	addi	r9,r9,-257
1000b86c:	0086303a 	nor	r3,zero,r2
1000b870:	02202074 	movhi	r8,32897
1000b874:	1245883a 	add	r2,r2,r9
1000b878:	42202004 	addi	r8,r8,-32640
1000b87c:	10c4703a 	and	r2,r2,r3
1000b880:	1204703a 	and	r2,r2,r8
1000b884:	10000226 	beq	r2,zero,1000b890 <strcmp+0x44>
1000b888:	00002306 	br	1000b918 <strcmp+0xcc>
1000b88c:	1000221e 	bne	r2,zero,1000b918 <strcmp+0xcc>
1000b890:	21000104 	addi	r4,r4,4
1000b894:	20c00017 	ldw	r3,0(r4)
1000b898:	29400104 	addi	r5,r5,4
1000b89c:	29800017 	ldw	r6,0(r5)
1000b8a0:	1a4f883a 	add	r7,r3,r9
1000b8a4:	00c4303a 	nor	r2,zero,r3
1000b8a8:	3884703a 	and	r2,r7,r2
1000b8ac:	1204703a 	and	r2,r2,r8
1000b8b0:	19bff626 	beq	r3,r6,1000b88c <__alt_data_end+0xf800b88c>
1000b8b4:	20800003 	ldbu	r2,0(r4)
1000b8b8:	10c03fcc 	andi	r3,r2,255
1000b8bc:	18c0201c 	xori	r3,r3,128
1000b8c0:	18ffe004 	addi	r3,r3,-128
1000b8c4:	18000c26 	beq	r3,zero,1000b8f8 <strcmp+0xac>
1000b8c8:	29800007 	ldb	r6,0(r5)
1000b8cc:	19800326 	beq	r3,r6,1000b8dc <strcmp+0x90>
1000b8d0:	00001306 	br	1000b920 <strcmp+0xd4>
1000b8d4:	29800007 	ldb	r6,0(r5)
1000b8d8:	11800b1e 	bne	r2,r6,1000b908 <strcmp+0xbc>
1000b8dc:	21000044 	addi	r4,r4,1
1000b8e0:	20c00003 	ldbu	r3,0(r4)
1000b8e4:	29400044 	addi	r5,r5,1
1000b8e8:	18803fcc 	andi	r2,r3,255
1000b8ec:	1080201c 	xori	r2,r2,128
1000b8f0:	10bfe004 	addi	r2,r2,-128
1000b8f4:	103ff71e 	bne	r2,zero,1000b8d4 <__alt_data_end+0xf800b8d4>
1000b8f8:	0007883a 	mov	r3,zero
1000b8fc:	28800003 	ldbu	r2,0(r5)
1000b900:	1885c83a 	sub	r2,r3,r2
1000b904:	f800283a 	ret
1000b908:	28800003 	ldbu	r2,0(r5)
1000b90c:	18c03fcc 	andi	r3,r3,255
1000b910:	1885c83a 	sub	r2,r3,r2
1000b914:	f800283a 	ret
1000b918:	0005883a 	mov	r2,zero
1000b91c:	f800283a 	ret
1000b920:	10c03fcc 	andi	r3,r2,255
1000b924:	003ff506 	br	1000b8fc <__alt_data_end+0xf800b8fc>

1000b928 <__sprint_r.part.0>:
1000b928:	28801917 	ldw	r2,100(r5)
1000b92c:	defff604 	addi	sp,sp,-40
1000b930:	dd400515 	stw	r21,20(sp)
1000b934:	dfc00915 	stw	ra,36(sp)
1000b938:	df000815 	stw	fp,32(sp)
1000b93c:	ddc00715 	stw	r23,28(sp)
1000b940:	dd800615 	stw	r22,24(sp)
1000b944:	dd000415 	stw	r20,16(sp)
1000b948:	dcc00315 	stw	r19,12(sp)
1000b94c:	dc800215 	stw	r18,8(sp)
1000b950:	dc400115 	stw	r17,4(sp)
1000b954:	dc000015 	stw	r16,0(sp)
1000b958:	1088000c 	andi	r2,r2,8192
1000b95c:	302b883a 	mov	r21,r6
1000b960:	10002e26 	beq	r2,zero,1000ba1c <__sprint_r.part.0+0xf4>
1000b964:	30800217 	ldw	r2,8(r6)
1000b968:	35800017 	ldw	r22,0(r6)
1000b96c:	10002926 	beq	r2,zero,1000ba14 <__sprint_r.part.0+0xec>
1000b970:	2827883a 	mov	r19,r5
1000b974:	2029883a 	mov	r20,r4
1000b978:	b5c00104 	addi	r23,r22,4
1000b97c:	04bfffc4 	movi	r18,-1
1000b980:	bc400017 	ldw	r17,0(r23)
1000b984:	b4000017 	ldw	r16,0(r22)
1000b988:	0039883a 	mov	fp,zero
1000b98c:	8822d0ba 	srli	r17,r17,2
1000b990:	8800031e 	bne	r17,zero,1000b9a0 <__sprint_r.part.0+0x78>
1000b994:	00001806 	br	1000b9f8 <__sprint_r.part.0+0xd0>
1000b998:	84000104 	addi	r16,r16,4
1000b99c:	8f001526 	beq	r17,fp,1000b9f4 <__sprint_r.part.0+0xcc>
1000b9a0:	81400017 	ldw	r5,0(r16)
1000b9a4:	980d883a 	mov	r6,r19
1000b9a8:	a009883a 	mov	r4,r20
1000b9ac:	000d4180 	call	1000d418 <_fputwc_r>
1000b9b0:	e7000044 	addi	fp,fp,1
1000b9b4:	14bff81e 	bne	r2,r18,1000b998 <__alt_data_end+0xf800b998>
1000b9b8:	9005883a 	mov	r2,r18
1000b9bc:	a8000215 	stw	zero,8(r21)
1000b9c0:	a8000115 	stw	zero,4(r21)
1000b9c4:	dfc00917 	ldw	ra,36(sp)
1000b9c8:	df000817 	ldw	fp,32(sp)
1000b9cc:	ddc00717 	ldw	r23,28(sp)
1000b9d0:	dd800617 	ldw	r22,24(sp)
1000b9d4:	dd400517 	ldw	r21,20(sp)
1000b9d8:	dd000417 	ldw	r20,16(sp)
1000b9dc:	dcc00317 	ldw	r19,12(sp)
1000b9e0:	dc800217 	ldw	r18,8(sp)
1000b9e4:	dc400117 	ldw	r17,4(sp)
1000b9e8:	dc000017 	ldw	r16,0(sp)
1000b9ec:	dec00a04 	addi	sp,sp,40
1000b9f0:	f800283a 	ret
1000b9f4:	a8800217 	ldw	r2,8(r21)
1000b9f8:	8c63883a 	add	r17,r17,r17
1000b9fc:	8c63883a 	add	r17,r17,r17
1000ba00:	1445c83a 	sub	r2,r2,r17
1000ba04:	a8800215 	stw	r2,8(r21)
1000ba08:	b5800204 	addi	r22,r22,8
1000ba0c:	bdc00204 	addi	r23,r23,8
1000ba10:	103fdb1e 	bne	r2,zero,1000b980 <__alt_data_end+0xf800b980>
1000ba14:	0005883a 	mov	r2,zero
1000ba18:	003fe806 	br	1000b9bc <__alt_data_end+0xf800b9bc>
1000ba1c:	0008bb00 	call	10008bb0 <__sfvwrite_r>
1000ba20:	003fe606 	br	1000b9bc <__alt_data_end+0xf800b9bc>

1000ba24 <__sprint_r>:
1000ba24:	30c00217 	ldw	r3,8(r6)
1000ba28:	18000126 	beq	r3,zero,1000ba30 <__sprint_r+0xc>
1000ba2c:	000b9281 	jmpi	1000b928 <__sprint_r.part.0>
1000ba30:	30000115 	stw	zero,4(r6)
1000ba34:	0005883a 	mov	r2,zero
1000ba38:	f800283a 	ret

1000ba3c <___vfiprintf_internal_r>:
1000ba3c:	deffca04 	addi	sp,sp,-216
1000ba40:	dd403115 	stw	r21,196(sp)
1000ba44:	dfc03515 	stw	ra,212(sp)
1000ba48:	df003415 	stw	fp,208(sp)
1000ba4c:	ddc03315 	stw	r23,204(sp)
1000ba50:	dd803215 	stw	r22,200(sp)
1000ba54:	dd003015 	stw	r20,192(sp)
1000ba58:	dcc02f15 	stw	r19,188(sp)
1000ba5c:	dc802e15 	stw	r18,184(sp)
1000ba60:	dc402d15 	stw	r17,180(sp)
1000ba64:	dc002c15 	stw	r16,176(sp)
1000ba68:	d9002115 	stw	r4,132(sp)
1000ba6c:	d9402015 	stw	r5,128(sp)
1000ba70:	d9c02215 	stw	r7,136(sp)
1000ba74:	302b883a 	mov	r21,r6
1000ba78:	20000226 	beq	r4,zero,1000ba84 <___vfiprintf_internal_r+0x48>
1000ba7c:	20800e17 	ldw	r2,56(r4)
1000ba80:	1000cf26 	beq	r2,zero,1000bdc0 <___vfiprintf_internal_r+0x384>
1000ba84:	d8c02017 	ldw	r3,128(sp)
1000ba88:	1880030b 	ldhu	r2,12(r3)
1000ba8c:	10c8000c 	andi	r3,r2,8192
1000ba90:	1800071e 	bne	r3,zero,1000bab0 <___vfiprintf_internal_r+0x74>
1000ba94:	d9402017 	ldw	r5,128(sp)
1000ba98:	00f7ffc4 	movi	r3,-8193
1000ba9c:	10880014 	ori	r2,r2,8192
1000baa0:	29001917 	ldw	r4,100(r5)
1000baa4:	2880030d 	sth	r2,12(r5)
1000baa8:	20c6703a 	and	r3,r4,r3
1000baac:	28c01915 	stw	r3,100(r5)
1000bab0:	10c0020c 	andi	r3,r2,8
1000bab4:	1800a526 	beq	r3,zero,1000bd4c <___vfiprintf_internal_r+0x310>
1000bab8:	d9002017 	ldw	r4,128(sp)
1000babc:	20c00417 	ldw	r3,16(r4)
1000bac0:	1800a226 	beq	r3,zero,1000bd4c <___vfiprintf_internal_r+0x310>
1000bac4:	1080068c 	andi	r2,r2,26
1000bac8:	00c00284 	movi	r3,10
1000bacc:	10c0a826 	beq	r2,r3,1000bd70 <___vfiprintf_internal_r+0x334>
1000bad0:	d9001a04 	addi	r4,sp,104
1000bad4:	d94019c4 	addi	r5,sp,103
1000bad8:	04840074 	movhi	r18,4097
1000badc:	2145c83a 	sub	r2,r4,r5
1000bae0:	948fc704 	addi	r18,r18,16156
1000bae4:	d9001e15 	stw	r4,120(sp)
1000bae8:	d9401f15 	stw	r5,124(sp)
1000baec:	dec01a15 	stw	sp,104(sp)
1000baf0:	d8001c15 	stw	zero,112(sp)
1000baf4:	d8001b15 	stw	zero,108(sp)
1000baf8:	d811883a 	mov	r8,sp
1000bafc:	d8002615 	stw	zero,152(sp)
1000bb00:	d8002415 	stw	zero,144(sp)
1000bb04:	d8802815 	stw	r2,160(sp)
1000bb08:	a82d883a 	mov	r22,r21
1000bb0c:	b0800007 	ldb	r2,0(r22)
1000bb10:	10040d26 	beq	r2,zero,1000cb48 <___vfiprintf_internal_r+0x110c>
1000bb14:	00c00944 	movi	r3,37
1000bb18:	b029883a 	mov	r20,r22
1000bb1c:	10c0021e 	bne	r2,r3,1000bb28 <___vfiprintf_internal_r+0xec>
1000bb20:	00001606 	br	1000bb7c <___vfiprintf_internal_r+0x140>
1000bb24:	10c00326 	beq	r2,r3,1000bb34 <___vfiprintf_internal_r+0xf8>
1000bb28:	a5000044 	addi	r20,r20,1
1000bb2c:	a0800007 	ldb	r2,0(r20)
1000bb30:	103ffc1e 	bne	r2,zero,1000bb24 <__alt_data_end+0xf800bb24>
1000bb34:	a5a1c83a 	sub	r16,r20,r22
1000bb38:	80001026 	beq	r16,zero,1000bb7c <___vfiprintf_internal_r+0x140>
1000bb3c:	d8c01c17 	ldw	r3,112(sp)
1000bb40:	d8801b17 	ldw	r2,108(sp)
1000bb44:	45800015 	stw	r22,0(r8)
1000bb48:	80c7883a 	add	r3,r16,r3
1000bb4c:	10800044 	addi	r2,r2,1
1000bb50:	44000115 	stw	r16,4(r8)
1000bb54:	d8c01c15 	stw	r3,112(sp)
1000bb58:	d8801b15 	stw	r2,108(sp)
1000bb5c:	010001c4 	movi	r4,7
1000bb60:	2080750e 	bge	r4,r2,1000bd38 <___vfiprintf_internal_r+0x2fc>
1000bb64:	1803951e 	bne	r3,zero,1000c9bc <___vfiprintf_internal_r+0xf80>
1000bb68:	d8c02417 	ldw	r3,144(sp)
1000bb6c:	d8001b15 	stw	zero,108(sp)
1000bb70:	d811883a 	mov	r8,sp
1000bb74:	1c07883a 	add	r3,r3,r16
1000bb78:	d8c02415 	stw	r3,144(sp)
1000bb7c:	a0800007 	ldb	r2,0(r20)
1000bb80:	1002e026 	beq	r2,zero,1000c704 <___vfiprintf_internal_r+0xcc8>
1000bb84:	a5800044 	addi	r22,r20,1
1000bb88:	a0c00047 	ldb	r3,1(r20)
1000bb8c:	d8001d85 	stb	zero,118(sp)
1000bb90:	0027883a 	mov	r19,zero
1000bb94:	d8002305 	stb	zero,140(sp)
1000bb98:	043fffc4 	movi	r16,-1
1000bb9c:	d8002515 	stw	zero,148(sp)
1000bba0:	0023883a 	mov	r17,zero
1000bba4:	05001604 	movi	r20,88
1000bba8:	05400244 	movi	r21,9
1000bbac:	402f883a 	mov	r23,r8
1000bbb0:	b5800044 	addi	r22,r22,1
1000bbb4:	18bff804 	addi	r2,r3,-32
1000bbb8:	a0827736 	bltu	r20,r2,1000c598 <___vfiprintf_internal_r+0xb5c>
1000bbbc:	100490ba 	slli	r2,r2,2
1000bbc0:	01040074 	movhi	r4,4097
1000bbc4:	212ef504 	addi	r4,r4,-17452
1000bbc8:	1105883a 	add	r2,r2,r4
1000bbcc:	10800017 	ldw	r2,0(r2)
1000bbd0:	1000683a 	jmp	r2
1000bbd4:	1000c298 	cmpnei	zero,r2,778
1000bbd8:	1000c598 	cmpnei	zero,r2,790
1000bbdc:	1000c598 	cmpnei	zero,r2,790
1000bbe0:	1000c2b4 	orhi	zero,r2,778
1000bbe4:	1000c598 	cmpnei	zero,r2,790
1000bbe8:	1000c598 	cmpnei	zero,r2,790
1000bbec:	1000c598 	cmpnei	zero,r2,790
1000bbf0:	1000c598 	cmpnei	zero,r2,790
1000bbf4:	1000c598 	cmpnei	zero,r2,790
1000bbf8:	1000c598 	cmpnei	zero,r2,790
1000bbfc:	1000c4bc 	xorhi	zero,r2,786
1000bc00:	1000c4e0 	cmpeqi	zero,r2,787
1000bc04:	1000c598 	cmpnei	zero,r2,790
1000bc08:	1000bdd8 	cmpnei	zero,r2,759
1000bc0c:	1000c4f4 	orhi	zero,r2,787
1000bc10:	1000c598 	cmpnei	zero,r2,790
1000bc14:	1000c2c0 	call	11000c2c <_gp+0xfe3110>
1000bc18:	1000c2cc 	andi	zero,r2,779
1000bc1c:	1000c2cc 	andi	zero,r2,779
1000bc20:	1000c2cc 	andi	zero,r2,779
1000bc24:	1000c2cc 	andi	zero,r2,779
1000bc28:	1000c2cc 	andi	zero,r2,779
1000bc2c:	1000c2cc 	andi	zero,r2,779
1000bc30:	1000c2cc 	andi	zero,r2,779
1000bc34:	1000c2cc 	andi	zero,r2,779
1000bc38:	1000c2cc 	andi	zero,r2,779
1000bc3c:	1000c598 	cmpnei	zero,r2,790
1000bc40:	1000c598 	cmpnei	zero,r2,790
1000bc44:	1000c598 	cmpnei	zero,r2,790
1000bc48:	1000c598 	cmpnei	zero,r2,790
1000bc4c:	1000c598 	cmpnei	zero,r2,790
1000bc50:	1000c598 	cmpnei	zero,r2,790
1000bc54:	1000c598 	cmpnei	zero,r2,790
1000bc58:	1000c598 	cmpnei	zero,r2,790
1000bc5c:	1000c598 	cmpnei	zero,r2,790
1000bc60:	1000c598 	cmpnei	zero,r2,790
1000bc64:	1000c30c 	andi	zero,r2,780
1000bc68:	1000c598 	cmpnei	zero,r2,790
1000bc6c:	1000c598 	cmpnei	zero,r2,790
1000bc70:	1000c598 	cmpnei	zero,r2,790
1000bc74:	1000c598 	cmpnei	zero,r2,790
1000bc78:	1000c598 	cmpnei	zero,r2,790
1000bc7c:	1000c598 	cmpnei	zero,r2,790
1000bc80:	1000c598 	cmpnei	zero,r2,790
1000bc84:	1000c598 	cmpnei	zero,r2,790
1000bc88:	1000c598 	cmpnei	zero,r2,790
1000bc8c:	1000c598 	cmpnei	zero,r2,790
1000bc90:	1000c348 	cmpgei	zero,r2,781
1000bc94:	1000c598 	cmpnei	zero,r2,790
1000bc98:	1000c598 	cmpnei	zero,r2,790
1000bc9c:	1000c598 	cmpnei	zero,r2,790
1000bca0:	1000c598 	cmpnei	zero,r2,790
1000bca4:	1000c598 	cmpnei	zero,r2,790
1000bca8:	1000c3a4 	muli	zero,r2,782
1000bcac:	1000c598 	cmpnei	zero,r2,790
1000bcb0:	1000c598 	cmpnei	zero,r2,790
1000bcb4:	1000c418 	cmpnei	zero,r2,784
1000bcb8:	1000c598 	cmpnei	zero,r2,790
1000bcbc:	1000c598 	cmpnei	zero,r2,790
1000bcc0:	1000c598 	cmpnei	zero,r2,790
1000bcc4:	1000c598 	cmpnei	zero,r2,790
1000bcc8:	1000c598 	cmpnei	zero,r2,790
1000bccc:	1000c598 	cmpnei	zero,r2,790
1000bcd0:	1000c598 	cmpnei	zero,r2,790
1000bcd4:	1000c598 	cmpnei	zero,r2,790
1000bcd8:	1000c598 	cmpnei	zero,r2,790
1000bcdc:	1000c598 	cmpnei	zero,r2,790
1000bce0:	1000c1c0 	call	11000c1c <_gp+0xfe3100>
1000bce4:	1000c1f0 	cmpltui	zero,r2,775
1000bce8:	1000c598 	cmpnei	zero,r2,790
1000bcec:	1000c598 	cmpnei	zero,r2,790
1000bcf0:	1000c598 	cmpnei	zero,r2,790
1000bcf4:	1000c540 	call	11000c54 <_gp+0xfe3138>
1000bcf8:	1000c1f0 	cmpltui	zero,r2,775
1000bcfc:	1000c598 	cmpnei	zero,r2,790
1000bd00:	1000c598 	cmpnei	zero,r2,790
1000bd04:	1000c098 	cmpnei	zero,r2,770
1000bd08:	1000c598 	cmpnei	zero,r2,790
1000bd0c:	1000c0ac 	andhi	zero,r2,770
1000bd10:	1000c0e4 	muli	zero,r2,771
1000bd14:	1000bde4 	muli	zero,r2,759
1000bd18:	1000c08c 	andi	zero,r2,770
1000bd1c:	1000c598 	cmpnei	zero,r2,790
1000bd20:	1000c458 	cmpnei	zero,r2,785
1000bd24:	1000c598 	cmpnei	zero,r2,790
1000bd28:	1000c4a4 	muli	zero,r2,786
1000bd2c:	1000c598 	cmpnei	zero,r2,790
1000bd30:	1000c598 	cmpnei	zero,r2,790
1000bd34:	1000c168 	cmpgeui	zero,r2,773
1000bd38:	42000204 	addi	r8,r8,8
1000bd3c:	d8c02417 	ldw	r3,144(sp)
1000bd40:	1c07883a 	add	r3,r3,r16
1000bd44:	d8c02415 	stw	r3,144(sp)
1000bd48:	003f8c06 	br	1000bb7c <__alt_data_end+0xf800bb7c>
1000bd4c:	d9402017 	ldw	r5,128(sp)
1000bd50:	d9002117 	ldw	r4,132(sp)
1000bd54:	00067200 	call	10006720 <__swsetup_r>
1000bd58:	1003c11e 	bne	r2,zero,1000cc60 <___vfiprintf_internal_r+0x1224>
1000bd5c:	d9402017 	ldw	r5,128(sp)
1000bd60:	00c00284 	movi	r3,10
1000bd64:	2880030b 	ldhu	r2,12(r5)
1000bd68:	1080068c 	andi	r2,r2,26
1000bd6c:	10ff581e 	bne	r2,r3,1000bad0 <__alt_data_end+0xf800bad0>
1000bd70:	d8c02017 	ldw	r3,128(sp)
1000bd74:	1880038f 	ldh	r2,14(r3)
1000bd78:	103f5516 	blt	r2,zero,1000bad0 <__alt_data_end+0xf800bad0>
1000bd7c:	d9c02217 	ldw	r7,136(sp)
1000bd80:	d9002117 	ldw	r4,132(sp)
1000bd84:	a80d883a 	mov	r6,r21
1000bd88:	180b883a 	mov	r5,r3
1000bd8c:	000cf640 	call	1000cf64 <__sbprintf>
1000bd90:	dfc03517 	ldw	ra,212(sp)
1000bd94:	df003417 	ldw	fp,208(sp)
1000bd98:	ddc03317 	ldw	r23,204(sp)
1000bd9c:	dd803217 	ldw	r22,200(sp)
1000bda0:	dd403117 	ldw	r21,196(sp)
1000bda4:	dd003017 	ldw	r20,192(sp)
1000bda8:	dcc02f17 	ldw	r19,188(sp)
1000bdac:	dc802e17 	ldw	r18,184(sp)
1000bdb0:	dc402d17 	ldw	r17,180(sp)
1000bdb4:	dc002c17 	ldw	r16,176(sp)
1000bdb8:	dec03604 	addi	sp,sp,216
1000bdbc:	f800283a 	ret
1000bdc0:	000872c0 	call	1000872c <__sinit>
1000bdc4:	003f2f06 	br	1000ba84 <__alt_data_end+0xf800ba84>
1000bdc8:	d8c02517 	ldw	r3,148(sp)
1000bdcc:	d8802215 	stw	r2,136(sp)
1000bdd0:	00c7c83a 	sub	r3,zero,r3
1000bdd4:	d8c02515 	stw	r3,148(sp)
1000bdd8:	8c400114 	ori	r17,r17,4
1000bddc:	b0c00007 	ldb	r3,0(r22)
1000bde0:	003f7306 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000bde4:	00800c04 	movi	r2,48
1000bde8:	d9402217 	ldw	r5,136(sp)
1000bdec:	d8801d05 	stb	r2,116(sp)
1000bdf0:	00801e04 	movi	r2,120
1000bdf4:	d8801d45 	stb	r2,117(sp)
1000bdf8:	d8001d85 	stb	zero,118(sp)
1000bdfc:	b811883a 	mov	r8,r23
1000be00:	28c00104 	addi	r3,r5,4
1000be04:	2cc00017 	ldw	r19,0(r5)
1000be08:	0029883a 	mov	r20,zero
1000be0c:	88800094 	ori	r2,r17,2
1000be10:	80032516 	blt	r16,zero,1000caa8 <___vfiprintf_internal_r+0x106c>
1000be14:	00bfdfc4 	movi	r2,-129
1000be18:	88a2703a 	and	r17,r17,r2
1000be1c:	d8c02215 	stw	r3,136(sp)
1000be20:	8c400094 	ori	r17,r17,2
1000be24:	98032a1e 	bne	r19,zero,1000cad0 <___vfiprintf_internal_r+0x1094>
1000be28:	00840074 	movhi	r2,4097
1000be2c:	108f6604 	addi	r2,r2,15768
1000be30:	d8802615 	stw	r2,152(sp)
1000be34:	002b883a 	mov	r21,zero
1000be38:	8001741e 	bne	r16,zero,1000c40c <___vfiprintf_internal_r+0x9d0>
1000be3c:	0021883a 	mov	r16,zero
1000be40:	0029883a 	mov	r20,zero
1000be44:	ddc01a04 	addi	r23,sp,104
1000be48:	8027883a 	mov	r19,r16
1000be4c:	8500010e 	bge	r16,r20,1000be54 <___vfiprintf_internal_r+0x418>
1000be50:	a027883a 	mov	r19,r20
1000be54:	ad403fcc 	andi	r21,r21,255
1000be58:	ad40201c 	xori	r21,r21,128
1000be5c:	ad7fe004 	addi	r21,r21,-128
1000be60:	a8000126 	beq	r21,zero,1000be68 <___vfiprintf_internal_r+0x42c>
1000be64:	9cc00044 	addi	r19,r19,1
1000be68:	89c0008c 	andi	r7,r17,2
1000be6c:	38000126 	beq	r7,zero,1000be74 <___vfiprintf_internal_r+0x438>
1000be70:	9cc00084 	addi	r19,r19,2
1000be74:	88c0210c 	andi	r3,r17,132
1000be78:	1801dd1e 	bne	r3,zero,1000c5f0 <___vfiprintf_internal_r+0xbb4>
1000be7c:	d9402517 	ldw	r5,148(sp)
1000be80:	2cebc83a 	sub	r21,r5,r19
1000be84:	0541da0e 	bge	zero,r21,1000c5f0 <___vfiprintf_internal_r+0xbb4>
1000be88:	07000404 	movi	fp,16
1000be8c:	d8801c17 	ldw	r2,112(sp)
1000be90:	e543be0e 	bge	fp,r21,1000cd8c <___vfiprintf_internal_r+0x1350>
1000be94:	01440074 	movhi	r5,4097
1000be98:	294fcb04 	addi	r5,r5,16172
1000be9c:	dc002715 	stw	r16,156(sp)
1000bea0:	d9801b17 	ldw	r6,108(sp)
1000bea4:	a821883a 	mov	r16,r21
1000bea8:	d9402315 	stw	r5,140(sp)
1000beac:	028001c4 	movi	r10,7
1000beb0:	d9c02915 	stw	r7,164(sp)
1000beb4:	182b883a 	mov	r21,r3
1000beb8:	00000506 	br	1000bed0 <___vfiprintf_internal_r+0x494>
1000bebc:	31000084 	addi	r4,r6,2
1000bec0:	42000204 	addi	r8,r8,8
1000bec4:	180d883a 	mov	r6,r3
1000bec8:	843ffc04 	addi	r16,r16,-16
1000becc:	e4000f0e 	bge	fp,r16,1000bf0c <___vfiprintf_internal_r+0x4d0>
1000bed0:	01040074 	movhi	r4,4097
1000bed4:	10800404 	addi	r2,r2,16
1000bed8:	30c00044 	addi	r3,r6,1
1000bedc:	210fcb04 	addi	r4,r4,16172
1000bee0:	41000015 	stw	r4,0(r8)
1000bee4:	47000115 	stw	fp,4(r8)
1000bee8:	d8801c15 	stw	r2,112(sp)
1000beec:	d8c01b15 	stw	r3,108(sp)
1000bef0:	50fff20e 	bge	r10,r3,1000bebc <__alt_data_end+0xf800bebc>
1000bef4:	1001b21e 	bne	r2,zero,1000c5c0 <___vfiprintf_internal_r+0xb84>
1000bef8:	843ffc04 	addi	r16,r16,-16
1000befc:	000d883a 	mov	r6,zero
1000bf00:	01000044 	movi	r4,1
1000bf04:	d811883a 	mov	r8,sp
1000bf08:	e43ff116 	blt	fp,r16,1000bed0 <__alt_data_end+0xf800bed0>
1000bf0c:	a807883a 	mov	r3,r21
1000bf10:	d9c02917 	ldw	r7,164(sp)
1000bf14:	802b883a 	mov	r21,r16
1000bf18:	dc002717 	ldw	r16,156(sp)
1000bf1c:	d9402317 	ldw	r5,140(sp)
1000bf20:	a885883a 	add	r2,r21,r2
1000bf24:	45400115 	stw	r21,4(r8)
1000bf28:	41400015 	stw	r5,0(r8)
1000bf2c:	d8801c15 	stw	r2,112(sp)
1000bf30:	d9001b15 	stw	r4,108(sp)
1000bf34:	014001c4 	movi	r5,7
1000bf38:	29026216 	blt	r5,r4,1000c8c4 <___vfiprintf_internal_r+0xe88>
1000bf3c:	d9801d87 	ldb	r6,118(sp)
1000bf40:	42000204 	addi	r8,r8,8
1000bf44:	21400044 	addi	r5,r4,1
1000bf48:	3001ae1e 	bne	r6,zero,1000c604 <___vfiprintf_internal_r+0xbc8>
1000bf4c:	3801bb26 	beq	r7,zero,1000c63c <___vfiprintf_internal_r+0xc00>
1000bf50:	d9001d04 	addi	r4,sp,116
1000bf54:	10800084 	addi	r2,r2,2
1000bf58:	41000015 	stw	r4,0(r8)
1000bf5c:	01000084 	movi	r4,2
1000bf60:	41000115 	stw	r4,4(r8)
1000bf64:	d8801c15 	stw	r2,112(sp)
1000bf68:	d9401b15 	stw	r5,108(sp)
1000bf6c:	010001c4 	movi	r4,7
1000bf70:	2142680e 	bge	r4,r5,1000c914 <___vfiprintf_internal_r+0xed8>
1000bf74:	1002b11e 	bne	r2,zero,1000ca3c <___vfiprintf_internal_r+0x1000>
1000bf78:	01802004 	movi	r6,128
1000bf7c:	01400044 	movi	r5,1
1000bf80:	0009883a 	mov	r4,zero
1000bf84:	d811883a 	mov	r8,sp
1000bf88:	1981ae1e 	bne	r3,r6,1000c644 <___vfiprintf_internal_r+0xc08>
1000bf8c:	d8c02517 	ldw	r3,148(sp)
1000bf90:	1cf9c83a 	sub	fp,r3,r19
1000bf94:	0701ab0e 	bge	zero,fp,1000c644 <___vfiprintf_internal_r+0xc08>
1000bf98:	05400404 	movi	r21,16
1000bf9c:	af03a90e 	bge	r21,fp,1000ce44 <___vfiprintf_internal_r+0x1408>
1000bfa0:	01440074 	movhi	r5,4097
1000bfa4:	294fc704 	addi	r5,r5,16156
1000bfa8:	d9402315 	stw	r5,140(sp)
1000bfac:	01c001c4 	movi	r7,7
1000bfb0:	00000506 	br	1000bfc8 <___vfiprintf_internal_r+0x58c>
1000bfb4:	21800084 	addi	r6,r4,2
1000bfb8:	42000204 	addi	r8,r8,8
1000bfbc:	1809883a 	mov	r4,r3
1000bfc0:	e73ffc04 	addi	fp,fp,-16
1000bfc4:	af000d0e 	bge	r21,fp,1000bffc <___vfiprintf_internal_r+0x5c0>
1000bfc8:	10800404 	addi	r2,r2,16
1000bfcc:	20c00044 	addi	r3,r4,1
1000bfd0:	44800015 	stw	r18,0(r8)
1000bfd4:	45400115 	stw	r21,4(r8)
1000bfd8:	d8801c15 	stw	r2,112(sp)
1000bfdc:	d8c01b15 	stw	r3,108(sp)
1000bfe0:	38fff40e 	bge	r7,r3,1000bfb4 <__alt_data_end+0xf800bfb4>
1000bfe4:	10022b1e 	bne	r2,zero,1000c894 <___vfiprintf_internal_r+0xe58>
1000bfe8:	e73ffc04 	addi	fp,fp,-16
1000bfec:	01800044 	movi	r6,1
1000bff0:	0009883a 	mov	r4,zero
1000bff4:	d811883a 	mov	r8,sp
1000bff8:	af3ff316 	blt	r21,fp,1000bfc8 <__alt_data_end+0xf800bfc8>
1000bffc:	d8c02317 	ldw	r3,140(sp)
1000c000:	1705883a 	add	r2,r2,fp
1000c004:	47000115 	stw	fp,4(r8)
1000c008:	40c00015 	stw	r3,0(r8)
1000c00c:	d8801c15 	stw	r2,112(sp)
1000c010:	d9801b15 	stw	r6,108(sp)
1000c014:	00c001c4 	movi	r3,7
1000c018:	19829416 	blt	r3,r6,1000ca6c <___vfiprintf_internal_r+0x1030>
1000c01c:	8521c83a 	sub	r16,r16,r20
1000c020:	42000204 	addi	r8,r8,8
1000c024:	31400044 	addi	r5,r6,1
1000c028:	3009883a 	mov	r4,r6
1000c02c:	04018716 	blt	zero,r16,1000c64c <___vfiprintf_internal_r+0xc10>
1000c030:	a085883a 	add	r2,r20,r2
1000c034:	45c00015 	stw	r23,0(r8)
1000c038:	45000115 	stw	r20,4(r8)
1000c03c:	d8801c15 	stw	r2,112(sp)
1000c040:	d9401b15 	stw	r5,108(sp)
1000c044:	00c001c4 	movi	r3,7
1000c048:	1941c20e 	bge	r3,r5,1000c754 <___vfiprintf_internal_r+0xd18>
1000c04c:	1002531e 	bne	r2,zero,1000c99c <___vfiprintf_internal_r+0xf60>
1000c050:	d8001b15 	stw	zero,108(sp)
1000c054:	8c40010c 	andi	r17,r17,4
1000c058:	88023226 	beq	r17,zero,1000c924 <___vfiprintf_internal_r+0xee8>
1000c05c:	d9002517 	ldw	r4,148(sp)
1000c060:	24e3c83a 	sub	r17,r4,r19
1000c064:	04432916 	blt	zero,r17,1000cd0c <___vfiprintf_internal_r+0x12d0>
1000c068:	d8802517 	ldw	r2,148(sp)
1000c06c:	14c0010e 	bge	r2,r19,1000c074 <___vfiprintf_internal_r+0x638>
1000c070:	9805883a 	mov	r2,r19
1000c074:	d8c02417 	ldw	r3,144(sp)
1000c078:	1887883a 	add	r3,r3,r2
1000c07c:	d8c02415 	stw	r3,144(sp)
1000c080:	d8001b15 	stw	zero,108(sp)
1000c084:	d811883a 	mov	r8,sp
1000c088:	003ea006 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000c08c:	8c400814 	ori	r17,r17,32
1000c090:	b0c00007 	ldb	r3,0(r22)
1000c094:	003ec606 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c098:	b0c00007 	ldb	r3,0(r22)
1000c09c:	00801b04 	movi	r2,108
1000c0a0:	18832026 	beq	r3,r2,1000cd24 <___vfiprintf_internal_r+0x12e8>
1000c0a4:	8c400414 	ori	r17,r17,16
1000c0a8:	003ec106 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c0ac:	9cc03fcc 	andi	r19,r19,255
1000c0b0:	b811883a 	mov	r8,r23
1000c0b4:	9803981e 	bne	r19,zero,1000cf18 <___vfiprintf_internal_r+0x14dc>
1000c0b8:	8880080c 	andi	r2,r17,32
1000c0bc:	1002be26 	beq	r2,zero,1000cbb8 <___vfiprintf_internal_r+0x117c>
1000c0c0:	d9002217 	ldw	r4,136(sp)
1000c0c4:	d9402417 	ldw	r5,144(sp)
1000c0c8:	20800017 	ldw	r2,0(r4)
1000c0cc:	2807d7fa 	srai	r3,r5,31
1000c0d0:	21000104 	addi	r4,r4,4
1000c0d4:	d9002215 	stw	r4,136(sp)
1000c0d8:	11400015 	stw	r5,0(r2)
1000c0dc:	10c00115 	stw	r3,4(r2)
1000c0e0:	003e8a06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000c0e4:	9cc03fcc 	andi	r19,r19,255
1000c0e8:	b811883a 	mov	r8,r23
1000c0ec:	9803871e 	bne	r19,zero,1000cf0c <___vfiprintf_internal_r+0x14d0>
1000c0f0:	8880080c 	andi	r2,r17,32
1000c0f4:	10009a26 	beq	r2,zero,1000c360 <___vfiprintf_internal_r+0x924>
1000c0f8:	d9002217 	ldw	r4,136(sp)
1000c0fc:	d8001d85 	stb	zero,118(sp)
1000c100:	20800204 	addi	r2,r4,8
1000c104:	24c00017 	ldw	r19,0(r4)
1000c108:	25000117 	ldw	r20,4(r4)
1000c10c:	8002a416 	blt	r16,zero,1000cba0 <___vfiprintf_internal_r+0x1164>
1000c110:	013fdfc4 	movi	r4,-129
1000c114:	9d06b03a 	or	r3,r19,r20
1000c118:	d8802215 	stw	r2,136(sp)
1000c11c:	8922703a 	and	r17,r17,r4
1000c120:	18009b26 	beq	r3,zero,1000c390 <___vfiprintf_internal_r+0x954>
1000c124:	002b883a 	mov	r21,zero
1000c128:	ddc01a04 	addi	r23,sp,104
1000c12c:	9806d0fa 	srli	r3,r19,3
1000c130:	a008977a 	slli	r4,r20,29
1000c134:	a028d0fa 	srli	r20,r20,3
1000c138:	9cc001cc 	andi	r19,r19,7
1000c13c:	98800c04 	addi	r2,r19,48
1000c140:	bdffffc4 	addi	r23,r23,-1
1000c144:	20e6b03a 	or	r19,r4,r3
1000c148:	b8800005 	stb	r2,0(r23)
1000c14c:	9d06b03a 	or	r3,r19,r20
1000c150:	183ff61e 	bne	r3,zero,1000c12c <__alt_data_end+0xf800c12c>
1000c154:	88c0004c 	andi	r3,r17,1
1000c158:	18021f1e 	bne	r3,zero,1000c9d8 <___vfiprintf_internal_r+0xf9c>
1000c15c:	d9401e17 	ldw	r5,120(sp)
1000c160:	2de9c83a 	sub	r20,r5,r23
1000c164:	003f3806 	br	1000be48 <__alt_data_end+0xf800be48>
1000c168:	9cc03fcc 	andi	r19,r19,255
1000c16c:	b811883a 	mov	r8,r23
1000c170:	98034f1e 	bne	r19,zero,1000ceb0 <___vfiprintf_internal_r+0x1474>
1000c174:	00840074 	movhi	r2,4097
1000c178:	108f6604 	addi	r2,r2,15768
1000c17c:	d8802615 	stw	r2,152(sp)
1000c180:	8880080c 	andi	r2,r17,32
1000c184:	1000ac26 	beq	r2,zero,1000c438 <___vfiprintf_internal_r+0x9fc>
1000c188:	d9002217 	ldw	r4,136(sp)
1000c18c:	24c00017 	ldw	r19,0(r4)
1000c190:	25000117 	ldw	r20,4(r4)
1000c194:	21000204 	addi	r4,r4,8
1000c198:	d9002215 	stw	r4,136(sp)
1000c19c:	8880004c 	andi	r2,r17,1
1000c1a0:	1001e726 	beq	r2,zero,1000c940 <___vfiprintf_internal_r+0xf04>
1000c1a4:	9d04b03a 	or	r2,r19,r20
1000c1a8:	10025c1e 	bne	r2,zero,1000cb1c <___vfiprintf_internal_r+0x10e0>
1000c1ac:	d8001d85 	stb	zero,118(sp)
1000c1b0:	80024416 	blt	r16,zero,1000cac4 <___vfiprintf_internal_r+0x1088>
1000c1b4:	00bfdfc4 	movi	r2,-129
1000c1b8:	88a2703a 	and	r17,r17,r2
1000c1bc:	003f1d06 	br	1000be34 <__alt_data_end+0xf800be34>
1000c1c0:	d8c02217 	ldw	r3,136(sp)
1000c1c4:	04c00044 	movi	r19,1
1000c1c8:	b811883a 	mov	r8,r23
1000c1cc:	18800017 	ldw	r2,0(r3)
1000c1d0:	18c00104 	addi	r3,r3,4
1000c1d4:	d8001d85 	stb	zero,118(sp)
1000c1d8:	d8801005 	stb	r2,64(sp)
1000c1dc:	d8c02215 	stw	r3,136(sp)
1000c1e0:	9829883a 	mov	r20,r19
1000c1e4:	ddc01004 	addi	r23,sp,64
1000c1e8:	0021883a 	mov	r16,zero
1000c1ec:	003f1e06 	br	1000be68 <__alt_data_end+0xf800be68>
1000c1f0:	9cc03fcc 	andi	r19,r19,255
1000c1f4:	b811883a 	mov	r8,r23
1000c1f8:	9803331e 	bne	r19,zero,1000cec8 <___vfiprintf_internal_r+0x148c>
1000c1fc:	8880080c 	andi	r2,r17,32
1000c200:	10004826 	beq	r2,zero,1000c324 <___vfiprintf_internal_r+0x8e8>
1000c204:	d9002217 	ldw	r4,136(sp)
1000c208:	20800117 	ldw	r2,4(r4)
1000c20c:	24c00017 	ldw	r19,0(r4)
1000c210:	21000204 	addi	r4,r4,8
1000c214:	d9002215 	stw	r4,136(sp)
1000c218:	1029883a 	mov	r20,r2
1000c21c:	10024c16 	blt	r2,zero,1000cb50 <___vfiprintf_internal_r+0x1114>
1000c220:	dd401d83 	ldbu	r21,118(sp)
1000c224:	80007116 	blt	r16,zero,1000c3ec <___vfiprintf_internal_r+0x9b0>
1000c228:	00ffdfc4 	movi	r3,-129
1000c22c:	9d04b03a 	or	r2,r19,r20
1000c230:	88e2703a 	and	r17,r17,r3
1000c234:	1000d126 	beq	r2,zero,1000c57c <___vfiprintf_internal_r+0xb40>
1000c238:	a0023526 	beq	r20,zero,1000cb10 <___vfiprintf_internal_r+0x10d4>
1000c23c:	ddc01a04 	addi	r23,sp,104
1000c240:	4039883a 	mov	fp,r8
1000c244:	9809883a 	mov	r4,r19
1000c248:	a00b883a 	mov	r5,r20
1000c24c:	01800284 	movi	r6,10
1000c250:	000f883a 	mov	r7,zero
1000c254:	000df680 	call	1000df68 <__umoddi3>
1000c258:	10800c04 	addi	r2,r2,48
1000c25c:	bdffffc4 	addi	r23,r23,-1
1000c260:	9809883a 	mov	r4,r19
1000c264:	a00b883a 	mov	r5,r20
1000c268:	b8800005 	stb	r2,0(r23)
1000c26c:	01800284 	movi	r6,10
1000c270:	000f883a 	mov	r7,zero
1000c274:	000d96c0 	call	1000d96c <__udivdi3>
1000c278:	1027883a 	mov	r19,r2
1000c27c:	10c4b03a 	or	r2,r2,r3
1000c280:	1829883a 	mov	r20,r3
1000c284:	103fef1e 	bne	r2,zero,1000c244 <__alt_data_end+0xf800c244>
1000c288:	d9001e17 	ldw	r4,120(sp)
1000c28c:	e011883a 	mov	r8,fp
1000c290:	25e9c83a 	sub	r20,r4,r23
1000c294:	003eec06 	br	1000be48 <__alt_data_end+0xf800be48>
1000c298:	d8802307 	ldb	r2,140(sp)
1000c29c:	1002361e 	bne	r2,zero,1000cb78 <___vfiprintf_internal_r+0x113c>
1000c2a0:	00c00804 	movi	r3,32
1000c2a4:	d8c02305 	stb	r3,140(sp)
1000c2a8:	04c00044 	movi	r19,1
1000c2ac:	b0c00007 	ldb	r3,0(r22)
1000c2b0:	003e3f06 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c2b4:	8c400054 	ori	r17,r17,1
1000c2b8:	b0c00007 	ldb	r3,0(r22)
1000c2bc:	003e3c06 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c2c0:	8c402014 	ori	r17,r17,128
1000c2c4:	b0c00007 	ldb	r3,0(r22)
1000c2c8:	003e3906 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c2cc:	dc002715 	stw	r16,156(sp)
1000c2d0:	d8002515 	stw	zero,148(sp)
1000c2d4:	1f3ff404 	addi	fp,r3,-48
1000c2d8:	0009883a 	mov	r4,zero
1000c2dc:	b021883a 	mov	r16,r22
1000c2e0:	01400284 	movi	r5,10
1000c2e4:	000e52c0 	call	1000e52c <__mulsi3>
1000c2e8:	80c00007 	ldb	r3,0(r16)
1000c2ec:	e089883a 	add	r4,fp,r2
1000c2f0:	b5800044 	addi	r22,r22,1
1000c2f4:	1f3ff404 	addi	fp,r3,-48
1000c2f8:	b021883a 	mov	r16,r22
1000c2fc:	af3ff82e 	bgeu	r21,fp,1000c2e0 <__alt_data_end+0xf800c2e0>
1000c300:	d9002515 	stw	r4,148(sp)
1000c304:	dc002717 	ldw	r16,156(sp)
1000c308:	003e2a06 	br	1000bbb4 <__alt_data_end+0xf800bbb4>
1000c30c:	9cc03fcc 	andi	r19,r19,255
1000c310:	b811883a 	mov	r8,r23
1000c314:	9802e91e 	bne	r19,zero,1000cebc <___vfiprintf_internal_r+0x1480>
1000c318:	8c400414 	ori	r17,r17,16
1000c31c:	8880080c 	andi	r2,r17,32
1000c320:	103fb81e 	bne	r2,zero,1000c204 <__alt_data_end+0xf800c204>
1000c324:	8880040c 	andi	r2,r17,16
1000c328:	10022e26 	beq	r2,zero,1000cbe4 <___vfiprintf_internal_r+0x11a8>
1000c32c:	d9402217 	ldw	r5,136(sp)
1000c330:	2cc00017 	ldw	r19,0(r5)
1000c334:	29400104 	addi	r5,r5,4
1000c338:	d9402215 	stw	r5,136(sp)
1000c33c:	9829d7fa 	srai	r20,r19,31
1000c340:	a005883a 	mov	r2,r20
1000c344:	003fb506 	br	1000c21c <__alt_data_end+0xf800c21c>
1000c348:	9cc03fcc 	andi	r19,r19,255
1000c34c:	b811883a 	mov	r8,r23
1000c350:	9802fa1e 	bne	r19,zero,1000cf3c <___vfiprintf_internal_r+0x1500>
1000c354:	8c400414 	ori	r17,r17,16
1000c358:	8880080c 	andi	r2,r17,32
1000c35c:	103f661e 	bne	r2,zero,1000c0f8 <__alt_data_end+0xf800c0f8>
1000c360:	8880040c 	andi	r2,r17,16
1000c364:	10020626 	beq	r2,zero,1000cb80 <___vfiprintf_internal_r+0x1144>
1000c368:	d9402217 	ldw	r5,136(sp)
1000c36c:	d8001d85 	stb	zero,118(sp)
1000c370:	0029883a 	mov	r20,zero
1000c374:	28800104 	addi	r2,r5,4
1000c378:	2cc00017 	ldw	r19,0(r5)
1000c37c:	80020816 	blt	r16,zero,1000cba0 <___vfiprintf_internal_r+0x1164>
1000c380:	00ffdfc4 	movi	r3,-129
1000c384:	d8802215 	stw	r2,136(sp)
1000c388:	88e2703a 	and	r17,r17,r3
1000c38c:	983f651e 	bne	r19,zero,1000c124 <__alt_data_end+0xf800c124>
1000c390:	002b883a 	mov	r21,zero
1000c394:	8002cf26 	beq	r16,zero,1000ced4 <___vfiprintf_internal_r+0x1498>
1000c398:	0027883a 	mov	r19,zero
1000c39c:	0029883a 	mov	r20,zero
1000c3a0:	003f6106 	br	1000c128 <__alt_data_end+0xf800c128>
1000c3a4:	9cc03fcc 	andi	r19,r19,255
1000c3a8:	b811883a 	mov	r8,r23
1000c3ac:	9802e01e 	bne	r19,zero,1000cf30 <___vfiprintf_internal_r+0x14f4>
1000c3b0:	8c400414 	ori	r17,r17,16
1000c3b4:	8880080c 	andi	r2,r17,32
1000c3b8:	1000641e 	bne	r2,zero,1000c54c <___vfiprintf_internal_r+0xb10>
1000c3bc:	8880040c 	andi	r2,r17,16
1000c3c0:	1001c81e 	bne	r2,zero,1000cae4 <___vfiprintf_internal_r+0x10a8>
1000c3c4:	8880100c 	andi	r2,r17,64
1000c3c8:	d8001d85 	stb	zero,118(sp)
1000c3cc:	1002281e 	bne	r2,zero,1000cc70 <___vfiprintf_internal_r+0x1234>
1000c3d0:	d9002217 	ldw	r4,136(sp)
1000c3d4:	0029883a 	mov	r20,zero
1000c3d8:	20800104 	addi	r2,r4,4
1000c3dc:	24c00017 	ldw	r19,0(r4)
1000c3e0:	8001c60e 	bge	r16,zero,1000cafc <___vfiprintf_internal_r+0x10c0>
1000c3e4:	d8802215 	stw	r2,136(sp)
1000c3e8:	002b883a 	mov	r21,zero
1000c3ec:	9d04b03a 	or	r2,r19,r20
1000c3f0:	103f911e 	bne	r2,zero,1000c238 <__alt_data_end+0xf800c238>
1000c3f4:	00800044 	movi	r2,1
1000c3f8:	10803fcc 	andi	r2,r2,255
1000c3fc:	00c00044 	movi	r3,1
1000c400:	10c05f26 	beq	r2,r3,1000c580 <___vfiprintf_internal_r+0xb44>
1000c404:	00c00084 	movi	r3,2
1000c408:	10ffe31e 	bne	r2,r3,1000c398 <__alt_data_end+0xf800c398>
1000c40c:	0027883a 	mov	r19,zero
1000c410:	0029883a 	mov	r20,zero
1000c414:	00015106 	br	1000c95c <___vfiprintf_internal_r+0xf20>
1000c418:	9cc03fcc 	andi	r19,r19,255
1000c41c:	b811883a 	mov	r8,r23
1000c420:	9802c01e 	bne	r19,zero,1000cf24 <___vfiprintf_internal_r+0x14e8>
1000c424:	01440074 	movhi	r5,4097
1000c428:	294f6104 	addi	r5,r5,15748
1000c42c:	d9402615 	stw	r5,152(sp)
1000c430:	8880080c 	andi	r2,r17,32
1000c434:	103f541e 	bne	r2,zero,1000c188 <__alt_data_end+0xf800c188>
1000c438:	8880040c 	andi	r2,r17,16
1000c43c:	1001f226 	beq	r2,zero,1000cc08 <___vfiprintf_internal_r+0x11cc>
1000c440:	d9402217 	ldw	r5,136(sp)
1000c444:	0029883a 	mov	r20,zero
1000c448:	2cc00017 	ldw	r19,0(r5)
1000c44c:	29400104 	addi	r5,r5,4
1000c450:	d9402215 	stw	r5,136(sp)
1000c454:	003f5106 	br	1000c19c <__alt_data_end+0xf800c19c>
1000c458:	d8c02217 	ldw	r3,136(sp)
1000c45c:	b811883a 	mov	r8,r23
1000c460:	d8001d85 	stb	zero,118(sp)
1000c464:	1dc00017 	ldw	r23,0(r3)
1000c468:	1f000104 	addi	fp,r3,4
1000c46c:	b8025926 	beq	r23,zero,1000cdd4 <___vfiprintf_internal_r+0x1398>
1000c470:	80023316 	blt	r16,zero,1000cd40 <___vfiprintf_internal_r+0x1304>
1000c474:	800d883a 	mov	r6,r16
1000c478:	000b883a 	mov	r5,zero
1000c47c:	b809883a 	mov	r4,r23
1000c480:	da002a15 	stw	r8,168(sp)
1000c484:	0009ca40 	call	10009ca4 <memchr>
1000c488:	da002a17 	ldw	r8,168(sp)
1000c48c:	10026826 	beq	r2,zero,1000ce30 <___vfiprintf_internal_r+0x13f4>
1000c490:	15e9c83a 	sub	r20,r2,r23
1000c494:	dd401d83 	ldbu	r21,118(sp)
1000c498:	df002215 	stw	fp,136(sp)
1000c49c:	0021883a 	mov	r16,zero
1000c4a0:	003e6906 	br	1000be48 <__alt_data_end+0xf800be48>
1000c4a4:	9cc03fcc 	andi	r19,r19,255
1000c4a8:	b811883a 	mov	r8,r23
1000c4ac:	983fc126 	beq	r19,zero,1000c3b4 <__alt_data_end+0xf800c3b4>
1000c4b0:	d8c02303 	ldbu	r3,140(sp)
1000c4b4:	d8c01d85 	stb	r3,118(sp)
1000c4b8:	003fbe06 	br	1000c3b4 <__alt_data_end+0xf800c3b4>
1000c4bc:	d9002217 	ldw	r4,136(sp)
1000c4c0:	d9402217 	ldw	r5,136(sp)
1000c4c4:	21000017 	ldw	r4,0(r4)
1000c4c8:	28800104 	addi	r2,r5,4
1000c4cc:	d9002515 	stw	r4,148(sp)
1000c4d0:	203e3d16 	blt	r4,zero,1000bdc8 <__alt_data_end+0xf800bdc8>
1000c4d4:	d8802215 	stw	r2,136(sp)
1000c4d8:	b0c00007 	ldb	r3,0(r22)
1000c4dc:	003db406 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c4e0:	00c00ac4 	movi	r3,43
1000c4e4:	d8c02305 	stb	r3,140(sp)
1000c4e8:	04c00044 	movi	r19,1
1000c4ec:	b0c00007 	ldb	r3,0(r22)
1000c4f0:	003daf06 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c4f4:	b0c00007 	ldb	r3,0(r22)
1000c4f8:	01000a84 	movi	r4,42
1000c4fc:	b4000044 	addi	r16,r22,1
1000c500:	19025e26 	beq	r3,r4,1000ce7c <___vfiprintf_internal_r+0x1440>
1000c504:	1f3ff404 	addi	fp,r3,-48
1000c508:	0009883a 	mov	r4,zero
1000c50c:	af025236 	bltu	r21,fp,1000ce58 <___vfiprintf_internal_r+0x141c>
1000c510:	01400284 	movi	r5,10
1000c514:	000e52c0 	call	1000e52c <__mulsi3>
1000c518:	80c00007 	ldb	r3,0(r16)
1000c51c:	1709883a 	add	r4,r2,fp
1000c520:	85800044 	addi	r22,r16,1
1000c524:	1f3ff404 	addi	fp,r3,-48
1000c528:	b021883a 	mov	r16,r22
1000c52c:	af3ff82e 	bgeu	r21,fp,1000c510 <__alt_data_end+0xf800c510>
1000c530:	2021883a 	mov	r16,r4
1000c534:	203d9f0e 	bge	r4,zero,1000bbb4 <__alt_data_end+0xf800bbb4>
1000c538:	043fffc4 	movi	r16,-1
1000c53c:	003d9d06 	br	1000bbb4 <__alt_data_end+0xf800bbb4>
1000c540:	8c401014 	ori	r17,r17,64
1000c544:	b0c00007 	ldb	r3,0(r22)
1000c548:	003d9906 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c54c:	d9002217 	ldw	r4,136(sp)
1000c550:	d8001d85 	stb	zero,118(sp)
1000c554:	20c00204 	addi	r3,r4,8
1000c558:	24c00017 	ldw	r19,0(r4)
1000c55c:	25000117 	ldw	r20,4(r4)
1000c560:	8001e716 	blt	r16,zero,1000cd00 <___vfiprintf_internal_r+0x12c4>
1000c564:	013fdfc4 	movi	r4,-129
1000c568:	9d04b03a 	or	r2,r19,r20
1000c56c:	d8c02215 	stw	r3,136(sp)
1000c570:	8922703a 	and	r17,r17,r4
1000c574:	002b883a 	mov	r21,zero
1000c578:	103f2f1e 	bne	r2,zero,1000c238 <__alt_data_end+0xf800c238>
1000c57c:	803e2f26 	beq	r16,zero,1000be3c <__alt_data_end+0xf800be3c>
1000c580:	0027883a 	mov	r19,zero
1000c584:	9cc00c04 	addi	r19,r19,48
1000c588:	dcc019c5 	stb	r19,103(sp)
1000c58c:	dd002817 	ldw	r20,160(sp)
1000c590:	ddc019c4 	addi	r23,sp,103
1000c594:	003e2c06 	br	1000be48 <__alt_data_end+0xf800be48>
1000c598:	9cc03fcc 	andi	r19,r19,255
1000c59c:	b811883a 	mov	r8,r23
1000c5a0:	9802571e 	bne	r19,zero,1000cf00 <___vfiprintf_internal_r+0x14c4>
1000c5a4:	18005726 	beq	r3,zero,1000c704 <___vfiprintf_internal_r+0xcc8>
1000c5a8:	04c00044 	movi	r19,1
1000c5ac:	d8c01005 	stb	r3,64(sp)
1000c5b0:	d8001d85 	stb	zero,118(sp)
1000c5b4:	9829883a 	mov	r20,r19
1000c5b8:	ddc01004 	addi	r23,sp,64
1000c5bc:	003f0a06 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c5c0:	d9402017 	ldw	r5,128(sp)
1000c5c4:	d9002117 	ldw	r4,132(sp)
1000c5c8:	d9801a04 	addi	r6,sp,104
1000c5cc:	da802a15 	stw	r10,168(sp)
1000c5d0:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c5d4:	da802a17 	ldw	r10,168(sp)
1000c5d8:	1000501e 	bne	r2,zero,1000c71c <___vfiprintf_internal_r+0xce0>
1000c5dc:	d9801b17 	ldw	r6,108(sp)
1000c5e0:	d8801c17 	ldw	r2,112(sp)
1000c5e4:	d811883a 	mov	r8,sp
1000c5e8:	31000044 	addi	r4,r6,1
1000c5ec:	003e3606 	br	1000bec8 <__alt_data_end+0xf800bec8>
1000c5f0:	d9001b17 	ldw	r4,108(sp)
1000c5f4:	d8801c17 	ldw	r2,112(sp)
1000c5f8:	21400044 	addi	r5,r4,1
1000c5fc:	d9801d87 	ldb	r6,118(sp)
1000c600:	303e5226 	beq	r6,zero,1000bf4c <__alt_data_end+0xf800bf4c>
1000c604:	01800044 	movi	r6,1
1000c608:	d9001d84 	addi	r4,sp,118
1000c60c:	1185883a 	add	r2,r2,r6
1000c610:	41000015 	stw	r4,0(r8)
1000c614:	41800115 	stw	r6,4(r8)
1000c618:	d8801c15 	stw	r2,112(sp)
1000c61c:	d9401b15 	stw	r5,108(sp)
1000c620:	010001c4 	movi	r4,7
1000c624:	2140b00e 	bge	r4,r5,1000c8e8 <___vfiprintf_internal_r+0xeac>
1000c628:	1000f61e 	bne	r2,zero,1000ca04 <___vfiprintf_internal_r+0xfc8>
1000c62c:	3800b31e 	bne	r7,zero,1000c8fc <___vfiprintf_internal_r+0xec0>
1000c630:	0009883a 	mov	r4,zero
1000c634:	300b883a 	mov	r5,r6
1000c638:	d811883a 	mov	r8,sp
1000c63c:	01802004 	movi	r6,128
1000c640:	19be5226 	beq	r3,r6,1000bf8c <__alt_data_end+0xf800bf8c>
1000c644:	8521c83a 	sub	r16,r16,r20
1000c648:	043e790e 	bge	zero,r16,1000c030 <__alt_data_end+0xf800c030>
1000c64c:	05400404 	movi	r21,16
1000c650:	ac01b00e 	bge	r21,r16,1000cd14 <___vfiprintf_internal_r+0x12d8>
1000c654:	01440074 	movhi	r5,4097
1000c658:	294fc704 	addi	r5,r5,16156
1000c65c:	d9402315 	stw	r5,140(sp)
1000c660:	070001c4 	movi	fp,7
1000c664:	00000506 	br	1000c67c <___vfiprintf_internal_r+0xc40>
1000c668:	21400084 	addi	r5,r4,2
1000c66c:	42000204 	addi	r8,r8,8
1000c670:	1809883a 	mov	r4,r3
1000c674:	843ffc04 	addi	r16,r16,-16
1000c678:	ac000d0e 	bge	r21,r16,1000c6b0 <___vfiprintf_internal_r+0xc74>
1000c67c:	10800404 	addi	r2,r2,16
1000c680:	20c00044 	addi	r3,r4,1
1000c684:	44800015 	stw	r18,0(r8)
1000c688:	45400115 	stw	r21,4(r8)
1000c68c:	d8801c15 	stw	r2,112(sp)
1000c690:	d8c01b15 	stw	r3,108(sp)
1000c694:	e0fff40e 	bge	fp,r3,1000c668 <__alt_data_end+0xf800c668>
1000c698:	1000101e 	bne	r2,zero,1000c6dc <___vfiprintf_internal_r+0xca0>
1000c69c:	843ffc04 	addi	r16,r16,-16
1000c6a0:	01400044 	movi	r5,1
1000c6a4:	0009883a 	mov	r4,zero
1000c6a8:	d811883a 	mov	r8,sp
1000c6ac:	ac3ff316 	blt	r21,r16,1000c67c <__alt_data_end+0xf800c67c>
1000c6b0:	d8c02317 	ldw	r3,140(sp)
1000c6b4:	1405883a 	add	r2,r2,r16
1000c6b8:	44000115 	stw	r16,4(r8)
1000c6bc:	40c00015 	stw	r3,0(r8)
1000c6c0:	d8801c15 	stw	r2,112(sp)
1000c6c4:	d9401b15 	stw	r5,108(sp)
1000c6c8:	00c001c4 	movi	r3,7
1000c6cc:	19401916 	blt	r3,r5,1000c734 <___vfiprintf_internal_r+0xcf8>
1000c6d0:	42000204 	addi	r8,r8,8
1000c6d4:	29400044 	addi	r5,r5,1
1000c6d8:	003e5506 	br	1000c030 <__alt_data_end+0xf800c030>
1000c6dc:	d9402017 	ldw	r5,128(sp)
1000c6e0:	d9002117 	ldw	r4,132(sp)
1000c6e4:	d9801a04 	addi	r6,sp,104
1000c6e8:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c6ec:	10000b1e 	bne	r2,zero,1000c71c <___vfiprintf_internal_r+0xce0>
1000c6f0:	d9001b17 	ldw	r4,108(sp)
1000c6f4:	d8801c17 	ldw	r2,112(sp)
1000c6f8:	d811883a 	mov	r8,sp
1000c6fc:	21400044 	addi	r5,r4,1
1000c700:	003fdc06 	br	1000c674 <__alt_data_end+0xf800c674>
1000c704:	d8801c17 	ldw	r2,112(sp)
1000c708:	10000426 	beq	r2,zero,1000c71c <___vfiprintf_internal_r+0xce0>
1000c70c:	d9402017 	ldw	r5,128(sp)
1000c710:	d9002117 	ldw	r4,132(sp)
1000c714:	d9801a04 	addi	r6,sp,104
1000c718:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c71c:	d9402017 	ldw	r5,128(sp)
1000c720:	2880030b 	ldhu	r2,12(r5)
1000c724:	1080100c 	andi	r2,r2,64
1000c728:	10014d1e 	bne	r2,zero,1000cc60 <___vfiprintf_internal_r+0x1224>
1000c72c:	d8802417 	ldw	r2,144(sp)
1000c730:	003d9706 	br	1000bd90 <__alt_data_end+0xf800bd90>
1000c734:	1000d21e 	bne	r2,zero,1000ca80 <___vfiprintf_internal_r+0x1044>
1000c738:	00c00044 	movi	r3,1
1000c73c:	a005883a 	mov	r2,r20
1000c740:	ddc00015 	stw	r23,0(sp)
1000c744:	dd000115 	stw	r20,4(sp)
1000c748:	dd001c15 	stw	r20,112(sp)
1000c74c:	d8c01b15 	stw	r3,108(sp)
1000c750:	d811883a 	mov	r8,sp
1000c754:	42000204 	addi	r8,r8,8
1000c758:	8c40010c 	andi	r17,r17,4
1000c75c:	88004026 	beq	r17,zero,1000c860 <___vfiprintf_internal_r+0xe24>
1000c760:	d9002517 	ldw	r4,148(sp)
1000c764:	24e3c83a 	sub	r17,r4,r19
1000c768:	04403d0e 	bge	zero,r17,1000c860 <___vfiprintf_internal_r+0xe24>
1000c76c:	04000404 	movi	r16,16
1000c770:	8441a90e 	bge	r16,r17,1000ce18 <___vfiprintf_internal_r+0x13dc>
1000c774:	00c40074 	movhi	r3,4097
1000c778:	18cfcb04 	addi	r3,r3,16172
1000c77c:	d9001b17 	ldw	r4,108(sp)
1000c780:	d8c02315 	stw	r3,140(sp)
1000c784:	050001c4 	movi	r20,7
1000c788:	dd402117 	ldw	r21,132(sp)
1000c78c:	ddc02017 	ldw	r23,128(sp)
1000c790:	00000506 	br	1000c7a8 <___vfiprintf_internal_r+0xd6c>
1000c794:	21400084 	addi	r5,r4,2
1000c798:	42000204 	addi	r8,r8,8
1000c79c:	1809883a 	mov	r4,r3
1000c7a0:	8c7ffc04 	addi	r17,r17,-16
1000c7a4:	84400f0e 	bge	r16,r17,1000c7e4 <___vfiprintf_internal_r+0xda8>
1000c7a8:	01440074 	movhi	r5,4097
1000c7ac:	10800404 	addi	r2,r2,16
1000c7b0:	20c00044 	addi	r3,r4,1
1000c7b4:	294fcb04 	addi	r5,r5,16172
1000c7b8:	41400015 	stw	r5,0(r8)
1000c7bc:	44000115 	stw	r16,4(r8)
1000c7c0:	d8801c15 	stw	r2,112(sp)
1000c7c4:	d8c01b15 	stw	r3,108(sp)
1000c7c8:	a0fff20e 	bge	r20,r3,1000c794 <__alt_data_end+0xf800c794>
1000c7cc:	1000141e 	bne	r2,zero,1000c820 <___vfiprintf_internal_r+0xde4>
1000c7d0:	8c7ffc04 	addi	r17,r17,-16
1000c7d4:	01400044 	movi	r5,1
1000c7d8:	0009883a 	mov	r4,zero
1000c7dc:	d811883a 	mov	r8,sp
1000c7e0:	847ff116 	blt	r16,r17,1000c7a8 <__alt_data_end+0xf800c7a8>
1000c7e4:	d8c02317 	ldw	r3,140(sp)
1000c7e8:	1445883a 	add	r2,r2,r17
1000c7ec:	44400115 	stw	r17,4(r8)
1000c7f0:	40c00015 	stw	r3,0(r8)
1000c7f4:	d8801c15 	stw	r2,112(sp)
1000c7f8:	d9401b15 	stw	r5,108(sp)
1000c7fc:	00c001c4 	movi	r3,7
1000c800:	1940170e 	bge	r3,r5,1000c860 <___vfiprintf_internal_r+0xe24>
1000c804:	1000101e 	bne	r2,zero,1000c848 <___vfiprintf_internal_r+0xe0c>
1000c808:	d8802517 	ldw	r2,148(sp)
1000c80c:	14c11616 	blt	r2,r19,1000cc68 <___vfiprintf_internal_r+0x122c>
1000c810:	d9002417 	ldw	r4,144(sp)
1000c814:	2089883a 	add	r4,r4,r2
1000c818:	d9002415 	stw	r4,144(sp)
1000c81c:	003e1806 	br	1000c080 <__alt_data_end+0xf800c080>
1000c820:	d9801a04 	addi	r6,sp,104
1000c824:	b80b883a 	mov	r5,r23
1000c828:	a809883a 	mov	r4,r21
1000c82c:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c830:	103fba1e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000c834:	d9001b17 	ldw	r4,108(sp)
1000c838:	d8801c17 	ldw	r2,112(sp)
1000c83c:	d811883a 	mov	r8,sp
1000c840:	21400044 	addi	r5,r4,1
1000c844:	003fd606 	br	1000c7a0 <__alt_data_end+0xf800c7a0>
1000c848:	d9402017 	ldw	r5,128(sp)
1000c84c:	d9002117 	ldw	r4,132(sp)
1000c850:	d9801a04 	addi	r6,sp,104
1000c854:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c858:	103fb01e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000c85c:	d8801c17 	ldw	r2,112(sp)
1000c860:	d8c02517 	ldw	r3,148(sp)
1000c864:	1cc0010e 	bge	r3,r19,1000c86c <___vfiprintf_internal_r+0xe30>
1000c868:	9807883a 	mov	r3,r19
1000c86c:	d9002417 	ldw	r4,144(sp)
1000c870:	20c9883a 	add	r4,r4,r3
1000c874:	d9002415 	stw	r4,144(sp)
1000c878:	103e0126 	beq	r2,zero,1000c080 <__alt_data_end+0xf800c080>
1000c87c:	d9402017 	ldw	r5,128(sp)
1000c880:	d9002117 	ldw	r4,132(sp)
1000c884:	d9801a04 	addi	r6,sp,104
1000c888:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c88c:	103dfc26 	beq	r2,zero,1000c080 <__alt_data_end+0xf800c080>
1000c890:	003fa206 	br	1000c71c <__alt_data_end+0xf800c71c>
1000c894:	d9402017 	ldw	r5,128(sp)
1000c898:	d9002117 	ldw	r4,132(sp)
1000c89c:	d9801a04 	addi	r6,sp,104
1000c8a0:	d9c02b15 	stw	r7,172(sp)
1000c8a4:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c8a8:	d9c02b17 	ldw	r7,172(sp)
1000c8ac:	103f9b1e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000c8b0:	d9001b17 	ldw	r4,108(sp)
1000c8b4:	d8801c17 	ldw	r2,112(sp)
1000c8b8:	d811883a 	mov	r8,sp
1000c8bc:	21800044 	addi	r6,r4,1
1000c8c0:	003dbf06 	br	1000bfc0 <__alt_data_end+0xf800bfc0>
1000c8c4:	1000d81e 	bne	r2,zero,1000cc28 <___vfiprintf_internal_r+0x11ec>
1000c8c8:	d9001d87 	ldb	r4,118(sp)
1000c8cc:	20000a26 	beq	r4,zero,1000c8f8 <___vfiprintf_internal_r+0xebc>
1000c8d0:	00800044 	movi	r2,1
1000c8d4:	d9001d84 	addi	r4,sp,118
1000c8d8:	100b883a 	mov	r5,r2
1000c8dc:	d9000015 	stw	r4,0(sp)
1000c8e0:	d8800115 	stw	r2,4(sp)
1000c8e4:	d811883a 	mov	r8,sp
1000c8e8:	2809883a 	mov	r4,r5
1000c8ec:	42000204 	addi	r8,r8,8
1000c8f0:	29400044 	addi	r5,r5,1
1000c8f4:	003d9506 	br	1000bf4c <__alt_data_end+0xf800bf4c>
1000c8f8:	3800fd26 	beq	r7,zero,1000ccf0 <___vfiprintf_internal_r+0x12b4>
1000c8fc:	00800084 	movi	r2,2
1000c900:	d9001d04 	addi	r4,sp,116
1000c904:	d9000015 	stw	r4,0(sp)
1000c908:	d8800115 	stw	r2,4(sp)
1000c90c:	01400044 	movi	r5,1
1000c910:	d811883a 	mov	r8,sp
1000c914:	2809883a 	mov	r4,r5
1000c918:	42000204 	addi	r8,r8,8
1000c91c:	29400044 	addi	r5,r5,1
1000c920:	003f4606 	br	1000c63c <__alt_data_end+0xf800c63c>
1000c924:	d8802517 	ldw	r2,148(sp)
1000c928:	14c0010e 	bge	r2,r19,1000c930 <___vfiprintf_internal_r+0xef4>
1000c92c:	9805883a 	mov	r2,r19
1000c930:	d9402417 	ldw	r5,144(sp)
1000c934:	288b883a 	add	r5,r5,r2
1000c938:	d9402415 	stw	r5,144(sp)
1000c93c:	003dd006 	br	1000c080 <__alt_data_end+0xf800c080>
1000c940:	d8001d85 	stb	zero,118(sp)
1000c944:	80005d16 	blt	r16,zero,1000cabc <___vfiprintf_internal_r+0x1080>
1000c948:	00ffdfc4 	movi	r3,-129
1000c94c:	9d04b03a 	or	r2,r19,r20
1000c950:	88e2703a 	and	r17,r17,r3
1000c954:	103d3726 	beq	r2,zero,1000be34 <__alt_data_end+0xf800be34>
1000c958:	002b883a 	mov	r21,zero
1000c95c:	d9002617 	ldw	r4,152(sp)
1000c960:	ddc01a04 	addi	r23,sp,104
1000c964:	988003cc 	andi	r2,r19,15
1000c968:	a006973a 	slli	r3,r20,28
1000c96c:	2085883a 	add	r2,r4,r2
1000c970:	9826d13a 	srli	r19,r19,4
1000c974:	10800003 	ldbu	r2,0(r2)
1000c978:	a028d13a 	srli	r20,r20,4
1000c97c:	bdffffc4 	addi	r23,r23,-1
1000c980:	1ce6b03a 	or	r19,r3,r19
1000c984:	b8800005 	stb	r2,0(r23)
1000c988:	9d04b03a 	or	r2,r19,r20
1000c98c:	103ff51e 	bne	r2,zero,1000c964 <__alt_data_end+0xf800c964>
1000c990:	d8801e17 	ldw	r2,120(sp)
1000c994:	15e9c83a 	sub	r20,r2,r23
1000c998:	003d2b06 	br	1000be48 <__alt_data_end+0xf800be48>
1000c99c:	d9402017 	ldw	r5,128(sp)
1000c9a0:	d9002117 	ldw	r4,132(sp)
1000c9a4:	d9801a04 	addi	r6,sp,104
1000c9a8:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c9ac:	103f5b1e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000c9b0:	d8801c17 	ldw	r2,112(sp)
1000c9b4:	d811883a 	mov	r8,sp
1000c9b8:	003f6706 	br	1000c758 <__alt_data_end+0xf800c758>
1000c9bc:	d9402017 	ldw	r5,128(sp)
1000c9c0:	d9002117 	ldw	r4,132(sp)
1000c9c4:	d9801a04 	addi	r6,sp,104
1000c9c8:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000c9cc:	103f531e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000c9d0:	d811883a 	mov	r8,sp
1000c9d4:	003cd906 	br	1000bd3c <__alt_data_end+0xf800bd3c>
1000c9d8:	10803fcc 	andi	r2,r2,255
1000c9dc:	1080201c 	xori	r2,r2,128
1000c9e0:	10bfe004 	addi	r2,r2,-128
1000c9e4:	00c00c04 	movi	r3,48
1000c9e8:	10ffe926 	beq	r2,r3,1000c990 <__alt_data_end+0xf800c990>
1000c9ec:	b8ffffc5 	stb	r3,-1(r23)
1000c9f0:	d8c01e17 	ldw	r3,120(sp)
1000c9f4:	b8bfffc4 	addi	r2,r23,-1
1000c9f8:	102f883a 	mov	r23,r2
1000c9fc:	18a9c83a 	sub	r20,r3,r2
1000ca00:	003d1106 	br	1000be48 <__alt_data_end+0xf800be48>
1000ca04:	d9402017 	ldw	r5,128(sp)
1000ca08:	d9002117 	ldw	r4,132(sp)
1000ca0c:	d9801a04 	addi	r6,sp,104
1000ca10:	d8c02a15 	stw	r3,168(sp)
1000ca14:	d9c02b15 	stw	r7,172(sp)
1000ca18:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000ca1c:	d8c02a17 	ldw	r3,168(sp)
1000ca20:	d9c02b17 	ldw	r7,172(sp)
1000ca24:	103f3d1e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000ca28:	d9001b17 	ldw	r4,108(sp)
1000ca2c:	d8801c17 	ldw	r2,112(sp)
1000ca30:	d811883a 	mov	r8,sp
1000ca34:	21400044 	addi	r5,r4,1
1000ca38:	003d4406 	br	1000bf4c <__alt_data_end+0xf800bf4c>
1000ca3c:	d9402017 	ldw	r5,128(sp)
1000ca40:	d9002117 	ldw	r4,132(sp)
1000ca44:	d9801a04 	addi	r6,sp,104
1000ca48:	d8c02a15 	stw	r3,168(sp)
1000ca4c:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000ca50:	d8c02a17 	ldw	r3,168(sp)
1000ca54:	103f311e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000ca58:	d9001b17 	ldw	r4,108(sp)
1000ca5c:	d8801c17 	ldw	r2,112(sp)
1000ca60:	d811883a 	mov	r8,sp
1000ca64:	21400044 	addi	r5,r4,1
1000ca68:	003ef406 	br	1000c63c <__alt_data_end+0xf800c63c>
1000ca6c:	1000bd1e 	bne	r2,zero,1000cd64 <___vfiprintf_internal_r+0x1328>
1000ca70:	01400044 	movi	r5,1
1000ca74:	0009883a 	mov	r4,zero
1000ca78:	d811883a 	mov	r8,sp
1000ca7c:	003ef106 	br	1000c644 <__alt_data_end+0xf800c644>
1000ca80:	d9402017 	ldw	r5,128(sp)
1000ca84:	d9002117 	ldw	r4,132(sp)
1000ca88:	d9801a04 	addi	r6,sp,104
1000ca8c:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000ca90:	103f221e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000ca94:	d9401b17 	ldw	r5,108(sp)
1000ca98:	d8801c17 	ldw	r2,112(sp)
1000ca9c:	d811883a 	mov	r8,sp
1000caa0:	29400044 	addi	r5,r5,1
1000caa4:	003d6206 	br	1000c030 <__alt_data_end+0xf800c030>
1000caa8:	01440074 	movhi	r5,4097
1000caac:	294f6604 	addi	r5,r5,15768
1000cab0:	d9402615 	stw	r5,152(sp)
1000cab4:	d8c02215 	stw	r3,136(sp)
1000cab8:	1023883a 	mov	r17,r2
1000cabc:	9d04b03a 	or	r2,r19,r20
1000cac0:	103fa51e 	bne	r2,zero,1000c958 <__alt_data_end+0xf800c958>
1000cac4:	002b883a 	mov	r21,zero
1000cac8:	00800084 	movi	r2,2
1000cacc:	003e4a06 	br	1000c3f8 <__alt_data_end+0xf800c3f8>
1000cad0:	01440074 	movhi	r5,4097
1000cad4:	294f6604 	addi	r5,r5,15768
1000cad8:	002b883a 	mov	r21,zero
1000cadc:	d9402615 	stw	r5,152(sp)
1000cae0:	003f9e06 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cae4:	d9402217 	ldw	r5,136(sp)
1000cae8:	d8001d85 	stb	zero,118(sp)
1000caec:	0029883a 	mov	r20,zero
1000caf0:	28800104 	addi	r2,r5,4
1000caf4:	2cc00017 	ldw	r19,0(r5)
1000caf8:	803e3a16 	blt	r16,zero,1000c3e4 <__alt_data_end+0xf800c3e4>
1000cafc:	00ffdfc4 	movi	r3,-129
1000cb00:	d8802215 	stw	r2,136(sp)
1000cb04:	88e2703a 	and	r17,r17,r3
1000cb08:	002b883a 	mov	r21,zero
1000cb0c:	983e9b26 	beq	r19,zero,1000c57c <__alt_data_end+0xf800c57c>
1000cb10:	00800244 	movi	r2,9
1000cb14:	14fdc936 	bltu	r2,r19,1000c23c <__alt_data_end+0xf800c23c>
1000cb18:	003e9a06 	br	1000c584 <__alt_data_end+0xf800c584>
1000cb1c:	00800c04 	movi	r2,48
1000cb20:	d8c01d45 	stb	r3,117(sp)
1000cb24:	d8801d05 	stb	r2,116(sp)
1000cb28:	d8001d85 	stb	zero,118(sp)
1000cb2c:	88c00094 	ori	r3,r17,2
1000cb30:	80009c16 	blt	r16,zero,1000cda4 <___vfiprintf_internal_r+0x1368>
1000cb34:	00bfdfc4 	movi	r2,-129
1000cb38:	88a2703a 	and	r17,r17,r2
1000cb3c:	8c400094 	ori	r17,r17,2
1000cb40:	002b883a 	mov	r21,zero
1000cb44:	003f8506 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cb48:	b029883a 	mov	r20,r22
1000cb4c:	003c0b06 	br	1000bb7c <__alt_data_end+0xf800bb7c>
1000cb50:	04e7c83a 	sub	r19,zero,r19
1000cb54:	05400b44 	movi	r21,45
1000cb58:	9804c03a 	cmpne	r2,r19,zero
1000cb5c:	0529c83a 	sub	r20,zero,r20
1000cb60:	dd401d85 	stb	r21,118(sp)
1000cb64:	a0a9c83a 	sub	r20,r20,r2
1000cb68:	80009716 	blt	r16,zero,1000cdc8 <___vfiprintf_internal_r+0x138c>
1000cb6c:	00bfdfc4 	movi	r2,-129
1000cb70:	88a2703a 	and	r17,r17,r2
1000cb74:	003db006 	br	1000c238 <__alt_data_end+0xf800c238>
1000cb78:	b0c00007 	ldb	r3,0(r22)
1000cb7c:	003c0c06 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000cb80:	8880100c 	andi	r2,r17,64
1000cb84:	d8001d85 	stb	zero,118(sp)
1000cb88:	1000461e 	bne	r2,zero,1000cca4 <___vfiprintf_internal_r+0x1268>
1000cb8c:	d9002217 	ldw	r4,136(sp)
1000cb90:	0029883a 	mov	r20,zero
1000cb94:	20800104 	addi	r2,r4,4
1000cb98:	24c00017 	ldw	r19,0(r4)
1000cb9c:	803df80e 	bge	r16,zero,1000c380 <__alt_data_end+0xf800c380>
1000cba0:	9d06b03a 	or	r3,r19,r20
1000cba4:	d8802215 	stw	r2,136(sp)
1000cba8:	183d5e1e 	bne	r3,zero,1000c124 <__alt_data_end+0xf800c124>
1000cbac:	002b883a 	mov	r21,zero
1000cbb0:	0005883a 	mov	r2,zero
1000cbb4:	003e1006 	br	1000c3f8 <__alt_data_end+0xf800c3f8>
1000cbb8:	8880040c 	andi	r2,r17,16
1000cbbc:	1000321e 	bne	r2,zero,1000cc88 <___vfiprintf_internal_r+0x124c>
1000cbc0:	8c40100c 	andi	r17,r17,64
1000cbc4:	88008d26 	beq	r17,zero,1000cdfc <___vfiprintf_internal_r+0x13c0>
1000cbc8:	d9402217 	ldw	r5,136(sp)
1000cbcc:	d8c02417 	ldw	r3,144(sp)
1000cbd0:	28800017 	ldw	r2,0(r5)
1000cbd4:	29400104 	addi	r5,r5,4
1000cbd8:	d9402215 	stw	r5,136(sp)
1000cbdc:	10c0000d 	sth	r3,0(r2)
1000cbe0:	003bca06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000cbe4:	8880100c 	andi	r2,r17,64
1000cbe8:	10003a26 	beq	r2,zero,1000ccd4 <___vfiprintf_internal_r+0x1298>
1000cbec:	d8802217 	ldw	r2,136(sp)
1000cbf0:	14c0000f 	ldh	r19,0(r2)
1000cbf4:	10800104 	addi	r2,r2,4
1000cbf8:	d8802215 	stw	r2,136(sp)
1000cbfc:	9829d7fa 	srai	r20,r19,31
1000cc00:	a005883a 	mov	r2,r20
1000cc04:	003d8506 	br	1000c21c <__alt_data_end+0xf800c21c>
1000cc08:	8880100c 	andi	r2,r17,64
1000cc0c:	10002b26 	beq	r2,zero,1000ccbc <___vfiprintf_internal_r+0x1280>
1000cc10:	d8802217 	ldw	r2,136(sp)
1000cc14:	0029883a 	mov	r20,zero
1000cc18:	14c0000b 	ldhu	r19,0(r2)
1000cc1c:	10800104 	addi	r2,r2,4
1000cc20:	d8802215 	stw	r2,136(sp)
1000cc24:	003d5d06 	br	1000c19c <__alt_data_end+0xf800c19c>
1000cc28:	d9402017 	ldw	r5,128(sp)
1000cc2c:	d9002117 	ldw	r4,132(sp)
1000cc30:	d9801a04 	addi	r6,sp,104
1000cc34:	d8c02a15 	stw	r3,168(sp)
1000cc38:	d9c02b15 	stw	r7,172(sp)
1000cc3c:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000cc40:	d8c02a17 	ldw	r3,168(sp)
1000cc44:	d9c02b17 	ldw	r7,172(sp)
1000cc48:	103eb41e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000cc4c:	d9001b17 	ldw	r4,108(sp)
1000cc50:	d8801c17 	ldw	r2,112(sp)
1000cc54:	d811883a 	mov	r8,sp
1000cc58:	21400044 	addi	r5,r4,1
1000cc5c:	003e6706 	br	1000c5fc <__alt_data_end+0xf800c5fc>
1000cc60:	00bfffc4 	movi	r2,-1
1000cc64:	003c4a06 	br	1000bd90 <__alt_data_end+0xf800bd90>
1000cc68:	9805883a 	mov	r2,r19
1000cc6c:	003ee806 	br	1000c810 <__alt_data_end+0xf800c810>
1000cc70:	d8c02217 	ldw	r3,136(sp)
1000cc74:	0029883a 	mov	r20,zero
1000cc78:	18800104 	addi	r2,r3,4
1000cc7c:	1cc0000b 	ldhu	r19,0(r3)
1000cc80:	803f9e0e 	bge	r16,zero,1000cafc <__alt_data_end+0xf800cafc>
1000cc84:	003dd706 	br	1000c3e4 <__alt_data_end+0xf800c3e4>
1000cc88:	d8c02217 	ldw	r3,136(sp)
1000cc8c:	d9002417 	ldw	r4,144(sp)
1000cc90:	18800017 	ldw	r2,0(r3)
1000cc94:	18c00104 	addi	r3,r3,4
1000cc98:	d8c02215 	stw	r3,136(sp)
1000cc9c:	11000015 	stw	r4,0(r2)
1000cca0:	003b9a06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000cca4:	d8c02217 	ldw	r3,136(sp)
1000cca8:	0029883a 	mov	r20,zero
1000ccac:	18800104 	addi	r2,r3,4
1000ccb0:	1cc0000b 	ldhu	r19,0(r3)
1000ccb4:	803db20e 	bge	r16,zero,1000c380 <__alt_data_end+0xf800c380>
1000ccb8:	003fb906 	br	1000cba0 <__alt_data_end+0xf800cba0>
1000ccbc:	d9002217 	ldw	r4,136(sp)
1000ccc0:	0029883a 	mov	r20,zero
1000ccc4:	24c00017 	ldw	r19,0(r4)
1000ccc8:	21000104 	addi	r4,r4,4
1000cccc:	d9002215 	stw	r4,136(sp)
1000ccd0:	003d3206 	br	1000c19c <__alt_data_end+0xf800c19c>
1000ccd4:	d8c02217 	ldw	r3,136(sp)
1000ccd8:	1cc00017 	ldw	r19,0(r3)
1000ccdc:	18c00104 	addi	r3,r3,4
1000cce0:	d8c02215 	stw	r3,136(sp)
1000cce4:	9829d7fa 	srai	r20,r19,31
1000cce8:	a005883a 	mov	r2,r20
1000ccec:	003d4b06 	br	1000c21c <__alt_data_end+0xf800c21c>
1000ccf0:	0009883a 	mov	r4,zero
1000ccf4:	01400044 	movi	r5,1
1000ccf8:	d811883a 	mov	r8,sp
1000ccfc:	003e4f06 	br	1000c63c <__alt_data_end+0xf800c63c>
1000cd00:	d8c02215 	stw	r3,136(sp)
1000cd04:	002b883a 	mov	r21,zero
1000cd08:	003db806 	br	1000c3ec <__alt_data_end+0xf800c3ec>
1000cd0c:	d811883a 	mov	r8,sp
1000cd10:	003e9606 	br	1000c76c <__alt_data_end+0xf800c76c>
1000cd14:	01040074 	movhi	r4,4097
1000cd18:	210fc704 	addi	r4,r4,16156
1000cd1c:	d9002315 	stw	r4,140(sp)
1000cd20:	003e6306 	br	1000c6b0 <__alt_data_end+0xf800c6b0>
1000cd24:	b0c00043 	ldbu	r3,1(r22)
1000cd28:	8c400814 	ori	r17,r17,32
1000cd2c:	b5800044 	addi	r22,r22,1
1000cd30:	18c03fcc 	andi	r3,r3,255
1000cd34:	18c0201c 	xori	r3,r3,128
1000cd38:	18ffe004 	addi	r3,r3,-128
1000cd3c:	003b9c06 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000cd40:	b809883a 	mov	r4,r23
1000cd44:	da002a15 	stw	r8,168(sp)
1000cd48:	00042d40 	call	100042d4 <strlen>
1000cd4c:	1029883a 	mov	r20,r2
1000cd50:	dd401d83 	ldbu	r21,118(sp)
1000cd54:	df002215 	stw	fp,136(sp)
1000cd58:	0021883a 	mov	r16,zero
1000cd5c:	da002a17 	ldw	r8,168(sp)
1000cd60:	003c3906 	br	1000be48 <__alt_data_end+0xf800be48>
1000cd64:	d9402017 	ldw	r5,128(sp)
1000cd68:	d9002117 	ldw	r4,132(sp)
1000cd6c:	d9801a04 	addi	r6,sp,104
1000cd70:	000b9280 	call	1000b928 <__sprint_r.part.0>
1000cd74:	103e691e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000cd78:	d9001b17 	ldw	r4,108(sp)
1000cd7c:	d8801c17 	ldw	r2,112(sp)
1000cd80:	d811883a 	mov	r8,sp
1000cd84:	21400044 	addi	r5,r4,1
1000cd88:	003e2e06 	br	1000c644 <__alt_data_end+0xf800c644>
1000cd8c:	01040074 	movhi	r4,4097
1000cd90:	210fcb04 	addi	r4,r4,16172
1000cd94:	d9002315 	stw	r4,140(sp)
1000cd98:	d9001b17 	ldw	r4,108(sp)
1000cd9c:	21000044 	addi	r4,r4,1
1000cda0:	003c5e06 	br	1000bf1c <__alt_data_end+0xf800bf1c>
1000cda4:	002b883a 	mov	r21,zero
1000cda8:	00800084 	movi	r2,2
1000cdac:	10803fcc 	andi	r2,r2,255
1000cdb0:	01000044 	movi	r4,1
1000cdb4:	11002b26 	beq	r2,r4,1000ce64 <___vfiprintf_internal_r+0x1428>
1000cdb8:	01000084 	movi	r4,2
1000cdbc:	11002b1e 	bne	r2,r4,1000ce6c <___vfiprintf_internal_r+0x1430>
1000cdc0:	1823883a 	mov	r17,r3
1000cdc4:	003ee506 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cdc8:	8807883a 	mov	r3,r17
1000cdcc:	00800044 	movi	r2,1
1000cdd0:	003ff606 	br	1000cdac <__alt_data_end+0xf800cdac>
1000cdd4:	00800184 	movi	r2,6
1000cdd8:	1400012e 	bgeu	r2,r16,1000cde0 <___vfiprintf_internal_r+0x13a4>
1000cddc:	1021883a 	mov	r16,r2
1000cde0:	8029883a 	mov	r20,r16
1000cde4:	8027883a 	mov	r19,r16
1000cde8:	80002216 	blt	r16,zero,1000ce74 <___vfiprintf_internal_r+0x1438>
1000cdec:	05c40074 	movhi	r23,4097
1000cdf0:	df002215 	stw	fp,136(sp)
1000cdf4:	bdcf6b04 	addi	r23,r23,15788
1000cdf8:	003cfb06 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000cdfc:	d9002217 	ldw	r4,136(sp)
1000ce00:	d9402417 	ldw	r5,144(sp)
1000ce04:	20800017 	ldw	r2,0(r4)
1000ce08:	21000104 	addi	r4,r4,4
1000ce0c:	d9002215 	stw	r4,136(sp)
1000ce10:	11400015 	stw	r5,0(r2)
1000ce14:	003b3d06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000ce18:	01440074 	movhi	r5,4097
1000ce1c:	294fcb04 	addi	r5,r5,16172
1000ce20:	d9402315 	stw	r5,140(sp)
1000ce24:	d9401b17 	ldw	r5,108(sp)
1000ce28:	29400044 	addi	r5,r5,1
1000ce2c:	003e6d06 	br	1000c7e4 <__alt_data_end+0xf800c7e4>
1000ce30:	8029883a 	mov	r20,r16
1000ce34:	dd401d83 	ldbu	r21,118(sp)
1000ce38:	df002215 	stw	fp,136(sp)
1000ce3c:	0021883a 	mov	r16,zero
1000ce40:	003c0106 	br	1000be48 <__alt_data_end+0xf800be48>
1000ce44:	00c40074 	movhi	r3,4097
1000ce48:	18cfc704 	addi	r3,r3,16156
1000ce4c:	d8c02315 	stw	r3,140(sp)
1000ce50:	280d883a 	mov	r6,r5
1000ce54:	003c6906 	br	1000bffc <__alt_data_end+0xf800bffc>
1000ce58:	802d883a 	mov	r22,r16
1000ce5c:	0021883a 	mov	r16,zero
1000ce60:	003b5406 	br	1000bbb4 <__alt_data_end+0xf800bbb4>
1000ce64:	1823883a 	mov	r17,r3
1000ce68:	003cf306 	br	1000c238 <__alt_data_end+0xf800c238>
1000ce6c:	1823883a 	mov	r17,r3
1000ce70:	003cad06 	br	1000c128 <__alt_data_end+0xf800c128>
1000ce74:	0027883a 	mov	r19,zero
1000ce78:	003fdc06 	br	1000cdec <__alt_data_end+0xf800cdec>
1000ce7c:	d9402217 	ldw	r5,136(sp)
1000ce80:	8005883a 	mov	r2,r16
1000ce84:	b0c00043 	ldbu	r3,1(r22)
1000ce88:	2c000017 	ldw	r16,0(r5)
1000ce8c:	29000104 	addi	r4,r5,4
1000ce90:	d9002215 	stw	r4,136(sp)
1000ce94:	102d883a 	mov	r22,r2
1000ce98:	803fa50e 	bge	r16,zero,1000cd30 <__alt_data_end+0xf800cd30>
1000ce9c:	18c03fcc 	andi	r3,r3,255
1000cea0:	18c0201c 	xori	r3,r3,128
1000cea4:	043fffc4 	movi	r16,-1
1000cea8:	18ffe004 	addi	r3,r3,-128
1000ceac:	003b4006 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000ceb0:	d9402303 	ldbu	r5,140(sp)
1000ceb4:	d9401d85 	stb	r5,118(sp)
1000ceb8:	003cae06 	br	1000c174 <__alt_data_end+0xf800c174>
1000cebc:	d8c02303 	ldbu	r3,140(sp)
1000cec0:	d8c01d85 	stb	r3,118(sp)
1000cec4:	003d1406 	br	1000c318 <__alt_data_end+0xf800c318>
1000cec8:	d8c02303 	ldbu	r3,140(sp)
1000cecc:	d8c01d85 	stb	r3,118(sp)
1000ced0:	003cca06 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000ced4:	8880004c 	andi	r2,r17,1
1000ced8:	002b883a 	mov	r21,zero
1000cedc:	10000526 	beq	r2,zero,1000cef4 <___vfiprintf_internal_r+0x14b8>
1000cee0:	00800c04 	movi	r2,48
1000cee4:	d88019c5 	stb	r2,103(sp)
1000cee8:	dd002817 	ldw	r20,160(sp)
1000ceec:	ddc019c4 	addi	r23,sp,103
1000cef0:	003bd506 	br	1000be48 <__alt_data_end+0xf800be48>
1000cef4:	0029883a 	mov	r20,zero
1000cef8:	ddc01a04 	addi	r23,sp,104
1000cefc:	003bd206 	br	1000be48 <__alt_data_end+0xf800be48>
1000cf00:	d9002303 	ldbu	r4,140(sp)
1000cf04:	d9001d85 	stb	r4,118(sp)
1000cf08:	003da606 	br	1000c5a4 <__alt_data_end+0xf800c5a4>
1000cf0c:	d8c02303 	ldbu	r3,140(sp)
1000cf10:	d8c01d85 	stb	r3,118(sp)
1000cf14:	003c7606 	br	1000c0f0 <__alt_data_end+0xf800c0f0>
1000cf18:	d8c02303 	ldbu	r3,140(sp)
1000cf1c:	d8c01d85 	stb	r3,118(sp)
1000cf20:	003c6506 	br	1000c0b8 <__alt_data_end+0xf800c0b8>
1000cf24:	d9002303 	ldbu	r4,140(sp)
1000cf28:	d9001d85 	stb	r4,118(sp)
1000cf2c:	003d3d06 	br	1000c424 <__alt_data_end+0xf800c424>
1000cf30:	d8c02303 	ldbu	r3,140(sp)
1000cf34:	d8c01d85 	stb	r3,118(sp)
1000cf38:	003d1d06 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000cf3c:	d8c02303 	ldbu	r3,140(sp)
1000cf40:	d8c01d85 	stb	r3,118(sp)
1000cf44:	003d0306 	br	1000c354 <__alt_data_end+0xf800c354>

1000cf48 <__vfiprintf_internal>:
1000cf48:	00840074 	movhi	r2,4097
1000cf4c:	1096c804 	addi	r2,r2,23328
1000cf50:	300f883a 	mov	r7,r6
1000cf54:	280d883a 	mov	r6,r5
1000cf58:	200b883a 	mov	r5,r4
1000cf5c:	11000017 	ldw	r4,0(r2)
1000cf60:	000ba3c1 	jmpi	1000ba3c <___vfiprintf_internal_r>

1000cf64 <__sbprintf>:
1000cf64:	2880030b 	ldhu	r2,12(r5)
1000cf68:	2ac01917 	ldw	r11,100(r5)
1000cf6c:	2a80038b 	ldhu	r10,14(r5)
1000cf70:	2a400717 	ldw	r9,28(r5)
1000cf74:	2a000917 	ldw	r8,36(r5)
1000cf78:	defee204 	addi	sp,sp,-1144
1000cf7c:	00c10004 	movi	r3,1024
1000cf80:	dc011a15 	stw	r16,1128(sp)
1000cf84:	10bfff4c 	andi	r2,r2,65533
1000cf88:	2821883a 	mov	r16,r5
1000cf8c:	d8cb883a 	add	r5,sp,r3
1000cf90:	dc811c15 	stw	r18,1136(sp)
1000cf94:	dc411b15 	stw	r17,1132(sp)
1000cf98:	dfc11d15 	stw	ra,1140(sp)
1000cf9c:	2025883a 	mov	r18,r4
1000cfa0:	d881030d 	sth	r2,1036(sp)
1000cfa4:	dac11915 	stw	r11,1124(sp)
1000cfa8:	da81038d 	sth	r10,1038(sp)
1000cfac:	da410715 	stw	r9,1052(sp)
1000cfb0:	da010915 	stw	r8,1060(sp)
1000cfb4:	dec10015 	stw	sp,1024(sp)
1000cfb8:	dec10415 	stw	sp,1040(sp)
1000cfbc:	d8c10215 	stw	r3,1032(sp)
1000cfc0:	d8c10515 	stw	r3,1044(sp)
1000cfc4:	d8010615 	stw	zero,1048(sp)
1000cfc8:	000ba3c0 	call	1000ba3c <___vfiprintf_internal_r>
1000cfcc:	1023883a 	mov	r17,r2
1000cfd0:	10000416 	blt	r2,zero,1000cfe4 <__sbprintf+0x80>
1000cfd4:	d9410004 	addi	r5,sp,1024
1000cfd8:	9009883a 	mov	r4,r18
1000cfdc:	00083400 	call	10008340 <_fflush_r>
1000cfe0:	10000d1e 	bne	r2,zero,1000d018 <__sbprintf+0xb4>
1000cfe4:	d881030b 	ldhu	r2,1036(sp)
1000cfe8:	1080100c 	andi	r2,r2,64
1000cfec:	10000326 	beq	r2,zero,1000cffc <__sbprintf+0x98>
1000cff0:	8080030b 	ldhu	r2,12(r16)
1000cff4:	10801014 	ori	r2,r2,64
1000cff8:	8080030d 	sth	r2,12(r16)
1000cffc:	8805883a 	mov	r2,r17
1000d000:	dfc11d17 	ldw	ra,1140(sp)
1000d004:	dc811c17 	ldw	r18,1136(sp)
1000d008:	dc411b17 	ldw	r17,1132(sp)
1000d00c:	dc011a17 	ldw	r16,1128(sp)
1000d010:	dec11e04 	addi	sp,sp,1144
1000d014:	f800283a 	ret
1000d018:	047fffc4 	movi	r17,-1
1000d01c:	003ff106 	br	1000cfe4 <__alt_data_end+0xf800cfe4>

1000d020 <_write_r>:
1000d020:	defffd04 	addi	sp,sp,-12
1000d024:	2805883a 	mov	r2,r5
1000d028:	dc000015 	stw	r16,0(sp)
1000d02c:	04040074 	movhi	r16,4097
1000d030:	dc400115 	stw	r17,4(sp)
1000d034:	300b883a 	mov	r5,r6
1000d038:	841d9b04 	addi	r16,r16,30316
1000d03c:	2023883a 	mov	r17,r4
1000d040:	380d883a 	mov	r6,r7
1000d044:	1009883a 	mov	r4,r2
1000d048:	dfc00215 	stw	ra,8(sp)
1000d04c:	80000015 	stw	zero,0(r16)
1000d050:	00116bc0 	call	100116bc <write>
1000d054:	00ffffc4 	movi	r3,-1
1000d058:	10c00526 	beq	r2,r3,1000d070 <_write_r+0x50>
1000d05c:	dfc00217 	ldw	ra,8(sp)
1000d060:	dc400117 	ldw	r17,4(sp)
1000d064:	dc000017 	ldw	r16,0(sp)
1000d068:	dec00304 	addi	sp,sp,12
1000d06c:	f800283a 	ret
1000d070:	80c00017 	ldw	r3,0(r16)
1000d074:	183ff926 	beq	r3,zero,1000d05c <__alt_data_end+0xf800d05c>
1000d078:	88c00015 	stw	r3,0(r17)
1000d07c:	003ff706 	br	1000d05c <__alt_data_end+0xf800d05c>

1000d080 <_close_r>:
1000d080:	defffd04 	addi	sp,sp,-12
1000d084:	dc000015 	stw	r16,0(sp)
1000d088:	04040074 	movhi	r16,4097
1000d08c:	dc400115 	stw	r17,4(sp)
1000d090:	841d9b04 	addi	r16,r16,30316
1000d094:	2023883a 	mov	r17,r4
1000d098:	2809883a 	mov	r4,r5
1000d09c:	dfc00215 	stw	ra,8(sp)
1000d0a0:	80000015 	stw	zero,0(r16)
1000d0a4:	0010e340 	call	10010e34 <close>
1000d0a8:	00ffffc4 	movi	r3,-1
1000d0ac:	10c00526 	beq	r2,r3,1000d0c4 <_close_r+0x44>
1000d0b0:	dfc00217 	ldw	ra,8(sp)
1000d0b4:	dc400117 	ldw	r17,4(sp)
1000d0b8:	dc000017 	ldw	r16,0(sp)
1000d0bc:	dec00304 	addi	sp,sp,12
1000d0c0:	f800283a 	ret
1000d0c4:	80c00017 	ldw	r3,0(r16)
1000d0c8:	183ff926 	beq	r3,zero,1000d0b0 <__alt_data_end+0xf800d0b0>
1000d0cc:	88c00015 	stw	r3,0(r17)
1000d0d0:	003ff706 	br	1000d0b0 <__alt_data_end+0xf800d0b0>

1000d0d4 <_calloc_r>:
1000d0d4:	defffe04 	addi	sp,sp,-8
1000d0d8:	2805883a 	mov	r2,r5
1000d0dc:	dc000015 	stw	r16,0(sp)
1000d0e0:	300b883a 	mov	r5,r6
1000d0e4:	2021883a 	mov	r16,r4
1000d0e8:	1009883a 	mov	r4,r2
1000d0ec:	dfc00115 	stw	ra,4(sp)
1000d0f0:	000e52c0 	call	1000e52c <__mulsi3>
1000d0f4:	100b883a 	mov	r5,r2
1000d0f8:	8009883a 	mov	r4,r16
1000d0fc:	00094980 	call	10009498 <_malloc_r>
1000d100:	10002926 	beq	r2,zero,1000d1a8 <_calloc_r+0xd4>
1000d104:	11bfff17 	ldw	r6,-4(r2)
1000d108:	1021883a 	mov	r16,r2
1000d10c:	00bfff04 	movi	r2,-4
1000d110:	308c703a 	and	r6,r6,r2
1000d114:	00c00904 	movi	r3,36
1000d118:	308d883a 	add	r6,r6,r2
1000d11c:	19801636 	bltu	r3,r6,1000d178 <_calloc_r+0xa4>
1000d120:	008004c4 	movi	r2,19
1000d124:	11800b2e 	bgeu	r2,r6,1000d154 <_calloc_r+0x80>
1000d128:	80000015 	stw	zero,0(r16)
1000d12c:	80000115 	stw	zero,4(r16)
1000d130:	008006c4 	movi	r2,27
1000d134:	11801a2e 	bgeu	r2,r6,1000d1a0 <_calloc_r+0xcc>
1000d138:	80000215 	stw	zero,8(r16)
1000d13c:	80000315 	stw	zero,12(r16)
1000d140:	30c0151e 	bne	r6,r3,1000d198 <_calloc_r+0xc4>
1000d144:	80000415 	stw	zero,16(r16)
1000d148:	80800604 	addi	r2,r16,24
1000d14c:	80000515 	stw	zero,20(r16)
1000d150:	00000106 	br	1000d158 <_calloc_r+0x84>
1000d154:	8005883a 	mov	r2,r16
1000d158:	10000015 	stw	zero,0(r2)
1000d15c:	10000115 	stw	zero,4(r2)
1000d160:	10000215 	stw	zero,8(r2)
1000d164:	8005883a 	mov	r2,r16
1000d168:	dfc00117 	ldw	ra,4(sp)
1000d16c:	dc000017 	ldw	r16,0(sp)
1000d170:	dec00204 	addi	sp,sp,8
1000d174:	f800283a 	ret
1000d178:	000b883a 	mov	r5,zero
1000d17c:	8009883a 	mov	r4,r16
1000d180:	000406c0 	call	1000406c <memset>
1000d184:	8005883a 	mov	r2,r16
1000d188:	dfc00117 	ldw	ra,4(sp)
1000d18c:	dc000017 	ldw	r16,0(sp)
1000d190:	dec00204 	addi	sp,sp,8
1000d194:	f800283a 	ret
1000d198:	80800404 	addi	r2,r16,16
1000d19c:	003fee06 	br	1000d158 <__alt_data_end+0xf800d158>
1000d1a0:	80800204 	addi	r2,r16,8
1000d1a4:	003fec06 	br	1000d158 <__alt_data_end+0xf800d158>
1000d1a8:	0005883a 	mov	r2,zero
1000d1ac:	003fee06 	br	1000d168 <__alt_data_end+0xf800d168>

1000d1b0 <_fclose_r>:
1000d1b0:	28003926 	beq	r5,zero,1000d298 <_fclose_r+0xe8>
1000d1b4:	defffc04 	addi	sp,sp,-16
1000d1b8:	dc400115 	stw	r17,4(sp)
1000d1bc:	dc000015 	stw	r16,0(sp)
1000d1c0:	dfc00315 	stw	ra,12(sp)
1000d1c4:	dc800215 	stw	r18,8(sp)
1000d1c8:	2023883a 	mov	r17,r4
1000d1cc:	2821883a 	mov	r16,r5
1000d1d0:	20000226 	beq	r4,zero,1000d1dc <_fclose_r+0x2c>
1000d1d4:	20800e17 	ldw	r2,56(r4)
1000d1d8:	10002726 	beq	r2,zero,1000d278 <_fclose_r+0xc8>
1000d1dc:	8080030f 	ldh	r2,12(r16)
1000d1e0:	1000071e 	bne	r2,zero,1000d200 <_fclose_r+0x50>
1000d1e4:	0005883a 	mov	r2,zero
1000d1e8:	dfc00317 	ldw	ra,12(sp)
1000d1ec:	dc800217 	ldw	r18,8(sp)
1000d1f0:	dc400117 	ldw	r17,4(sp)
1000d1f4:	dc000017 	ldw	r16,0(sp)
1000d1f8:	dec00404 	addi	sp,sp,16
1000d1fc:	f800283a 	ret
1000d200:	800b883a 	mov	r5,r16
1000d204:	8809883a 	mov	r4,r17
1000d208:	00081240 	call	10008124 <__sflush_r>
1000d20c:	1025883a 	mov	r18,r2
1000d210:	80800b17 	ldw	r2,44(r16)
1000d214:	10000426 	beq	r2,zero,1000d228 <_fclose_r+0x78>
1000d218:	81400717 	ldw	r5,28(r16)
1000d21c:	8809883a 	mov	r4,r17
1000d220:	103ee83a 	callr	r2
1000d224:	10001616 	blt	r2,zero,1000d280 <_fclose_r+0xd0>
1000d228:	8080030b 	ldhu	r2,12(r16)
1000d22c:	1080200c 	andi	r2,r2,128
1000d230:	1000151e 	bne	r2,zero,1000d288 <_fclose_r+0xd8>
1000d234:	81400c17 	ldw	r5,48(r16)
1000d238:	28000526 	beq	r5,zero,1000d250 <_fclose_r+0xa0>
1000d23c:	80801004 	addi	r2,r16,64
1000d240:	28800226 	beq	r5,r2,1000d24c <_fclose_r+0x9c>
1000d244:	8809883a 	mov	r4,r17
1000d248:	00088a00 	call	100088a0 <_free_r>
1000d24c:	80000c15 	stw	zero,48(r16)
1000d250:	81401117 	ldw	r5,68(r16)
1000d254:	28000326 	beq	r5,zero,1000d264 <_fclose_r+0xb4>
1000d258:	8809883a 	mov	r4,r17
1000d25c:	00088a00 	call	100088a0 <_free_r>
1000d260:	80001115 	stw	zero,68(r16)
1000d264:	000873c0 	call	1000873c <__sfp_lock_acquire>
1000d268:	8000030d 	sth	zero,12(r16)
1000d26c:	00087400 	call	10008740 <__sfp_lock_release>
1000d270:	9005883a 	mov	r2,r18
1000d274:	003fdc06 	br	1000d1e8 <__alt_data_end+0xf800d1e8>
1000d278:	000872c0 	call	1000872c <__sinit>
1000d27c:	003fd706 	br	1000d1dc <__alt_data_end+0xf800d1dc>
1000d280:	04bfffc4 	movi	r18,-1
1000d284:	003fe806 	br	1000d228 <__alt_data_end+0xf800d228>
1000d288:	81400417 	ldw	r5,16(r16)
1000d28c:	8809883a 	mov	r4,r17
1000d290:	00088a00 	call	100088a0 <_free_r>
1000d294:	003fe706 	br	1000d234 <__alt_data_end+0xf800d234>
1000d298:	0005883a 	mov	r2,zero
1000d29c:	f800283a 	ret

1000d2a0 <fclose>:
1000d2a0:	00840074 	movhi	r2,4097
1000d2a4:	1096c804 	addi	r2,r2,23328
1000d2a8:	200b883a 	mov	r5,r4
1000d2ac:	11000017 	ldw	r4,0(r2)
1000d2b0:	000d1b01 	jmpi	1000d1b0 <_fclose_r>

1000d2b4 <__fputwc>:
1000d2b4:	defff804 	addi	sp,sp,-32
1000d2b8:	dcc00415 	stw	r19,16(sp)
1000d2bc:	dc800315 	stw	r18,12(sp)
1000d2c0:	dc000115 	stw	r16,4(sp)
1000d2c4:	dfc00715 	stw	ra,28(sp)
1000d2c8:	dd400615 	stw	r21,24(sp)
1000d2cc:	dd000515 	stw	r20,20(sp)
1000d2d0:	dc400215 	stw	r17,8(sp)
1000d2d4:	2027883a 	mov	r19,r4
1000d2d8:	2825883a 	mov	r18,r5
1000d2dc:	3021883a 	mov	r16,r6
1000d2e0:	00092880 	call	10009288 <__locale_mb_cur_max>
1000d2e4:	00c00044 	movi	r3,1
1000d2e8:	10c03e26 	beq	r2,r3,1000d3e4 <__fputwc+0x130>
1000d2ec:	81c01704 	addi	r7,r16,92
1000d2f0:	900d883a 	mov	r6,r18
1000d2f4:	d80b883a 	mov	r5,sp
1000d2f8:	9809883a 	mov	r4,r19
1000d2fc:	000d7840 	call	1000d784 <_wcrtomb_r>
1000d300:	1029883a 	mov	r20,r2
1000d304:	00bfffc4 	movi	r2,-1
1000d308:	a0802026 	beq	r20,r2,1000d38c <__fputwc+0xd8>
1000d30c:	d9400003 	ldbu	r5,0(sp)
1000d310:	a0001c26 	beq	r20,zero,1000d384 <__fputwc+0xd0>
1000d314:	0023883a 	mov	r17,zero
1000d318:	05400284 	movi	r21,10
1000d31c:	00000906 	br	1000d344 <__fputwc+0x90>
1000d320:	80800017 	ldw	r2,0(r16)
1000d324:	11400005 	stb	r5,0(r2)
1000d328:	80c00017 	ldw	r3,0(r16)
1000d32c:	18c00044 	addi	r3,r3,1
1000d330:	80c00015 	stw	r3,0(r16)
1000d334:	8c400044 	addi	r17,r17,1
1000d338:	dc45883a 	add	r2,sp,r17
1000d33c:	8d00112e 	bgeu	r17,r20,1000d384 <__fputwc+0xd0>
1000d340:	11400003 	ldbu	r5,0(r2)
1000d344:	80c00217 	ldw	r3,8(r16)
1000d348:	18ffffc4 	addi	r3,r3,-1
1000d34c:	80c00215 	stw	r3,8(r16)
1000d350:	183ff30e 	bge	r3,zero,1000d320 <__alt_data_end+0xf800d320>
1000d354:	80800617 	ldw	r2,24(r16)
1000d358:	18801916 	blt	r3,r2,1000d3c0 <__fputwc+0x10c>
1000d35c:	80800017 	ldw	r2,0(r16)
1000d360:	11400005 	stb	r5,0(r2)
1000d364:	80800017 	ldw	r2,0(r16)
1000d368:	10c00003 	ldbu	r3,0(r2)
1000d36c:	10800044 	addi	r2,r2,1
1000d370:	1d402326 	beq	r3,r21,1000d400 <__fputwc+0x14c>
1000d374:	80800015 	stw	r2,0(r16)
1000d378:	8c400044 	addi	r17,r17,1
1000d37c:	dc45883a 	add	r2,sp,r17
1000d380:	8d3fef36 	bltu	r17,r20,1000d340 <__alt_data_end+0xf800d340>
1000d384:	9005883a 	mov	r2,r18
1000d388:	00000406 	br	1000d39c <__fputwc+0xe8>
1000d38c:	80c0030b 	ldhu	r3,12(r16)
1000d390:	a005883a 	mov	r2,r20
1000d394:	18c01014 	ori	r3,r3,64
1000d398:	80c0030d 	sth	r3,12(r16)
1000d39c:	dfc00717 	ldw	ra,28(sp)
1000d3a0:	dd400617 	ldw	r21,24(sp)
1000d3a4:	dd000517 	ldw	r20,20(sp)
1000d3a8:	dcc00417 	ldw	r19,16(sp)
1000d3ac:	dc800317 	ldw	r18,12(sp)
1000d3b0:	dc400217 	ldw	r17,8(sp)
1000d3b4:	dc000117 	ldw	r16,4(sp)
1000d3b8:	dec00804 	addi	sp,sp,32
1000d3bc:	f800283a 	ret
1000d3c0:	800d883a 	mov	r6,r16
1000d3c4:	29403fcc 	andi	r5,r5,255
1000d3c8:	9809883a 	mov	r4,r19
1000d3cc:	000d62c0 	call	1000d62c <__swbuf_r>
1000d3d0:	10bfffe0 	cmpeqi	r2,r2,-1
1000d3d4:	10803fcc 	andi	r2,r2,255
1000d3d8:	103fd626 	beq	r2,zero,1000d334 <__alt_data_end+0xf800d334>
1000d3dc:	00bfffc4 	movi	r2,-1
1000d3e0:	003fee06 	br	1000d39c <__alt_data_end+0xf800d39c>
1000d3e4:	90ffffc4 	addi	r3,r18,-1
1000d3e8:	01003f84 	movi	r4,254
1000d3ec:	20ffbf36 	bltu	r4,r3,1000d2ec <__alt_data_end+0xf800d2ec>
1000d3f0:	900b883a 	mov	r5,r18
1000d3f4:	dc800005 	stb	r18,0(sp)
1000d3f8:	1029883a 	mov	r20,r2
1000d3fc:	003fc506 	br	1000d314 <__alt_data_end+0xf800d314>
1000d400:	800d883a 	mov	r6,r16
1000d404:	a80b883a 	mov	r5,r21
1000d408:	9809883a 	mov	r4,r19
1000d40c:	000d62c0 	call	1000d62c <__swbuf_r>
1000d410:	10bfffe0 	cmpeqi	r2,r2,-1
1000d414:	003fef06 	br	1000d3d4 <__alt_data_end+0xf800d3d4>

1000d418 <_fputwc_r>:
1000d418:	3080030b 	ldhu	r2,12(r6)
1000d41c:	10c8000c 	andi	r3,r2,8192
1000d420:	1800051e 	bne	r3,zero,1000d438 <_fputwc_r+0x20>
1000d424:	30c01917 	ldw	r3,100(r6)
1000d428:	10880014 	ori	r2,r2,8192
1000d42c:	3080030d 	sth	r2,12(r6)
1000d430:	18880014 	ori	r2,r3,8192
1000d434:	30801915 	stw	r2,100(r6)
1000d438:	000d2b41 	jmpi	1000d2b4 <__fputwc>

1000d43c <fputwc>:
1000d43c:	00840074 	movhi	r2,4097
1000d440:	defffc04 	addi	sp,sp,-16
1000d444:	1096c804 	addi	r2,r2,23328
1000d448:	dc000115 	stw	r16,4(sp)
1000d44c:	14000017 	ldw	r16,0(r2)
1000d450:	dc400215 	stw	r17,8(sp)
1000d454:	dfc00315 	stw	ra,12(sp)
1000d458:	2023883a 	mov	r17,r4
1000d45c:	80000226 	beq	r16,zero,1000d468 <fputwc+0x2c>
1000d460:	80800e17 	ldw	r2,56(r16)
1000d464:	10001026 	beq	r2,zero,1000d4a8 <fputwc+0x6c>
1000d468:	2880030b 	ldhu	r2,12(r5)
1000d46c:	10c8000c 	andi	r3,r2,8192
1000d470:	1800051e 	bne	r3,zero,1000d488 <fputwc+0x4c>
1000d474:	28c01917 	ldw	r3,100(r5)
1000d478:	10880014 	ori	r2,r2,8192
1000d47c:	2880030d 	sth	r2,12(r5)
1000d480:	18880014 	ori	r2,r3,8192
1000d484:	28801915 	stw	r2,100(r5)
1000d488:	280d883a 	mov	r6,r5
1000d48c:	8009883a 	mov	r4,r16
1000d490:	880b883a 	mov	r5,r17
1000d494:	dfc00317 	ldw	ra,12(sp)
1000d498:	dc400217 	ldw	r17,8(sp)
1000d49c:	dc000117 	ldw	r16,4(sp)
1000d4a0:	dec00404 	addi	sp,sp,16
1000d4a4:	000d2b41 	jmpi	1000d2b4 <__fputwc>
1000d4a8:	8009883a 	mov	r4,r16
1000d4ac:	d9400015 	stw	r5,0(sp)
1000d4b0:	000872c0 	call	1000872c <__sinit>
1000d4b4:	d9400017 	ldw	r5,0(sp)
1000d4b8:	003feb06 	br	1000d468 <__alt_data_end+0xf800d468>

1000d4bc <_fstat_r>:
1000d4bc:	defffd04 	addi	sp,sp,-12
1000d4c0:	2805883a 	mov	r2,r5
1000d4c4:	dc000015 	stw	r16,0(sp)
1000d4c8:	04040074 	movhi	r16,4097
1000d4cc:	dc400115 	stw	r17,4(sp)
1000d4d0:	841d9b04 	addi	r16,r16,30316
1000d4d4:	2023883a 	mov	r17,r4
1000d4d8:	300b883a 	mov	r5,r6
1000d4dc:	1009883a 	mov	r4,r2
1000d4e0:	dfc00215 	stw	ra,8(sp)
1000d4e4:	80000015 	stw	zero,0(r16)
1000d4e8:	0010f740 	call	10010f74 <fstat>
1000d4ec:	00ffffc4 	movi	r3,-1
1000d4f0:	10c00526 	beq	r2,r3,1000d508 <_fstat_r+0x4c>
1000d4f4:	dfc00217 	ldw	ra,8(sp)
1000d4f8:	dc400117 	ldw	r17,4(sp)
1000d4fc:	dc000017 	ldw	r16,0(sp)
1000d500:	dec00304 	addi	sp,sp,12
1000d504:	f800283a 	ret
1000d508:	80c00017 	ldw	r3,0(r16)
1000d50c:	183ff926 	beq	r3,zero,1000d4f4 <__alt_data_end+0xf800d4f4>
1000d510:	88c00015 	stw	r3,0(r17)
1000d514:	003ff706 	br	1000d4f4 <__alt_data_end+0xf800d4f4>

1000d518 <_isatty_r>:
1000d518:	defffd04 	addi	sp,sp,-12
1000d51c:	dc000015 	stw	r16,0(sp)
1000d520:	04040074 	movhi	r16,4097
1000d524:	dc400115 	stw	r17,4(sp)
1000d528:	841d9b04 	addi	r16,r16,30316
1000d52c:	2023883a 	mov	r17,r4
1000d530:	2809883a 	mov	r4,r5
1000d534:	dfc00215 	stw	ra,8(sp)
1000d538:	80000015 	stw	zero,0(r16)
1000d53c:	00110680 	call	10011068 <isatty>
1000d540:	00ffffc4 	movi	r3,-1
1000d544:	10c00526 	beq	r2,r3,1000d55c <_isatty_r+0x44>
1000d548:	dfc00217 	ldw	ra,8(sp)
1000d54c:	dc400117 	ldw	r17,4(sp)
1000d550:	dc000017 	ldw	r16,0(sp)
1000d554:	dec00304 	addi	sp,sp,12
1000d558:	f800283a 	ret
1000d55c:	80c00017 	ldw	r3,0(r16)
1000d560:	183ff926 	beq	r3,zero,1000d548 <__alt_data_end+0xf800d548>
1000d564:	88c00015 	stw	r3,0(r17)
1000d568:	003ff706 	br	1000d548 <__alt_data_end+0xf800d548>

1000d56c <_lseek_r>:
1000d56c:	defffd04 	addi	sp,sp,-12
1000d570:	2805883a 	mov	r2,r5
1000d574:	dc000015 	stw	r16,0(sp)
1000d578:	04040074 	movhi	r16,4097
1000d57c:	dc400115 	stw	r17,4(sp)
1000d580:	300b883a 	mov	r5,r6
1000d584:	841d9b04 	addi	r16,r16,30316
1000d588:	2023883a 	mov	r17,r4
1000d58c:	380d883a 	mov	r6,r7
1000d590:	1009883a 	mov	r4,r2
1000d594:	dfc00215 	stw	ra,8(sp)
1000d598:	80000015 	stw	zero,0(r16)
1000d59c:	001123c0 	call	1001123c <lseek>
1000d5a0:	00ffffc4 	movi	r3,-1
1000d5a4:	10c00526 	beq	r2,r3,1000d5bc <_lseek_r+0x50>
1000d5a8:	dfc00217 	ldw	ra,8(sp)
1000d5ac:	dc400117 	ldw	r17,4(sp)
1000d5b0:	dc000017 	ldw	r16,0(sp)
1000d5b4:	dec00304 	addi	sp,sp,12
1000d5b8:	f800283a 	ret
1000d5bc:	80c00017 	ldw	r3,0(r16)
1000d5c0:	183ff926 	beq	r3,zero,1000d5a8 <__alt_data_end+0xf800d5a8>
1000d5c4:	88c00015 	stw	r3,0(r17)
1000d5c8:	003ff706 	br	1000d5a8 <__alt_data_end+0xf800d5a8>

1000d5cc <_read_r>:
1000d5cc:	defffd04 	addi	sp,sp,-12
1000d5d0:	2805883a 	mov	r2,r5
1000d5d4:	dc000015 	stw	r16,0(sp)
1000d5d8:	04040074 	movhi	r16,4097
1000d5dc:	dc400115 	stw	r17,4(sp)
1000d5e0:	300b883a 	mov	r5,r6
1000d5e4:	841d9b04 	addi	r16,r16,30316
1000d5e8:	2023883a 	mov	r17,r4
1000d5ec:	380d883a 	mov	r6,r7
1000d5f0:	1009883a 	mov	r4,r2
1000d5f4:	dfc00215 	stw	ra,8(sp)
1000d5f8:	80000015 	stw	zero,0(r16)
1000d5fc:	00114180 	call	10011418 <read>
1000d600:	00ffffc4 	movi	r3,-1
1000d604:	10c00526 	beq	r2,r3,1000d61c <_read_r+0x50>
1000d608:	dfc00217 	ldw	ra,8(sp)
1000d60c:	dc400117 	ldw	r17,4(sp)
1000d610:	dc000017 	ldw	r16,0(sp)
1000d614:	dec00304 	addi	sp,sp,12
1000d618:	f800283a 	ret
1000d61c:	80c00017 	ldw	r3,0(r16)
1000d620:	183ff926 	beq	r3,zero,1000d608 <__alt_data_end+0xf800d608>
1000d624:	88c00015 	stw	r3,0(r17)
1000d628:	003ff706 	br	1000d608 <__alt_data_end+0xf800d608>

1000d62c <__swbuf_r>:
1000d62c:	defffb04 	addi	sp,sp,-20
1000d630:	dcc00315 	stw	r19,12(sp)
1000d634:	dc800215 	stw	r18,8(sp)
1000d638:	dc000015 	stw	r16,0(sp)
1000d63c:	dfc00415 	stw	ra,16(sp)
1000d640:	dc400115 	stw	r17,4(sp)
1000d644:	2025883a 	mov	r18,r4
1000d648:	2827883a 	mov	r19,r5
1000d64c:	3021883a 	mov	r16,r6
1000d650:	20000226 	beq	r4,zero,1000d65c <__swbuf_r+0x30>
1000d654:	20800e17 	ldw	r2,56(r4)
1000d658:	10004226 	beq	r2,zero,1000d764 <__swbuf_r+0x138>
1000d65c:	80800617 	ldw	r2,24(r16)
1000d660:	8100030b 	ldhu	r4,12(r16)
1000d664:	80800215 	stw	r2,8(r16)
1000d668:	2080020c 	andi	r2,r4,8
1000d66c:	10003626 	beq	r2,zero,1000d748 <__swbuf_r+0x11c>
1000d670:	80c00417 	ldw	r3,16(r16)
1000d674:	18003426 	beq	r3,zero,1000d748 <__swbuf_r+0x11c>
1000d678:	2088000c 	andi	r2,r4,8192
1000d67c:	9c403fcc 	andi	r17,r19,255
1000d680:	10001a26 	beq	r2,zero,1000d6ec <__swbuf_r+0xc0>
1000d684:	80800017 	ldw	r2,0(r16)
1000d688:	81000517 	ldw	r4,20(r16)
1000d68c:	10c7c83a 	sub	r3,r2,r3
1000d690:	1900200e 	bge	r3,r4,1000d714 <__swbuf_r+0xe8>
1000d694:	18c00044 	addi	r3,r3,1
1000d698:	81000217 	ldw	r4,8(r16)
1000d69c:	11400044 	addi	r5,r2,1
1000d6a0:	81400015 	stw	r5,0(r16)
1000d6a4:	213fffc4 	addi	r4,r4,-1
1000d6a8:	81000215 	stw	r4,8(r16)
1000d6ac:	14c00005 	stb	r19,0(r2)
1000d6b0:	80800517 	ldw	r2,20(r16)
1000d6b4:	10c01e26 	beq	r2,r3,1000d730 <__swbuf_r+0x104>
1000d6b8:	8080030b 	ldhu	r2,12(r16)
1000d6bc:	1080004c 	andi	r2,r2,1
1000d6c0:	10000226 	beq	r2,zero,1000d6cc <__swbuf_r+0xa0>
1000d6c4:	00800284 	movi	r2,10
1000d6c8:	88801926 	beq	r17,r2,1000d730 <__swbuf_r+0x104>
1000d6cc:	8805883a 	mov	r2,r17
1000d6d0:	dfc00417 	ldw	ra,16(sp)
1000d6d4:	dcc00317 	ldw	r19,12(sp)
1000d6d8:	dc800217 	ldw	r18,8(sp)
1000d6dc:	dc400117 	ldw	r17,4(sp)
1000d6e0:	dc000017 	ldw	r16,0(sp)
1000d6e4:	dec00504 	addi	sp,sp,20
1000d6e8:	f800283a 	ret
1000d6ec:	81401917 	ldw	r5,100(r16)
1000d6f0:	00b7ffc4 	movi	r2,-8193
1000d6f4:	21080014 	ori	r4,r4,8192
1000d6f8:	2884703a 	and	r2,r5,r2
1000d6fc:	80801915 	stw	r2,100(r16)
1000d700:	80800017 	ldw	r2,0(r16)
1000d704:	8100030d 	sth	r4,12(r16)
1000d708:	81000517 	ldw	r4,20(r16)
1000d70c:	10c7c83a 	sub	r3,r2,r3
1000d710:	193fe016 	blt	r3,r4,1000d694 <__alt_data_end+0xf800d694>
1000d714:	800b883a 	mov	r5,r16
1000d718:	9009883a 	mov	r4,r18
1000d71c:	00083400 	call	10008340 <_fflush_r>
1000d720:	1000071e 	bne	r2,zero,1000d740 <__swbuf_r+0x114>
1000d724:	80800017 	ldw	r2,0(r16)
1000d728:	00c00044 	movi	r3,1
1000d72c:	003fda06 	br	1000d698 <__alt_data_end+0xf800d698>
1000d730:	800b883a 	mov	r5,r16
1000d734:	9009883a 	mov	r4,r18
1000d738:	00083400 	call	10008340 <_fflush_r>
1000d73c:	103fe326 	beq	r2,zero,1000d6cc <__alt_data_end+0xf800d6cc>
1000d740:	00bfffc4 	movi	r2,-1
1000d744:	003fe206 	br	1000d6d0 <__alt_data_end+0xf800d6d0>
1000d748:	800b883a 	mov	r5,r16
1000d74c:	9009883a 	mov	r4,r18
1000d750:	00067200 	call	10006720 <__swsetup_r>
1000d754:	103ffa1e 	bne	r2,zero,1000d740 <__alt_data_end+0xf800d740>
1000d758:	8100030b 	ldhu	r4,12(r16)
1000d75c:	80c00417 	ldw	r3,16(r16)
1000d760:	003fc506 	br	1000d678 <__alt_data_end+0xf800d678>
1000d764:	000872c0 	call	1000872c <__sinit>
1000d768:	003fbc06 	br	1000d65c <__alt_data_end+0xf800d65c>

1000d76c <__swbuf>:
1000d76c:	00840074 	movhi	r2,4097
1000d770:	1096c804 	addi	r2,r2,23328
1000d774:	280d883a 	mov	r6,r5
1000d778:	200b883a 	mov	r5,r4
1000d77c:	11000017 	ldw	r4,0(r2)
1000d780:	000d62c1 	jmpi	1000d62c <__swbuf_r>

1000d784 <_wcrtomb_r>:
1000d784:	defff604 	addi	sp,sp,-40
1000d788:	00840074 	movhi	r2,4097
1000d78c:	dc800815 	stw	r18,32(sp)
1000d790:	dc400715 	stw	r17,28(sp)
1000d794:	dc000615 	stw	r16,24(sp)
1000d798:	1096cc04 	addi	r2,r2,23344
1000d79c:	dfc00915 	stw	ra,36(sp)
1000d7a0:	2021883a 	mov	r16,r4
1000d7a4:	3823883a 	mov	r17,r7
1000d7a8:	14800017 	ldw	r18,0(r2)
1000d7ac:	28001426 	beq	r5,zero,1000d800 <_wcrtomb_r+0x7c>
1000d7b0:	d9400415 	stw	r5,16(sp)
1000d7b4:	d9800515 	stw	r6,20(sp)
1000d7b8:	000927c0 	call	1000927c <__locale_charset>
1000d7bc:	d9800517 	ldw	r6,20(sp)
1000d7c0:	d9400417 	ldw	r5,16(sp)
1000d7c4:	100f883a 	mov	r7,r2
1000d7c8:	dc400015 	stw	r17,0(sp)
1000d7cc:	8009883a 	mov	r4,r16
1000d7d0:	903ee83a 	callr	r18
1000d7d4:	00ffffc4 	movi	r3,-1
1000d7d8:	10c0031e 	bne	r2,r3,1000d7e8 <_wcrtomb_r+0x64>
1000d7dc:	88000015 	stw	zero,0(r17)
1000d7e0:	00c02284 	movi	r3,138
1000d7e4:	80c00015 	stw	r3,0(r16)
1000d7e8:	dfc00917 	ldw	ra,36(sp)
1000d7ec:	dc800817 	ldw	r18,32(sp)
1000d7f0:	dc400717 	ldw	r17,28(sp)
1000d7f4:	dc000617 	ldw	r16,24(sp)
1000d7f8:	dec00a04 	addi	sp,sp,40
1000d7fc:	f800283a 	ret
1000d800:	000927c0 	call	1000927c <__locale_charset>
1000d804:	100f883a 	mov	r7,r2
1000d808:	dc400015 	stw	r17,0(sp)
1000d80c:	000d883a 	mov	r6,zero
1000d810:	d9400104 	addi	r5,sp,4
1000d814:	8009883a 	mov	r4,r16
1000d818:	903ee83a 	callr	r18
1000d81c:	003fed06 	br	1000d7d4 <__alt_data_end+0xf800d7d4>

1000d820 <wcrtomb>:
1000d820:	defff604 	addi	sp,sp,-40
1000d824:	00840074 	movhi	r2,4097
1000d828:	dc800615 	stw	r18,24(sp)
1000d82c:	dc400515 	stw	r17,20(sp)
1000d830:	1096c804 	addi	r2,r2,23328
1000d834:	dfc00915 	stw	ra,36(sp)
1000d838:	dd000815 	stw	r20,32(sp)
1000d83c:	dcc00715 	stw	r19,28(sp)
1000d840:	dc000415 	stw	r16,16(sp)
1000d844:	3025883a 	mov	r18,r6
1000d848:	14400017 	ldw	r17,0(r2)
1000d84c:	20001926 	beq	r4,zero,1000d8b4 <wcrtomb+0x94>
1000d850:	00840074 	movhi	r2,4097
1000d854:	1096cc04 	addi	r2,r2,23344
1000d858:	15000017 	ldw	r20,0(r2)
1000d85c:	2021883a 	mov	r16,r4
1000d860:	2827883a 	mov	r19,r5
1000d864:	000927c0 	call	1000927c <__locale_charset>
1000d868:	100f883a 	mov	r7,r2
1000d86c:	dc800015 	stw	r18,0(sp)
1000d870:	980d883a 	mov	r6,r19
1000d874:	800b883a 	mov	r5,r16
1000d878:	8809883a 	mov	r4,r17
1000d87c:	a03ee83a 	callr	r20
1000d880:	00ffffc4 	movi	r3,-1
1000d884:	10c0031e 	bne	r2,r3,1000d894 <wcrtomb+0x74>
1000d888:	90000015 	stw	zero,0(r18)
1000d88c:	00c02284 	movi	r3,138
1000d890:	88c00015 	stw	r3,0(r17)
1000d894:	dfc00917 	ldw	ra,36(sp)
1000d898:	dd000817 	ldw	r20,32(sp)
1000d89c:	dcc00717 	ldw	r19,28(sp)
1000d8a0:	dc800617 	ldw	r18,24(sp)
1000d8a4:	dc400517 	ldw	r17,20(sp)
1000d8a8:	dc000417 	ldw	r16,16(sp)
1000d8ac:	dec00a04 	addi	sp,sp,40
1000d8b0:	f800283a 	ret
1000d8b4:	00840074 	movhi	r2,4097
1000d8b8:	1096cc04 	addi	r2,r2,23344
1000d8bc:	14000017 	ldw	r16,0(r2)
1000d8c0:	000927c0 	call	1000927c <__locale_charset>
1000d8c4:	100f883a 	mov	r7,r2
1000d8c8:	dc800015 	stw	r18,0(sp)
1000d8cc:	000d883a 	mov	r6,zero
1000d8d0:	d9400104 	addi	r5,sp,4
1000d8d4:	8809883a 	mov	r4,r17
1000d8d8:	803ee83a 	callr	r16
1000d8dc:	003fe806 	br	1000d880 <__alt_data_end+0xf800d880>

1000d8e0 <__ascii_wctomb>:
1000d8e0:	28000526 	beq	r5,zero,1000d8f8 <__ascii_wctomb+0x18>
1000d8e4:	00803fc4 	movi	r2,255
1000d8e8:	11800536 	bltu	r2,r6,1000d900 <__ascii_wctomb+0x20>
1000d8ec:	29800005 	stb	r6,0(r5)
1000d8f0:	00800044 	movi	r2,1
1000d8f4:	f800283a 	ret
1000d8f8:	0005883a 	mov	r2,zero
1000d8fc:	f800283a 	ret
1000d900:	00802284 	movi	r2,138
1000d904:	20800015 	stw	r2,0(r4)
1000d908:	00bfffc4 	movi	r2,-1
1000d90c:	f800283a 	ret

1000d910 <_wctomb_r>:
1000d910:	00840074 	movhi	r2,4097
1000d914:	defff904 	addi	sp,sp,-28
1000d918:	1096cc04 	addi	r2,r2,23344
1000d91c:	dfc00615 	stw	ra,24(sp)
1000d920:	dc400515 	stw	r17,20(sp)
1000d924:	dc000415 	stw	r16,16(sp)
1000d928:	3823883a 	mov	r17,r7
1000d92c:	14000017 	ldw	r16,0(r2)
1000d930:	d9000115 	stw	r4,4(sp)
1000d934:	d9400215 	stw	r5,8(sp)
1000d938:	d9800315 	stw	r6,12(sp)
1000d93c:	000927c0 	call	1000927c <__locale_charset>
1000d940:	d9800317 	ldw	r6,12(sp)
1000d944:	d9400217 	ldw	r5,8(sp)
1000d948:	d9000117 	ldw	r4,4(sp)
1000d94c:	100f883a 	mov	r7,r2
1000d950:	dc400015 	stw	r17,0(sp)
1000d954:	803ee83a 	callr	r16
1000d958:	dfc00617 	ldw	ra,24(sp)
1000d95c:	dc400517 	ldw	r17,20(sp)
1000d960:	dc000417 	ldw	r16,16(sp)
1000d964:	dec00704 	addi	sp,sp,28
1000d968:	f800283a 	ret

1000d96c <__udivdi3>:
1000d96c:	defff404 	addi	sp,sp,-48
1000d970:	dcc00515 	stw	r19,20(sp)
1000d974:	dc000215 	stw	r16,8(sp)
1000d978:	dfc00b15 	stw	ra,44(sp)
1000d97c:	df000a15 	stw	fp,40(sp)
1000d980:	ddc00915 	stw	r23,36(sp)
1000d984:	dd800815 	stw	r22,32(sp)
1000d988:	dd400715 	stw	r21,28(sp)
1000d98c:	dd000615 	stw	r20,24(sp)
1000d990:	dc800415 	stw	r18,16(sp)
1000d994:	dc400315 	stw	r17,12(sp)
1000d998:	2027883a 	mov	r19,r4
1000d99c:	2821883a 	mov	r16,r5
1000d9a0:	3800461e 	bne	r7,zero,1000dabc <__udivdi3+0x150>
1000d9a4:	3023883a 	mov	r17,r6
1000d9a8:	2025883a 	mov	r18,r4
1000d9ac:	2980572e 	bgeu	r5,r6,1000db0c <__udivdi3+0x1a0>
1000d9b0:	00bfffd4 	movui	r2,65535
1000d9b4:	282d883a 	mov	r22,r5
1000d9b8:	1180b236 	bltu	r2,r6,1000dc84 <__udivdi3+0x318>
1000d9bc:	00803fc4 	movi	r2,255
1000d9c0:	1185803a 	cmpltu	r2,r2,r6
1000d9c4:	100490fa 	slli	r2,r2,3
1000d9c8:	3086d83a 	srl	r3,r6,r2
1000d9cc:	01040074 	movhi	r4,4097
1000d9d0:	210fcf04 	addi	r4,r4,16188
1000d9d4:	20c7883a 	add	r3,r4,r3
1000d9d8:	18c00003 	ldbu	r3,0(r3)
1000d9dc:	1885883a 	add	r2,r3,r2
1000d9e0:	00c00804 	movi	r3,32
1000d9e4:	1887c83a 	sub	r3,r3,r2
1000d9e8:	18000526 	beq	r3,zero,1000da00 <__udivdi3+0x94>
1000d9ec:	80e0983a 	sll	r16,r16,r3
1000d9f0:	9884d83a 	srl	r2,r19,r2
1000d9f4:	30e2983a 	sll	r17,r6,r3
1000d9f8:	98e4983a 	sll	r18,r19,r3
1000d9fc:	142cb03a 	or	r22,r2,r16
1000da00:	882ad43a 	srli	r21,r17,16
1000da04:	b009883a 	mov	r4,r22
1000da08:	8d3fffcc 	andi	r20,r17,65535
1000da0c:	a80b883a 	mov	r5,r21
1000da10:	00040140 	call	10004014 <__umodsi3>
1000da14:	b009883a 	mov	r4,r22
1000da18:	a80b883a 	mov	r5,r21
1000da1c:	1027883a 	mov	r19,r2
1000da20:	0003fb00 	call	10003fb0 <__udivsi3>
1000da24:	100b883a 	mov	r5,r2
1000da28:	a009883a 	mov	r4,r20
1000da2c:	102d883a 	mov	r22,r2
1000da30:	000e52c0 	call	1000e52c <__mulsi3>
1000da34:	9826943a 	slli	r19,r19,16
1000da38:	9006d43a 	srli	r3,r18,16
1000da3c:	1cc6b03a 	or	r3,r3,r19
1000da40:	1880052e 	bgeu	r3,r2,1000da58 <__udivdi3+0xec>
1000da44:	1c47883a 	add	r3,r3,r17
1000da48:	b13fffc4 	addi	r4,r22,-1
1000da4c:	1c400136 	bltu	r3,r17,1000da54 <__udivdi3+0xe8>
1000da50:	18814236 	bltu	r3,r2,1000df5c <__udivdi3+0x5f0>
1000da54:	202d883a 	mov	r22,r4
1000da58:	18a1c83a 	sub	r16,r3,r2
1000da5c:	8009883a 	mov	r4,r16
1000da60:	a80b883a 	mov	r5,r21
1000da64:	00040140 	call	10004014 <__umodsi3>
1000da68:	1027883a 	mov	r19,r2
1000da6c:	8009883a 	mov	r4,r16
1000da70:	a80b883a 	mov	r5,r21
1000da74:	9826943a 	slli	r19,r19,16
1000da78:	0003fb00 	call	10003fb0 <__udivsi3>
1000da7c:	100b883a 	mov	r5,r2
1000da80:	a009883a 	mov	r4,r20
1000da84:	94bfffcc 	andi	r18,r18,65535
1000da88:	1021883a 	mov	r16,r2
1000da8c:	94e4b03a 	or	r18,r18,r19
1000da90:	000e52c0 	call	1000e52c <__mulsi3>
1000da94:	9080052e 	bgeu	r18,r2,1000daac <__udivdi3+0x140>
1000da98:	8ca5883a 	add	r18,r17,r18
1000da9c:	80ffffc4 	addi	r3,r16,-1
1000daa0:	94410c36 	bltu	r18,r17,1000ded4 <__udivdi3+0x568>
1000daa4:	90810b2e 	bgeu	r18,r2,1000ded4 <__udivdi3+0x568>
1000daa8:	843fff84 	addi	r16,r16,-2
1000daac:	b004943a 	slli	r2,r22,16
1000dab0:	0007883a 	mov	r3,zero
1000dab4:	1404b03a 	or	r2,r2,r16
1000dab8:	00005e06 	br	1000dc34 <__udivdi3+0x2c8>
1000dabc:	29c05b36 	bltu	r5,r7,1000dc2c <__udivdi3+0x2c0>
1000dac0:	00bfffd4 	movui	r2,65535
1000dac4:	11c0672e 	bgeu	r2,r7,1000dc64 <__udivdi3+0x2f8>
1000dac8:	00804034 	movhi	r2,256
1000dacc:	10bfffc4 	addi	r2,r2,-1
1000dad0:	11c10a36 	bltu	r2,r7,1000defc <__udivdi3+0x590>
1000dad4:	00800404 	movi	r2,16
1000dad8:	3886d83a 	srl	r3,r7,r2
1000dadc:	01040074 	movhi	r4,4097
1000dae0:	210fcf04 	addi	r4,r4,16188
1000dae4:	20c7883a 	add	r3,r4,r3
1000dae8:	18c00003 	ldbu	r3,0(r3)
1000daec:	05c00804 	movi	r23,32
1000daf0:	1885883a 	add	r2,r3,r2
1000daf4:	b8afc83a 	sub	r23,r23,r2
1000daf8:	b800671e 	bne	r23,zero,1000dc98 <__udivdi3+0x32c>
1000dafc:	3c010536 	bltu	r7,r16,1000df14 <__udivdi3+0x5a8>
1000db00:	9985403a 	cmpgeu	r2,r19,r6
1000db04:	0007883a 	mov	r3,zero
1000db08:	00004a06 	br	1000dc34 <__udivdi3+0x2c8>
1000db0c:	3000041e 	bne	r6,zero,1000db20 <__udivdi3+0x1b4>
1000db10:	000b883a 	mov	r5,zero
1000db14:	01000044 	movi	r4,1
1000db18:	0003fb00 	call	10003fb0 <__udivsi3>
1000db1c:	1023883a 	mov	r17,r2
1000db20:	00bfffd4 	movui	r2,65535
1000db24:	1440532e 	bgeu	r2,r17,1000dc74 <__udivdi3+0x308>
1000db28:	00804034 	movhi	r2,256
1000db2c:	10bfffc4 	addi	r2,r2,-1
1000db30:	1440f436 	bltu	r2,r17,1000df04 <__udivdi3+0x598>
1000db34:	00800404 	movi	r2,16
1000db38:	8886d83a 	srl	r3,r17,r2
1000db3c:	01040074 	movhi	r4,4097
1000db40:	210fcf04 	addi	r4,r4,16188
1000db44:	20c7883a 	add	r3,r4,r3
1000db48:	18c00003 	ldbu	r3,0(r3)
1000db4c:	1885883a 	add	r2,r3,r2
1000db50:	00c00804 	movi	r3,32
1000db54:	1887c83a 	sub	r3,r3,r2
1000db58:	1800a51e 	bne	r3,zero,1000ddf0 <__udivdi3+0x484>
1000db5c:	882ad43a 	srli	r21,r17,16
1000db60:	8461c83a 	sub	r16,r16,r17
1000db64:	8d3fffcc 	andi	r20,r17,65535
1000db68:	00c00044 	movi	r3,1
1000db6c:	a80b883a 	mov	r5,r21
1000db70:	8009883a 	mov	r4,r16
1000db74:	d8c00115 	stw	r3,4(sp)
1000db78:	00040140 	call	10004014 <__umodsi3>
1000db7c:	a80b883a 	mov	r5,r21
1000db80:	8009883a 	mov	r4,r16
1000db84:	1027883a 	mov	r19,r2
1000db88:	0003fb00 	call	10003fb0 <__udivsi3>
1000db8c:	a00b883a 	mov	r5,r20
1000db90:	1009883a 	mov	r4,r2
1000db94:	102d883a 	mov	r22,r2
1000db98:	000e52c0 	call	1000e52c <__mulsi3>
1000db9c:	9826943a 	slli	r19,r19,16
1000dba0:	900ed43a 	srli	r7,r18,16
1000dba4:	d8c00117 	ldw	r3,4(sp)
1000dba8:	3cceb03a 	or	r7,r7,r19
1000dbac:	3880052e 	bgeu	r7,r2,1000dbc4 <__udivdi3+0x258>
1000dbb0:	3c4f883a 	add	r7,r7,r17
1000dbb4:	b13fffc4 	addi	r4,r22,-1
1000dbb8:	3c400136 	bltu	r7,r17,1000dbc0 <__udivdi3+0x254>
1000dbbc:	3880e436 	bltu	r7,r2,1000df50 <__udivdi3+0x5e4>
1000dbc0:	202d883a 	mov	r22,r4
1000dbc4:	38a1c83a 	sub	r16,r7,r2
1000dbc8:	8009883a 	mov	r4,r16
1000dbcc:	a80b883a 	mov	r5,r21
1000dbd0:	d8c00115 	stw	r3,4(sp)
1000dbd4:	00040140 	call	10004014 <__umodsi3>
1000dbd8:	1027883a 	mov	r19,r2
1000dbdc:	8009883a 	mov	r4,r16
1000dbe0:	a80b883a 	mov	r5,r21
1000dbe4:	9826943a 	slli	r19,r19,16
1000dbe8:	0003fb00 	call	10003fb0 <__udivsi3>
1000dbec:	a00b883a 	mov	r5,r20
1000dbf0:	1009883a 	mov	r4,r2
1000dbf4:	94bfffcc 	andi	r18,r18,65535
1000dbf8:	1021883a 	mov	r16,r2
1000dbfc:	94e4b03a 	or	r18,r18,r19
1000dc00:	000e52c0 	call	1000e52c <__mulsi3>
1000dc04:	d8c00117 	ldw	r3,4(sp)
1000dc08:	9080052e 	bgeu	r18,r2,1000dc20 <__udivdi3+0x2b4>
1000dc0c:	8ca5883a 	add	r18,r17,r18
1000dc10:	813fffc4 	addi	r4,r16,-1
1000dc14:	9440ad36 	bltu	r18,r17,1000decc <__udivdi3+0x560>
1000dc18:	9080ac2e 	bgeu	r18,r2,1000decc <__udivdi3+0x560>
1000dc1c:	843fff84 	addi	r16,r16,-2
1000dc20:	b004943a 	slli	r2,r22,16
1000dc24:	1404b03a 	or	r2,r2,r16
1000dc28:	00000206 	br	1000dc34 <__udivdi3+0x2c8>
1000dc2c:	0007883a 	mov	r3,zero
1000dc30:	0005883a 	mov	r2,zero
1000dc34:	dfc00b17 	ldw	ra,44(sp)
1000dc38:	df000a17 	ldw	fp,40(sp)
1000dc3c:	ddc00917 	ldw	r23,36(sp)
1000dc40:	dd800817 	ldw	r22,32(sp)
1000dc44:	dd400717 	ldw	r21,28(sp)
1000dc48:	dd000617 	ldw	r20,24(sp)
1000dc4c:	dcc00517 	ldw	r19,20(sp)
1000dc50:	dc800417 	ldw	r18,16(sp)
1000dc54:	dc400317 	ldw	r17,12(sp)
1000dc58:	dc000217 	ldw	r16,8(sp)
1000dc5c:	dec00c04 	addi	sp,sp,48
1000dc60:	f800283a 	ret
1000dc64:	00803fc4 	movi	r2,255
1000dc68:	11c5803a 	cmpltu	r2,r2,r7
1000dc6c:	100490fa 	slli	r2,r2,3
1000dc70:	003f9906 	br	1000dad8 <__alt_data_end+0xf800dad8>
1000dc74:	00803fc4 	movi	r2,255
1000dc78:	1445803a 	cmpltu	r2,r2,r17
1000dc7c:	100490fa 	slli	r2,r2,3
1000dc80:	003fad06 	br	1000db38 <__alt_data_end+0xf800db38>
1000dc84:	00804034 	movhi	r2,256
1000dc88:	10bfffc4 	addi	r2,r2,-1
1000dc8c:	11809f36 	bltu	r2,r6,1000df0c <__udivdi3+0x5a0>
1000dc90:	00800404 	movi	r2,16
1000dc94:	003f4c06 	br	1000d9c8 <__alt_data_end+0xf800d9c8>
1000dc98:	3dce983a 	sll	r7,r7,r23
1000dc9c:	30b8d83a 	srl	fp,r6,r2
1000dca0:	80a2d83a 	srl	r17,r16,r2
1000dca4:	35cc983a 	sll	r6,r6,r23
1000dca8:	3f38b03a 	or	fp,r7,fp
1000dcac:	e024d43a 	srli	r18,fp,16
1000dcb0:	9884d83a 	srl	r2,r19,r2
1000dcb4:	85e0983a 	sll	r16,r16,r23
1000dcb8:	8809883a 	mov	r4,r17
1000dcbc:	900b883a 	mov	r5,r18
1000dcc0:	d9800015 	stw	r6,0(sp)
1000dcc4:	1420b03a 	or	r16,r2,r16
1000dcc8:	00040140 	call	10004014 <__umodsi3>
1000dccc:	900b883a 	mov	r5,r18
1000dcd0:	8809883a 	mov	r4,r17
1000dcd4:	1029883a 	mov	r20,r2
1000dcd8:	e5bfffcc 	andi	r22,fp,65535
1000dcdc:	0003fb00 	call	10003fb0 <__udivsi3>
1000dce0:	100b883a 	mov	r5,r2
1000dce4:	b009883a 	mov	r4,r22
1000dce8:	102b883a 	mov	r21,r2
1000dcec:	000e52c0 	call	1000e52c <__mulsi3>
1000dcf0:	a028943a 	slli	r20,r20,16
1000dcf4:	8006d43a 	srli	r3,r16,16
1000dcf8:	1d06b03a 	or	r3,r3,r20
1000dcfc:	1880042e 	bgeu	r3,r2,1000dd10 <__udivdi3+0x3a4>
1000dd00:	1f07883a 	add	r3,r3,fp
1000dd04:	a93fffc4 	addi	r4,r21,-1
1000dd08:	1f00892e 	bgeu	r3,fp,1000df30 <__udivdi3+0x5c4>
1000dd0c:	202b883a 	mov	r21,r4
1000dd10:	18a3c83a 	sub	r17,r3,r2
1000dd14:	8809883a 	mov	r4,r17
1000dd18:	900b883a 	mov	r5,r18
1000dd1c:	00040140 	call	10004014 <__umodsi3>
1000dd20:	1029883a 	mov	r20,r2
1000dd24:	8809883a 	mov	r4,r17
1000dd28:	900b883a 	mov	r5,r18
1000dd2c:	a028943a 	slli	r20,r20,16
1000dd30:	0003fb00 	call	10003fb0 <__udivsi3>
1000dd34:	100b883a 	mov	r5,r2
1000dd38:	b009883a 	mov	r4,r22
1000dd3c:	843fffcc 	andi	r16,r16,65535
1000dd40:	1023883a 	mov	r17,r2
1000dd44:	8520b03a 	or	r16,r16,r20
1000dd48:	000e52c0 	call	1000e52c <__mulsi3>
1000dd4c:	8080042e 	bgeu	r16,r2,1000dd60 <__udivdi3+0x3f4>
1000dd50:	8721883a 	add	r16,r16,fp
1000dd54:	88ffffc4 	addi	r3,r17,-1
1000dd58:	8700712e 	bgeu	r16,fp,1000df20 <__udivdi3+0x5b4>
1000dd5c:	1823883a 	mov	r17,r3
1000dd60:	a80e943a 	slli	r7,r21,16
1000dd64:	d8c00017 	ldw	r3,0(sp)
1000dd68:	80a1c83a 	sub	r16,r16,r2
1000dd6c:	3c64b03a 	or	r18,r7,r17
1000dd70:	1d3fffcc 	andi	r20,r3,65535
1000dd74:	9022d43a 	srli	r17,r18,16
1000dd78:	95bfffcc 	andi	r22,r18,65535
1000dd7c:	a00b883a 	mov	r5,r20
1000dd80:	b009883a 	mov	r4,r22
1000dd84:	182ad43a 	srli	r21,r3,16
1000dd88:	000e52c0 	call	1000e52c <__mulsi3>
1000dd8c:	a00b883a 	mov	r5,r20
1000dd90:	8809883a 	mov	r4,r17
1000dd94:	1039883a 	mov	fp,r2
1000dd98:	000e52c0 	call	1000e52c <__mulsi3>
1000dd9c:	8809883a 	mov	r4,r17
1000dda0:	a80b883a 	mov	r5,r21
1000dda4:	1029883a 	mov	r20,r2
1000dda8:	000e52c0 	call	1000e52c <__mulsi3>
1000ddac:	a80b883a 	mov	r5,r21
1000ddb0:	b009883a 	mov	r4,r22
1000ddb4:	1023883a 	mov	r17,r2
1000ddb8:	000e52c0 	call	1000e52c <__mulsi3>
1000ddbc:	e006d43a 	srli	r3,fp,16
1000ddc0:	1505883a 	add	r2,r2,r20
1000ddc4:	1887883a 	add	r3,r3,r2
1000ddc8:	1d00022e 	bgeu	r3,r20,1000ddd4 <__udivdi3+0x468>
1000ddcc:	00800074 	movhi	r2,1
1000ddd0:	88a3883a 	add	r17,r17,r2
1000ddd4:	1804d43a 	srli	r2,r3,16
1000ddd8:	1463883a 	add	r17,r2,r17
1000dddc:	84404436 	bltu	r16,r17,1000def0 <__udivdi3+0x584>
1000dde0:	84403e26 	beq	r16,r17,1000dedc <__udivdi3+0x570>
1000dde4:	9005883a 	mov	r2,r18
1000dde8:	0007883a 	mov	r3,zero
1000ddec:	003f9106 	br	1000dc34 <__alt_data_end+0xf800dc34>
1000ddf0:	88e2983a 	sll	r17,r17,r3
1000ddf4:	80aed83a 	srl	r23,r16,r2
1000ddf8:	80e0983a 	sll	r16,r16,r3
1000ddfc:	882ad43a 	srli	r21,r17,16
1000de00:	9884d83a 	srl	r2,r19,r2
1000de04:	b809883a 	mov	r4,r23
1000de08:	a80b883a 	mov	r5,r21
1000de0c:	98e4983a 	sll	r18,r19,r3
1000de10:	142cb03a 	or	r22,r2,r16
1000de14:	00040140 	call	10004014 <__umodsi3>
1000de18:	b809883a 	mov	r4,r23
1000de1c:	a80b883a 	mov	r5,r21
1000de20:	1027883a 	mov	r19,r2
1000de24:	8d3fffcc 	andi	r20,r17,65535
1000de28:	0003fb00 	call	10003fb0 <__udivsi3>
1000de2c:	a009883a 	mov	r4,r20
1000de30:	100b883a 	mov	r5,r2
1000de34:	102f883a 	mov	r23,r2
1000de38:	000e52c0 	call	1000e52c <__mulsi3>
1000de3c:	9826943a 	slli	r19,r19,16
1000de40:	b008d43a 	srli	r4,r22,16
1000de44:	24c8b03a 	or	r4,r4,r19
1000de48:	2080062e 	bgeu	r4,r2,1000de64 <__udivdi3+0x4f8>
1000de4c:	2449883a 	add	r4,r4,r17
1000de50:	b8ffffc4 	addi	r3,r23,-1
1000de54:	24403c36 	bltu	r4,r17,1000df48 <__udivdi3+0x5dc>
1000de58:	20803b2e 	bgeu	r4,r2,1000df48 <__udivdi3+0x5dc>
1000de5c:	bdffff84 	addi	r23,r23,-2
1000de60:	2449883a 	add	r4,r4,r17
1000de64:	20a1c83a 	sub	r16,r4,r2
1000de68:	a80b883a 	mov	r5,r21
1000de6c:	8009883a 	mov	r4,r16
1000de70:	00040140 	call	10004014 <__umodsi3>
1000de74:	a80b883a 	mov	r5,r21
1000de78:	8009883a 	mov	r4,r16
1000de7c:	1027883a 	mov	r19,r2
1000de80:	0003fb00 	call	10003fb0 <__udivsi3>
1000de84:	a009883a 	mov	r4,r20
1000de88:	100b883a 	mov	r5,r2
1000de8c:	9826943a 	slli	r19,r19,16
1000de90:	1039883a 	mov	fp,r2
1000de94:	000e52c0 	call	1000e52c <__mulsi3>
1000de98:	b13fffcc 	andi	r4,r22,65535
1000de9c:	24c8b03a 	or	r4,r4,r19
1000dea0:	2080062e 	bgeu	r4,r2,1000debc <__udivdi3+0x550>
1000dea4:	2449883a 	add	r4,r4,r17
1000dea8:	e0ffffc4 	addi	r3,fp,-1
1000deac:	24402436 	bltu	r4,r17,1000df40 <__udivdi3+0x5d4>
1000deb0:	2080232e 	bgeu	r4,r2,1000df40 <__udivdi3+0x5d4>
1000deb4:	e73fff84 	addi	fp,fp,-2
1000deb8:	2449883a 	add	r4,r4,r17
1000debc:	b82e943a 	slli	r23,r23,16
1000dec0:	20a1c83a 	sub	r16,r4,r2
1000dec4:	bf06b03a 	or	r3,r23,fp
1000dec8:	003f2806 	br	1000db6c <__alt_data_end+0xf800db6c>
1000decc:	2021883a 	mov	r16,r4
1000ded0:	003f5306 	br	1000dc20 <__alt_data_end+0xf800dc20>
1000ded4:	1821883a 	mov	r16,r3
1000ded8:	003ef406 	br	1000daac <__alt_data_end+0xf800daac>
1000dedc:	1806943a 	slli	r3,r3,16
1000dee0:	9de6983a 	sll	r19,r19,r23
1000dee4:	e73fffcc 	andi	fp,fp,65535
1000dee8:	1f07883a 	add	r3,r3,fp
1000deec:	98ffbd2e 	bgeu	r19,r3,1000dde4 <__alt_data_end+0xf800dde4>
1000def0:	90bfffc4 	addi	r2,r18,-1
1000def4:	0007883a 	mov	r3,zero
1000def8:	003f4e06 	br	1000dc34 <__alt_data_end+0xf800dc34>
1000defc:	00800604 	movi	r2,24
1000df00:	003ef506 	br	1000dad8 <__alt_data_end+0xf800dad8>
1000df04:	00800604 	movi	r2,24
1000df08:	003f0b06 	br	1000db38 <__alt_data_end+0xf800db38>
1000df0c:	00800604 	movi	r2,24
1000df10:	003ead06 	br	1000d9c8 <__alt_data_end+0xf800d9c8>
1000df14:	0007883a 	mov	r3,zero
1000df18:	00800044 	movi	r2,1
1000df1c:	003f4506 	br	1000dc34 <__alt_data_end+0xf800dc34>
1000df20:	80bf8e2e 	bgeu	r16,r2,1000dd5c <__alt_data_end+0xf800dd5c>
1000df24:	8c7fff84 	addi	r17,r17,-2
1000df28:	8721883a 	add	r16,r16,fp
1000df2c:	003f8c06 	br	1000dd60 <__alt_data_end+0xf800dd60>
1000df30:	18bf762e 	bgeu	r3,r2,1000dd0c <__alt_data_end+0xf800dd0c>
1000df34:	ad7fff84 	addi	r21,r21,-2
1000df38:	1f07883a 	add	r3,r3,fp
1000df3c:	003f7406 	br	1000dd10 <__alt_data_end+0xf800dd10>
1000df40:	1839883a 	mov	fp,r3
1000df44:	003fdd06 	br	1000debc <__alt_data_end+0xf800debc>
1000df48:	182f883a 	mov	r23,r3
1000df4c:	003fc506 	br	1000de64 <__alt_data_end+0xf800de64>
1000df50:	b5bfff84 	addi	r22,r22,-2
1000df54:	3c4f883a 	add	r7,r7,r17
1000df58:	003f1a06 	br	1000dbc4 <__alt_data_end+0xf800dbc4>
1000df5c:	b5bfff84 	addi	r22,r22,-2
1000df60:	1c47883a 	add	r3,r3,r17
1000df64:	003ebc06 	br	1000da58 <__alt_data_end+0xf800da58>

1000df68 <__umoddi3>:
1000df68:	defff304 	addi	sp,sp,-52
1000df6c:	df000b15 	stw	fp,44(sp)
1000df70:	dc400415 	stw	r17,16(sp)
1000df74:	dc000315 	stw	r16,12(sp)
1000df78:	dfc00c15 	stw	ra,48(sp)
1000df7c:	ddc00a15 	stw	r23,40(sp)
1000df80:	dd800915 	stw	r22,36(sp)
1000df84:	dd400815 	stw	r21,32(sp)
1000df88:	dd000715 	stw	r20,28(sp)
1000df8c:	dcc00615 	stw	r19,24(sp)
1000df90:	dc800515 	stw	r18,20(sp)
1000df94:	2021883a 	mov	r16,r4
1000df98:	2823883a 	mov	r17,r5
1000df9c:	2839883a 	mov	fp,r5
1000dfa0:	3800401e 	bne	r7,zero,1000e0a4 <__umoddi3+0x13c>
1000dfa4:	3027883a 	mov	r19,r6
1000dfa8:	2029883a 	mov	r20,r4
1000dfac:	2980552e 	bgeu	r5,r6,1000e104 <__umoddi3+0x19c>
1000dfb0:	00bfffd4 	movui	r2,65535
1000dfb4:	1180a236 	bltu	r2,r6,1000e240 <__umoddi3+0x2d8>
1000dfb8:	01003fc4 	movi	r4,255
1000dfbc:	2189803a 	cmpltu	r4,r4,r6
1000dfc0:	200890fa 	slli	r4,r4,3
1000dfc4:	3104d83a 	srl	r2,r6,r4
1000dfc8:	00c40074 	movhi	r3,4097
1000dfcc:	18cfcf04 	addi	r3,r3,16188
1000dfd0:	1885883a 	add	r2,r3,r2
1000dfd4:	10c00003 	ldbu	r3,0(r2)
1000dfd8:	00800804 	movi	r2,32
1000dfdc:	1909883a 	add	r4,r3,r4
1000dfe0:	1125c83a 	sub	r18,r2,r4
1000dfe4:	90000526 	beq	r18,zero,1000dffc <__umoddi3+0x94>
1000dfe8:	8ca2983a 	sll	r17,r17,r18
1000dfec:	8108d83a 	srl	r4,r16,r4
1000dff0:	34a6983a 	sll	r19,r6,r18
1000dff4:	84a8983a 	sll	r20,r16,r18
1000dff8:	2478b03a 	or	fp,r4,r17
1000dffc:	982cd43a 	srli	r22,r19,16
1000e000:	e009883a 	mov	r4,fp
1000e004:	9dffffcc 	andi	r23,r19,65535
1000e008:	b00b883a 	mov	r5,r22
1000e00c:	00040140 	call	10004014 <__umodsi3>
1000e010:	b00b883a 	mov	r5,r22
1000e014:	e009883a 	mov	r4,fp
1000e018:	102b883a 	mov	r21,r2
1000e01c:	0003fb00 	call	10003fb0 <__udivsi3>
1000e020:	100b883a 	mov	r5,r2
1000e024:	b809883a 	mov	r4,r23
1000e028:	000e52c0 	call	1000e52c <__mulsi3>
1000e02c:	a82a943a 	slli	r21,r21,16
1000e030:	a006d43a 	srli	r3,r20,16
1000e034:	1d46b03a 	or	r3,r3,r21
1000e038:	1880032e 	bgeu	r3,r2,1000e048 <__umoddi3+0xe0>
1000e03c:	1cc7883a 	add	r3,r3,r19
1000e040:	1cc00136 	bltu	r3,r19,1000e048 <__umoddi3+0xe0>
1000e044:	18813136 	bltu	r3,r2,1000e50c <__umoddi3+0x5a4>
1000e048:	18a1c83a 	sub	r16,r3,r2
1000e04c:	b00b883a 	mov	r5,r22
1000e050:	8009883a 	mov	r4,r16
1000e054:	00040140 	call	10004014 <__umodsi3>
1000e058:	b00b883a 	mov	r5,r22
1000e05c:	8009883a 	mov	r4,r16
1000e060:	1023883a 	mov	r17,r2
1000e064:	0003fb00 	call	10003fb0 <__udivsi3>
1000e068:	100b883a 	mov	r5,r2
1000e06c:	b809883a 	mov	r4,r23
1000e070:	8822943a 	slli	r17,r17,16
1000e074:	000e52c0 	call	1000e52c <__mulsi3>
1000e078:	a0ffffcc 	andi	r3,r20,65535
1000e07c:	1c46b03a 	or	r3,r3,r17
1000e080:	1880042e 	bgeu	r3,r2,1000e094 <__umoddi3+0x12c>
1000e084:	1cc7883a 	add	r3,r3,r19
1000e088:	1cc00236 	bltu	r3,r19,1000e094 <__umoddi3+0x12c>
1000e08c:	1880012e 	bgeu	r3,r2,1000e094 <__umoddi3+0x12c>
1000e090:	1cc7883a 	add	r3,r3,r19
1000e094:	1885c83a 	sub	r2,r3,r2
1000e098:	1484d83a 	srl	r2,r2,r18
1000e09c:	0007883a 	mov	r3,zero
1000e0a0:	00005306 	br	1000e1f0 <__umoddi3+0x288>
1000e0a4:	29c05036 	bltu	r5,r7,1000e1e8 <__umoddi3+0x280>
1000e0a8:	00bfffd4 	movui	r2,65535
1000e0ac:	11c05c2e 	bgeu	r2,r7,1000e220 <__umoddi3+0x2b8>
1000e0b0:	00804034 	movhi	r2,256
1000e0b4:	10bfffc4 	addi	r2,r2,-1
1000e0b8:	11c10636 	bltu	r2,r7,1000e4d4 <__umoddi3+0x56c>
1000e0bc:	01000404 	movi	r4,16
1000e0c0:	3904d83a 	srl	r2,r7,r4
1000e0c4:	00c40074 	movhi	r3,4097
1000e0c8:	18cfcf04 	addi	r3,r3,16188
1000e0cc:	1885883a 	add	r2,r3,r2
1000e0d0:	14c00003 	ldbu	r19,0(r2)
1000e0d4:	00c00804 	movi	r3,32
1000e0d8:	9927883a 	add	r19,r19,r4
1000e0dc:	1ce9c83a 	sub	r20,r3,r19
1000e0e0:	a0005c1e 	bne	r20,zero,1000e254 <__umoddi3+0x2ec>
1000e0e4:	3c400136 	bltu	r7,r17,1000e0ec <__umoddi3+0x184>
1000e0e8:	81810a36 	bltu	r16,r6,1000e514 <__umoddi3+0x5ac>
1000e0ec:	8185c83a 	sub	r2,r16,r6
1000e0f0:	89e3c83a 	sub	r17,r17,r7
1000e0f4:	8089803a 	cmpltu	r4,r16,r2
1000e0f8:	8939c83a 	sub	fp,r17,r4
1000e0fc:	e007883a 	mov	r3,fp
1000e100:	00003b06 	br	1000e1f0 <__umoddi3+0x288>
1000e104:	3000041e 	bne	r6,zero,1000e118 <__umoddi3+0x1b0>
1000e108:	000b883a 	mov	r5,zero
1000e10c:	01000044 	movi	r4,1
1000e110:	0003fb00 	call	10003fb0 <__udivsi3>
1000e114:	1027883a 	mov	r19,r2
1000e118:	00bfffd4 	movui	r2,65535
1000e11c:	14c0442e 	bgeu	r2,r19,1000e230 <__umoddi3+0x2c8>
1000e120:	00804034 	movhi	r2,256
1000e124:	10bfffc4 	addi	r2,r2,-1
1000e128:	14c0ec36 	bltu	r2,r19,1000e4dc <__umoddi3+0x574>
1000e12c:	00800404 	movi	r2,16
1000e130:	9886d83a 	srl	r3,r19,r2
1000e134:	01040074 	movhi	r4,4097
1000e138:	210fcf04 	addi	r4,r4,16188
1000e13c:	20c7883a 	add	r3,r4,r3
1000e140:	18c00003 	ldbu	r3,0(r3)
1000e144:	1887883a 	add	r3,r3,r2
1000e148:	00800804 	movi	r2,32
1000e14c:	10e5c83a 	sub	r18,r2,r3
1000e150:	9000ab1e 	bne	r18,zero,1000e400 <__umoddi3+0x498>
1000e154:	982cd43a 	srli	r22,r19,16
1000e158:	8ce3c83a 	sub	r17,r17,r19
1000e15c:	9dffffcc 	andi	r23,r19,65535
1000e160:	b00b883a 	mov	r5,r22
1000e164:	8809883a 	mov	r4,r17
1000e168:	00040140 	call	10004014 <__umodsi3>
1000e16c:	b00b883a 	mov	r5,r22
1000e170:	8809883a 	mov	r4,r17
1000e174:	102b883a 	mov	r21,r2
1000e178:	0003fb00 	call	10003fb0 <__udivsi3>
1000e17c:	b80b883a 	mov	r5,r23
1000e180:	1009883a 	mov	r4,r2
1000e184:	000e52c0 	call	1000e52c <__mulsi3>
1000e188:	a82a943a 	slli	r21,r21,16
1000e18c:	a006d43a 	srli	r3,r20,16
1000e190:	1d46b03a 	or	r3,r3,r21
1000e194:	1880042e 	bgeu	r3,r2,1000e1a8 <__umoddi3+0x240>
1000e198:	1cc7883a 	add	r3,r3,r19
1000e19c:	1cc00236 	bltu	r3,r19,1000e1a8 <__umoddi3+0x240>
1000e1a0:	1880012e 	bgeu	r3,r2,1000e1a8 <__umoddi3+0x240>
1000e1a4:	1cc7883a 	add	r3,r3,r19
1000e1a8:	18a1c83a 	sub	r16,r3,r2
1000e1ac:	b00b883a 	mov	r5,r22
1000e1b0:	8009883a 	mov	r4,r16
1000e1b4:	00040140 	call	10004014 <__umodsi3>
1000e1b8:	1023883a 	mov	r17,r2
1000e1bc:	b00b883a 	mov	r5,r22
1000e1c0:	8009883a 	mov	r4,r16
1000e1c4:	0003fb00 	call	10003fb0 <__udivsi3>
1000e1c8:	8822943a 	slli	r17,r17,16
1000e1cc:	b80b883a 	mov	r5,r23
1000e1d0:	1009883a 	mov	r4,r2
1000e1d4:	000e52c0 	call	1000e52c <__mulsi3>
1000e1d8:	a53fffcc 	andi	r20,r20,65535
1000e1dc:	a446b03a 	or	r3,r20,r17
1000e1e0:	18bfac2e 	bgeu	r3,r2,1000e094 <__alt_data_end+0xf800e094>
1000e1e4:	003fa706 	br	1000e084 <__alt_data_end+0xf800e084>
1000e1e8:	2005883a 	mov	r2,r4
1000e1ec:	2807883a 	mov	r3,r5
1000e1f0:	dfc00c17 	ldw	ra,48(sp)
1000e1f4:	df000b17 	ldw	fp,44(sp)
1000e1f8:	ddc00a17 	ldw	r23,40(sp)
1000e1fc:	dd800917 	ldw	r22,36(sp)
1000e200:	dd400817 	ldw	r21,32(sp)
1000e204:	dd000717 	ldw	r20,28(sp)
1000e208:	dcc00617 	ldw	r19,24(sp)
1000e20c:	dc800517 	ldw	r18,20(sp)
1000e210:	dc400417 	ldw	r17,16(sp)
1000e214:	dc000317 	ldw	r16,12(sp)
1000e218:	dec00d04 	addi	sp,sp,52
1000e21c:	f800283a 	ret
1000e220:	04c03fc4 	movi	r19,255
1000e224:	99c9803a 	cmpltu	r4,r19,r7
1000e228:	200890fa 	slli	r4,r4,3
1000e22c:	003fa406 	br	1000e0c0 <__alt_data_end+0xf800e0c0>
1000e230:	00803fc4 	movi	r2,255
1000e234:	14c5803a 	cmpltu	r2,r2,r19
1000e238:	100490fa 	slli	r2,r2,3
1000e23c:	003fbc06 	br	1000e130 <__alt_data_end+0xf800e130>
1000e240:	00804034 	movhi	r2,256
1000e244:	10bfffc4 	addi	r2,r2,-1
1000e248:	1180a636 	bltu	r2,r6,1000e4e4 <__umoddi3+0x57c>
1000e24c:	01000404 	movi	r4,16
1000e250:	003f5c06 	br	1000dfc4 <__alt_data_end+0xf800dfc4>
1000e254:	3d0e983a 	sll	r7,r7,r20
1000e258:	34ead83a 	srl	r21,r6,r19
1000e25c:	8cc6d83a 	srl	r3,r17,r19
1000e260:	8d10983a 	sll	r8,r17,r20
1000e264:	3d6ab03a 	or	r21,r7,r21
1000e268:	a82cd43a 	srli	r22,r21,16
1000e26c:	84e2d83a 	srl	r17,r16,r19
1000e270:	1809883a 	mov	r4,r3
1000e274:	b00b883a 	mov	r5,r22
1000e278:	8a22b03a 	or	r17,r17,r8
1000e27c:	3524983a 	sll	r18,r6,r20
1000e280:	dc400015 	stw	r17,0(sp)
1000e284:	d8c00115 	stw	r3,4(sp)
1000e288:	00040140 	call	10004014 <__umodsi3>
1000e28c:	d8c00117 	ldw	r3,4(sp)
1000e290:	b00b883a 	mov	r5,r22
1000e294:	1039883a 	mov	fp,r2
1000e298:	1809883a 	mov	r4,r3
1000e29c:	0003fb00 	call	10003fb0 <__udivsi3>
1000e2a0:	adffffcc 	andi	r23,r21,65535
1000e2a4:	100b883a 	mov	r5,r2
1000e2a8:	b809883a 	mov	r4,r23
1000e2ac:	1023883a 	mov	r17,r2
1000e2b0:	000e52c0 	call	1000e52c <__mulsi3>
1000e2b4:	d9400017 	ldw	r5,0(sp)
1000e2b8:	e008943a 	slli	r4,fp,16
1000e2bc:	8520983a 	sll	r16,r16,r20
1000e2c0:	2806d43a 	srli	r3,r5,16
1000e2c4:	1906b03a 	or	r3,r3,r4
1000e2c8:	1880042e 	bgeu	r3,r2,1000e2dc <__umoddi3+0x374>
1000e2cc:	1d47883a 	add	r3,r3,r21
1000e2d0:	893fffc4 	addi	r4,r17,-1
1000e2d4:	1d40892e 	bgeu	r3,r21,1000e4fc <__umoddi3+0x594>
1000e2d8:	2023883a 	mov	r17,r4
1000e2dc:	18b9c83a 	sub	fp,r3,r2
1000e2e0:	b00b883a 	mov	r5,r22
1000e2e4:	e009883a 	mov	r4,fp
1000e2e8:	00040140 	call	10004014 <__umodsi3>
1000e2ec:	b00b883a 	mov	r5,r22
1000e2f0:	e009883a 	mov	r4,fp
1000e2f4:	d8800215 	stw	r2,8(sp)
1000e2f8:	0003fb00 	call	10003fb0 <__udivsi3>
1000e2fc:	100b883a 	mov	r5,r2
1000e300:	b809883a 	mov	r4,r23
1000e304:	102d883a 	mov	r22,r2
1000e308:	000e52c0 	call	1000e52c <__mulsi3>
1000e30c:	d9800217 	ldw	r6,8(sp)
1000e310:	d8c00017 	ldw	r3,0(sp)
1000e314:	300c943a 	slli	r6,r6,16
1000e318:	1a3fffcc 	andi	r8,r3,65535
1000e31c:	4190b03a 	or	r8,r8,r6
1000e320:	4080042e 	bgeu	r8,r2,1000e334 <__umoddi3+0x3cc>
1000e324:	4551883a 	add	r8,r8,r21
1000e328:	b0ffffc4 	addi	r3,r22,-1
1000e32c:	45406f2e 	bgeu	r8,r21,1000e4ec <__umoddi3+0x584>
1000e330:	182d883a 	mov	r22,r3
1000e334:	880e943a 	slli	r7,r17,16
1000e338:	9006d43a 	srli	r3,r18,16
1000e33c:	91bfffcc 	andi	r6,r18,65535
1000e340:	3dacb03a 	or	r22,r7,r22
1000e344:	b02ed43a 	srli	r23,r22,16
1000e348:	b5bfffcc 	andi	r22,r22,65535
1000e34c:	300b883a 	mov	r5,r6
1000e350:	b009883a 	mov	r4,r22
1000e354:	40a3c83a 	sub	r17,r8,r2
1000e358:	d8c00115 	stw	r3,4(sp)
1000e35c:	d9800215 	stw	r6,8(sp)
1000e360:	000e52c0 	call	1000e52c <__mulsi3>
1000e364:	d9800217 	ldw	r6,8(sp)
1000e368:	b809883a 	mov	r4,r23
1000e36c:	1039883a 	mov	fp,r2
1000e370:	300b883a 	mov	r5,r6
1000e374:	000e52c0 	call	1000e52c <__mulsi3>
1000e378:	d8c00117 	ldw	r3,4(sp)
1000e37c:	b809883a 	mov	r4,r23
1000e380:	d8800215 	stw	r2,8(sp)
1000e384:	180b883a 	mov	r5,r3
1000e388:	000e52c0 	call	1000e52c <__mulsi3>
1000e38c:	d8c00117 	ldw	r3,4(sp)
1000e390:	b009883a 	mov	r4,r22
1000e394:	102f883a 	mov	r23,r2
1000e398:	180b883a 	mov	r5,r3
1000e39c:	000e52c0 	call	1000e52c <__mulsi3>
1000e3a0:	d9800217 	ldw	r6,8(sp)
1000e3a4:	e006d43a 	srli	r3,fp,16
1000e3a8:	1185883a 	add	r2,r2,r6
1000e3ac:	1885883a 	add	r2,r3,r2
1000e3b0:	1180022e 	bgeu	r2,r6,1000e3bc <__umoddi3+0x454>
1000e3b4:	00c00074 	movhi	r3,1
1000e3b8:	b8ef883a 	add	r23,r23,r3
1000e3bc:	1006d43a 	srli	r3,r2,16
1000e3c0:	1004943a 	slli	r2,r2,16
1000e3c4:	e73fffcc 	andi	fp,fp,65535
1000e3c8:	1dc7883a 	add	r3,r3,r23
1000e3cc:	1739883a 	add	fp,r2,fp
1000e3d0:	88c03a36 	bltu	r17,r3,1000e4bc <__umoddi3+0x554>
1000e3d4:	88c05126 	beq	r17,r3,1000e51c <__umoddi3+0x5b4>
1000e3d8:	88c9c83a 	sub	r4,r17,r3
1000e3dc:	e00f883a 	mov	r7,fp
1000e3e0:	81cfc83a 	sub	r7,r16,r7
1000e3e4:	81c7803a 	cmpltu	r3,r16,r7
1000e3e8:	20c7c83a 	sub	r3,r4,r3
1000e3ec:	1cc4983a 	sll	r2,r3,r19
1000e3f0:	3d0ed83a 	srl	r7,r7,r20
1000e3f4:	1d06d83a 	srl	r3,r3,r20
1000e3f8:	11c4b03a 	or	r2,r2,r7
1000e3fc:	003f7c06 	br	1000e1f0 <__alt_data_end+0xf800e1f0>
1000e400:	9ca6983a 	sll	r19,r19,r18
1000e404:	88f8d83a 	srl	fp,r17,r3
1000e408:	80c4d83a 	srl	r2,r16,r3
1000e40c:	982cd43a 	srli	r22,r19,16
1000e410:	8ca2983a 	sll	r17,r17,r18
1000e414:	e009883a 	mov	r4,fp
1000e418:	b00b883a 	mov	r5,r22
1000e41c:	146ab03a 	or	r21,r2,r17
1000e420:	00040140 	call	10004014 <__umodsi3>
1000e424:	b00b883a 	mov	r5,r22
1000e428:	e009883a 	mov	r4,fp
1000e42c:	1029883a 	mov	r20,r2
1000e430:	9dffffcc 	andi	r23,r19,65535
1000e434:	0003fb00 	call	10003fb0 <__udivsi3>
1000e438:	b809883a 	mov	r4,r23
1000e43c:	100b883a 	mov	r5,r2
1000e440:	000e52c0 	call	1000e52c <__mulsi3>
1000e444:	a008943a 	slli	r4,r20,16
1000e448:	a806d43a 	srli	r3,r21,16
1000e44c:	84a8983a 	sll	r20,r16,r18
1000e450:	1906b03a 	or	r3,r3,r4
1000e454:	1880042e 	bgeu	r3,r2,1000e468 <__umoddi3+0x500>
1000e458:	1cc7883a 	add	r3,r3,r19
1000e45c:	1cc00236 	bltu	r3,r19,1000e468 <__umoddi3+0x500>
1000e460:	1880012e 	bgeu	r3,r2,1000e468 <__umoddi3+0x500>
1000e464:	1cc7883a 	add	r3,r3,r19
1000e468:	18a3c83a 	sub	r17,r3,r2
1000e46c:	b00b883a 	mov	r5,r22
1000e470:	8809883a 	mov	r4,r17
1000e474:	00040140 	call	10004014 <__umodsi3>
1000e478:	b00b883a 	mov	r5,r22
1000e47c:	8809883a 	mov	r4,r17
1000e480:	1021883a 	mov	r16,r2
1000e484:	0003fb00 	call	10003fb0 <__udivsi3>
1000e488:	100b883a 	mov	r5,r2
1000e48c:	b809883a 	mov	r4,r23
1000e490:	8020943a 	slli	r16,r16,16
1000e494:	000e52c0 	call	1000e52c <__mulsi3>
1000e498:	a8ffffcc 	andi	r3,r21,65535
1000e49c:	1c06b03a 	or	r3,r3,r16
1000e4a0:	1880042e 	bgeu	r3,r2,1000e4b4 <__umoddi3+0x54c>
1000e4a4:	1cc7883a 	add	r3,r3,r19
1000e4a8:	1cc00236 	bltu	r3,r19,1000e4b4 <__umoddi3+0x54c>
1000e4ac:	1880012e 	bgeu	r3,r2,1000e4b4 <__umoddi3+0x54c>
1000e4b0:	1cc7883a 	add	r3,r3,r19
1000e4b4:	18a3c83a 	sub	r17,r3,r2
1000e4b8:	003f2906 	br	1000e160 <__alt_data_end+0xf800e160>
1000e4bc:	e48fc83a 	sub	r7,fp,r18
1000e4c0:	1d49c83a 	sub	r4,r3,r21
1000e4c4:	e1f9803a 	cmpltu	fp,fp,r7
1000e4c8:	2739c83a 	sub	fp,r4,fp
1000e4cc:	8f09c83a 	sub	r4,r17,fp
1000e4d0:	003fc306 	br	1000e3e0 <__alt_data_end+0xf800e3e0>
1000e4d4:	01000604 	movi	r4,24
1000e4d8:	003ef906 	br	1000e0c0 <__alt_data_end+0xf800e0c0>
1000e4dc:	00800604 	movi	r2,24
1000e4e0:	003f1306 	br	1000e130 <__alt_data_end+0xf800e130>
1000e4e4:	01000604 	movi	r4,24
1000e4e8:	003eb606 	br	1000dfc4 <__alt_data_end+0xf800dfc4>
1000e4ec:	40bf902e 	bgeu	r8,r2,1000e330 <__alt_data_end+0xf800e330>
1000e4f0:	b5bfff84 	addi	r22,r22,-2
1000e4f4:	4551883a 	add	r8,r8,r21
1000e4f8:	003f8e06 	br	1000e334 <__alt_data_end+0xf800e334>
1000e4fc:	18bf762e 	bgeu	r3,r2,1000e2d8 <__alt_data_end+0xf800e2d8>
1000e500:	8c7fff84 	addi	r17,r17,-2
1000e504:	1d47883a 	add	r3,r3,r21
1000e508:	003f7406 	br	1000e2dc <__alt_data_end+0xf800e2dc>
1000e50c:	1cc7883a 	add	r3,r3,r19
1000e510:	003ecd06 	br	1000e048 <__alt_data_end+0xf800e048>
1000e514:	8005883a 	mov	r2,r16
1000e518:	003ef806 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e51c:	873fe736 	bltu	r16,fp,1000e4bc <__alt_data_end+0xf800e4bc>
1000e520:	e00f883a 	mov	r7,fp
1000e524:	0009883a 	mov	r4,zero
1000e528:	003fad06 	br	1000e3e0 <__alt_data_end+0xf800e3e0>

1000e52c <__mulsi3>:
1000e52c:	0005883a 	mov	r2,zero
1000e530:	20000726 	beq	r4,zero,1000e550 <__mulsi3+0x24>
1000e534:	20c0004c 	andi	r3,r4,1
1000e538:	2008d07a 	srli	r4,r4,1
1000e53c:	18000126 	beq	r3,zero,1000e544 <__mulsi3+0x18>
1000e540:	1145883a 	add	r2,r2,r5
1000e544:	294b883a 	add	r5,r5,r5
1000e548:	203ffa1e 	bne	r4,zero,1000e534 <__alt_data_end+0xf800e534>
1000e54c:	f800283a 	ret
1000e550:	f800283a 	ret

1000e554 <__adddf3>:
1000e554:	02c00434 	movhi	r11,16
1000e558:	5affffc4 	addi	r11,r11,-1
1000e55c:	2806d7fa 	srli	r3,r5,31
1000e560:	2ad4703a 	and	r10,r5,r11
1000e564:	3ad2703a 	and	r9,r7,r11
1000e568:	3804d53a 	srli	r2,r7,20
1000e56c:	3018d77a 	srli	r12,r6,29
1000e570:	280ad53a 	srli	r5,r5,20
1000e574:	501490fa 	slli	r10,r10,3
1000e578:	2010d77a 	srli	r8,r4,29
1000e57c:	481290fa 	slli	r9,r9,3
1000e580:	380ed7fa 	srli	r7,r7,31
1000e584:	defffb04 	addi	sp,sp,-20
1000e588:	dc800215 	stw	r18,8(sp)
1000e58c:	dc400115 	stw	r17,4(sp)
1000e590:	dc000015 	stw	r16,0(sp)
1000e594:	dfc00415 	stw	ra,16(sp)
1000e598:	dcc00315 	stw	r19,12(sp)
1000e59c:	1c803fcc 	andi	r18,r3,255
1000e5a0:	2c01ffcc 	andi	r16,r5,2047
1000e5a4:	5210b03a 	or	r8,r10,r8
1000e5a8:	202290fa 	slli	r17,r4,3
1000e5ac:	1081ffcc 	andi	r2,r2,2047
1000e5b0:	4b12b03a 	or	r9,r9,r12
1000e5b4:	300c90fa 	slli	r6,r6,3
1000e5b8:	91c07526 	beq	r18,r7,1000e790 <__adddf3+0x23c>
1000e5bc:	8087c83a 	sub	r3,r16,r2
1000e5c0:	00c0ab0e 	bge	zero,r3,1000e870 <__adddf3+0x31c>
1000e5c4:	10002a1e 	bne	r2,zero,1000e670 <__adddf3+0x11c>
1000e5c8:	4984b03a 	or	r2,r9,r6
1000e5cc:	1000961e 	bne	r2,zero,1000e828 <__adddf3+0x2d4>
1000e5d0:	888001cc 	andi	r2,r17,7
1000e5d4:	10000726 	beq	r2,zero,1000e5f4 <__adddf3+0xa0>
1000e5d8:	888003cc 	andi	r2,r17,15
1000e5dc:	00c00104 	movi	r3,4
1000e5e0:	10c00426 	beq	r2,r3,1000e5f4 <__adddf3+0xa0>
1000e5e4:	88c7883a 	add	r3,r17,r3
1000e5e8:	1c63803a 	cmpltu	r17,r3,r17
1000e5ec:	4451883a 	add	r8,r8,r17
1000e5f0:	1823883a 	mov	r17,r3
1000e5f4:	4080202c 	andhi	r2,r8,128
1000e5f8:	10005926 	beq	r2,zero,1000e760 <__adddf3+0x20c>
1000e5fc:	84000044 	addi	r16,r16,1
1000e600:	0081ffc4 	movi	r2,2047
1000e604:	8080ba26 	beq	r16,r2,1000e8f0 <__adddf3+0x39c>
1000e608:	00bfe034 	movhi	r2,65408
1000e60c:	10bfffc4 	addi	r2,r2,-1
1000e610:	4090703a 	and	r8,r8,r2
1000e614:	4004977a 	slli	r2,r8,29
1000e618:	4010927a 	slli	r8,r8,9
1000e61c:	8822d0fa 	srli	r17,r17,3
1000e620:	8401ffcc 	andi	r16,r16,2047
1000e624:	4010d33a 	srli	r8,r8,12
1000e628:	9007883a 	mov	r3,r18
1000e62c:	1444b03a 	or	r2,r2,r17
1000e630:	8401ffcc 	andi	r16,r16,2047
1000e634:	8020953a 	slli	r16,r16,20
1000e638:	18c03fcc 	andi	r3,r3,255
1000e63c:	01000434 	movhi	r4,16
1000e640:	213fffc4 	addi	r4,r4,-1
1000e644:	180697fa 	slli	r3,r3,31
1000e648:	4110703a 	and	r8,r8,r4
1000e64c:	4410b03a 	or	r8,r8,r16
1000e650:	40c6b03a 	or	r3,r8,r3
1000e654:	dfc00417 	ldw	ra,16(sp)
1000e658:	dcc00317 	ldw	r19,12(sp)
1000e65c:	dc800217 	ldw	r18,8(sp)
1000e660:	dc400117 	ldw	r17,4(sp)
1000e664:	dc000017 	ldw	r16,0(sp)
1000e668:	dec00504 	addi	sp,sp,20
1000e66c:	f800283a 	ret
1000e670:	0081ffc4 	movi	r2,2047
1000e674:	80bfd626 	beq	r16,r2,1000e5d0 <__alt_data_end+0xf800e5d0>
1000e678:	4a402034 	orhi	r9,r9,128
1000e67c:	00800e04 	movi	r2,56
1000e680:	10c09f16 	blt	r2,r3,1000e900 <__adddf3+0x3ac>
1000e684:	008007c4 	movi	r2,31
1000e688:	10c0c216 	blt	r2,r3,1000e994 <__adddf3+0x440>
1000e68c:	00800804 	movi	r2,32
1000e690:	10c5c83a 	sub	r2,r2,r3
1000e694:	488a983a 	sll	r5,r9,r2
1000e698:	30c8d83a 	srl	r4,r6,r3
1000e69c:	3084983a 	sll	r2,r6,r2
1000e6a0:	48c6d83a 	srl	r3,r9,r3
1000e6a4:	290cb03a 	or	r6,r5,r4
1000e6a8:	1004c03a 	cmpne	r2,r2,zero
1000e6ac:	308cb03a 	or	r6,r6,r2
1000e6b0:	898dc83a 	sub	r6,r17,r6
1000e6b4:	89a3803a 	cmpltu	r17,r17,r6
1000e6b8:	40d1c83a 	sub	r8,r8,r3
1000e6bc:	4451c83a 	sub	r8,r8,r17
1000e6c0:	3023883a 	mov	r17,r6
1000e6c4:	4080202c 	andhi	r2,r8,128
1000e6c8:	10002326 	beq	r2,zero,1000e758 <__adddf3+0x204>
1000e6cc:	04c02034 	movhi	r19,128
1000e6d0:	9cffffc4 	addi	r19,r19,-1
1000e6d4:	44e6703a 	and	r19,r8,r19
1000e6d8:	98007626 	beq	r19,zero,1000e8b4 <__adddf3+0x360>
1000e6dc:	9809883a 	mov	r4,r19
1000e6e0:	0010d940 	call	10010d94 <__clzsi2>
1000e6e4:	10fffe04 	addi	r3,r2,-8
1000e6e8:	010007c4 	movi	r4,31
1000e6ec:	20c07716 	blt	r4,r3,1000e8cc <__adddf3+0x378>
1000e6f0:	00800804 	movi	r2,32
1000e6f4:	10c5c83a 	sub	r2,r2,r3
1000e6f8:	8884d83a 	srl	r2,r17,r2
1000e6fc:	98d0983a 	sll	r8,r19,r3
1000e700:	88e2983a 	sll	r17,r17,r3
1000e704:	1204b03a 	or	r2,r2,r8
1000e708:	1c007416 	blt	r3,r16,1000e8dc <__adddf3+0x388>
1000e70c:	1c21c83a 	sub	r16,r3,r16
1000e710:	82000044 	addi	r8,r16,1
1000e714:	00c007c4 	movi	r3,31
1000e718:	1a009116 	blt	r3,r8,1000e960 <__adddf3+0x40c>
1000e71c:	00c00804 	movi	r3,32
1000e720:	1a07c83a 	sub	r3,r3,r8
1000e724:	8a08d83a 	srl	r4,r17,r8
1000e728:	88e2983a 	sll	r17,r17,r3
1000e72c:	10c6983a 	sll	r3,r2,r3
1000e730:	1210d83a 	srl	r8,r2,r8
1000e734:	8804c03a 	cmpne	r2,r17,zero
1000e738:	1906b03a 	or	r3,r3,r4
1000e73c:	18a2b03a 	or	r17,r3,r2
1000e740:	0021883a 	mov	r16,zero
1000e744:	003fa206 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000e748:	1890b03a 	or	r8,r3,r2
1000e74c:	40017d26 	beq	r8,zero,1000ed44 <__adddf3+0x7f0>
1000e750:	1011883a 	mov	r8,r2
1000e754:	1823883a 	mov	r17,r3
1000e758:	888001cc 	andi	r2,r17,7
1000e75c:	103f9e1e 	bne	r2,zero,1000e5d8 <__alt_data_end+0xf800e5d8>
1000e760:	4004977a 	slli	r2,r8,29
1000e764:	8822d0fa 	srli	r17,r17,3
1000e768:	4010d0fa 	srli	r8,r8,3
1000e76c:	9007883a 	mov	r3,r18
1000e770:	1444b03a 	or	r2,r2,r17
1000e774:	0101ffc4 	movi	r4,2047
1000e778:	81002426 	beq	r16,r4,1000e80c <__adddf3+0x2b8>
1000e77c:	8120703a 	and	r16,r16,r4
1000e780:	01000434 	movhi	r4,16
1000e784:	213fffc4 	addi	r4,r4,-1
1000e788:	4110703a 	and	r8,r8,r4
1000e78c:	003fa806 	br	1000e630 <__alt_data_end+0xf800e630>
1000e790:	8089c83a 	sub	r4,r16,r2
1000e794:	01005e0e 	bge	zero,r4,1000e910 <__adddf3+0x3bc>
1000e798:	10002b26 	beq	r2,zero,1000e848 <__adddf3+0x2f4>
1000e79c:	0081ffc4 	movi	r2,2047
1000e7a0:	80bf8b26 	beq	r16,r2,1000e5d0 <__alt_data_end+0xf800e5d0>
1000e7a4:	4a402034 	orhi	r9,r9,128
1000e7a8:	00800e04 	movi	r2,56
1000e7ac:	1100a40e 	bge	r2,r4,1000ea40 <__adddf3+0x4ec>
1000e7b0:	498cb03a 	or	r6,r9,r6
1000e7b4:	300ac03a 	cmpne	r5,r6,zero
1000e7b8:	0013883a 	mov	r9,zero
1000e7bc:	2c4b883a 	add	r5,r5,r17
1000e7c0:	2c63803a 	cmpltu	r17,r5,r17
1000e7c4:	4a11883a 	add	r8,r9,r8
1000e7c8:	8a11883a 	add	r8,r17,r8
1000e7cc:	2823883a 	mov	r17,r5
1000e7d0:	4080202c 	andhi	r2,r8,128
1000e7d4:	103fe026 	beq	r2,zero,1000e758 <__alt_data_end+0xf800e758>
1000e7d8:	84000044 	addi	r16,r16,1
1000e7dc:	0081ffc4 	movi	r2,2047
1000e7e0:	8080d226 	beq	r16,r2,1000eb2c <__adddf3+0x5d8>
1000e7e4:	00bfe034 	movhi	r2,65408
1000e7e8:	10bfffc4 	addi	r2,r2,-1
1000e7ec:	4090703a 	and	r8,r8,r2
1000e7f0:	880ad07a 	srli	r5,r17,1
1000e7f4:	400897fa 	slli	r4,r8,31
1000e7f8:	88c0004c 	andi	r3,r17,1
1000e7fc:	28e2b03a 	or	r17,r5,r3
1000e800:	4010d07a 	srli	r8,r8,1
1000e804:	2462b03a 	or	r17,r4,r17
1000e808:	003f7106 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000e80c:	4088b03a 	or	r4,r8,r2
1000e810:	20014526 	beq	r4,zero,1000ed28 <__adddf3+0x7d4>
1000e814:	01000434 	movhi	r4,16
1000e818:	42000234 	orhi	r8,r8,8
1000e81c:	213fffc4 	addi	r4,r4,-1
1000e820:	4110703a 	and	r8,r8,r4
1000e824:	003f8206 	br	1000e630 <__alt_data_end+0xf800e630>
1000e828:	18ffffc4 	addi	r3,r3,-1
1000e82c:	1800491e 	bne	r3,zero,1000e954 <__adddf3+0x400>
1000e830:	898bc83a 	sub	r5,r17,r6
1000e834:	8963803a 	cmpltu	r17,r17,r5
1000e838:	4251c83a 	sub	r8,r8,r9
1000e83c:	4451c83a 	sub	r8,r8,r17
1000e840:	2823883a 	mov	r17,r5
1000e844:	003f9f06 	br	1000e6c4 <__alt_data_end+0xf800e6c4>
1000e848:	4984b03a 	or	r2,r9,r6
1000e84c:	103f6026 	beq	r2,zero,1000e5d0 <__alt_data_end+0xf800e5d0>
1000e850:	213fffc4 	addi	r4,r4,-1
1000e854:	2000931e 	bne	r4,zero,1000eaa4 <__adddf3+0x550>
1000e858:	898d883a 	add	r6,r17,r6
1000e85c:	3463803a 	cmpltu	r17,r6,r17
1000e860:	4251883a 	add	r8,r8,r9
1000e864:	8a11883a 	add	r8,r17,r8
1000e868:	3023883a 	mov	r17,r6
1000e86c:	003fd806 	br	1000e7d0 <__alt_data_end+0xf800e7d0>
1000e870:	1800541e 	bne	r3,zero,1000e9c4 <__adddf3+0x470>
1000e874:	80800044 	addi	r2,r16,1
1000e878:	1081ffcc 	andi	r2,r2,2047
1000e87c:	00c00044 	movi	r3,1
1000e880:	1880a00e 	bge	r3,r2,1000eb04 <__adddf3+0x5b0>
1000e884:	8989c83a 	sub	r4,r17,r6
1000e888:	8905803a 	cmpltu	r2,r17,r4
1000e88c:	4267c83a 	sub	r19,r8,r9
1000e890:	98a7c83a 	sub	r19,r19,r2
1000e894:	9880202c 	andhi	r2,r19,128
1000e898:	10006326 	beq	r2,zero,1000ea28 <__adddf3+0x4d4>
1000e89c:	3463c83a 	sub	r17,r6,r17
1000e8a0:	4a07c83a 	sub	r3,r9,r8
1000e8a4:	344d803a 	cmpltu	r6,r6,r17
1000e8a8:	19a7c83a 	sub	r19,r3,r6
1000e8ac:	3825883a 	mov	r18,r7
1000e8b0:	983f8a1e 	bne	r19,zero,1000e6dc <__alt_data_end+0xf800e6dc>
1000e8b4:	8809883a 	mov	r4,r17
1000e8b8:	0010d940 	call	10010d94 <__clzsi2>
1000e8bc:	10800804 	addi	r2,r2,32
1000e8c0:	10fffe04 	addi	r3,r2,-8
1000e8c4:	010007c4 	movi	r4,31
1000e8c8:	20ff890e 	bge	r4,r3,1000e6f0 <__alt_data_end+0xf800e6f0>
1000e8cc:	10bff604 	addi	r2,r2,-40
1000e8d0:	8884983a 	sll	r2,r17,r2
1000e8d4:	0023883a 	mov	r17,zero
1000e8d8:	1c3f8c0e 	bge	r3,r16,1000e70c <__alt_data_end+0xf800e70c>
1000e8dc:	023fe034 	movhi	r8,65408
1000e8e0:	423fffc4 	addi	r8,r8,-1
1000e8e4:	80e1c83a 	sub	r16,r16,r3
1000e8e8:	1210703a 	and	r8,r2,r8
1000e8ec:	003f3806 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000e8f0:	9007883a 	mov	r3,r18
1000e8f4:	0011883a 	mov	r8,zero
1000e8f8:	0005883a 	mov	r2,zero
1000e8fc:	003f4c06 	br	1000e630 <__alt_data_end+0xf800e630>
1000e900:	498cb03a 	or	r6,r9,r6
1000e904:	300cc03a 	cmpne	r6,r6,zero
1000e908:	0007883a 	mov	r3,zero
1000e90c:	003f6806 	br	1000e6b0 <__alt_data_end+0xf800e6b0>
1000e910:	20009c1e 	bne	r4,zero,1000eb84 <__adddf3+0x630>
1000e914:	80800044 	addi	r2,r16,1
1000e918:	1141ffcc 	andi	r5,r2,2047
1000e91c:	01000044 	movi	r4,1
1000e920:	2140670e 	bge	r4,r5,1000eac0 <__adddf3+0x56c>
1000e924:	0101ffc4 	movi	r4,2047
1000e928:	11007f26 	beq	r2,r4,1000eb28 <__adddf3+0x5d4>
1000e92c:	898d883a 	add	r6,r17,r6
1000e930:	4247883a 	add	r3,r8,r9
1000e934:	3451803a 	cmpltu	r8,r6,r17
1000e938:	40d1883a 	add	r8,r8,r3
1000e93c:	402297fa 	slli	r17,r8,31
1000e940:	300cd07a 	srli	r6,r6,1
1000e944:	4010d07a 	srli	r8,r8,1
1000e948:	1021883a 	mov	r16,r2
1000e94c:	89a2b03a 	or	r17,r17,r6
1000e950:	003f1f06 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000e954:	0081ffc4 	movi	r2,2047
1000e958:	80bf481e 	bne	r16,r2,1000e67c <__alt_data_end+0xf800e67c>
1000e95c:	003f1c06 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000e960:	843ff844 	addi	r16,r16,-31
1000e964:	01000804 	movi	r4,32
1000e968:	1406d83a 	srl	r3,r2,r16
1000e96c:	41005026 	beq	r8,r4,1000eab0 <__adddf3+0x55c>
1000e970:	01001004 	movi	r4,64
1000e974:	2211c83a 	sub	r8,r4,r8
1000e978:	1204983a 	sll	r2,r2,r8
1000e97c:	88a2b03a 	or	r17,r17,r2
1000e980:	8822c03a 	cmpne	r17,r17,zero
1000e984:	1c62b03a 	or	r17,r3,r17
1000e988:	0011883a 	mov	r8,zero
1000e98c:	0021883a 	mov	r16,zero
1000e990:	003f7106 	br	1000e758 <__alt_data_end+0xf800e758>
1000e994:	193ff804 	addi	r4,r3,-32
1000e998:	00800804 	movi	r2,32
1000e99c:	4908d83a 	srl	r4,r9,r4
1000e9a0:	18804526 	beq	r3,r2,1000eab8 <__adddf3+0x564>
1000e9a4:	00801004 	movi	r2,64
1000e9a8:	10c5c83a 	sub	r2,r2,r3
1000e9ac:	4886983a 	sll	r3,r9,r2
1000e9b0:	198cb03a 	or	r6,r3,r6
1000e9b4:	300cc03a 	cmpne	r6,r6,zero
1000e9b8:	218cb03a 	or	r6,r4,r6
1000e9bc:	0007883a 	mov	r3,zero
1000e9c0:	003f3b06 	br	1000e6b0 <__alt_data_end+0xf800e6b0>
1000e9c4:	80002a26 	beq	r16,zero,1000ea70 <__adddf3+0x51c>
1000e9c8:	0101ffc4 	movi	r4,2047
1000e9cc:	11006826 	beq	r2,r4,1000eb70 <__adddf3+0x61c>
1000e9d0:	00c7c83a 	sub	r3,zero,r3
1000e9d4:	42002034 	orhi	r8,r8,128
1000e9d8:	01000e04 	movi	r4,56
1000e9dc:	20c07c16 	blt	r4,r3,1000ebd0 <__adddf3+0x67c>
1000e9e0:	010007c4 	movi	r4,31
1000e9e4:	20c0da16 	blt	r4,r3,1000ed50 <__adddf3+0x7fc>
1000e9e8:	01000804 	movi	r4,32
1000e9ec:	20c9c83a 	sub	r4,r4,r3
1000e9f0:	4114983a 	sll	r10,r8,r4
1000e9f4:	88cad83a 	srl	r5,r17,r3
1000e9f8:	8908983a 	sll	r4,r17,r4
1000e9fc:	40c6d83a 	srl	r3,r8,r3
1000ea00:	5162b03a 	or	r17,r10,r5
1000ea04:	2008c03a 	cmpne	r4,r4,zero
1000ea08:	8922b03a 	or	r17,r17,r4
1000ea0c:	3463c83a 	sub	r17,r6,r17
1000ea10:	48c7c83a 	sub	r3,r9,r3
1000ea14:	344d803a 	cmpltu	r6,r6,r17
1000ea18:	1991c83a 	sub	r8,r3,r6
1000ea1c:	1021883a 	mov	r16,r2
1000ea20:	3825883a 	mov	r18,r7
1000ea24:	003f2706 	br	1000e6c4 <__alt_data_end+0xf800e6c4>
1000ea28:	24d0b03a 	or	r8,r4,r19
1000ea2c:	40001b1e 	bne	r8,zero,1000ea9c <__adddf3+0x548>
1000ea30:	0005883a 	mov	r2,zero
1000ea34:	0007883a 	mov	r3,zero
1000ea38:	0021883a 	mov	r16,zero
1000ea3c:	003f4d06 	br	1000e774 <__alt_data_end+0xf800e774>
1000ea40:	008007c4 	movi	r2,31
1000ea44:	11003c16 	blt	r2,r4,1000eb38 <__adddf3+0x5e4>
1000ea48:	00800804 	movi	r2,32
1000ea4c:	1105c83a 	sub	r2,r2,r4
1000ea50:	488e983a 	sll	r7,r9,r2
1000ea54:	310ad83a 	srl	r5,r6,r4
1000ea58:	3084983a 	sll	r2,r6,r2
1000ea5c:	4912d83a 	srl	r9,r9,r4
1000ea60:	394ab03a 	or	r5,r7,r5
1000ea64:	1004c03a 	cmpne	r2,r2,zero
1000ea68:	288ab03a 	or	r5,r5,r2
1000ea6c:	003f5306 	br	1000e7bc <__alt_data_end+0xf800e7bc>
1000ea70:	4448b03a 	or	r4,r8,r17
1000ea74:	20003e26 	beq	r4,zero,1000eb70 <__adddf3+0x61c>
1000ea78:	00c6303a 	nor	r3,zero,r3
1000ea7c:	18003a1e 	bne	r3,zero,1000eb68 <__adddf3+0x614>
1000ea80:	3463c83a 	sub	r17,r6,r17
1000ea84:	4a07c83a 	sub	r3,r9,r8
1000ea88:	344d803a 	cmpltu	r6,r6,r17
1000ea8c:	1991c83a 	sub	r8,r3,r6
1000ea90:	1021883a 	mov	r16,r2
1000ea94:	3825883a 	mov	r18,r7
1000ea98:	003f0a06 	br	1000e6c4 <__alt_data_end+0xf800e6c4>
1000ea9c:	2023883a 	mov	r17,r4
1000eaa0:	003f0d06 	br	1000e6d8 <__alt_data_end+0xf800e6d8>
1000eaa4:	0081ffc4 	movi	r2,2047
1000eaa8:	80bf3f1e 	bne	r16,r2,1000e7a8 <__alt_data_end+0xf800e7a8>
1000eaac:	003ec806 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000eab0:	0005883a 	mov	r2,zero
1000eab4:	003fb106 	br	1000e97c <__alt_data_end+0xf800e97c>
1000eab8:	0007883a 	mov	r3,zero
1000eabc:	003fbc06 	br	1000e9b0 <__alt_data_end+0xf800e9b0>
1000eac0:	4444b03a 	or	r2,r8,r17
1000eac4:	8000871e 	bne	r16,zero,1000ece4 <__adddf3+0x790>
1000eac8:	1000ba26 	beq	r2,zero,1000edb4 <__adddf3+0x860>
1000eacc:	4984b03a 	or	r2,r9,r6
1000ead0:	103ebf26 	beq	r2,zero,1000e5d0 <__alt_data_end+0xf800e5d0>
1000ead4:	8985883a 	add	r2,r17,r6
1000ead8:	4247883a 	add	r3,r8,r9
1000eadc:	1451803a 	cmpltu	r8,r2,r17
1000eae0:	40d1883a 	add	r8,r8,r3
1000eae4:	40c0202c 	andhi	r3,r8,128
1000eae8:	1023883a 	mov	r17,r2
1000eaec:	183f1a26 	beq	r3,zero,1000e758 <__alt_data_end+0xf800e758>
1000eaf0:	00bfe034 	movhi	r2,65408
1000eaf4:	10bfffc4 	addi	r2,r2,-1
1000eaf8:	2021883a 	mov	r16,r4
1000eafc:	4090703a 	and	r8,r8,r2
1000eb00:	003eb306 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000eb04:	4444b03a 	or	r2,r8,r17
1000eb08:	8000291e 	bne	r16,zero,1000ebb0 <__adddf3+0x65c>
1000eb0c:	10004b1e 	bne	r2,zero,1000ec3c <__adddf3+0x6e8>
1000eb10:	4990b03a 	or	r8,r9,r6
1000eb14:	40008b26 	beq	r8,zero,1000ed44 <__adddf3+0x7f0>
1000eb18:	4811883a 	mov	r8,r9
1000eb1c:	3023883a 	mov	r17,r6
1000eb20:	3825883a 	mov	r18,r7
1000eb24:	003eaa06 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000eb28:	1021883a 	mov	r16,r2
1000eb2c:	0011883a 	mov	r8,zero
1000eb30:	0005883a 	mov	r2,zero
1000eb34:	003f0f06 	br	1000e774 <__alt_data_end+0xf800e774>
1000eb38:	217ff804 	addi	r5,r4,-32
1000eb3c:	00800804 	movi	r2,32
1000eb40:	494ad83a 	srl	r5,r9,r5
1000eb44:	20807d26 	beq	r4,r2,1000ed3c <__adddf3+0x7e8>
1000eb48:	00801004 	movi	r2,64
1000eb4c:	1109c83a 	sub	r4,r2,r4
1000eb50:	4912983a 	sll	r9,r9,r4
1000eb54:	498cb03a 	or	r6,r9,r6
1000eb58:	300cc03a 	cmpne	r6,r6,zero
1000eb5c:	298ab03a 	or	r5,r5,r6
1000eb60:	0013883a 	mov	r9,zero
1000eb64:	003f1506 	br	1000e7bc <__alt_data_end+0xf800e7bc>
1000eb68:	0101ffc4 	movi	r4,2047
1000eb6c:	113f9a1e 	bne	r2,r4,1000e9d8 <__alt_data_end+0xf800e9d8>
1000eb70:	4811883a 	mov	r8,r9
1000eb74:	3023883a 	mov	r17,r6
1000eb78:	1021883a 	mov	r16,r2
1000eb7c:	3825883a 	mov	r18,r7
1000eb80:	003e9306 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000eb84:	8000161e 	bne	r16,zero,1000ebe0 <__adddf3+0x68c>
1000eb88:	444ab03a 	or	r5,r8,r17
1000eb8c:	28005126 	beq	r5,zero,1000ecd4 <__adddf3+0x780>
1000eb90:	0108303a 	nor	r4,zero,r4
1000eb94:	20004d1e 	bne	r4,zero,1000eccc <__adddf3+0x778>
1000eb98:	89a3883a 	add	r17,r17,r6
1000eb9c:	4253883a 	add	r9,r8,r9
1000eba0:	898d803a 	cmpltu	r6,r17,r6
1000eba4:	3251883a 	add	r8,r6,r9
1000eba8:	1021883a 	mov	r16,r2
1000ebac:	003f0806 	br	1000e7d0 <__alt_data_end+0xf800e7d0>
1000ebb0:	1000301e 	bne	r2,zero,1000ec74 <__adddf3+0x720>
1000ebb4:	4984b03a 	or	r2,r9,r6
1000ebb8:	10007126 	beq	r2,zero,1000ed80 <__adddf3+0x82c>
1000ebbc:	4811883a 	mov	r8,r9
1000ebc0:	3023883a 	mov	r17,r6
1000ebc4:	3825883a 	mov	r18,r7
1000ebc8:	0401ffc4 	movi	r16,2047
1000ebcc:	003e8006 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000ebd0:	4462b03a 	or	r17,r8,r17
1000ebd4:	8822c03a 	cmpne	r17,r17,zero
1000ebd8:	0007883a 	mov	r3,zero
1000ebdc:	003f8b06 	br	1000ea0c <__alt_data_end+0xf800ea0c>
1000ebe0:	0141ffc4 	movi	r5,2047
1000ebe4:	11403b26 	beq	r2,r5,1000ecd4 <__adddf3+0x780>
1000ebe8:	0109c83a 	sub	r4,zero,r4
1000ebec:	42002034 	orhi	r8,r8,128
1000ebf0:	01400e04 	movi	r5,56
1000ebf4:	29006716 	blt	r5,r4,1000ed94 <__adddf3+0x840>
1000ebf8:	014007c4 	movi	r5,31
1000ebfc:	29007016 	blt	r5,r4,1000edc0 <__adddf3+0x86c>
1000ec00:	01400804 	movi	r5,32
1000ec04:	290bc83a 	sub	r5,r5,r4
1000ec08:	4154983a 	sll	r10,r8,r5
1000ec0c:	890ed83a 	srl	r7,r17,r4
1000ec10:	894a983a 	sll	r5,r17,r5
1000ec14:	4108d83a 	srl	r4,r8,r4
1000ec18:	51e2b03a 	or	r17,r10,r7
1000ec1c:	280ac03a 	cmpne	r5,r5,zero
1000ec20:	8962b03a 	or	r17,r17,r5
1000ec24:	89a3883a 	add	r17,r17,r6
1000ec28:	2253883a 	add	r9,r4,r9
1000ec2c:	898d803a 	cmpltu	r6,r17,r6
1000ec30:	3251883a 	add	r8,r6,r9
1000ec34:	1021883a 	mov	r16,r2
1000ec38:	003ee506 	br	1000e7d0 <__alt_data_end+0xf800e7d0>
1000ec3c:	4984b03a 	or	r2,r9,r6
1000ec40:	103e6326 	beq	r2,zero,1000e5d0 <__alt_data_end+0xf800e5d0>
1000ec44:	8987c83a 	sub	r3,r17,r6
1000ec48:	88c9803a 	cmpltu	r4,r17,r3
1000ec4c:	4245c83a 	sub	r2,r8,r9
1000ec50:	1105c83a 	sub	r2,r2,r4
1000ec54:	1100202c 	andhi	r4,r2,128
1000ec58:	203ebb26 	beq	r4,zero,1000e748 <__alt_data_end+0xf800e748>
1000ec5c:	3463c83a 	sub	r17,r6,r17
1000ec60:	4a07c83a 	sub	r3,r9,r8
1000ec64:	344d803a 	cmpltu	r6,r6,r17
1000ec68:	1991c83a 	sub	r8,r3,r6
1000ec6c:	3825883a 	mov	r18,r7
1000ec70:	003e5706 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000ec74:	4984b03a 	or	r2,r9,r6
1000ec78:	10002e26 	beq	r2,zero,1000ed34 <__adddf3+0x7e0>
1000ec7c:	4004d0fa 	srli	r2,r8,3
1000ec80:	8822d0fa 	srli	r17,r17,3
1000ec84:	4010977a 	slli	r8,r8,29
1000ec88:	10c0022c 	andhi	r3,r2,8
1000ec8c:	4462b03a 	or	r17,r8,r17
1000ec90:	18000826 	beq	r3,zero,1000ecb4 <__adddf3+0x760>
1000ec94:	4808d0fa 	srli	r4,r9,3
1000ec98:	20c0022c 	andhi	r3,r4,8
1000ec9c:	1800051e 	bne	r3,zero,1000ecb4 <__adddf3+0x760>
1000eca0:	300cd0fa 	srli	r6,r6,3
1000eca4:	4806977a 	slli	r3,r9,29
1000eca8:	2005883a 	mov	r2,r4
1000ecac:	3825883a 	mov	r18,r7
1000ecb0:	19a2b03a 	or	r17,r3,r6
1000ecb4:	8810d77a 	srli	r8,r17,29
1000ecb8:	100490fa 	slli	r2,r2,3
1000ecbc:	882290fa 	slli	r17,r17,3
1000ecc0:	0401ffc4 	movi	r16,2047
1000ecc4:	4090b03a 	or	r8,r8,r2
1000ecc8:	003e4106 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000eccc:	0141ffc4 	movi	r5,2047
1000ecd0:	117fc71e 	bne	r2,r5,1000ebf0 <__alt_data_end+0xf800ebf0>
1000ecd4:	4811883a 	mov	r8,r9
1000ecd8:	3023883a 	mov	r17,r6
1000ecdc:	1021883a 	mov	r16,r2
1000ece0:	003e3b06 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000ece4:	10002f26 	beq	r2,zero,1000eda4 <__adddf3+0x850>
1000ece8:	4984b03a 	or	r2,r9,r6
1000ecec:	10001126 	beq	r2,zero,1000ed34 <__adddf3+0x7e0>
1000ecf0:	4004d0fa 	srli	r2,r8,3
1000ecf4:	8822d0fa 	srli	r17,r17,3
1000ecf8:	4010977a 	slli	r8,r8,29
1000ecfc:	10c0022c 	andhi	r3,r2,8
1000ed00:	4462b03a 	or	r17,r8,r17
1000ed04:	183feb26 	beq	r3,zero,1000ecb4 <__alt_data_end+0xf800ecb4>
1000ed08:	4808d0fa 	srli	r4,r9,3
1000ed0c:	20c0022c 	andhi	r3,r4,8
1000ed10:	183fe81e 	bne	r3,zero,1000ecb4 <__alt_data_end+0xf800ecb4>
1000ed14:	300cd0fa 	srli	r6,r6,3
1000ed18:	4806977a 	slli	r3,r9,29
1000ed1c:	2005883a 	mov	r2,r4
1000ed20:	19a2b03a 	or	r17,r3,r6
1000ed24:	003fe306 	br	1000ecb4 <__alt_data_end+0xf800ecb4>
1000ed28:	0011883a 	mov	r8,zero
1000ed2c:	0005883a 	mov	r2,zero
1000ed30:	003e3f06 	br	1000e630 <__alt_data_end+0xf800e630>
1000ed34:	0401ffc4 	movi	r16,2047
1000ed38:	003e2506 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000ed3c:	0013883a 	mov	r9,zero
1000ed40:	003f8406 	br	1000eb54 <__alt_data_end+0xf800eb54>
1000ed44:	0005883a 	mov	r2,zero
1000ed48:	0007883a 	mov	r3,zero
1000ed4c:	003e8906 	br	1000e774 <__alt_data_end+0xf800e774>
1000ed50:	197ff804 	addi	r5,r3,-32
1000ed54:	01000804 	movi	r4,32
1000ed58:	414ad83a 	srl	r5,r8,r5
1000ed5c:	19002426 	beq	r3,r4,1000edf0 <__adddf3+0x89c>
1000ed60:	01001004 	movi	r4,64
1000ed64:	20c7c83a 	sub	r3,r4,r3
1000ed68:	40c6983a 	sll	r3,r8,r3
1000ed6c:	1c46b03a 	or	r3,r3,r17
1000ed70:	1806c03a 	cmpne	r3,r3,zero
1000ed74:	28e2b03a 	or	r17,r5,r3
1000ed78:	0007883a 	mov	r3,zero
1000ed7c:	003f2306 	br	1000ea0c <__alt_data_end+0xf800ea0c>
1000ed80:	0007883a 	mov	r3,zero
1000ed84:	5811883a 	mov	r8,r11
1000ed88:	00bfffc4 	movi	r2,-1
1000ed8c:	0401ffc4 	movi	r16,2047
1000ed90:	003e7806 	br	1000e774 <__alt_data_end+0xf800e774>
1000ed94:	4462b03a 	or	r17,r8,r17
1000ed98:	8822c03a 	cmpne	r17,r17,zero
1000ed9c:	0009883a 	mov	r4,zero
1000eda0:	003fa006 	br	1000ec24 <__alt_data_end+0xf800ec24>
1000eda4:	4811883a 	mov	r8,r9
1000eda8:	3023883a 	mov	r17,r6
1000edac:	0401ffc4 	movi	r16,2047
1000edb0:	003e0706 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000edb4:	4811883a 	mov	r8,r9
1000edb8:	3023883a 	mov	r17,r6
1000edbc:	003e0406 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000edc0:	21fff804 	addi	r7,r4,-32
1000edc4:	01400804 	movi	r5,32
1000edc8:	41ced83a 	srl	r7,r8,r7
1000edcc:	21400a26 	beq	r4,r5,1000edf8 <__adddf3+0x8a4>
1000edd0:	01401004 	movi	r5,64
1000edd4:	2909c83a 	sub	r4,r5,r4
1000edd8:	4108983a 	sll	r4,r8,r4
1000eddc:	2448b03a 	or	r4,r4,r17
1000ede0:	2008c03a 	cmpne	r4,r4,zero
1000ede4:	3922b03a 	or	r17,r7,r4
1000ede8:	0009883a 	mov	r4,zero
1000edec:	003f8d06 	br	1000ec24 <__alt_data_end+0xf800ec24>
1000edf0:	0007883a 	mov	r3,zero
1000edf4:	003fdd06 	br	1000ed6c <__alt_data_end+0xf800ed6c>
1000edf8:	0009883a 	mov	r4,zero
1000edfc:	003ff706 	br	1000eddc <__alt_data_end+0xf800eddc>

1000ee00 <__divdf3>:
1000ee00:	defff004 	addi	sp,sp,-64
1000ee04:	dc800815 	stw	r18,32(sp)
1000ee08:	2824d53a 	srli	r18,r5,20
1000ee0c:	dd800c15 	stw	r22,48(sp)
1000ee10:	282cd7fa 	srli	r22,r5,31
1000ee14:	dc000615 	stw	r16,24(sp)
1000ee18:	04000434 	movhi	r16,16
1000ee1c:	843fffc4 	addi	r16,r16,-1
1000ee20:	dfc00f15 	stw	ra,60(sp)
1000ee24:	df000e15 	stw	fp,56(sp)
1000ee28:	ddc00d15 	stw	r23,52(sp)
1000ee2c:	dd400b15 	stw	r21,44(sp)
1000ee30:	dd000a15 	stw	r20,40(sp)
1000ee34:	dcc00915 	stw	r19,36(sp)
1000ee38:	dc400715 	stw	r17,28(sp)
1000ee3c:	9481ffcc 	andi	r18,r18,2047
1000ee40:	2c20703a 	and	r16,r5,r16
1000ee44:	b2003fcc 	andi	r8,r22,255
1000ee48:	90006126 	beq	r18,zero,1000efd0 <__divdf3+0x1d0>
1000ee4c:	0081ffc4 	movi	r2,2047
1000ee50:	202b883a 	mov	r21,r4
1000ee54:	90803726 	beq	r18,r2,1000ef34 <__divdf3+0x134>
1000ee58:	80800434 	orhi	r2,r16,16
1000ee5c:	100490fa 	slli	r2,r2,3
1000ee60:	2020d77a 	srli	r16,r4,29
1000ee64:	202a90fa 	slli	r21,r4,3
1000ee68:	94bf0044 	addi	r18,r18,-1023
1000ee6c:	80a0b03a 	or	r16,r16,r2
1000ee70:	0013883a 	mov	r9,zero
1000ee74:	000b883a 	mov	r5,zero
1000ee78:	3806d53a 	srli	r3,r7,20
1000ee7c:	382ed7fa 	srli	r23,r7,31
1000ee80:	04400434 	movhi	r17,16
1000ee84:	8c7fffc4 	addi	r17,r17,-1
1000ee88:	18c1ffcc 	andi	r3,r3,2047
1000ee8c:	3029883a 	mov	r20,r6
1000ee90:	3c62703a 	and	r17,r7,r17
1000ee94:	bf003fcc 	andi	fp,r23,255
1000ee98:	18006e26 	beq	r3,zero,1000f054 <__divdf3+0x254>
1000ee9c:	0081ffc4 	movi	r2,2047
1000eea0:	18806626 	beq	r3,r2,1000f03c <__divdf3+0x23c>
1000eea4:	88800434 	orhi	r2,r17,16
1000eea8:	100490fa 	slli	r2,r2,3
1000eeac:	3022d77a 	srli	r17,r6,29
1000eeb0:	302890fa 	slli	r20,r6,3
1000eeb4:	18ff0044 	addi	r3,r3,-1023
1000eeb8:	88a2b03a 	or	r17,r17,r2
1000eebc:	000f883a 	mov	r7,zero
1000eec0:	b5e6f03a 	xor	r19,r22,r23
1000eec4:	3a4cb03a 	or	r6,r7,r9
1000eec8:	008003c4 	movi	r2,15
1000eecc:	9809883a 	mov	r4,r19
1000eed0:	90c7c83a 	sub	r3,r18,r3
1000eed4:	9cc03fcc 	andi	r19,r19,255
1000eed8:	11809636 	bltu	r2,r6,1000f134 <__divdf3+0x334>
1000eedc:	300c90ba 	slli	r6,r6,2
1000eee0:	00840074 	movhi	r2,4097
1000eee4:	10bbbd04 	addi	r2,r2,-4364
1000eee8:	308d883a 	add	r6,r6,r2
1000eeec:	30800017 	ldw	r2,0(r6)
1000eef0:	1000683a 	jmp	r2
1000eef4:	1000f134 	orhi	zero,r2,964
1000eef8:	1000ef6c 	andhi	zero,r2,957
1000eefc:	1000f124 	muli	zero,r2,964
1000ef00:	1000ef60 	cmpeqi	zero,r2,957
1000ef04:	1000f124 	muli	zero,r2,964
1000ef08:	1000f0f8 	rdprs	zero,r2,963
1000ef0c:	1000f124 	muli	zero,r2,964
1000ef10:	1000ef60 	cmpeqi	zero,r2,957
1000ef14:	1000ef6c 	andhi	zero,r2,957
1000ef18:	1000ef6c 	andhi	zero,r2,957
1000ef1c:	1000f0f8 	rdprs	zero,r2,963
1000ef20:	1000ef60 	cmpeqi	zero,r2,957
1000ef24:	1000ef50 	cmplti	zero,r2,957
1000ef28:	1000ef50 	cmplti	zero,r2,957
1000ef2c:	1000ef50 	cmplti	zero,r2,957
1000ef30:	1000f4bc 	xorhi	zero,r2,978
1000ef34:	2404b03a 	or	r2,r4,r16
1000ef38:	10006c1e 	bne	r2,zero,1000f0ec <__divdf3+0x2ec>
1000ef3c:	02400204 	movi	r9,8
1000ef40:	0021883a 	mov	r16,zero
1000ef44:	002b883a 	mov	r21,zero
1000ef48:	01400084 	movi	r5,2
1000ef4c:	003fca06 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000ef50:	8023883a 	mov	r17,r16
1000ef54:	a829883a 	mov	r20,r21
1000ef58:	4039883a 	mov	fp,r8
1000ef5c:	280f883a 	mov	r7,r5
1000ef60:	00800084 	movi	r2,2
1000ef64:	3881601e 	bne	r7,r2,1000f4e8 <__divdf3+0x6e8>
1000ef68:	e027883a 	mov	r19,fp
1000ef6c:	9900004c 	andi	r4,r19,1
1000ef70:	0081ffc4 	movi	r2,2047
1000ef74:	0021883a 	mov	r16,zero
1000ef78:	002b883a 	mov	r21,zero
1000ef7c:	1004953a 	slli	r2,r2,20
1000ef80:	20c03fcc 	andi	r3,r4,255
1000ef84:	01400434 	movhi	r5,16
1000ef88:	297fffc4 	addi	r5,r5,-1
1000ef8c:	180697fa 	slli	r3,r3,31
1000ef90:	8160703a 	and	r16,r16,r5
1000ef94:	80a0b03a 	or	r16,r16,r2
1000ef98:	80c6b03a 	or	r3,r16,r3
1000ef9c:	a805883a 	mov	r2,r21
1000efa0:	dfc00f17 	ldw	ra,60(sp)
1000efa4:	df000e17 	ldw	fp,56(sp)
1000efa8:	ddc00d17 	ldw	r23,52(sp)
1000efac:	dd800c17 	ldw	r22,48(sp)
1000efb0:	dd400b17 	ldw	r21,44(sp)
1000efb4:	dd000a17 	ldw	r20,40(sp)
1000efb8:	dcc00917 	ldw	r19,36(sp)
1000efbc:	dc800817 	ldw	r18,32(sp)
1000efc0:	dc400717 	ldw	r17,28(sp)
1000efc4:	dc000617 	ldw	r16,24(sp)
1000efc8:	dec01004 	addi	sp,sp,64
1000efcc:	f800283a 	ret
1000efd0:	2404b03a 	or	r2,r4,r16
1000efd4:	2023883a 	mov	r17,r4
1000efd8:	10003f26 	beq	r2,zero,1000f0d8 <__divdf3+0x2d8>
1000efdc:	80015e26 	beq	r16,zero,1000f558 <__divdf3+0x758>
1000efe0:	8009883a 	mov	r4,r16
1000efe4:	d9800215 	stw	r6,8(sp)
1000efe8:	d9c00515 	stw	r7,20(sp)
1000efec:	da000415 	stw	r8,16(sp)
1000eff0:	0010d940 	call	10010d94 <__clzsi2>
1000eff4:	d9800217 	ldw	r6,8(sp)
1000eff8:	d9c00517 	ldw	r7,20(sp)
1000effc:	da000417 	ldw	r8,16(sp)
1000f000:	113ffd44 	addi	r4,r2,-11
1000f004:	00c00704 	movi	r3,28
1000f008:	19014f16 	blt	r3,r4,1000f548 <__divdf3+0x748>
1000f00c:	00c00744 	movi	r3,29
1000f010:	157ffe04 	addi	r21,r2,-8
1000f014:	1907c83a 	sub	r3,r3,r4
1000f018:	8560983a 	sll	r16,r16,r21
1000f01c:	88c6d83a 	srl	r3,r17,r3
1000f020:	8d6a983a 	sll	r21,r17,r21
1000f024:	1c20b03a 	or	r16,r3,r16
1000f028:	1080fcc4 	addi	r2,r2,1011
1000f02c:	00a5c83a 	sub	r18,zero,r2
1000f030:	0013883a 	mov	r9,zero
1000f034:	000b883a 	mov	r5,zero
1000f038:	003f8f06 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f03c:	3444b03a 	or	r2,r6,r17
1000f040:	1000231e 	bne	r2,zero,1000f0d0 <__divdf3+0x2d0>
1000f044:	0023883a 	mov	r17,zero
1000f048:	0029883a 	mov	r20,zero
1000f04c:	01c00084 	movi	r7,2
1000f050:	003f9b06 	br	1000eec0 <__alt_data_end+0xf800eec0>
1000f054:	3444b03a 	or	r2,r6,r17
1000f058:	10001926 	beq	r2,zero,1000f0c0 <__divdf3+0x2c0>
1000f05c:	88014b26 	beq	r17,zero,1000f58c <__divdf3+0x78c>
1000f060:	8809883a 	mov	r4,r17
1000f064:	d9400115 	stw	r5,4(sp)
1000f068:	d9800215 	stw	r6,8(sp)
1000f06c:	da000415 	stw	r8,16(sp)
1000f070:	da400315 	stw	r9,12(sp)
1000f074:	0010d940 	call	10010d94 <__clzsi2>
1000f078:	d9400117 	ldw	r5,4(sp)
1000f07c:	d9800217 	ldw	r6,8(sp)
1000f080:	da000417 	ldw	r8,16(sp)
1000f084:	da400317 	ldw	r9,12(sp)
1000f088:	113ffd44 	addi	r4,r2,-11
1000f08c:	00c00704 	movi	r3,28
1000f090:	19013a16 	blt	r3,r4,1000f57c <__divdf3+0x77c>
1000f094:	00c00744 	movi	r3,29
1000f098:	153ffe04 	addi	r20,r2,-8
1000f09c:	1907c83a 	sub	r3,r3,r4
1000f0a0:	8d22983a 	sll	r17,r17,r20
1000f0a4:	30c6d83a 	srl	r3,r6,r3
1000f0a8:	3528983a 	sll	r20,r6,r20
1000f0ac:	1c62b03a 	or	r17,r3,r17
1000f0b0:	1080fcc4 	addi	r2,r2,1011
1000f0b4:	0087c83a 	sub	r3,zero,r2
1000f0b8:	000f883a 	mov	r7,zero
1000f0bc:	003f8006 	br	1000eec0 <__alt_data_end+0xf800eec0>
1000f0c0:	0023883a 	mov	r17,zero
1000f0c4:	0029883a 	mov	r20,zero
1000f0c8:	01c00044 	movi	r7,1
1000f0cc:	003f7c06 	br	1000eec0 <__alt_data_end+0xf800eec0>
1000f0d0:	01c000c4 	movi	r7,3
1000f0d4:	003f7a06 	br	1000eec0 <__alt_data_end+0xf800eec0>
1000f0d8:	02400104 	movi	r9,4
1000f0dc:	0021883a 	mov	r16,zero
1000f0e0:	002b883a 	mov	r21,zero
1000f0e4:	01400044 	movi	r5,1
1000f0e8:	003f6306 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f0ec:	02400304 	movi	r9,12
1000f0f0:	014000c4 	movi	r5,3
1000f0f4:	003f6006 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f0f8:	04000434 	movhi	r16,16
1000f0fc:	0009883a 	mov	r4,zero
1000f100:	843fffc4 	addi	r16,r16,-1
1000f104:	057fffc4 	movi	r21,-1
1000f108:	0081ffc4 	movi	r2,2047
1000f10c:	003f9b06 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f110:	00c00044 	movi	r3,1
1000f114:	1887c83a 	sub	r3,r3,r2
1000f118:	01000e04 	movi	r4,56
1000f11c:	20c1530e 	bge	r4,r3,1000f66c <__divdf3+0x86c>
1000f120:	9900004c 	andi	r4,r19,1
1000f124:	0005883a 	mov	r2,zero
1000f128:	0021883a 	mov	r16,zero
1000f12c:	002b883a 	mov	r21,zero
1000f130:	003f9206 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f134:	8c012e36 	bltu	r17,r16,1000f5f0 <__divdf3+0x7f0>
1000f138:	84412c26 	beq	r16,r17,1000f5ec <__divdf3+0x7ec>
1000f13c:	a82f883a 	mov	r23,r21
1000f140:	18ffffc4 	addi	r3,r3,-1
1000f144:	002b883a 	mov	r21,zero
1000f148:	a004d63a 	srli	r2,r20,24
1000f14c:	8822923a 	slli	r17,r17,8
1000f150:	a028923a 	slli	r20,r20,8
1000f154:	8009883a 	mov	r4,r16
1000f158:	88acb03a 	or	r22,r17,r2
1000f15c:	dd000015 	stw	r20,0(sp)
1000f160:	b028d43a 	srli	r20,r22,16
1000f164:	d8c00215 	stw	r3,8(sp)
1000f168:	b4bfffcc 	andi	r18,r22,65535
1000f16c:	a00b883a 	mov	r5,r20
1000f170:	0003fb00 	call	10003fb0 <__udivsi3>
1000f174:	100b883a 	mov	r5,r2
1000f178:	9009883a 	mov	r4,r18
1000f17c:	1023883a 	mov	r17,r2
1000f180:	000e52c0 	call	1000e52c <__mulsi3>
1000f184:	8009883a 	mov	r4,r16
1000f188:	a00b883a 	mov	r5,r20
1000f18c:	1039883a 	mov	fp,r2
1000f190:	00040140 	call	10004014 <__umodsi3>
1000f194:	1004943a 	slli	r2,r2,16
1000f198:	b808d43a 	srli	r4,r23,16
1000f19c:	d8c00217 	ldw	r3,8(sp)
1000f1a0:	2084b03a 	or	r2,r4,r2
1000f1a4:	1700062e 	bgeu	r2,fp,1000f1c0 <__divdf3+0x3c0>
1000f1a8:	1585883a 	add	r2,r2,r22
1000f1ac:	893fffc4 	addi	r4,r17,-1
1000f1b0:	15811d36 	bltu	r2,r22,1000f628 <__divdf3+0x828>
1000f1b4:	17011c2e 	bgeu	r2,fp,1000f628 <__divdf3+0x828>
1000f1b8:	8c7fff84 	addi	r17,r17,-2
1000f1bc:	1585883a 	add	r2,r2,r22
1000f1c0:	1739c83a 	sub	fp,r2,fp
1000f1c4:	a00b883a 	mov	r5,r20
1000f1c8:	e009883a 	mov	r4,fp
1000f1cc:	d8c00215 	stw	r3,8(sp)
1000f1d0:	0003fb00 	call	10003fb0 <__udivsi3>
1000f1d4:	100b883a 	mov	r5,r2
1000f1d8:	9009883a 	mov	r4,r18
1000f1dc:	1021883a 	mov	r16,r2
1000f1e0:	000e52c0 	call	1000e52c <__mulsi3>
1000f1e4:	a00b883a 	mov	r5,r20
1000f1e8:	e009883a 	mov	r4,fp
1000f1ec:	d8800415 	stw	r2,16(sp)
1000f1f0:	00040140 	call	10004014 <__umodsi3>
1000f1f4:	1004943a 	slli	r2,r2,16
1000f1f8:	da000417 	ldw	r8,16(sp)
1000f1fc:	bdffffcc 	andi	r23,r23,65535
1000f200:	b884b03a 	or	r2,r23,r2
1000f204:	d8c00217 	ldw	r3,8(sp)
1000f208:	1200062e 	bgeu	r2,r8,1000f224 <__divdf3+0x424>
1000f20c:	1585883a 	add	r2,r2,r22
1000f210:	813fffc4 	addi	r4,r16,-1
1000f214:	15810236 	bltu	r2,r22,1000f620 <__divdf3+0x820>
1000f218:	1201012e 	bgeu	r2,r8,1000f620 <__divdf3+0x820>
1000f21c:	843fff84 	addi	r16,r16,-2
1000f220:	1585883a 	add	r2,r2,r22
1000f224:	8822943a 	slli	r17,r17,16
1000f228:	d9800017 	ldw	r6,0(sp)
1000f22c:	1211c83a 	sub	r8,r2,r8
1000f230:	8c22b03a 	or	r17,r17,r16
1000f234:	373fffcc 	andi	fp,r6,65535
1000f238:	8abfffcc 	andi	r10,r17,65535
1000f23c:	8820d43a 	srli	r16,r17,16
1000f240:	5009883a 	mov	r4,r10
1000f244:	e00b883a 	mov	r5,fp
1000f248:	302ed43a 	srli	r23,r6,16
1000f24c:	d8c00215 	stw	r3,8(sp)
1000f250:	da000415 	stw	r8,16(sp)
1000f254:	da800115 	stw	r10,4(sp)
1000f258:	000e52c0 	call	1000e52c <__mulsi3>
1000f25c:	800b883a 	mov	r5,r16
1000f260:	e009883a 	mov	r4,fp
1000f264:	d8800515 	stw	r2,20(sp)
1000f268:	000e52c0 	call	1000e52c <__mulsi3>
1000f26c:	8009883a 	mov	r4,r16
1000f270:	b80b883a 	mov	r5,r23
1000f274:	d8800315 	stw	r2,12(sp)
1000f278:	000e52c0 	call	1000e52c <__mulsi3>
1000f27c:	da800117 	ldw	r10,4(sp)
1000f280:	b80b883a 	mov	r5,r23
1000f284:	1021883a 	mov	r16,r2
1000f288:	5009883a 	mov	r4,r10
1000f28c:	000e52c0 	call	1000e52c <__mulsi3>
1000f290:	d9c00517 	ldw	r7,20(sp)
1000f294:	da400317 	ldw	r9,12(sp)
1000f298:	d8c00217 	ldw	r3,8(sp)
1000f29c:	3808d43a 	srli	r4,r7,16
1000f2a0:	1245883a 	add	r2,r2,r9
1000f2a4:	da000417 	ldw	r8,16(sp)
1000f2a8:	2085883a 	add	r2,r4,r2
1000f2ac:	1240022e 	bgeu	r2,r9,1000f2b8 <__divdf3+0x4b8>
1000f2b0:	01000074 	movhi	r4,1
1000f2b4:	8121883a 	add	r16,r16,r4
1000f2b8:	1008d43a 	srli	r4,r2,16
1000f2bc:	1004943a 	slli	r2,r2,16
1000f2c0:	39ffffcc 	andi	r7,r7,65535
1000f2c4:	2409883a 	add	r4,r4,r16
1000f2c8:	11c5883a 	add	r2,r2,r7
1000f2cc:	4100bb36 	bltu	r8,r4,1000f5bc <__divdf3+0x7bc>
1000f2d0:	4100d726 	beq	r8,r4,1000f630 <__divdf3+0x830>
1000f2d4:	4109c83a 	sub	r4,r8,r4
1000f2d8:	a8a1c83a 	sub	r16,r21,r2
1000f2dc:	ac2b803a 	cmpltu	r21,r21,r16
1000f2e0:	256bc83a 	sub	r21,r4,r21
1000f2e4:	b540d926 	beq	r22,r21,1000f64c <__divdf3+0x84c>
1000f2e8:	a00b883a 	mov	r5,r20
1000f2ec:	a809883a 	mov	r4,r21
1000f2f0:	d8c00215 	stw	r3,8(sp)
1000f2f4:	0003fb00 	call	10003fb0 <__udivsi3>
1000f2f8:	100b883a 	mov	r5,r2
1000f2fc:	9009883a 	mov	r4,r18
1000f300:	d8800515 	stw	r2,20(sp)
1000f304:	000e52c0 	call	1000e52c <__mulsi3>
1000f308:	a809883a 	mov	r4,r21
1000f30c:	a00b883a 	mov	r5,r20
1000f310:	d8800415 	stw	r2,16(sp)
1000f314:	00040140 	call	10004014 <__umodsi3>
1000f318:	1004943a 	slli	r2,r2,16
1000f31c:	8008d43a 	srli	r4,r16,16
1000f320:	da000417 	ldw	r8,16(sp)
1000f324:	d8c00217 	ldw	r3,8(sp)
1000f328:	2084b03a 	or	r2,r4,r2
1000f32c:	d9c00517 	ldw	r7,20(sp)
1000f330:	1200062e 	bgeu	r2,r8,1000f34c <__divdf3+0x54c>
1000f334:	1585883a 	add	r2,r2,r22
1000f338:	393fffc4 	addi	r4,r7,-1
1000f33c:	1580c536 	bltu	r2,r22,1000f654 <__divdf3+0x854>
1000f340:	1200c42e 	bgeu	r2,r8,1000f654 <__divdf3+0x854>
1000f344:	39ffff84 	addi	r7,r7,-2
1000f348:	1585883a 	add	r2,r2,r22
1000f34c:	122bc83a 	sub	r21,r2,r8
1000f350:	a00b883a 	mov	r5,r20
1000f354:	a809883a 	mov	r4,r21
1000f358:	d8c00215 	stw	r3,8(sp)
1000f35c:	d9c00515 	stw	r7,20(sp)
1000f360:	0003fb00 	call	10003fb0 <__udivsi3>
1000f364:	9009883a 	mov	r4,r18
1000f368:	100b883a 	mov	r5,r2
1000f36c:	d8800415 	stw	r2,16(sp)
1000f370:	000e52c0 	call	1000e52c <__mulsi3>
1000f374:	a809883a 	mov	r4,r21
1000f378:	a00b883a 	mov	r5,r20
1000f37c:	1025883a 	mov	r18,r2
1000f380:	00040140 	call	10004014 <__umodsi3>
1000f384:	1004943a 	slli	r2,r2,16
1000f388:	813fffcc 	andi	r4,r16,65535
1000f38c:	d8c00217 	ldw	r3,8(sp)
1000f390:	20a0b03a 	or	r16,r4,r2
1000f394:	d9c00517 	ldw	r7,20(sp)
1000f398:	da000417 	ldw	r8,16(sp)
1000f39c:	8480062e 	bgeu	r16,r18,1000f3b8 <__divdf3+0x5b8>
1000f3a0:	85a1883a 	add	r16,r16,r22
1000f3a4:	40bfffc4 	addi	r2,r8,-1
1000f3a8:	8580ac36 	bltu	r16,r22,1000f65c <__divdf3+0x85c>
1000f3ac:	8480ab2e 	bgeu	r16,r18,1000f65c <__divdf3+0x85c>
1000f3b0:	423fff84 	addi	r8,r8,-2
1000f3b4:	85a1883a 	add	r16,r16,r22
1000f3b8:	3804943a 	slli	r2,r7,16
1000f3bc:	84a1c83a 	sub	r16,r16,r18
1000f3c0:	e009883a 	mov	r4,fp
1000f3c4:	1228b03a 	or	r20,r2,r8
1000f3c8:	a1ffffcc 	andi	r7,r20,65535
1000f3cc:	a024d43a 	srli	r18,r20,16
1000f3d0:	380b883a 	mov	r5,r7
1000f3d4:	d8c00215 	stw	r3,8(sp)
1000f3d8:	d9c00515 	stw	r7,20(sp)
1000f3dc:	000e52c0 	call	1000e52c <__mulsi3>
1000f3e0:	900b883a 	mov	r5,r18
1000f3e4:	e009883a 	mov	r4,fp
1000f3e8:	102b883a 	mov	r21,r2
1000f3ec:	000e52c0 	call	1000e52c <__mulsi3>
1000f3f0:	900b883a 	mov	r5,r18
1000f3f4:	b809883a 	mov	r4,r23
1000f3f8:	1039883a 	mov	fp,r2
1000f3fc:	000e52c0 	call	1000e52c <__mulsi3>
1000f400:	d9c00517 	ldw	r7,20(sp)
1000f404:	b80b883a 	mov	r5,r23
1000f408:	1025883a 	mov	r18,r2
1000f40c:	3809883a 	mov	r4,r7
1000f410:	000e52c0 	call	1000e52c <__mulsi3>
1000f414:	a808d43a 	srli	r4,r21,16
1000f418:	1705883a 	add	r2,r2,fp
1000f41c:	d8c00217 	ldw	r3,8(sp)
1000f420:	2085883a 	add	r2,r4,r2
1000f424:	1700022e 	bgeu	r2,fp,1000f430 <__divdf3+0x630>
1000f428:	01000074 	movhi	r4,1
1000f42c:	9125883a 	add	r18,r18,r4
1000f430:	1008d43a 	srli	r4,r2,16
1000f434:	1004943a 	slli	r2,r2,16
1000f438:	ad7fffcc 	andi	r21,r21,65535
1000f43c:	2489883a 	add	r4,r4,r18
1000f440:	1545883a 	add	r2,r2,r21
1000f444:	81003836 	bltu	r16,r4,1000f528 <__divdf3+0x728>
1000f448:	81003626 	beq	r16,r4,1000f524 <__divdf3+0x724>
1000f44c:	a5000054 	ori	r20,r20,1
1000f450:	1880ffc4 	addi	r2,r3,1023
1000f454:	00bf2e0e 	bge	zero,r2,1000f110 <__alt_data_end+0xf800f110>
1000f458:	a10001cc 	andi	r4,r20,7
1000f45c:	20000726 	beq	r4,zero,1000f47c <__divdf3+0x67c>
1000f460:	a10003cc 	andi	r4,r20,15
1000f464:	01400104 	movi	r5,4
1000f468:	21400426 	beq	r4,r5,1000f47c <__divdf3+0x67c>
1000f46c:	a149883a 	add	r4,r20,r5
1000f470:	2529803a 	cmpltu	r20,r4,r20
1000f474:	8d23883a 	add	r17,r17,r20
1000f478:	2029883a 	mov	r20,r4
1000f47c:	8900402c 	andhi	r4,r17,256
1000f480:	20000426 	beq	r4,zero,1000f494 <__divdf3+0x694>
1000f484:	18810004 	addi	r2,r3,1024
1000f488:	00ffc034 	movhi	r3,65280
1000f48c:	18ffffc4 	addi	r3,r3,-1
1000f490:	88e2703a 	and	r17,r17,r3
1000f494:	00c1ff84 	movi	r3,2046
1000f498:	18beb416 	blt	r3,r2,1000ef6c <__alt_data_end+0xf800ef6c>
1000f49c:	a028d0fa 	srli	r20,r20,3
1000f4a0:	882a977a 	slli	r21,r17,29
1000f4a4:	8820927a 	slli	r16,r17,9
1000f4a8:	1081ffcc 	andi	r2,r2,2047
1000f4ac:	ad2ab03a 	or	r21,r21,r20
1000f4b0:	8020d33a 	srli	r16,r16,12
1000f4b4:	9900004c 	andi	r4,r19,1
1000f4b8:	003eb006 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f4bc:	8080022c 	andhi	r2,r16,8
1000f4c0:	10001226 	beq	r2,zero,1000f50c <__divdf3+0x70c>
1000f4c4:	8880022c 	andhi	r2,r17,8
1000f4c8:	1000101e 	bne	r2,zero,1000f50c <__divdf3+0x70c>
1000f4cc:	00800434 	movhi	r2,16
1000f4d0:	8c000234 	orhi	r16,r17,8
1000f4d4:	10bfffc4 	addi	r2,r2,-1
1000f4d8:	b809883a 	mov	r4,r23
1000f4dc:	80a0703a 	and	r16,r16,r2
1000f4e0:	a02b883a 	mov	r21,r20
1000f4e4:	003f0806 	br	1000f108 <__alt_data_end+0xf800f108>
1000f4e8:	008000c4 	movi	r2,3
1000f4ec:	3880b126 	beq	r7,r2,1000f7b4 <__divdf3+0x9b4>
1000f4f0:	00800044 	movi	r2,1
1000f4f4:	38805b1e 	bne	r7,r2,1000f664 <__divdf3+0x864>
1000f4f8:	e009883a 	mov	r4,fp
1000f4fc:	0005883a 	mov	r2,zero
1000f500:	0021883a 	mov	r16,zero
1000f504:	002b883a 	mov	r21,zero
1000f508:	003e9c06 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f50c:	00800434 	movhi	r2,16
1000f510:	84000234 	orhi	r16,r16,8
1000f514:	10bfffc4 	addi	r2,r2,-1
1000f518:	b009883a 	mov	r4,r22
1000f51c:	80a0703a 	and	r16,r16,r2
1000f520:	003ef906 	br	1000f108 <__alt_data_end+0xf800f108>
1000f524:	103fca26 	beq	r2,zero,1000f450 <__alt_data_end+0xf800f450>
1000f528:	b421883a 	add	r16,r22,r16
1000f52c:	a17fffc4 	addi	r5,r20,-1
1000f530:	8580422e 	bgeu	r16,r22,1000f63c <__divdf3+0x83c>
1000f534:	2829883a 	mov	r20,r5
1000f538:	813fc41e 	bne	r16,r4,1000f44c <__alt_data_end+0xf800f44c>
1000f53c:	d9800017 	ldw	r6,0(sp)
1000f540:	30bfc21e 	bne	r6,r2,1000f44c <__alt_data_end+0xf800f44c>
1000f544:	003fc206 	br	1000f450 <__alt_data_end+0xf800f450>
1000f548:	143ff604 	addi	r16,r2,-40
1000f54c:	8c20983a 	sll	r16,r17,r16
1000f550:	002b883a 	mov	r21,zero
1000f554:	003eb406 	br	1000f028 <__alt_data_end+0xf800f028>
1000f558:	d9800215 	stw	r6,8(sp)
1000f55c:	d9c00515 	stw	r7,20(sp)
1000f560:	da000415 	stw	r8,16(sp)
1000f564:	0010d940 	call	10010d94 <__clzsi2>
1000f568:	10800804 	addi	r2,r2,32
1000f56c:	da000417 	ldw	r8,16(sp)
1000f570:	d9c00517 	ldw	r7,20(sp)
1000f574:	d9800217 	ldw	r6,8(sp)
1000f578:	003ea106 	br	1000f000 <__alt_data_end+0xf800f000>
1000f57c:	147ff604 	addi	r17,r2,-40
1000f580:	3462983a 	sll	r17,r6,r17
1000f584:	0029883a 	mov	r20,zero
1000f588:	003ec906 	br	1000f0b0 <__alt_data_end+0xf800f0b0>
1000f58c:	3009883a 	mov	r4,r6
1000f590:	d9400115 	stw	r5,4(sp)
1000f594:	d9800215 	stw	r6,8(sp)
1000f598:	da000415 	stw	r8,16(sp)
1000f59c:	da400315 	stw	r9,12(sp)
1000f5a0:	0010d940 	call	10010d94 <__clzsi2>
1000f5a4:	10800804 	addi	r2,r2,32
1000f5a8:	da400317 	ldw	r9,12(sp)
1000f5ac:	da000417 	ldw	r8,16(sp)
1000f5b0:	d9800217 	ldw	r6,8(sp)
1000f5b4:	d9400117 	ldw	r5,4(sp)
1000f5b8:	003eb306 	br	1000f088 <__alt_data_end+0xf800f088>
1000f5bc:	d9800017 	ldw	r6,0(sp)
1000f5c0:	a9ab883a 	add	r21,r21,r6
1000f5c4:	a98b803a 	cmpltu	r5,r21,r6
1000f5c8:	2d8b883a 	add	r5,r5,r22
1000f5cc:	2a11883a 	add	r8,r5,r8
1000f5d0:	897fffc4 	addi	r5,r17,-1
1000f5d4:	b2000c2e 	bgeu	r22,r8,1000f608 <__divdf3+0x808>
1000f5d8:	41003f36 	bltu	r8,r4,1000f6d8 <__divdf3+0x8d8>
1000f5dc:	22006c26 	beq	r4,r8,1000f790 <__divdf3+0x990>
1000f5e0:	4109c83a 	sub	r4,r8,r4
1000f5e4:	2823883a 	mov	r17,r5
1000f5e8:	003f3b06 	br	1000f2d8 <__alt_data_end+0xf800f2d8>
1000f5ec:	ad3ed336 	bltu	r21,r20,1000f13c <__alt_data_end+0xf800f13c>
1000f5f0:	a804d07a 	srli	r2,r21,1
1000f5f4:	802e97fa 	slli	r23,r16,31
1000f5f8:	a82a97fa 	slli	r21,r21,31
1000f5fc:	8020d07a 	srli	r16,r16,1
1000f600:	b8aeb03a 	or	r23,r23,r2
1000f604:	003ed006 	br	1000f148 <__alt_data_end+0xf800f148>
1000f608:	b23ff51e 	bne	r22,r8,1000f5e0 <__alt_data_end+0xf800f5e0>
1000f60c:	d9800017 	ldw	r6,0(sp)
1000f610:	a9bff12e 	bgeu	r21,r6,1000f5d8 <__alt_data_end+0xf800f5d8>
1000f614:	b109c83a 	sub	r4,r22,r4
1000f618:	2823883a 	mov	r17,r5
1000f61c:	003f2e06 	br	1000f2d8 <__alt_data_end+0xf800f2d8>
1000f620:	2021883a 	mov	r16,r4
1000f624:	003eff06 	br	1000f224 <__alt_data_end+0xf800f224>
1000f628:	2023883a 	mov	r17,r4
1000f62c:	003ee406 	br	1000f1c0 <__alt_data_end+0xf800f1c0>
1000f630:	a8bfe236 	bltu	r21,r2,1000f5bc <__alt_data_end+0xf800f5bc>
1000f634:	0009883a 	mov	r4,zero
1000f638:	003f2706 	br	1000f2d8 <__alt_data_end+0xf800f2d8>
1000f63c:	81002d36 	bltu	r16,r4,1000f6f4 <__divdf3+0x8f4>
1000f640:	24005626 	beq	r4,r16,1000f79c <__divdf3+0x99c>
1000f644:	2829883a 	mov	r20,r5
1000f648:	003f8006 	br	1000f44c <__alt_data_end+0xf800f44c>
1000f64c:	053fffc4 	movi	r20,-1
1000f650:	003f7f06 	br	1000f450 <__alt_data_end+0xf800f450>
1000f654:	200f883a 	mov	r7,r4
1000f658:	003f3c06 	br	1000f34c <__alt_data_end+0xf800f34c>
1000f65c:	1011883a 	mov	r8,r2
1000f660:	003f5506 	br	1000f3b8 <__alt_data_end+0xf800f3b8>
1000f664:	e027883a 	mov	r19,fp
1000f668:	003f7906 	br	1000f450 <__alt_data_end+0xf800f450>
1000f66c:	010007c4 	movi	r4,31
1000f670:	20c02816 	blt	r4,r3,1000f714 <__divdf3+0x914>
1000f674:	00800804 	movi	r2,32
1000f678:	10c5c83a 	sub	r2,r2,r3
1000f67c:	888a983a 	sll	r5,r17,r2
1000f680:	a0c8d83a 	srl	r4,r20,r3
1000f684:	a084983a 	sll	r2,r20,r2
1000f688:	88e2d83a 	srl	r17,r17,r3
1000f68c:	2906b03a 	or	r3,r5,r4
1000f690:	1004c03a 	cmpne	r2,r2,zero
1000f694:	1886b03a 	or	r3,r3,r2
1000f698:	188001cc 	andi	r2,r3,7
1000f69c:	10000726 	beq	r2,zero,1000f6bc <__divdf3+0x8bc>
1000f6a0:	188003cc 	andi	r2,r3,15
1000f6a4:	01000104 	movi	r4,4
1000f6a8:	11000426 	beq	r2,r4,1000f6bc <__divdf3+0x8bc>
1000f6ac:	1805883a 	mov	r2,r3
1000f6b0:	10c00104 	addi	r3,r2,4
1000f6b4:	1885803a 	cmpltu	r2,r3,r2
1000f6b8:	88a3883a 	add	r17,r17,r2
1000f6bc:	8880202c 	andhi	r2,r17,128
1000f6c0:	10002926 	beq	r2,zero,1000f768 <__divdf3+0x968>
1000f6c4:	9900004c 	andi	r4,r19,1
1000f6c8:	00800044 	movi	r2,1
1000f6cc:	0021883a 	mov	r16,zero
1000f6d0:	002b883a 	mov	r21,zero
1000f6d4:	003e2906 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f6d8:	d9800017 	ldw	r6,0(sp)
1000f6dc:	8c7fff84 	addi	r17,r17,-2
1000f6e0:	a9ab883a 	add	r21,r21,r6
1000f6e4:	a98b803a 	cmpltu	r5,r21,r6
1000f6e8:	2d8b883a 	add	r5,r5,r22
1000f6ec:	2a11883a 	add	r8,r5,r8
1000f6f0:	003ef806 	br	1000f2d4 <__alt_data_end+0xf800f2d4>
1000f6f4:	d9800017 	ldw	r6,0(sp)
1000f6f8:	318f883a 	add	r7,r6,r6
1000f6fc:	398b803a 	cmpltu	r5,r7,r6
1000f700:	2d8d883a 	add	r6,r5,r22
1000f704:	81a1883a 	add	r16,r16,r6
1000f708:	a17fff84 	addi	r5,r20,-2
1000f70c:	d9c00015 	stw	r7,0(sp)
1000f710:	003f8806 	br	1000f534 <__alt_data_end+0xf800f534>
1000f714:	013ff844 	movi	r4,-31
1000f718:	2085c83a 	sub	r2,r4,r2
1000f71c:	8888d83a 	srl	r4,r17,r2
1000f720:	00800804 	movi	r2,32
1000f724:	18802126 	beq	r3,r2,1000f7ac <__divdf3+0x9ac>
1000f728:	04001004 	movi	r16,64
1000f72c:	80c7c83a 	sub	r3,r16,r3
1000f730:	88e0983a 	sll	r16,r17,r3
1000f734:	8504b03a 	or	r2,r16,r20
1000f738:	1004c03a 	cmpne	r2,r2,zero
1000f73c:	2084b03a 	or	r2,r4,r2
1000f740:	144001cc 	andi	r17,r2,7
1000f744:	88000d1e 	bne	r17,zero,1000f77c <__divdf3+0x97c>
1000f748:	0021883a 	mov	r16,zero
1000f74c:	102ad0fa 	srli	r21,r2,3
1000f750:	9900004c 	andi	r4,r19,1
1000f754:	0005883a 	mov	r2,zero
1000f758:	ac6ab03a 	or	r21,r21,r17
1000f75c:	003e0706 	br	1000ef7c <__alt_data_end+0xf800ef7c>
1000f760:	1007883a 	mov	r3,r2
1000f764:	0023883a 	mov	r17,zero
1000f768:	8820927a 	slli	r16,r17,9
1000f76c:	1805883a 	mov	r2,r3
1000f770:	8822977a 	slli	r17,r17,29
1000f774:	8020d33a 	srli	r16,r16,12
1000f778:	003ff406 	br	1000f74c <__alt_data_end+0xf800f74c>
1000f77c:	10c003cc 	andi	r3,r2,15
1000f780:	01000104 	movi	r4,4
1000f784:	193ff626 	beq	r3,r4,1000f760 <__alt_data_end+0xf800f760>
1000f788:	0023883a 	mov	r17,zero
1000f78c:	003fc806 	br	1000f6b0 <__alt_data_end+0xf800f6b0>
1000f790:	a8bfd136 	bltu	r21,r2,1000f6d8 <__alt_data_end+0xf800f6d8>
1000f794:	2823883a 	mov	r17,r5
1000f798:	003fa606 	br	1000f634 <__alt_data_end+0xf800f634>
1000f79c:	d9800017 	ldw	r6,0(sp)
1000f7a0:	30bfd436 	bltu	r6,r2,1000f6f4 <__alt_data_end+0xf800f6f4>
1000f7a4:	2829883a 	mov	r20,r5
1000f7a8:	003f6406 	br	1000f53c <__alt_data_end+0xf800f53c>
1000f7ac:	0021883a 	mov	r16,zero
1000f7b0:	003fe006 	br	1000f734 <__alt_data_end+0xf800f734>
1000f7b4:	00800434 	movhi	r2,16
1000f7b8:	8c000234 	orhi	r16,r17,8
1000f7bc:	10bfffc4 	addi	r2,r2,-1
1000f7c0:	e009883a 	mov	r4,fp
1000f7c4:	80a0703a 	and	r16,r16,r2
1000f7c8:	a02b883a 	mov	r21,r20
1000f7cc:	003e4e06 	br	1000f108 <__alt_data_end+0xf800f108>

1000f7d0 <__eqdf2>:
1000f7d0:	2804d53a 	srli	r2,r5,20
1000f7d4:	3806d53a 	srli	r3,r7,20
1000f7d8:	02000434 	movhi	r8,16
1000f7dc:	423fffc4 	addi	r8,r8,-1
1000f7e0:	1081ffcc 	andi	r2,r2,2047
1000f7e4:	0281ffc4 	movi	r10,2047
1000f7e8:	2a12703a 	and	r9,r5,r8
1000f7ec:	18c1ffcc 	andi	r3,r3,2047
1000f7f0:	3a10703a 	and	r8,r7,r8
1000f7f4:	280ad7fa 	srli	r5,r5,31
1000f7f8:	380ed7fa 	srli	r7,r7,31
1000f7fc:	12801026 	beq	r2,r10,1000f840 <__eqdf2+0x70>
1000f800:	0281ffc4 	movi	r10,2047
1000f804:	1a800a26 	beq	r3,r10,1000f830 <__eqdf2+0x60>
1000f808:	10c00226 	beq	r2,r3,1000f814 <__eqdf2+0x44>
1000f80c:	00800044 	movi	r2,1
1000f810:	f800283a 	ret
1000f814:	4a3ffd1e 	bne	r9,r8,1000f80c <__alt_data_end+0xf800f80c>
1000f818:	21bffc1e 	bne	r4,r6,1000f80c <__alt_data_end+0xf800f80c>
1000f81c:	29c00c26 	beq	r5,r7,1000f850 <__eqdf2+0x80>
1000f820:	103ffa1e 	bne	r2,zero,1000f80c <__alt_data_end+0xf800f80c>
1000f824:	2244b03a 	or	r2,r4,r9
1000f828:	1004c03a 	cmpne	r2,r2,zero
1000f82c:	f800283a 	ret
1000f830:	3214b03a 	or	r10,r6,r8
1000f834:	503ff426 	beq	r10,zero,1000f808 <__alt_data_end+0xf800f808>
1000f838:	00800044 	movi	r2,1
1000f83c:	f800283a 	ret
1000f840:	2254b03a 	or	r10,r4,r9
1000f844:	503fee26 	beq	r10,zero,1000f800 <__alt_data_end+0xf800f800>
1000f848:	00800044 	movi	r2,1
1000f84c:	f800283a 	ret
1000f850:	0005883a 	mov	r2,zero
1000f854:	f800283a 	ret

1000f858 <__gedf2>:
1000f858:	2804d53a 	srli	r2,r5,20
1000f85c:	3806d53a 	srli	r3,r7,20
1000f860:	02000434 	movhi	r8,16
1000f864:	423fffc4 	addi	r8,r8,-1
1000f868:	1081ffcc 	andi	r2,r2,2047
1000f86c:	0241ffc4 	movi	r9,2047
1000f870:	2a14703a 	and	r10,r5,r8
1000f874:	18c1ffcc 	andi	r3,r3,2047
1000f878:	3a10703a 	and	r8,r7,r8
1000f87c:	280ad7fa 	srli	r5,r5,31
1000f880:	380ed7fa 	srli	r7,r7,31
1000f884:	12401d26 	beq	r2,r9,1000f8fc <__gedf2+0xa4>
1000f888:	0241ffc4 	movi	r9,2047
1000f88c:	1a401226 	beq	r3,r9,1000f8d8 <__gedf2+0x80>
1000f890:	1000081e 	bne	r2,zero,1000f8b4 <__gedf2+0x5c>
1000f894:	2296b03a 	or	r11,r4,r10
1000f898:	5813003a 	cmpeq	r9,r11,zero
1000f89c:	1800091e 	bne	r3,zero,1000f8c4 <__gedf2+0x6c>
1000f8a0:	3218b03a 	or	r12,r6,r8
1000f8a4:	6000071e 	bne	r12,zero,1000f8c4 <__gedf2+0x6c>
1000f8a8:	0005883a 	mov	r2,zero
1000f8ac:	5800101e 	bne	r11,zero,1000f8f0 <__gedf2+0x98>
1000f8b0:	f800283a 	ret
1000f8b4:	18000c1e 	bne	r3,zero,1000f8e8 <__gedf2+0x90>
1000f8b8:	3212b03a 	or	r9,r6,r8
1000f8bc:	48000c26 	beq	r9,zero,1000f8f0 <__gedf2+0x98>
1000f8c0:	0013883a 	mov	r9,zero
1000f8c4:	39c03fcc 	andi	r7,r7,255
1000f8c8:	48000826 	beq	r9,zero,1000f8ec <__gedf2+0x94>
1000f8cc:	38000926 	beq	r7,zero,1000f8f4 <__gedf2+0x9c>
1000f8d0:	00800044 	movi	r2,1
1000f8d4:	f800283a 	ret
1000f8d8:	3212b03a 	or	r9,r6,r8
1000f8dc:	483fec26 	beq	r9,zero,1000f890 <__alt_data_end+0xf800f890>
1000f8e0:	00bfff84 	movi	r2,-2
1000f8e4:	f800283a 	ret
1000f8e8:	39c03fcc 	andi	r7,r7,255
1000f8ec:	29c00626 	beq	r5,r7,1000f908 <__gedf2+0xb0>
1000f8f0:	283ff726 	beq	r5,zero,1000f8d0 <__alt_data_end+0xf800f8d0>
1000f8f4:	00bfffc4 	movi	r2,-1
1000f8f8:	f800283a 	ret
1000f8fc:	2292b03a 	or	r9,r4,r10
1000f900:	483fe126 	beq	r9,zero,1000f888 <__alt_data_end+0xf800f888>
1000f904:	003ff606 	br	1000f8e0 <__alt_data_end+0xf800f8e0>
1000f908:	18bff916 	blt	r3,r2,1000f8f0 <__alt_data_end+0xf800f8f0>
1000f90c:	10c00316 	blt	r2,r3,1000f91c <__gedf2+0xc4>
1000f910:	42bff736 	bltu	r8,r10,1000f8f0 <__alt_data_end+0xf800f8f0>
1000f914:	52000326 	beq	r10,r8,1000f924 <__gedf2+0xcc>
1000f918:	5200042e 	bgeu	r10,r8,1000f92c <__gedf2+0xd4>
1000f91c:	283fec1e 	bne	r5,zero,1000f8d0 <__alt_data_end+0xf800f8d0>
1000f920:	003ff406 	br	1000f8f4 <__alt_data_end+0xf800f8f4>
1000f924:	313ff236 	bltu	r6,r4,1000f8f0 <__alt_data_end+0xf800f8f0>
1000f928:	21bffc36 	bltu	r4,r6,1000f91c <__alt_data_end+0xf800f91c>
1000f92c:	0005883a 	mov	r2,zero
1000f930:	f800283a 	ret

1000f934 <__ledf2>:
1000f934:	2804d53a 	srli	r2,r5,20
1000f938:	3810d53a 	srli	r8,r7,20
1000f93c:	00c00434 	movhi	r3,16
1000f940:	18ffffc4 	addi	r3,r3,-1
1000f944:	1081ffcc 	andi	r2,r2,2047
1000f948:	0241ffc4 	movi	r9,2047
1000f94c:	28d4703a 	and	r10,r5,r3
1000f950:	4201ffcc 	andi	r8,r8,2047
1000f954:	38c6703a 	and	r3,r7,r3
1000f958:	280ad7fa 	srli	r5,r5,31
1000f95c:	380ed7fa 	srli	r7,r7,31
1000f960:	12401f26 	beq	r2,r9,1000f9e0 <__ledf2+0xac>
1000f964:	0241ffc4 	movi	r9,2047
1000f968:	42401426 	beq	r8,r9,1000f9bc <__ledf2+0x88>
1000f96c:	1000091e 	bne	r2,zero,1000f994 <__ledf2+0x60>
1000f970:	2296b03a 	or	r11,r4,r10
1000f974:	5813003a 	cmpeq	r9,r11,zero
1000f978:	29403fcc 	andi	r5,r5,255
1000f97c:	40000a1e 	bne	r8,zero,1000f9a8 <__ledf2+0x74>
1000f980:	30d8b03a 	or	r12,r6,r3
1000f984:	6000081e 	bne	r12,zero,1000f9a8 <__ledf2+0x74>
1000f988:	0005883a 	mov	r2,zero
1000f98c:	5800111e 	bne	r11,zero,1000f9d4 <__ledf2+0xa0>
1000f990:	f800283a 	ret
1000f994:	29403fcc 	andi	r5,r5,255
1000f998:	40000c1e 	bne	r8,zero,1000f9cc <__ledf2+0x98>
1000f99c:	30d2b03a 	or	r9,r6,r3
1000f9a0:	48000c26 	beq	r9,zero,1000f9d4 <__ledf2+0xa0>
1000f9a4:	0013883a 	mov	r9,zero
1000f9a8:	39c03fcc 	andi	r7,r7,255
1000f9ac:	48000826 	beq	r9,zero,1000f9d0 <__ledf2+0x9c>
1000f9b0:	38001126 	beq	r7,zero,1000f9f8 <__ledf2+0xc4>
1000f9b4:	00800044 	movi	r2,1
1000f9b8:	f800283a 	ret
1000f9bc:	30d2b03a 	or	r9,r6,r3
1000f9c0:	483fea26 	beq	r9,zero,1000f96c <__alt_data_end+0xf800f96c>
1000f9c4:	00800084 	movi	r2,2
1000f9c8:	f800283a 	ret
1000f9cc:	39c03fcc 	andi	r7,r7,255
1000f9d0:	39400726 	beq	r7,r5,1000f9f0 <__ledf2+0xbc>
1000f9d4:	2800081e 	bne	r5,zero,1000f9f8 <__ledf2+0xc4>
1000f9d8:	00800044 	movi	r2,1
1000f9dc:	f800283a 	ret
1000f9e0:	2292b03a 	or	r9,r4,r10
1000f9e4:	483fdf26 	beq	r9,zero,1000f964 <__alt_data_end+0xf800f964>
1000f9e8:	00800084 	movi	r2,2
1000f9ec:	f800283a 	ret
1000f9f0:	4080030e 	bge	r8,r2,1000fa00 <__ledf2+0xcc>
1000f9f4:	383fef26 	beq	r7,zero,1000f9b4 <__alt_data_end+0xf800f9b4>
1000f9f8:	00bfffc4 	movi	r2,-1
1000f9fc:	f800283a 	ret
1000fa00:	123feb16 	blt	r2,r8,1000f9b0 <__alt_data_end+0xf800f9b0>
1000fa04:	1abff336 	bltu	r3,r10,1000f9d4 <__alt_data_end+0xf800f9d4>
1000fa08:	50c00326 	beq	r10,r3,1000fa18 <__ledf2+0xe4>
1000fa0c:	50c0042e 	bgeu	r10,r3,1000fa20 <__ledf2+0xec>
1000fa10:	283fe81e 	bne	r5,zero,1000f9b4 <__alt_data_end+0xf800f9b4>
1000fa14:	003ff806 	br	1000f9f8 <__alt_data_end+0xf800f9f8>
1000fa18:	313fee36 	bltu	r6,r4,1000f9d4 <__alt_data_end+0xf800f9d4>
1000fa1c:	21bffc36 	bltu	r4,r6,1000fa10 <__alt_data_end+0xf800fa10>
1000fa20:	0005883a 	mov	r2,zero
1000fa24:	f800283a 	ret

1000fa28 <__muldf3>:
1000fa28:	deffee04 	addi	sp,sp,-72
1000fa2c:	dd000c15 	stw	r20,48(sp)
1000fa30:	2828d53a 	srli	r20,r5,20
1000fa34:	ddc00f15 	stw	r23,60(sp)
1000fa38:	282ed7fa 	srli	r23,r5,31
1000fa3c:	dc000815 	stw	r16,32(sp)
1000fa40:	04000434 	movhi	r16,16
1000fa44:	dcc00b15 	stw	r19,44(sp)
1000fa48:	843fffc4 	addi	r16,r16,-1
1000fa4c:	dfc01115 	stw	ra,68(sp)
1000fa50:	df001015 	stw	fp,64(sp)
1000fa54:	dd800e15 	stw	r22,56(sp)
1000fa58:	dd400d15 	stw	r21,52(sp)
1000fa5c:	dc800a15 	stw	r18,40(sp)
1000fa60:	dc400915 	stw	r17,36(sp)
1000fa64:	a501ffcc 	andi	r20,r20,2047
1000fa68:	2c20703a 	and	r16,r5,r16
1000fa6c:	b827883a 	mov	r19,r23
1000fa70:	ba403fcc 	andi	r9,r23,255
1000fa74:	a0006026 	beq	r20,zero,1000fbf8 <__muldf3+0x1d0>
1000fa78:	0081ffc4 	movi	r2,2047
1000fa7c:	202d883a 	mov	r22,r4
1000fa80:	a0803626 	beq	r20,r2,1000fb5c <__muldf3+0x134>
1000fa84:	84000434 	orhi	r16,r16,16
1000fa88:	200ad77a 	srli	r5,r4,29
1000fa8c:	800490fa 	slli	r2,r16,3
1000fa90:	202c90fa 	slli	r22,r4,3
1000fa94:	a53f0044 	addi	r20,r20,-1023
1000fa98:	28a0b03a 	or	r16,r5,r2
1000fa9c:	002b883a 	mov	r21,zero
1000faa0:	000b883a 	mov	r5,zero
1000faa4:	3804d53a 	srli	r2,r7,20
1000faa8:	3838d7fa 	srli	fp,r7,31
1000faac:	04400434 	movhi	r17,16
1000fab0:	8c7fffc4 	addi	r17,r17,-1
1000fab4:	1081ffcc 	andi	r2,r2,2047
1000fab8:	3025883a 	mov	r18,r6
1000fabc:	3c62703a 	and	r17,r7,r17
1000fac0:	e2803fcc 	andi	r10,fp,255
1000fac4:	10006d26 	beq	r2,zero,1000fc7c <__muldf3+0x254>
1000fac8:	00c1ffc4 	movi	r3,2047
1000facc:	10c06526 	beq	r2,r3,1000fc64 <__muldf3+0x23c>
1000fad0:	8c400434 	orhi	r17,r17,16
1000fad4:	300ed77a 	srli	r7,r6,29
1000fad8:	880690fa 	slli	r3,r17,3
1000fadc:	302490fa 	slli	r18,r6,3
1000fae0:	10bf0044 	addi	r2,r2,-1023
1000fae4:	38e2b03a 	or	r17,r7,r3
1000fae8:	000f883a 	mov	r7,zero
1000faec:	a087883a 	add	r3,r20,r2
1000faf0:	010003c4 	movi	r4,15
1000faf4:	3d44b03a 	or	r2,r7,r21
1000faf8:	e5ccf03a 	xor	r6,fp,r23
1000fafc:	1a000044 	addi	r8,r3,1
1000fb00:	20809b36 	bltu	r4,r2,1000fd70 <__muldf3+0x348>
1000fb04:	100490ba 	slli	r2,r2,2
1000fb08:	01040074 	movhi	r4,4097
1000fb0c:	213ec704 	addi	r4,r4,-1252
1000fb10:	1105883a 	add	r2,r2,r4
1000fb14:	10800017 	ldw	r2,0(r2)
1000fb18:	1000683a 	jmp	r2
1000fb1c:	1000fd70 	cmpltui	zero,r2,1013
1000fb20:	1000fb7c 	xorhi	zero,r2,1005
1000fb24:	1000fb7c 	xorhi	zero,r2,1005
1000fb28:	1000fb78 	rdprs	zero,r2,1005
1000fb2c:	1000fd4c 	andi	zero,r2,1013
1000fb30:	1000fd4c 	andi	zero,r2,1013
1000fb34:	1000fd34 	orhi	zero,r2,1012
1000fb38:	1000fb78 	rdprs	zero,r2,1005
1000fb3c:	1000fd4c 	andi	zero,r2,1013
1000fb40:	1000fd34 	orhi	zero,r2,1012
1000fb44:	1000fd4c 	andi	zero,r2,1013
1000fb48:	1000fb78 	rdprs	zero,r2,1005
1000fb4c:	1000fd5c 	xori	zero,r2,1013
1000fb50:	1000fd5c 	xori	zero,r2,1013
1000fb54:	1000fd5c 	xori	zero,r2,1013
1000fb58:	100100bc 	xorhi	zero,r2,1026
1000fb5c:	2404b03a 	or	r2,r4,r16
1000fb60:	1000711e 	bne	r2,zero,1000fd28 <__muldf3+0x300>
1000fb64:	05400204 	movi	r21,8
1000fb68:	0021883a 	mov	r16,zero
1000fb6c:	002d883a 	mov	r22,zero
1000fb70:	01400084 	movi	r5,2
1000fb74:	003fcb06 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fb78:	500d883a 	mov	r6,r10
1000fb7c:	00800084 	movi	r2,2
1000fb80:	38805926 	beq	r7,r2,1000fce8 <__muldf3+0x2c0>
1000fb84:	008000c4 	movi	r2,3
1000fb88:	3881bb26 	beq	r7,r2,10010278 <__muldf3+0x850>
1000fb8c:	00800044 	movi	r2,1
1000fb90:	3881961e 	bne	r7,r2,100101ec <__muldf3+0x7c4>
1000fb94:	3027883a 	mov	r19,r6
1000fb98:	0005883a 	mov	r2,zero
1000fb9c:	0021883a 	mov	r16,zero
1000fba0:	002d883a 	mov	r22,zero
1000fba4:	1004953a 	slli	r2,r2,20
1000fba8:	98c03fcc 	andi	r3,r19,255
1000fbac:	04400434 	movhi	r17,16
1000fbb0:	8c7fffc4 	addi	r17,r17,-1
1000fbb4:	180697fa 	slli	r3,r3,31
1000fbb8:	8460703a 	and	r16,r16,r17
1000fbbc:	80a0b03a 	or	r16,r16,r2
1000fbc0:	80c6b03a 	or	r3,r16,r3
1000fbc4:	b005883a 	mov	r2,r22
1000fbc8:	dfc01117 	ldw	ra,68(sp)
1000fbcc:	df001017 	ldw	fp,64(sp)
1000fbd0:	ddc00f17 	ldw	r23,60(sp)
1000fbd4:	dd800e17 	ldw	r22,56(sp)
1000fbd8:	dd400d17 	ldw	r21,52(sp)
1000fbdc:	dd000c17 	ldw	r20,48(sp)
1000fbe0:	dcc00b17 	ldw	r19,44(sp)
1000fbe4:	dc800a17 	ldw	r18,40(sp)
1000fbe8:	dc400917 	ldw	r17,36(sp)
1000fbec:	dc000817 	ldw	r16,32(sp)
1000fbf0:	dec01204 	addi	sp,sp,72
1000fbf4:	f800283a 	ret
1000fbf8:	2404b03a 	or	r2,r4,r16
1000fbfc:	202b883a 	mov	r21,r4
1000fc00:	10004426 	beq	r2,zero,1000fd14 <__muldf3+0x2ec>
1000fc04:	80015126 	beq	r16,zero,1001014c <__muldf3+0x724>
1000fc08:	8009883a 	mov	r4,r16
1000fc0c:	d9800715 	stw	r6,28(sp)
1000fc10:	d9c00215 	stw	r7,8(sp)
1000fc14:	da400415 	stw	r9,16(sp)
1000fc18:	0010d940 	call	10010d94 <__clzsi2>
1000fc1c:	d9800717 	ldw	r6,28(sp)
1000fc20:	d9c00217 	ldw	r7,8(sp)
1000fc24:	da400417 	ldw	r9,16(sp)
1000fc28:	113ffd44 	addi	r4,r2,-11
1000fc2c:	00c00704 	movi	r3,28
1000fc30:	19014216 	blt	r3,r4,1001013c <__muldf3+0x714>
1000fc34:	00c00744 	movi	r3,29
1000fc38:	15bffe04 	addi	r22,r2,-8
1000fc3c:	1907c83a 	sub	r3,r3,r4
1000fc40:	85a0983a 	sll	r16,r16,r22
1000fc44:	a8c6d83a 	srl	r3,r21,r3
1000fc48:	adac983a 	sll	r22,r21,r22
1000fc4c:	1c20b03a 	or	r16,r3,r16
1000fc50:	1080fcc4 	addi	r2,r2,1011
1000fc54:	00a9c83a 	sub	r20,zero,r2
1000fc58:	002b883a 	mov	r21,zero
1000fc5c:	000b883a 	mov	r5,zero
1000fc60:	003f9006 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fc64:	3446b03a 	or	r3,r6,r17
1000fc68:	1800281e 	bne	r3,zero,1000fd0c <__muldf3+0x2e4>
1000fc6c:	0023883a 	mov	r17,zero
1000fc70:	0025883a 	mov	r18,zero
1000fc74:	01c00084 	movi	r7,2
1000fc78:	003f9c06 	br	1000faec <__alt_data_end+0xf800faec>
1000fc7c:	3446b03a 	or	r3,r6,r17
1000fc80:	18001e26 	beq	r3,zero,1000fcfc <__muldf3+0x2d4>
1000fc84:	88012126 	beq	r17,zero,1001010c <__muldf3+0x6e4>
1000fc88:	8809883a 	mov	r4,r17
1000fc8c:	d9400215 	stw	r5,8(sp)
1000fc90:	d9800715 	stw	r6,28(sp)
1000fc94:	da400415 	stw	r9,16(sp)
1000fc98:	da800315 	stw	r10,12(sp)
1000fc9c:	0010d940 	call	10010d94 <__clzsi2>
1000fca0:	d9400217 	ldw	r5,8(sp)
1000fca4:	d9800717 	ldw	r6,28(sp)
1000fca8:	da400417 	ldw	r9,16(sp)
1000fcac:	da800317 	ldw	r10,12(sp)
1000fcb0:	113ffd44 	addi	r4,r2,-11
1000fcb4:	00c00704 	movi	r3,28
1000fcb8:	19011016 	blt	r3,r4,100100fc <__muldf3+0x6d4>
1000fcbc:	00c00744 	movi	r3,29
1000fcc0:	14bffe04 	addi	r18,r2,-8
1000fcc4:	1907c83a 	sub	r3,r3,r4
1000fcc8:	8ca2983a 	sll	r17,r17,r18
1000fccc:	30c6d83a 	srl	r3,r6,r3
1000fcd0:	34a4983a 	sll	r18,r6,r18
1000fcd4:	1c62b03a 	or	r17,r3,r17
1000fcd8:	1080fcc4 	addi	r2,r2,1011
1000fcdc:	0085c83a 	sub	r2,zero,r2
1000fce0:	000f883a 	mov	r7,zero
1000fce4:	003f8106 	br	1000faec <__alt_data_end+0xf800faec>
1000fce8:	3027883a 	mov	r19,r6
1000fcec:	0081ffc4 	movi	r2,2047
1000fcf0:	0021883a 	mov	r16,zero
1000fcf4:	002d883a 	mov	r22,zero
1000fcf8:	003faa06 	br	1000fba4 <__alt_data_end+0xf800fba4>
1000fcfc:	0023883a 	mov	r17,zero
1000fd00:	0025883a 	mov	r18,zero
1000fd04:	01c00044 	movi	r7,1
1000fd08:	003f7806 	br	1000faec <__alt_data_end+0xf800faec>
1000fd0c:	01c000c4 	movi	r7,3
1000fd10:	003f7606 	br	1000faec <__alt_data_end+0xf800faec>
1000fd14:	05400104 	movi	r21,4
1000fd18:	0021883a 	mov	r16,zero
1000fd1c:	002d883a 	mov	r22,zero
1000fd20:	01400044 	movi	r5,1
1000fd24:	003f5f06 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fd28:	05400304 	movi	r21,12
1000fd2c:	014000c4 	movi	r5,3
1000fd30:	003f5c06 	br	1000faa4 <__alt_data_end+0xf800faa4>
1000fd34:	04000434 	movhi	r16,16
1000fd38:	0027883a 	mov	r19,zero
1000fd3c:	843fffc4 	addi	r16,r16,-1
1000fd40:	05bfffc4 	movi	r22,-1
1000fd44:	0081ffc4 	movi	r2,2047
1000fd48:	003f9606 	br	1000fba4 <__alt_data_end+0xf800fba4>
1000fd4c:	8023883a 	mov	r17,r16
1000fd50:	b025883a 	mov	r18,r22
1000fd54:	280f883a 	mov	r7,r5
1000fd58:	003f8806 	br	1000fb7c <__alt_data_end+0xf800fb7c>
1000fd5c:	8023883a 	mov	r17,r16
1000fd60:	b025883a 	mov	r18,r22
1000fd64:	480d883a 	mov	r6,r9
1000fd68:	280f883a 	mov	r7,r5
1000fd6c:	003f8306 	br	1000fb7c <__alt_data_end+0xf800fb7c>
1000fd70:	b026d43a 	srli	r19,r22,16
1000fd74:	902ed43a 	srli	r23,r18,16
1000fd78:	b5bfffcc 	andi	r22,r22,65535
1000fd7c:	94bfffcc 	andi	r18,r18,65535
1000fd80:	b00b883a 	mov	r5,r22
1000fd84:	9009883a 	mov	r4,r18
1000fd88:	d8c00515 	stw	r3,20(sp)
1000fd8c:	d9800715 	stw	r6,28(sp)
1000fd90:	da000615 	stw	r8,24(sp)
1000fd94:	000e52c0 	call	1000e52c <__mulsi3>
1000fd98:	980b883a 	mov	r5,r19
1000fd9c:	9009883a 	mov	r4,r18
1000fda0:	1029883a 	mov	r20,r2
1000fda4:	000e52c0 	call	1000e52c <__mulsi3>
1000fda8:	b80b883a 	mov	r5,r23
1000fdac:	9809883a 	mov	r4,r19
1000fdb0:	102b883a 	mov	r21,r2
1000fdb4:	000e52c0 	call	1000e52c <__mulsi3>
1000fdb8:	b809883a 	mov	r4,r23
1000fdbc:	b00b883a 	mov	r5,r22
1000fdc0:	1039883a 	mov	fp,r2
1000fdc4:	000e52c0 	call	1000e52c <__mulsi3>
1000fdc8:	a008d43a 	srli	r4,r20,16
1000fdcc:	1545883a 	add	r2,r2,r21
1000fdd0:	d8c00517 	ldw	r3,20(sp)
1000fdd4:	2085883a 	add	r2,r4,r2
1000fdd8:	d9800717 	ldw	r6,28(sp)
1000fddc:	da000617 	ldw	r8,24(sp)
1000fde0:	1540022e 	bgeu	r2,r21,1000fdec <__muldf3+0x3c4>
1000fde4:	01000074 	movhi	r4,1
1000fde8:	e139883a 	add	fp,fp,r4
1000fdec:	100e943a 	slli	r7,r2,16
1000fdf0:	1004d43a 	srli	r2,r2,16
1000fdf4:	882ad43a 	srli	r21,r17,16
1000fdf8:	a53fffcc 	andi	r20,r20,65535
1000fdfc:	8c7fffcc 	andi	r17,r17,65535
1000fe00:	3d29883a 	add	r20,r7,r20
1000fe04:	b00b883a 	mov	r5,r22
1000fe08:	8809883a 	mov	r4,r17
1000fe0c:	d8c00515 	stw	r3,20(sp)
1000fe10:	d9800715 	stw	r6,28(sp)
1000fe14:	da000615 	stw	r8,24(sp)
1000fe18:	dd000115 	stw	r20,4(sp)
1000fe1c:	d8800015 	stw	r2,0(sp)
1000fe20:	000e52c0 	call	1000e52c <__mulsi3>
1000fe24:	980b883a 	mov	r5,r19
1000fe28:	8809883a 	mov	r4,r17
1000fe2c:	d8800215 	stw	r2,8(sp)
1000fe30:	000e52c0 	call	1000e52c <__mulsi3>
1000fe34:	9809883a 	mov	r4,r19
1000fe38:	a80b883a 	mov	r5,r21
1000fe3c:	1029883a 	mov	r20,r2
1000fe40:	000e52c0 	call	1000e52c <__mulsi3>
1000fe44:	b00b883a 	mov	r5,r22
1000fe48:	a809883a 	mov	r4,r21
1000fe4c:	d8800415 	stw	r2,16(sp)
1000fe50:	000e52c0 	call	1000e52c <__mulsi3>
1000fe54:	d9c00217 	ldw	r7,8(sp)
1000fe58:	1505883a 	add	r2,r2,r20
1000fe5c:	d8c00517 	ldw	r3,20(sp)
1000fe60:	3826d43a 	srli	r19,r7,16
1000fe64:	d9800717 	ldw	r6,28(sp)
1000fe68:	da000617 	ldw	r8,24(sp)
1000fe6c:	9885883a 	add	r2,r19,r2
1000fe70:	da400417 	ldw	r9,16(sp)
1000fe74:	1500022e 	bgeu	r2,r20,1000fe80 <__muldf3+0x458>
1000fe78:	01000074 	movhi	r4,1
1000fe7c:	4913883a 	add	r9,r9,r4
1000fe80:	1028d43a 	srli	r20,r2,16
1000fe84:	1004943a 	slli	r2,r2,16
1000fe88:	802cd43a 	srli	r22,r16,16
1000fe8c:	843fffcc 	andi	r16,r16,65535
1000fe90:	3cffffcc 	andi	r19,r7,65535
1000fe94:	9009883a 	mov	r4,r18
1000fe98:	800b883a 	mov	r5,r16
1000fe9c:	a269883a 	add	r20,r20,r9
1000fea0:	d8c00515 	stw	r3,20(sp)
1000fea4:	d9800715 	stw	r6,28(sp)
1000fea8:	da000615 	stw	r8,24(sp)
1000feac:	14e7883a 	add	r19,r2,r19
1000feb0:	000e52c0 	call	1000e52c <__mulsi3>
1000feb4:	9009883a 	mov	r4,r18
1000feb8:	b00b883a 	mov	r5,r22
1000febc:	d8800315 	stw	r2,12(sp)
1000fec0:	000e52c0 	call	1000e52c <__mulsi3>
1000fec4:	b809883a 	mov	r4,r23
1000fec8:	b00b883a 	mov	r5,r22
1000fecc:	d8800215 	stw	r2,8(sp)
1000fed0:	000e52c0 	call	1000e52c <__mulsi3>
1000fed4:	b80b883a 	mov	r5,r23
1000fed8:	8009883a 	mov	r4,r16
1000fedc:	d8800415 	stw	r2,16(sp)
1000fee0:	000e52c0 	call	1000e52c <__mulsi3>
1000fee4:	da800317 	ldw	r10,12(sp)
1000fee8:	d9c00217 	ldw	r7,8(sp)
1000feec:	d9000017 	ldw	r4,0(sp)
1000fef0:	502ed43a 	srli	r23,r10,16
1000fef4:	11c5883a 	add	r2,r2,r7
1000fef8:	24e5883a 	add	r18,r4,r19
1000fefc:	b885883a 	add	r2,r23,r2
1000ff00:	d8c00517 	ldw	r3,20(sp)
1000ff04:	d9800717 	ldw	r6,28(sp)
1000ff08:	da000617 	ldw	r8,24(sp)
1000ff0c:	da400417 	ldw	r9,16(sp)
1000ff10:	11c0022e 	bgeu	r2,r7,1000ff1c <__muldf3+0x4f4>
1000ff14:	01000074 	movhi	r4,1
1000ff18:	4913883a 	add	r9,r9,r4
1000ff1c:	100ed43a 	srli	r7,r2,16
1000ff20:	1004943a 	slli	r2,r2,16
1000ff24:	55ffffcc 	andi	r23,r10,65535
1000ff28:	3a53883a 	add	r9,r7,r9
1000ff2c:	8809883a 	mov	r4,r17
1000ff30:	800b883a 	mov	r5,r16
1000ff34:	d8c00515 	stw	r3,20(sp)
1000ff38:	d9800715 	stw	r6,28(sp)
1000ff3c:	da000615 	stw	r8,24(sp)
1000ff40:	da400415 	stw	r9,16(sp)
1000ff44:	15ef883a 	add	r23,r2,r23
1000ff48:	000e52c0 	call	1000e52c <__mulsi3>
1000ff4c:	8809883a 	mov	r4,r17
1000ff50:	b00b883a 	mov	r5,r22
1000ff54:	d8800215 	stw	r2,8(sp)
1000ff58:	000e52c0 	call	1000e52c <__mulsi3>
1000ff5c:	b00b883a 	mov	r5,r22
1000ff60:	a809883a 	mov	r4,r21
1000ff64:	d8800315 	stw	r2,12(sp)
1000ff68:	000e52c0 	call	1000e52c <__mulsi3>
1000ff6c:	8009883a 	mov	r4,r16
1000ff70:	a80b883a 	mov	r5,r21
1000ff74:	1023883a 	mov	r17,r2
1000ff78:	000e52c0 	call	1000e52c <__mulsi3>
1000ff7c:	d9c00217 	ldw	r7,8(sp)
1000ff80:	da800317 	ldw	r10,12(sp)
1000ff84:	d8c00517 	ldw	r3,20(sp)
1000ff88:	3808d43a 	srli	r4,r7,16
1000ff8c:	1285883a 	add	r2,r2,r10
1000ff90:	d9800717 	ldw	r6,28(sp)
1000ff94:	2085883a 	add	r2,r4,r2
1000ff98:	da000617 	ldw	r8,24(sp)
1000ff9c:	da400417 	ldw	r9,16(sp)
1000ffa0:	1280022e 	bgeu	r2,r10,1000ffac <__muldf3+0x584>
1000ffa4:	01000074 	movhi	r4,1
1000ffa8:	8923883a 	add	r17,r17,r4
1000ffac:	1008943a 	slli	r4,r2,16
1000ffb0:	39ffffcc 	andi	r7,r7,65535
1000ffb4:	e4b9883a 	add	fp,fp,r18
1000ffb8:	21cf883a 	add	r7,r4,r7
1000ffbc:	e4e7803a 	cmpltu	r19,fp,r19
1000ffc0:	3d0f883a 	add	r7,r7,r20
1000ffc4:	bf39883a 	add	fp,r23,fp
1000ffc8:	99c9883a 	add	r4,r19,r7
1000ffcc:	e5ef803a 	cmpltu	r23,fp,r23
1000ffd0:	490b883a 	add	r5,r9,r4
1000ffd4:	1004d43a 	srli	r2,r2,16
1000ffd8:	b965883a 	add	r18,r23,r5
1000ffdc:	24c9803a 	cmpltu	r4,r4,r19
1000ffe0:	3d29803a 	cmpltu	r20,r7,r20
1000ffe4:	a128b03a 	or	r20,r20,r4
1000ffe8:	95ef803a 	cmpltu	r23,r18,r23
1000ffec:	2a53803a 	cmpltu	r9,r5,r9
1000fff0:	a0a9883a 	add	r20,r20,r2
1000fff4:	4deeb03a 	or	r23,r9,r23
1000fff8:	a5ef883a 	add	r23,r20,r23
1000fffc:	bc63883a 	add	r17,r23,r17
10010000:	e004927a 	slli	r2,fp,9
10010004:	d9000117 	ldw	r4,4(sp)
10010008:	882e927a 	slli	r23,r17,9
1001000c:	9022d5fa 	srli	r17,r18,23
10010010:	e038d5fa 	srli	fp,fp,23
10010014:	1104b03a 	or	r2,r2,r4
10010018:	9024927a 	slli	r18,r18,9
1001001c:	1004c03a 	cmpne	r2,r2,zero
10010020:	bc62b03a 	or	r17,r23,r17
10010024:	1738b03a 	or	fp,r2,fp
10010028:	8880402c 	andhi	r2,r17,256
1001002c:	e4a4b03a 	or	r18,fp,r18
10010030:	10000726 	beq	r2,zero,10010050 <__muldf3+0x628>
10010034:	9006d07a 	srli	r3,r18,1
10010038:	880497fa 	slli	r2,r17,31
1001003c:	9480004c 	andi	r18,r18,1
10010040:	8822d07a 	srli	r17,r17,1
10010044:	1ca4b03a 	or	r18,r3,r18
10010048:	14a4b03a 	or	r18,r2,r18
1001004c:	4007883a 	mov	r3,r8
10010050:	1880ffc4 	addi	r2,r3,1023
10010054:	0080460e 	bge	zero,r2,10010170 <__muldf3+0x748>
10010058:	910001cc 	andi	r4,r18,7
1001005c:	20000726 	beq	r4,zero,1001007c <__muldf3+0x654>
10010060:	910003cc 	andi	r4,r18,15
10010064:	01400104 	movi	r5,4
10010068:	21400426 	beq	r4,r5,1001007c <__muldf3+0x654>
1001006c:	9149883a 	add	r4,r18,r5
10010070:	24a5803a 	cmpltu	r18,r4,r18
10010074:	8ca3883a 	add	r17,r17,r18
10010078:	2025883a 	mov	r18,r4
1001007c:	8900402c 	andhi	r4,r17,256
10010080:	20000426 	beq	r4,zero,10010094 <__muldf3+0x66c>
10010084:	18810004 	addi	r2,r3,1024
10010088:	00ffc034 	movhi	r3,65280
1001008c:	18ffffc4 	addi	r3,r3,-1
10010090:	88e2703a 	and	r17,r17,r3
10010094:	00c1ff84 	movi	r3,2046
10010098:	18bf1316 	blt	r3,r2,1000fce8 <__alt_data_end+0xf800fce8>
1001009c:	882c977a 	slli	r22,r17,29
100100a0:	9024d0fa 	srli	r18,r18,3
100100a4:	8822927a 	slli	r17,r17,9
100100a8:	1081ffcc 	andi	r2,r2,2047
100100ac:	b4acb03a 	or	r22,r22,r18
100100b0:	8820d33a 	srli	r16,r17,12
100100b4:	3027883a 	mov	r19,r6
100100b8:	003eba06 	br	1000fba4 <__alt_data_end+0xf800fba4>
100100bc:	8080022c 	andhi	r2,r16,8
100100c0:	10000926 	beq	r2,zero,100100e8 <__muldf3+0x6c0>
100100c4:	8880022c 	andhi	r2,r17,8
100100c8:	1000071e 	bne	r2,zero,100100e8 <__muldf3+0x6c0>
100100cc:	00800434 	movhi	r2,16
100100d0:	8c000234 	orhi	r16,r17,8
100100d4:	10bfffc4 	addi	r2,r2,-1
100100d8:	e027883a 	mov	r19,fp
100100dc:	80a0703a 	and	r16,r16,r2
100100e0:	902d883a 	mov	r22,r18
100100e4:	003f1706 	br	1000fd44 <__alt_data_end+0xf800fd44>
100100e8:	00800434 	movhi	r2,16
100100ec:	84000234 	orhi	r16,r16,8
100100f0:	10bfffc4 	addi	r2,r2,-1
100100f4:	80a0703a 	and	r16,r16,r2
100100f8:	003f1206 	br	1000fd44 <__alt_data_end+0xf800fd44>
100100fc:	147ff604 	addi	r17,r2,-40
10010100:	3462983a 	sll	r17,r6,r17
10010104:	0025883a 	mov	r18,zero
10010108:	003ef306 	br	1000fcd8 <__alt_data_end+0xf800fcd8>
1001010c:	3009883a 	mov	r4,r6
10010110:	d9400215 	stw	r5,8(sp)
10010114:	d9800715 	stw	r6,28(sp)
10010118:	da400415 	stw	r9,16(sp)
1001011c:	da800315 	stw	r10,12(sp)
10010120:	0010d940 	call	10010d94 <__clzsi2>
10010124:	10800804 	addi	r2,r2,32
10010128:	da800317 	ldw	r10,12(sp)
1001012c:	da400417 	ldw	r9,16(sp)
10010130:	d9800717 	ldw	r6,28(sp)
10010134:	d9400217 	ldw	r5,8(sp)
10010138:	003edd06 	br	1000fcb0 <__alt_data_end+0xf800fcb0>
1001013c:	143ff604 	addi	r16,r2,-40
10010140:	ac20983a 	sll	r16,r21,r16
10010144:	002d883a 	mov	r22,zero
10010148:	003ec106 	br	1000fc50 <__alt_data_end+0xf800fc50>
1001014c:	d9800715 	stw	r6,28(sp)
10010150:	d9c00215 	stw	r7,8(sp)
10010154:	da400415 	stw	r9,16(sp)
10010158:	0010d940 	call	10010d94 <__clzsi2>
1001015c:	10800804 	addi	r2,r2,32
10010160:	da400417 	ldw	r9,16(sp)
10010164:	d9c00217 	ldw	r7,8(sp)
10010168:	d9800717 	ldw	r6,28(sp)
1001016c:	003eae06 	br	1000fc28 <__alt_data_end+0xf800fc28>
10010170:	00c00044 	movi	r3,1
10010174:	1887c83a 	sub	r3,r3,r2
10010178:	01000e04 	movi	r4,56
1001017c:	20fe8516 	blt	r4,r3,1000fb94 <__alt_data_end+0xf800fb94>
10010180:	010007c4 	movi	r4,31
10010184:	20c01b16 	blt	r4,r3,100101f4 <__muldf3+0x7cc>
10010188:	00800804 	movi	r2,32
1001018c:	10c5c83a 	sub	r2,r2,r3
10010190:	888a983a 	sll	r5,r17,r2
10010194:	90c8d83a 	srl	r4,r18,r3
10010198:	9084983a 	sll	r2,r18,r2
1001019c:	88e2d83a 	srl	r17,r17,r3
100101a0:	2906b03a 	or	r3,r5,r4
100101a4:	1004c03a 	cmpne	r2,r2,zero
100101a8:	1886b03a 	or	r3,r3,r2
100101ac:	188001cc 	andi	r2,r3,7
100101b0:	10000726 	beq	r2,zero,100101d0 <__muldf3+0x7a8>
100101b4:	188003cc 	andi	r2,r3,15
100101b8:	01000104 	movi	r4,4
100101bc:	11000426 	beq	r2,r4,100101d0 <__muldf3+0x7a8>
100101c0:	1805883a 	mov	r2,r3
100101c4:	10c00104 	addi	r3,r2,4
100101c8:	1885803a 	cmpltu	r2,r3,r2
100101cc:	88a3883a 	add	r17,r17,r2
100101d0:	8880202c 	andhi	r2,r17,128
100101d4:	10001c26 	beq	r2,zero,10010248 <__muldf3+0x820>
100101d8:	3027883a 	mov	r19,r6
100101dc:	00800044 	movi	r2,1
100101e0:	0021883a 	mov	r16,zero
100101e4:	002d883a 	mov	r22,zero
100101e8:	003e6e06 	br	1000fba4 <__alt_data_end+0xf800fba4>
100101ec:	4007883a 	mov	r3,r8
100101f0:	003f9706 	br	10010050 <__alt_data_end+0xf8010050>
100101f4:	017ff844 	movi	r5,-31
100101f8:	2885c83a 	sub	r2,r5,r2
100101fc:	888ad83a 	srl	r5,r17,r2
10010200:	00800804 	movi	r2,32
10010204:	18801a26 	beq	r3,r2,10010270 <__muldf3+0x848>
10010208:	01001004 	movi	r4,64
1001020c:	20c7c83a 	sub	r3,r4,r3
10010210:	88e2983a 	sll	r17,r17,r3
10010214:	8ca4b03a 	or	r18,r17,r18
10010218:	9004c03a 	cmpne	r2,r18,zero
1001021c:	2884b03a 	or	r2,r5,r2
10010220:	144001cc 	andi	r17,r2,7
10010224:	88000d1e 	bne	r17,zero,1001025c <__muldf3+0x834>
10010228:	0021883a 	mov	r16,zero
1001022c:	102cd0fa 	srli	r22,r2,3
10010230:	3027883a 	mov	r19,r6
10010234:	0005883a 	mov	r2,zero
10010238:	b46cb03a 	or	r22,r22,r17
1001023c:	003e5906 	br	1000fba4 <__alt_data_end+0xf800fba4>
10010240:	1007883a 	mov	r3,r2
10010244:	0023883a 	mov	r17,zero
10010248:	8820927a 	slli	r16,r17,9
1001024c:	1805883a 	mov	r2,r3
10010250:	8822977a 	slli	r17,r17,29
10010254:	8020d33a 	srli	r16,r16,12
10010258:	003ff406 	br	1001022c <__alt_data_end+0xf801022c>
1001025c:	10c003cc 	andi	r3,r2,15
10010260:	01000104 	movi	r4,4
10010264:	193ff626 	beq	r3,r4,10010240 <__alt_data_end+0xf8010240>
10010268:	0023883a 	mov	r17,zero
1001026c:	003fd506 	br	100101c4 <__alt_data_end+0xf80101c4>
10010270:	0023883a 	mov	r17,zero
10010274:	003fe706 	br	10010214 <__alt_data_end+0xf8010214>
10010278:	00800434 	movhi	r2,16
1001027c:	8c000234 	orhi	r16,r17,8
10010280:	10bfffc4 	addi	r2,r2,-1
10010284:	3027883a 	mov	r19,r6
10010288:	80a0703a 	and	r16,r16,r2
1001028c:	902d883a 	mov	r22,r18
10010290:	003eac06 	br	1000fd44 <__alt_data_end+0xf800fd44>

10010294 <__subdf3>:
10010294:	02000434 	movhi	r8,16
10010298:	423fffc4 	addi	r8,r8,-1
1001029c:	defffb04 	addi	sp,sp,-20
100102a0:	2a14703a 	and	r10,r5,r8
100102a4:	3812d53a 	srli	r9,r7,20
100102a8:	3a10703a 	and	r8,r7,r8
100102ac:	2006d77a 	srli	r3,r4,29
100102b0:	3004d77a 	srli	r2,r6,29
100102b4:	dc000015 	stw	r16,0(sp)
100102b8:	501490fa 	slli	r10,r10,3
100102bc:	2820d53a 	srli	r16,r5,20
100102c0:	401090fa 	slli	r8,r8,3
100102c4:	dc800215 	stw	r18,8(sp)
100102c8:	dc400115 	stw	r17,4(sp)
100102cc:	dfc00415 	stw	ra,16(sp)
100102d0:	202290fa 	slli	r17,r4,3
100102d4:	dcc00315 	stw	r19,12(sp)
100102d8:	4a41ffcc 	andi	r9,r9,2047
100102dc:	0101ffc4 	movi	r4,2047
100102e0:	2824d7fa 	srli	r18,r5,31
100102e4:	8401ffcc 	andi	r16,r16,2047
100102e8:	50c6b03a 	or	r3,r10,r3
100102ec:	380ed7fa 	srli	r7,r7,31
100102f0:	408ab03a 	or	r5,r8,r2
100102f4:	300c90fa 	slli	r6,r6,3
100102f8:	49009626 	beq	r9,r4,10010554 <__subdf3+0x2c0>
100102fc:	39c0005c 	xori	r7,r7,1
10010300:	8245c83a 	sub	r2,r16,r9
10010304:	3c807426 	beq	r7,r18,100104d8 <__subdf3+0x244>
10010308:	0080af0e 	bge	zero,r2,100105c8 <__subdf3+0x334>
1001030c:	48002a1e 	bne	r9,zero,100103b8 <__subdf3+0x124>
10010310:	2988b03a 	or	r4,r5,r6
10010314:	20009a1e 	bne	r4,zero,10010580 <__subdf3+0x2ec>
10010318:	888001cc 	andi	r2,r17,7
1001031c:	10000726 	beq	r2,zero,1001033c <__subdf3+0xa8>
10010320:	888003cc 	andi	r2,r17,15
10010324:	01000104 	movi	r4,4
10010328:	11000426 	beq	r2,r4,1001033c <__subdf3+0xa8>
1001032c:	890b883a 	add	r5,r17,r4
10010330:	2c63803a 	cmpltu	r17,r5,r17
10010334:	1c47883a 	add	r3,r3,r17
10010338:	2823883a 	mov	r17,r5
1001033c:	1880202c 	andhi	r2,r3,128
10010340:	10005926 	beq	r2,zero,100104a8 <__subdf3+0x214>
10010344:	84000044 	addi	r16,r16,1
10010348:	0081ffc4 	movi	r2,2047
1001034c:	8080be26 	beq	r16,r2,10010648 <__subdf3+0x3b4>
10010350:	017fe034 	movhi	r5,65408
10010354:	297fffc4 	addi	r5,r5,-1
10010358:	1946703a 	and	r3,r3,r5
1001035c:	1804977a 	slli	r2,r3,29
10010360:	1806927a 	slli	r3,r3,9
10010364:	8822d0fa 	srli	r17,r17,3
10010368:	8401ffcc 	andi	r16,r16,2047
1001036c:	180ad33a 	srli	r5,r3,12
10010370:	9100004c 	andi	r4,r18,1
10010374:	1444b03a 	or	r2,r2,r17
10010378:	80c1ffcc 	andi	r3,r16,2047
1001037c:	1820953a 	slli	r16,r3,20
10010380:	20c03fcc 	andi	r3,r4,255
10010384:	180897fa 	slli	r4,r3,31
10010388:	00c00434 	movhi	r3,16
1001038c:	18ffffc4 	addi	r3,r3,-1
10010390:	28c6703a 	and	r3,r5,r3
10010394:	1c06b03a 	or	r3,r3,r16
10010398:	1906b03a 	or	r3,r3,r4
1001039c:	dfc00417 	ldw	ra,16(sp)
100103a0:	dcc00317 	ldw	r19,12(sp)
100103a4:	dc800217 	ldw	r18,8(sp)
100103a8:	dc400117 	ldw	r17,4(sp)
100103ac:	dc000017 	ldw	r16,0(sp)
100103b0:	dec00504 	addi	sp,sp,20
100103b4:	f800283a 	ret
100103b8:	0101ffc4 	movi	r4,2047
100103bc:	813fd626 	beq	r16,r4,10010318 <__alt_data_end+0xf8010318>
100103c0:	29402034 	orhi	r5,r5,128
100103c4:	01000e04 	movi	r4,56
100103c8:	2080a316 	blt	r4,r2,10010658 <__subdf3+0x3c4>
100103cc:	010007c4 	movi	r4,31
100103d0:	2080c616 	blt	r4,r2,100106ec <__subdf3+0x458>
100103d4:	01000804 	movi	r4,32
100103d8:	2089c83a 	sub	r4,r4,r2
100103dc:	2910983a 	sll	r8,r5,r4
100103e0:	308ed83a 	srl	r7,r6,r2
100103e4:	3108983a 	sll	r4,r6,r4
100103e8:	2884d83a 	srl	r2,r5,r2
100103ec:	41ccb03a 	or	r6,r8,r7
100103f0:	2008c03a 	cmpne	r4,r4,zero
100103f4:	310cb03a 	or	r6,r6,r4
100103f8:	898dc83a 	sub	r6,r17,r6
100103fc:	89a3803a 	cmpltu	r17,r17,r6
10010400:	1887c83a 	sub	r3,r3,r2
10010404:	1c47c83a 	sub	r3,r3,r17
10010408:	3023883a 	mov	r17,r6
1001040c:	1880202c 	andhi	r2,r3,128
10010410:	10002326 	beq	r2,zero,100104a0 <__subdf3+0x20c>
10010414:	04c02034 	movhi	r19,128
10010418:	9cffffc4 	addi	r19,r19,-1
1001041c:	1ce6703a 	and	r19,r3,r19
10010420:	98007a26 	beq	r19,zero,1001060c <__subdf3+0x378>
10010424:	9809883a 	mov	r4,r19
10010428:	0010d940 	call	10010d94 <__clzsi2>
1001042c:	113ffe04 	addi	r4,r2,-8
10010430:	00c007c4 	movi	r3,31
10010434:	19007b16 	blt	r3,r4,10010624 <__subdf3+0x390>
10010438:	00800804 	movi	r2,32
1001043c:	1105c83a 	sub	r2,r2,r4
10010440:	8884d83a 	srl	r2,r17,r2
10010444:	9906983a 	sll	r3,r19,r4
10010448:	8922983a 	sll	r17,r17,r4
1001044c:	10c4b03a 	or	r2,r2,r3
10010450:	24007816 	blt	r4,r16,10010634 <__subdf3+0x3a0>
10010454:	2421c83a 	sub	r16,r4,r16
10010458:	80c00044 	addi	r3,r16,1
1001045c:	010007c4 	movi	r4,31
10010460:	20c09516 	blt	r4,r3,100106b8 <__subdf3+0x424>
10010464:	01400804 	movi	r5,32
10010468:	28cbc83a 	sub	r5,r5,r3
1001046c:	88c8d83a 	srl	r4,r17,r3
10010470:	8962983a 	sll	r17,r17,r5
10010474:	114a983a 	sll	r5,r2,r5
10010478:	10c6d83a 	srl	r3,r2,r3
1001047c:	8804c03a 	cmpne	r2,r17,zero
10010480:	290ab03a 	or	r5,r5,r4
10010484:	28a2b03a 	or	r17,r5,r2
10010488:	0021883a 	mov	r16,zero
1001048c:	003fa206 	br	10010318 <__alt_data_end+0xf8010318>
10010490:	2090b03a 	or	r8,r4,r2
10010494:	40018e26 	beq	r8,zero,10010ad0 <__subdf3+0x83c>
10010498:	1007883a 	mov	r3,r2
1001049c:	2023883a 	mov	r17,r4
100104a0:	888001cc 	andi	r2,r17,7
100104a4:	103f9e1e 	bne	r2,zero,10010320 <__alt_data_end+0xf8010320>
100104a8:	1804977a 	slli	r2,r3,29
100104ac:	8822d0fa 	srli	r17,r17,3
100104b0:	1810d0fa 	srli	r8,r3,3
100104b4:	9100004c 	andi	r4,r18,1
100104b8:	1444b03a 	or	r2,r2,r17
100104bc:	00c1ffc4 	movi	r3,2047
100104c0:	80c02826 	beq	r16,r3,10010564 <__subdf3+0x2d0>
100104c4:	01400434 	movhi	r5,16
100104c8:	297fffc4 	addi	r5,r5,-1
100104cc:	80e0703a 	and	r16,r16,r3
100104d0:	414a703a 	and	r5,r8,r5
100104d4:	003fa806 	br	10010378 <__alt_data_end+0xf8010378>
100104d8:	0080630e 	bge	zero,r2,10010668 <__subdf3+0x3d4>
100104dc:	48003026 	beq	r9,zero,100105a0 <__subdf3+0x30c>
100104e0:	0101ffc4 	movi	r4,2047
100104e4:	813f8c26 	beq	r16,r4,10010318 <__alt_data_end+0xf8010318>
100104e8:	29402034 	orhi	r5,r5,128
100104ec:	01000e04 	movi	r4,56
100104f0:	2080a90e 	bge	r4,r2,10010798 <__subdf3+0x504>
100104f4:	298cb03a 	or	r6,r5,r6
100104f8:	3012c03a 	cmpne	r9,r6,zero
100104fc:	0005883a 	mov	r2,zero
10010500:	4c53883a 	add	r9,r9,r17
10010504:	4c63803a 	cmpltu	r17,r9,r17
10010508:	10c7883a 	add	r3,r2,r3
1001050c:	88c7883a 	add	r3,r17,r3
10010510:	4823883a 	mov	r17,r9
10010514:	1880202c 	andhi	r2,r3,128
10010518:	1000d026 	beq	r2,zero,1001085c <__subdf3+0x5c8>
1001051c:	84000044 	addi	r16,r16,1
10010520:	0081ffc4 	movi	r2,2047
10010524:	8080fe26 	beq	r16,r2,10010920 <__subdf3+0x68c>
10010528:	00bfe034 	movhi	r2,65408
1001052c:	10bfffc4 	addi	r2,r2,-1
10010530:	1886703a 	and	r3,r3,r2
10010534:	880ad07a 	srli	r5,r17,1
10010538:	180497fa 	slli	r2,r3,31
1001053c:	8900004c 	andi	r4,r17,1
10010540:	2922b03a 	or	r17,r5,r4
10010544:	1806d07a 	srli	r3,r3,1
10010548:	1462b03a 	or	r17,r2,r17
1001054c:	3825883a 	mov	r18,r7
10010550:	003f7106 	br	10010318 <__alt_data_end+0xf8010318>
10010554:	2984b03a 	or	r2,r5,r6
10010558:	103f6826 	beq	r2,zero,100102fc <__alt_data_end+0xf80102fc>
1001055c:	39c03fcc 	andi	r7,r7,255
10010560:	003f6706 	br	10010300 <__alt_data_end+0xf8010300>
10010564:	4086b03a 	or	r3,r8,r2
10010568:	18015226 	beq	r3,zero,10010ab4 <__subdf3+0x820>
1001056c:	00c00434 	movhi	r3,16
10010570:	41400234 	orhi	r5,r8,8
10010574:	18ffffc4 	addi	r3,r3,-1
10010578:	28ca703a 	and	r5,r5,r3
1001057c:	003f7e06 	br	10010378 <__alt_data_end+0xf8010378>
10010580:	10bfffc4 	addi	r2,r2,-1
10010584:	1000491e 	bne	r2,zero,100106ac <__subdf3+0x418>
10010588:	898fc83a 	sub	r7,r17,r6
1001058c:	89e3803a 	cmpltu	r17,r17,r7
10010590:	1947c83a 	sub	r3,r3,r5
10010594:	1c47c83a 	sub	r3,r3,r17
10010598:	3823883a 	mov	r17,r7
1001059c:	003f9b06 	br	1001040c <__alt_data_end+0xf801040c>
100105a0:	2988b03a 	or	r4,r5,r6
100105a4:	203f5c26 	beq	r4,zero,10010318 <__alt_data_end+0xf8010318>
100105a8:	10bfffc4 	addi	r2,r2,-1
100105ac:	1000931e 	bne	r2,zero,100107fc <__subdf3+0x568>
100105b0:	898d883a 	add	r6,r17,r6
100105b4:	3463803a 	cmpltu	r17,r6,r17
100105b8:	1947883a 	add	r3,r3,r5
100105bc:	88c7883a 	add	r3,r17,r3
100105c0:	3023883a 	mov	r17,r6
100105c4:	003fd306 	br	10010514 <__alt_data_end+0xf8010514>
100105c8:	1000541e 	bne	r2,zero,1001071c <__subdf3+0x488>
100105cc:	80800044 	addi	r2,r16,1
100105d0:	1081ffcc 	andi	r2,r2,2047
100105d4:	01000044 	movi	r4,1
100105d8:	2080a20e 	bge	r4,r2,10010864 <__subdf3+0x5d0>
100105dc:	8989c83a 	sub	r4,r17,r6
100105e0:	8905803a 	cmpltu	r2,r17,r4
100105e4:	1967c83a 	sub	r19,r3,r5
100105e8:	98a7c83a 	sub	r19,r19,r2
100105ec:	9880202c 	andhi	r2,r19,128
100105f0:	10006326 	beq	r2,zero,10010780 <__subdf3+0x4ec>
100105f4:	3463c83a 	sub	r17,r6,r17
100105f8:	28c7c83a 	sub	r3,r5,r3
100105fc:	344d803a 	cmpltu	r6,r6,r17
10010600:	19a7c83a 	sub	r19,r3,r6
10010604:	3825883a 	mov	r18,r7
10010608:	983f861e 	bne	r19,zero,10010424 <__alt_data_end+0xf8010424>
1001060c:	8809883a 	mov	r4,r17
10010610:	0010d940 	call	10010d94 <__clzsi2>
10010614:	10800804 	addi	r2,r2,32
10010618:	113ffe04 	addi	r4,r2,-8
1001061c:	00c007c4 	movi	r3,31
10010620:	193f850e 	bge	r3,r4,10010438 <__alt_data_end+0xf8010438>
10010624:	10bff604 	addi	r2,r2,-40
10010628:	8884983a 	sll	r2,r17,r2
1001062c:	0023883a 	mov	r17,zero
10010630:	243f880e 	bge	r4,r16,10010454 <__alt_data_end+0xf8010454>
10010634:	00ffe034 	movhi	r3,65408
10010638:	18ffffc4 	addi	r3,r3,-1
1001063c:	8121c83a 	sub	r16,r16,r4
10010640:	10c6703a 	and	r3,r2,r3
10010644:	003f3406 	br	10010318 <__alt_data_end+0xf8010318>
10010648:	9100004c 	andi	r4,r18,1
1001064c:	000b883a 	mov	r5,zero
10010650:	0005883a 	mov	r2,zero
10010654:	003f4806 	br	10010378 <__alt_data_end+0xf8010378>
10010658:	298cb03a 	or	r6,r5,r6
1001065c:	300cc03a 	cmpne	r6,r6,zero
10010660:	0005883a 	mov	r2,zero
10010664:	003f6406 	br	100103f8 <__alt_data_end+0xf80103f8>
10010668:	10009a1e 	bne	r2,zero,100108d4 <__subdf3+0x640>
1001066c:	82400044 	addi	r9,r16,1
10010670:	4881ffcc 	andi	r2,r9,2047
10010674:	02800044 	movi	r10,1
10010678:	5080670e 	bge	r10,r2,10010818 <__subdf3+0x584>
1001067c:	0081ffc4 	movi	r2,2047
10010680:	4880af26 	beq	r9,r2,10010940 <__subdf3+0x6ac>
10010684:	898d883a 	add	r6,r17,r6
10010688:	1945883a 	add	r2,r3,r5
1001068c:	3447803a 	cmpltu	r3,r6,r17
10010690:	1887883a 	add	r3,r3,r2
10010694:	182297fa 	slli	r17,r3,31
10010698:	300cd07a 	srli	r6,r6,1
1001069c:	1806d07a 	srli	r3,r3,1
100106a0:	4821883a 	mov	r16,r9
100106a4:	89a2b03a 	or	r17,r17,r6
100106a8:	003f1b06 	br	10010318 <__alt_data_end+0xf8010318>
100106ac:	0101ffc4 	movi	r4,2047
100106b0:	813f441e 	bne	r16,r4,100103c4 <__alt_data_end+0xf80103c4>
100106b4:	003f1806 	br	10010318 <__alt_data_end+0xf8010318>
100106b8:	843ff844 	addi	r16,r16,-31
100106bc:	01400804 	movi	r5,32
100106c0:	1408d83a 	srl	r4,r2,r16
100106c4:	19405026 	beq	r3,r5,10010808 <__subdf3+0x574>
100106c8:	01401004 	movi	r5,64
100106cc:	28c7c83a 	sub	r3,r5,r3
100106d0:	10c4983a 	sll	r2,r2,r3
100106d4:	88a2b03a 	or	r17,r17,r2
100106d8:	8822c03a 	cmpne	r17,r17,zero
100106dc:	2462b03a 	or	r17,r4,r17
100106e0:	0007883a 	mov	r3,zero
100106e4:	0021883a 	mov	r16,zero
100106e8:	003f6d06 	br	100104a0 <__alt_data_end+0xf80104a0>
100106ec:	11fff804 	addi	r7,r2,-32
100106f0:	01000804 	movi	r4,32
100106f4:	29ced83a 	srl	r7,r5,r7
100106f8:	11004526 	beq	r2,r4,10010810 <__subdf3+0x57c>
100106fc:	01001004 	movi	r4,64
10010700:	2089c83a 	sub	r4,r4,r2
10010704:	2904983a 	sll	r2,r5,r4
10010708:	118cb03a 	or	r6,r2,r6
1001070c:	300cc03a 	cmpne	r6,r6,zero
10010710:	398cb03a 	or	r6,r7,r6
10010714:	0005883a 	mov	r2,zero
10010718:	003f3706 	br	100103f8 <__alt_data_end+0xf80103f8>
1001071c:	80002a26 	beq	r16,zero,100107c8 <__subdf3+0x534>
10010720:	0101ffc4 	movi	r4,2047
10010724:	49006626 	beq	r9,r4,100108c0 <__subdf3+0x62c>
10010728:	0085c83a 	sub	r2,zero,r2
1001072c:	18c02034 	orhi	r3,r3,128
10010730:	01000e04 	movi	r4,56
10010734:	20807e16 	blt	r4,r2,10010930 <__subdf3+0x69c>
10010738:	010007c4 	movi	r4,31
1001073c:	2080e716 	blt	r4,r2,10010adc <__subdf3+0x848>
10010740:	01000804 	movi	r4,32
10010744:	2089c83a 	sub	r4,r4,r2
10010748:	1914983a 	sll	r10,r3,r4
1001074c:	8890d83a 	srl	r8,r17,r2
10010750:	8908983a 	sll	r4,r17,r4
10010754:	1884d83a 	srl	r2,r3,r2
10010758:	5222b03a 	or	r17,r10,r8
1001075c:	2006c03a 	cmpne	r3,r4,zero
10010760:	88e2b03a 	or	r17,r17,r3
10010764:	3463c83a 	sub	r17,r6,r17
10010768:	2885c83a 	sub	r2,r5,r2
1001076c:	344d803a 	cmpltu	r6,r6,r17
10010770:	1187c83a 	sub	r3,r2,r6
10010774:	4821883a 	mov	r16,r9
10010778:	3825883a 	mov	r18,r7
1001077c:	003f2306 	br	1001040c <__alt_data_end+0xf801040c>
10010780:	24d0b03a 	or	r8,r4,r19
10010784:	40001b1e 	bne	r8,zero,100107f4 <__subdf3+0x560>
10010788:	0005883a 	mov	r2,zero
1001078c:	0009883a 	mov	r4,zero
10010790:	0021883a 	mov	r16,zero
10010794:	003f4906 	br	100104bc <__alt_data_end+0xf80104bc>
10010798:	010007c4 	movi	r4,31
1001079c:	20803a16 	blt	r4,r2,10010888 <__subdf3+0x5f4>
100107a0:	01000804 	movi	r4,32
100107a4:	2089c83a 	sub	r4,r4,r2
100107a8:	2912983a 	sll	r9,r5,r4
100107ac:	3090d83a 	srl	r8,r6,r2
100107b0:	3108983a 	sll	r4,r6,r4
100107b4:	2884d83a 	srl	r2,r5,r2
100107b8:	4a12b03a 	or	r9,r9,r8
100107bc:	2008c03a 	cmpne	r4,r4,zero
100107c0:	4912b03a 	or	r9,r9,r4
100107c4:	003f4e06 	br	10010500 <__alt_data_end+0xf8010500>
100107c8:	1c48b03a 	or	r4,r3,r17
100107cc:	20003c26 	beq	r4,zero,100108c0 <__subdf3+0x62c>
100107d0:	0084303a 	nor	r2,zero,r2
100107d4:	1000381e 	bne	r2,zero,100108b8 <__subdf3+0x624>
100107d8:	3463c83a 	sub	r17,r6,r17
100107dc:	28c5c83a 	sub	r2,r5,r3
100107e0:	344d803a 	cmpltu	r6,r6,r17
100107e4:	1187c83a 	sub	r3,r2,r6
100107e8:	4821883a 	mov	r16,r9
100107ec:	3825883a 	mov	r18,r7
100107f0:	003f0606 	br	1001040c <__alt_data_end+0xf801040c>
100107f4:	2023883a 	mov	r17,r4
100107f8:	003f0906 	br	10010420 <__alt_data_end+0xf8010420>
100107fc:	0101ffc4 	movi	r4,2047
10010800:	813f3a1e 	bne	r16,r4,100104ec <__alt_data_end+0xf80104ec>
10010804:	003ec406 	br	10010318 <__alt_data_end+0xf8010318>
10010808:	0005883a 	mov	r2,zero
1001080c:	003fb106 	br	100106d4 <__alt_data_end+0xf80106d4>
10010810:	0005883a 	mov	r2,zero
10010814:	003fbc06 	br	10010708 <__alt_data_end+0xf8010708>
10010818:	1c44b03a 	or	r2,r3,r17
1001081c:	80008e1e 	bne	r16,zero,10010a58 <__subdf3+0x7c4>
10010820:	1000c826 	beq	r2,zero,10010b44 <__subdf3+0x8b0>
10010824:	2984b03a 	or	r2,r5,r6
10010828:	103ebb26 	beq	r2,zero,10010318 <__alt_data_end+0xf8010318>
1001082c:	8989883a 	add	r4,r17,r6
10010830:	1945883a 	add	r2,r3,r5
10010834:	2447803a 	cmpltu	r3,r4,r17
10010838:	1887883a 	add	r3,r3,r2
1001083c:	1880202c 	andhi	r2,r3,128
10010840:	2023883a 	mov	r17,r4
10010844:	103f1626 	beq	r2,zero,100104a0 <__alt_data_end+0xf80104a0>
10010848:	00bfe034 	movhi	r2,65408
1001084c:	10bfffc4 	addi	r2,r2,-1
10010850:	5021883a 	mov	r16,r10
10010854:	1886703a 	and	r3,r3,r2
10010858:	003eaf06 	br	10010318 <__alt_data_end+0xf8010318>
1001085c:	3825883a 	mov	r18,r7
10010860:	003f0f06 	br	100104a0 <__alt_data_end+0xf80104a0>
10010864:	1c44b03a 	or	r2,r3,r17
10010868:	8000251e 	bne	r16,zero,10010900 <__subdf3+0x66c>
1001086c:	1000661e 	bne	r2,zero,10010a08 <__subdf3+0x774>
10010870:	2990b03a 	or	r8,r5,r6
10010874:	40009626 	beq	r8,zero,10010ad0 <__subdf3+0x83c>
10010878:	2807883a 	mov	r3,r5
1001087c:	3023883a 	mov	r17,r6
10010880:	3825883a 	mov	r18,r7
10010884:	003ea406 	br	10010318 <__alt_data_end+0xf8010318>
10010888:	127ff804 	addi	r9,r2,-32
1001088c:	01000804 	movi	r4,32
10010890:	2a52d83a 	srl	r9,r5,r9
10010894:	11008c26 	beq	r2,r4,10010ac8 <__subdf3+0x834>
10010898:	01001004 	movi	r4,64
1001089c:	2085c83a 	sub	r2,r4,r2
100108a0:	2884983a 	sll	r2,r5,r2
100108a4:	118cb03a 	or	r6,r2,r6
100108a8:	300cc03a 	cmpne	r6,r6,zero
100108ac:	4992b03a 	or	r9,r9,r6
100108b0:	0005883a 	mov	r2,zero
100108b4:	003f1206 	br	10010500 <__alt_data_end+0xf8010500>
100108b8:	0101ffc4 	movi	r4,2047
100108bc:	493f9c1e 	bne	r9,r4,10010730 <__alt_data_end+0xf8010730>
100108c0:	2807883a 	mov	r3,r5
100108c4:	3023883a 	mov	r17,r6
100108c8:	4821883a 	mov	r16,r9
100108cc:	3825883a 	mov	r18,r7
100108d0:	003e9106 	br	10010318 <__alt_data_end+0xf8010318>
100108d4:	80001f1e 	bne	r16,zero,10010954 <__subdf3+0x6c0>
100108d8:	1c48b03a 	or	r4,r3,r17
100108dc:	20005a26 	beq	r4,zero,10010a48 <__subdf3+0x7b4>
100108e0:	0084303a 	nor	r2,zero,r2
100108e4:	1000561e 	bne	r2,zero,10010a40 <__subdf3+0x7ac>
100108e8:	89a3883a 	add	r17,r17,r6
100108ec:	1945883a 	add	r2,r3,r5
100108f0:	898d803a 	cmpltu	r6,r17,r6
100108f4:	3087883a 	add	r3,r6,r2
100108f8:	4821883a 	mov	r16,r9
100108fc:	003f0506 	br	10010514 <__alt_data_end+0xf8010514>
10010900:	10002b1e 	bne	r2,zero,100109b0 <__subdf3+0x71c>
10010904:	2984b03a 	or	r2,r5,r6
10010908:	10008026 	beq	r2,zero,10010b0c <__subdf3+0x878>
1001090c:	2807883a 	mov	r3,r5
10010910:	3023883a 	mov	r17,r6
10010914:	3825883a 	mov	r18,r7
10010918:	0401ffc4 	movi	r16,2047
1001091c:	003e7e06 	br	10010318 <__alt_data_end+0xf8010318>
10010920:	3809883a 	mov	r4,r7
10010924:	0011883a 	mov	r8,zero
10010928:	0005883a 	mov	r2,zero
1001092c:	003ee306 	br	100104bc <__alt_data_end+0xf80104bc>
10010930:	1c62b03a 	or	r17,r3,r17
10010934:	8822c03a 	cmpne	r17,r17,zero
10010938:	0005883a 	mov	r2,zero
1001093c:	003f8906 	br	10010764 <__alt_data_end+0xf8010764>
10010940:	3809883a 	mov	r4,r7
10010944:	4821883a 	mov	r16,r9
10010948:	0011883a 	mov	r8,zero
1001094c:	0005883a 	mov	r2,zero
10010950:	003eda06 	br	100104bc <__alt_data_end+0xf80104bc>
10010954:	0101ffc4 	movi	r4,2047
10010958:	49003b26 	beq	r9,r4,10010a48 <__subdf3+0x7b4>
1001095c:	0085c83a 	sub	r2,zero,r2
10010960:	18c02034 	orhi	r3,r3,128
10010964:	01000e04 	movi	r4,56
10010968:	20806e16 	blt	r4,r2,10010b24 <__subdf3+0x890>
1001096c:	010007c4 	movi	r4,31
10010970:	20807716 	blt	r4,r2,10010b50 <__subdf3+0x8bc>
10010974:	01000804 	movi	r4,32
10010978:	2089c83a 	sub	r4,r4,r2
1001097c:	1914983a 	sll	r10,r3,r4
10010980:	8890d83a 	srl	r8,r17,r2
10010984:	8908983a 	sll	r4,r17,r4
10010988:	1884d83a 	srl	r2,r3,r2
1001098c:	5222b03a 	or	r17,r10,r8
10010990:	2006c03a 	cmpne	r3,r4,zero
10010994:	88e2b03a 	or	r17,r17,r3
10010998:	89a3883a 	add	r17,r17,r6
1001099c:	1145883a 	add	r2,r2,r5
100109a0:	898d803a 	cmpltu	r6,r17,r6
100109a4:	3087883a 	add	r3,r6,r2
100109a8:	4821883a 	mov	r16,r9
100109ac:	003ed906 	br	10010514 <__alt_data_end+0xf8010514>
100109b0:	2984b03a 	or	r2,r5,r6
100109b4:	10004226 	beq	r2,zero,10010ac0 <__subdf3+0x82c>
100109b8:	1808d0fa 	srli	r4,r3,3
100109bc:	8822d0fa 	srli	r17,r17,3
100109c0:	1806977a 	slli	r3,r3,29
100109c4:	2080022c 	andhi	r2,r4,8
100109c8:	1c62b03a 	or	r17,r3,r17
100109cc:	10000826 	beq	r2,zero,100109f0 <__subdf3+0x75c>
100109d0:	2812d0fa 	srli	r9,r5,3
100109d4:	4880022c 	andhi	r2,r9,8
100109d8:	1000051e 	bne	r2,zero,100109f0 <__subdf3+0x75c>
100109dc:	300cd0fa 	srli	r6,r6,3
100109e0:	2804977a 	slli	r2,r5,29
100109e4:	4809883a 	mov	r4,r9
100109e8:	3825883a 	mov	r18,r7
100109ec:	11a2b03a 	or	r17,r2,r6
100109f0:	8806d77a 	srli	r3,r17,29
100109f4:	200890fa 	slli	r4,r4,3
100109f8:	882290fa 	slli	r17,r17,3
100109fc:	0401ffc4 	movi	r16,2047
10010a00:	1906b03a 	or	r3,r3,r4
10010a04:	003e4406 	br	10010318 <__alt_data_end+0xf8010318>
10010a08:	2984b03a 	or	r2,r5,r6
10010a0c:	103e4226 	beq	r2,zero,10010318 <__alt_data_end+0xf8010318>
10010a10:	8989c83a 	sub	r4,r17,r6
10010a14:	8911803a 	cmpltu	r8,r17,r4
10010a18:	1945c83a 	sub	r2,r3,r5
10010a1c:	1205c83a 	sub	r2,r2,r8
10010a20:	1200202c 	andhi	r8,r2,128
10010a24:	403e9a26 	beq	r8,zero,10010490 <__alt_data_end+0xf8010490>
10010a28:	3463c83a 	sub	r17,r6,r17
10010a2c:	28c5c83a 	sub	r2,r5,r3
10010a30:	344d803a 	cmpltu	r6,r6,r17
10010a34:	1187c83a 	sub	r3,r2,r6
10010a38:	3825883a 	mov	r18,r7
10010a3c:	003e3606 	br	10010318 <__alt_data_end+0xf8010318>
10010a40:	0101ffc4 	movi	r4,2047
10010a44:	493fc71e 	bne	r9,r4,10010964 <__alt_data_end+0xf8010964>
10010a48:	2807883a 	mov	r3,r5
10010a4c:	3023883a 	mov	r17,r6
10010a50:	4821883a 	mov	r16,r9
10010a54:	003e3006 	br	10010318 <__alt_data_end+0xf8010318>
10010a58:	10003626 	beq	r2,zero,10010b34 <__subdf3+0x8a0>
10010a5c:	2984b03a 	or	r2,r5,r6
10010a60:	10001726 	beq	r2,zero,10010ac0 <__subdf3+0x82c>
10010a64:	1808d0fa 	srli	r4,r3,3
10010a68:	8822d0fa 	srli	r17,r17,3
10010a6c:	1806977a 	slli	r3,r3,29
10010a70:	2080022c 	andhi	r2,r4,8
10010a74:	1c62b03a 	or	r17,r3,r17
10010a78:	10000726 	beq	r2,zero,10010a98 <__subdf3+0x804>
10010a7c:	2812d0fa 	srli	r9,r5,3
10010a80:	4880022c 	andhi	r2,r9,8
10010a84:	1000041e 	bne	r2,zero,10010a98 <__subdf3+0x804>
10010a88:	300cd0fa 	srli	r6,r6,3
10010a8c:	2804977a 	slli	r2,r5,29
10010a90:	4809883a 	mov	r4,r9
10010a94:	11a2b03a 	or	r17,r2,r6
10010a98:	8806d77a 	srli	r3,r17,29
10010a9c:	200890fa 	slli	r4,r4,3
10010aa0:	882290fa 	slli	r17,r17,3
10010aa4:	3825883a 	mov	r18,r7
10010aa8:	1906b03a 	or	r3,r3,r4
10010aac:	0401ffc4 	movi	r16,2047
10010ab0:	003e1906 	br	10010318 <__alt_data_end+0xf8010318>
10010ab4:	000b883a 	mov	r5,zero
10010ab8:	0005883a 	mov	r2,zero
10010abc:	003e2e06 	br	10010378 <__alt_data_end+0xf8010378>
10010ac0:	0401ffc4 	movi	r16,2047
10010ac4:	003e1406 	br	10010318 <__alt_data_end+0xf8010318>
10010ac8:	0005883a 	mov	r2,zero
10010acc:	003f7506 	br	100108a4 <__alt_data_end+0xf80108a4>
10010ad0:	0005883a 	mov	r2,zero
10010ad4:	0009883a 	mov	r4,zero
10010ad8:	003e7806 	br	100104bc <__alt_data_end+0xf80104bc>
10010adc:	123ff804 	addi	r8,r2,-32
10010ae0:	01000804 	movi	r4,32
10010ae4:	1a10d83a 	srl	r8,r3,r8
10010ae8:	11002526 	beq	r2,r4,10010b80 <__subdf3+0x8ec>
10010aec:	01001004 	movi	r4,64
10010af0:	2085c83a 	sub	r2,r4,r2
10010af4:	1884983a 	sll	r2,r3,r2
10010af8:	1444b03a 	or	r2,r2,r17
10010afc:	1004c03a 	cmpne	r2,r2,zero
10010b00:	40a2b03a 	or	r17,r8,r2
10010b04:	0005883a 	mov	r2,zero
10010b08:	003f1606 	br	10010764 <__alt_data_end+0xf8010764>
10010b0c:	02000434 	movhi	r8,16
10010b10:	0009883a 	mov	r4,zero
10010b14:	423fffc4 	addi	r8,r8,-1
10010b18:	00bfffc4 	movi	r2,-1
10010b1c:	0401ffc4 	movi	r16,2047
10010b20:	003e6606 	br	100104bc <__alt_data_end+0xf80104bc>
10010b24:	1c62b03a 	or	r17,r3,r17
10010b28:	8822c03a 	cmpne	r17,r17,zero
10010b2c:	0005883a 	mov	r2,zero
10010b30:	003f9906 	br	10010998 <__alt_data_end+0xf8010998>
10010b34:	2807883a 	mov	r3,r5
10010b38:	3023883a 	mov	r17,r6
10010b3c:	0401ffc4 	movi	r16,2047
10010b40:	003df506 	br	10010318 <__alt_data_end+0xf8010318>
10010b44:	2807883a 	mov	r3,r5
10010b48:	3023883a 	mov	r17,r6
10010b4c:	003df206 	br	10010318 <__alt_data_end+0xf8010318>
10010b50:	123ff804 	addi	r8,r2,-32
10010b54:	01000804 	movi	r4,32
10010b58:	1a10d83a 	srl	r8,r3,r8
10010b5c:	11000a26 	beq	r2,r4,10010b88 <__subdf3+0x8f4>
10010b60:	01001004 	movi	r4,64
10010b64:	2085c83a 	sub	r2,r4,r2
10010b68:	1884983a 	sll	r2,r3,r2
10010b6c:	1444b03a 	or	r2,r2,r17
10010b70:	1004c03a 	cmpne	r2,r2,zero
10010b74:	40a2b03a 	or	r17,r8,r2
10010b78:	0005883a 	mov	r2,zero
10010b7c:	003f8606 	br	10010998 <__alt_data_end+0xf8010998>
10010b80:	0005883a 	mov	r2,zero
10010b84:	003fdc06 	br	10010af8 <__alt_data_end+0xf8010af8>
10010b88:	0005883a 	mov	r2,zero
10010b8c:	003ff706 	br	10010b6c <__alt_data_end+0xf8010b6c>

10010b90 <__fixdfsi>:
10010b90:	280cd53a 	srli	r6,r5,20
10010b94:	00c00434 	movhi	r3,16
10010b98:	18ffffc4 	addi	r3,r3,-1
10010b9c:	3181ffcc 	andi	r6,r6,2047
10010ba0:	01c0ff84 	movi	r7,1022
10010ba4:	28c6703a 	and	r3,r5,r3
10010ba8:	280ad7fa 	srli	r5,r5,31
10010bac:	3980120e 	bge	r7,r6,10010bf8 <__fixdfsi+0x68>
10010bb0:	00810744 	movi	r2,1053
10010bb4:	11800c16 	blt	r2,r6,10010be8 <__fixdfsi+0x58>
10010bb8:	00810cc4 	movi	r2,1075
10010bbc:	1185c83a 	sub	r2,r2,r6
10010bc0:	01c007c4 	movi	r7,31
10010bc4:	18c00434 	orhi	r3,r3,16
10010bc8:	38800d16 	blt	r7,r2,10010c00 <__fixdfsi+0x70>
10010bcc:	31befb44 	addi	r6,r6,-1043
10010bd0:	2084d83a 	srl	r2,r4,r2
10010bd4:	1986983a 	sll	r3,r3,r6
10010bd8:	1884b03a 	or	r2,r3,r2
10010bdc:	28000726 	beq	r5,zero,10010bfc <__fixdfsi+0x6c>
10010be0:	0085c83a 	sub	r2,zero,r2
10010be4:	f800283a 	ret
10010be8:	00a00034 	movhi	r2,32768
10010bec:	10bfffc4 	addi	r2,r2,-1
10010bf0:	2885883a 	add	r2,r5,r2
10010bf4:	f800283a 	ret
10010bf8:	0005883a 	mov	r2,zero
10010bfc:	f800283a 	ret
10010c00:	008104c4 	movi	r2,1043
10010c04:	1185c83a 	sub	r2,r2,r6
10010c08:	1884d83a 	srl	r2,r3,r2
10010c0c:	003ff306 	br	10010bdc <__alt_data_end+0xf8010bdc>

10010c10 <__floatsidf>:
10010c10:	defffd04 	addi	sp,sp,-12
10010c14:	dfc00215 	stw	ra,8(sp)
10010c18:	dc400115 	stw	r17,4(sp)
10010c1c:	dc000015 	stw	r16,0(sp)
10010c20:	20002b26 	beq	r4,zero,10010cd0 <__floatsidf+0xc0>
10010c24:	2023883a 	mov	r17,r4
10010c28:	2020d7fa 	srli	r16,r4,31
10010c2c:	20002d16 	blt	r4,zero,10010ce4 <__floatsidf+0xd4>
10010c30:	8809883a 	mov	r4,r17
10010c34:	0010d940 	call	10010d94 <__clzsi2>
10010c38:	01410784 	movi	r5,1054
10010c3c:	288bc83a 	sub	r5,r5,r2
10010c40:	01010cc4 	movi	r4,1075
10010c44:	2149c83a 	sub	r4,r4,r5
10010c48:	00c007c4 	movi	r3,31
10010c4c:	1900160e 	bge	r3,r4,10010ca8 <__floatsidf+0x98>
10010c50:	00c104c4 	movi	r3,1043
10010c54:	1947c83a 	sub	r3,r3,r5
10010c58:	88c6983a 	sll	r3,r17,r3
10010c5c:	00800434 	movhi	r2,16
10010c60:	10bfffc4 	addi	r2,r2,-1
10010c64:	1886703a 	and	r3,r3,r2
10010c68:	2941ffcc 	andi	r5,r5,2047
10010c6c:	800d883a 	mov	r6,r16
10010c70:	0005883a 	mov	r2,zero
10010c74:	280a953a 	slli	r5,r5,20
10010c78:	31803fcc 	andi	r6,r6,255
10010c7c:	01000434 	movhi	r4,16
10010c80:	300c97fa 	slli	r6,r6,31
10010c84:	213fffc4 	addi	r4,r4,-1
10010c88:	1906703a 	and	r3,r3,r4
10010c8c:	1946b03a 	or	r3,r3,r5
10010c90:	1986b03a 	or	r3,r3,r6
10010c94:	dfc00217 	ldw	ra,8(sp)
10010c98:	dc400117 	ldw	r17,4(sp)
10010c9c:	dc000017 	ldw	r16,0(sp)
10010ca0:	dec00304 	addi	sp,sp,12
10010ca4:	f800283a 	ret
10010ca8:	00c002c4 	movi	r3,11
10010cac:	1887c83a 	sub	r3,r3,r2
10010cb0:	88c6d83a 	srl	r3,r17,r3
10010cb4:	8904983a 	sll	r2,r17,r4
10010cb8:	01000434 	movhi	r4,16
10010cbc:	213fffc4 	addi	r4,r4,-1
10010cc0:	2941ffcc 	andi	r5,r5,2047
10010cc4:	1906703a 	and	r3,r3,r4
10010cc8:	800d883a 	mov	r6,r16
10010ccc:	003fe906 	br	10010c74 <__alt_data_end+0xf8010c74>
10010cd0:	000d883a 	mov	r6,zero
10010cd4:	000b883a 	mov	r5,zero
10010cd8:	0007883a 	mov	r3,zero
10010cdc:	0005883a 	mov	r2,zero
10010ce0:	003fe406 	br	10010c74 <__alt_data_end+0xf8010c74>
10010ce4:	0123c83a 	sub	r17,zero,r4
10010ce8:	003fd106 	br	10010c30 <__alt_data_end+0xf8010c30>

10010cec <__floatunsidf>:
10010cec:	defffe04 	addi	sp,sp,-8
10010cf0:	dc000015 	stw	r16,0(sp)
10010cf4:	dfc00115 	stw	ra,4(sp)
10010cf8:	2021883a 	mov	r16,r4
10010cfc:	20002226 	beq	r4,zero,10010d88 <__floatunsidf+0x9c>
10010d00:	0010d940 	call	10010d94 <__clzsi2>
10010d04:	01010784 	movi	r4,1054
10010d08:	2089c83a 	sub	r4,r4,r2
10010d0c:	01810cc4 	movi	r6,1075
10010d10:	310dc83a 	sub	r6,r6,r4
10010d14:	00c007c4 	movi	r3,31
10010d18:	1980120e 	bge	r3,r6,10010d64 <__floatunsidf+0x78>
10010d1c:	00c104c4 	movi	r3,1043
10010d20:	1907c83a 	sub	r3,r3,r4
10010d24:	80ca983a 	sll	r5,r16,r3
10010d28:	00800434 	movhi	r2,16
10010d2c:	10bfffc4 	addi	r2,r2,-1
10010d30:	2101ffcc 	andi	r4,r4,2047
10010d34:	0021883a 	mov	r16,zero
10010d38:	288a703a 	and	r5,r5,r2
10010d3c:	2008953a 	slli	r4,r4,20
10010d40:	00c00434 	movhi	r3,16
10010d44:	18ffffc4 	addi	r3,r3,-1
10010d48:	28c6703a 	and	r3,r5,r3
10010d4c:	8005883a 	mov	r2,r16
10010d50:	1906b03a 	or	r3,r3,r4
10010d54:	dfc00117 	ldw	ra,4(sp)
10010d58:	dc000017 	ldw	r16,0(sp)
10010d5c:	dec00204 	addi	sp,sp,8
10010d60:	f800283a 	ret
10010d64:	00c002c4 	movi	r3,11
10010d68:	188bc83a 	sub	r5,r3,r2
10010d6c:	814ad83a 	srl	r5,r16,r5
10010d70:	00c00434 	movhi	r3,16
10010d74:	18ffffc4 	addi	r3,r3,-1
10010d78:	81a0983a 	sll	r16,r16,r6
10010d7c:	2101ffcc 	andi	r4,r4,2047
10010d80:	28ca703a 	and	r5,r5,r3
10010d84:	003fed06 	br	10010d3c <__alt_data_end+0xf8010d3c>
10010d88:	0009883a 	mov	r4,zero
10010d8c:	000b883a 	mov	r5,zero
10010d90:	003fea06 	br	10010d3c <__alt_data_end+0xf8010d3c>

10010d94 <__clzsi2>:
10010d94:	00bfffd4 	movui	r2,65535
10010d98:	11000536 	bltu	r2,r4,10010db0 <__clzsi2+0x1c>
10010d9c:	00803fc4 	movi	r2,255
10010da0:	11000f36 	bltu	r2,r4,10010de0 <__clzsi2+0x4c>
10010da4:	00800804 	movi	r2,32
10010da8:	0007883a 	mov	r3,zero
10010dac:	00000506 	br	10010dc4 <__clzsi2+0x30>
10010db0:	00804034 	movhi	r2,256
10010db4:	10bfffc4 	addi	r2,r2,-1
10010db8:	11000c2e 	bgeu	r2,r4,10010dec <__clzsi2+0x58>
10010dbc:	00800204 	movi	r2,8
10010dc0:	00c00604 	movi	r3,24
10010dc4:	20c8d83a 	srl	r4,r4,r3
10010dc8:	00c40074 	movhi	r3,4097
10010dcc:	18cfcf04 	addi	r3,r3,16188
10010dd0:	1909883a 	add	r4,r3,r4
10010dd4:	20c00003 	ldbu	r3,0(r4)
10010dd8:	10c5c83a 	sub	r2,r2,r3
10010ddc:	f800283a 	ret
10010de0:	00800604 	movi	r2,24
10010de4:	00c00204 	movi	r3,8
10010de8:	003ff606 	br	10010dc4 <__alt_data_end+0xf8010dc4>
10010dec:	00800404 	movi	r2,16
10010df0:	1007883a 	mov	r3,r2
10010df4:	003ff306 	br	10010dc4 <__alt_data_end+0xf8010dc4>

10010df8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010df8:	defffe04 	addi	sp,sp,-8
10010dfc:	dfc00115 	stw	ra,4(sp)
10010e00:	df000015 	stw	fp,0(sp)
10010e04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010e08:	d0a00b17 	ldw	r2,-32724(gp)
10010e0c:	10000326 	beq	r2,zero,10010e1c <alt_get_errno+0x24>
10010e10:	d0a00b17 	ldw	r2,-32724(gp)
10010e14:	103ee83a 	callr	r2
10010e18:	00000106 	br	10010e20 <alt_get_errno+0x28>
10010e1c:	d0a6d404 	addi	r2,gp,-25776
}
10010e20:	e037883a 	mov	sp,fp
10010e24:	dfc00117 	ldw	ra,4(sp)
10010e28:	df000017 	ldw	fp,0(sp)
10010e2c:	dec00204 	addi	sp,sp,8
10010e30:	f800283a 	ret

10010e34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10010e34:	defffb04 	addi	sp,sp,-20
10010e38:	dfc00415 	stw	ra,16(sp)
10010e3c:	df000315 	stw	fp,12(sp)
10010e40:	df000304 	addi	fp,sp,12
10010e44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010e48:	e0bfff17 	ldw	r2,-4(fp)
10010e4c:	10000816 	blt	r2,zero,10010e70 <close+0x3c>
10010e50:	01400304 	movi	r5,12
10010e54:	e13fff17 	ldw	r4,-4(fp)
10010e58:	000e52c0 	call	1000e52c <__mulsi3>
10010e5c:	1007883a 	mov	r3,r2
10010e60:	00840074 	movhi	r2,4097
10010e64:	10924f04 	addi	r2,r2,18748
10010e68:	1885883a 	add	r2,r3,r2
10010e6c:	00000106 	br	10010e74 <close+0x40>
10010e70:	0005883a 	mov	r2,zero
10010e74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10010e78:	e0bffd17 	ldw	r2,-12(fp)
10010e7c:	10001926 	beq	r2,zero,10010ee4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10010e80:	e0bffd17 	ldw	r2,-12(fp)
10010e84:	10800017 	ldw	r2,0(r2)
10010e88:	10800417 	ldw	r2,16(r2)
10010e8c:	10000626 	beq	r2,zero,10010ea8 <close+0x74>
10010e90:	e0bffd17 	ldw	r2,-12(fp)
10010e94:	10800017 	ldw	r2,0(r2)
10010e98:	10800417 	ldw	r2,16(r2)
10010e9c:	e13ffd17 	ldw	r4,-12(fp)
10010ea0:	103ee83a 	callr	r2
10010ea4:	00000106 	br	10010eac <close+0x78>
10010ea8:	0005883a 	mov	r2,zero
10010eac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10010eb0:	e13fff17 	ldw	r4,-4(fp)
10010eb4:	001151c0 	call	1001151c <alt_release_fd>
    if (rval < 0)
10010eb8:	e0bffe17 	ldw	r2,-8(fp)
10010ebc:	1000070e 	bge	r2,zero,10010edc <close+0xa8>
    {
      ALT_ERRNO = -rval;
10010ec0:	0010df80 	call	10010df8 <alt_get_errno>
10010ec4:	1007883a 	mov	r3,r2
10010ec8:	e0bffe17 	ldw	r2,-8(fp)
10010ecc:	0085c83a 	sub	r2,zero,r2
10010ed0:	18800015 	stw	r2,0(r3)
      return -1;
10010ed4:	00bfffc4 	movi	r2,-1
10010ed8:	00000706 	br	10010ef8 <close+0xc4>
    }
    return 0;
10010edc:	0005883a 	mov	r2,zero
10010ee0:	00000506 	br	10010ef8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010ee4:	0010df80 	call	10010df8 <alt_get_errno>
10010ee8:	1007883a 	mov	r3,r2
10010eec:	00801444 	movi	r2,81
10010ef0:	18800015 	stw	r2,0(r3)
    return -1;
10010ef4:	00bfffc4 	movi	r2,-1
  }
}
10010ef8:	e037883a 	mov	sp,fp
10010efc:	dfc00117 	ldw	ra,4(sp)
10010f00:	df000017 	ldw	fp,0(sp)
10010f04:	dec00204 	addi	sp,sp,8
10010f08:	f800283a 	ret

10010f0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10010f0c:	defffc04 	addi	sp,sp,-16
10010f10:	df000315 	stw	fp,12(sp)
10010f14:	df000304 	addi	fp,sp,12
10010f18:	e13ffd15 	stw	r4,-12(fp)
10010f1c:	e17ffe15 	stw	r5,-8(fp)
10010f20:	e1bfff15 	stw	r6,-4(fp)
  return len;
10010f24:	e0bfff17 	ldw	r2,-4(fp)
}
10010f28:	e037883a 	mov	sp,fp
10010f2c:	df000017 	ldw	fp,0(sp)
10010f30:	dec00104 	addi	sp,sp,4
10010f34:	f800283a 	ret

10010f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010f38:	defffe04 	addi	sp,sp,-8
10010f3c:	dfc00115 	stw	ra,4(sp)
10010f40:	df000015 	stw	fp,0(sp)
10010f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010f48:	d0a00b17 	ldw	r2,-32724(gp)
10010f4c:	10000326 	beq	r2,zero,10010f5c <alt_get_errno+0x24>
10010f50:	d0a00b17 	ldw	r2,-32724(gp)
10010f54:	103ee83a 	callr	r2
10010f58:	00000106 	br	10010f60 <alt_get_errno+0x28>
10010f5c:	d0a6d404 	addi	r2,gp,-25776
}
10010f60:	e037883a 	mov	sp,fp
10010f64:	dfc00117 	ldw	ra,4(sp)
10010f68:	df000017 	ldw	fp,0(sp)
10010f6c:	dec00204 	addi	sp,sp,8
10010f70:	f800283a 	ret

10010f74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10010f74:	defffb04 	addi	sp,sp,-20
10010f78:	dfc00415 	stw	ra,16(sp)
10010f7c:	df000315 	stw	fp,12(sp)
10010f80:	df000304 	addi	fp,sp,12
10010f84:	e13ffe15 	stw	r4,-8(fp)
10010f88:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010f8c:	e0bffe17 	ldw	r2,-8(fp)
10010f90:	10000816 	blt	r2,zero,10010fb4 <fstat+0x40>
10010f94:	01400304 	movi	r5,12
10010f98:	e13ffe17 	ldw	r4,-8(fp)
10010f9c:	000e52c0 	call	1000e52c <__mulsi3>
10010fa0:	1007883a 	mov	r3,r2
10010fa4:	00840074 	movhi	r2,4097
10010fa8:	10924f04 	addi	r2,r2,18748
10010fac:	1885883a 	add	r2,r3,r2
10010fb0:	00000106 	br	10010fb8 <fstat+0x44>
10010fb4:	0005883a 	mov	r2,zero
10010fb8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10010fbc:	e0bffd17 	ldw	r2,-12(fp)
10010fc0:	10001026 	beq	r2,zero,10011004 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10010fc4:	e0bffd17 	ldw	r2,-12(fp)
10010fc8:	10800017 	ldw	r2,0(r2)
10010fcc:	10800817 	ldw	r2,32(r2)
10010fd0:	10000726 	beq	r2,zero,10010ff0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10010fd4:	e0bffd17 	ldw	r2,-12(fp)
10010fd8:	10800017 	ldw	r2,0(r2)
10010fdc:	10800817 	ldw	r2,32(r2)
10010fe0:	e17fff17 	ldw	r5,-4(fp)
10010fe4:	e13ffd17 	ldw	r4,-12(fp)
10010fe8:	103ee83a 	callr	r2
10010fec:	00000a06 	br	10011018 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10010ff0:	e0bfff17 	ldw	r2,-4(fp)
10010ff4:	00c80004 	movi	r3,8192
10010ff8:	10c00115 	stw	r3,4(r2)
      return 0;
10010ffc:	0005883a 	mov	r2,zero
10011000:	00000506 	br	10011018 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011004:	0010f380 	call	10010f38 <alt_get_errno>
10011008:	1007883a 	mov	r3,r2
1001100c:	00801444 	movi	r2,81
10011010:	18800015 	stw	r2,0(r3)
    return -1;
10011014:	00bfffc4 	movi	r2,-1
  }
}
10011018:	e037883a 	mov	sp,fp
1001101c:	dfc00117 	ldw	ra,4(sp)
10011020:	df000017 	ldw	fp,0(sp)
10011024:	dec00204 	addi	sp,sp,8
10011028:	f800283a 	ret

1001102c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001102c:	defffe04 	addi	sp,sp,-8
10011030:	dfc00115 	stw	ra,4(sp)
10011034:	df000015 	stw	fp,0(sp)
10011038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001103c:	d0a00b17 	ldw	r2,-32724(gp)
10011040:	10000326 	beq	r2,zero,10011050 <alt_get_errno+0x24>
10011044:	d0a00b17 	ldw	r2,-32724(gp)
10011048:	103ee83a 	callr	r2
1001104c:	00000106 	br	10011054 <alt_get_errno+0x28>
10011050:	d0a6d404 	addi	r2,gp,-25776
}
10011054:	e037883a 	mov	sp,fp
10011058:	dfc00117 	ldw	ra,4(sp)
1001105c:	df000017 	ldw	fp,0(sp)
10011060:	dec00204 	addi	sp,sp,8
10011064:	f800283a 	ret

10011068 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011068:	deffed04 	addi	sp,sp,-76
1001106c:	dfc01215 	stw	ra,72(sp)
10011070:	df001115 	stw	fp,68(sp)
10011074:	df001104 	addi	fp,sp,68
10011078:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001107c:	e0bfff17 	ldw	r2,-4(fp)
10011080:	10000816 	blt	r2,zero,100110a4 <isatty+0x3c>
10011084:	01400304 	movi	r5,12
10011088:	e13fff17 	ldw	r4,-4(fp)
1001108c:	000e52c0 	call	1000e52c <__mulsi3>
10011090:	1007883a 	mov	r3,r2
10011094:	00840074 	movhi	r2,4097
10011098:	10924f04 	addi	r2,r2,18748
1001109c:	1885883a 	add	r2,r3,r2
100110a0:	00000106 	br	100110a8 <isatty+0x40>
100110a4:	0005883a 	mov	r2,zero
100110a8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100110ac:	e0bfef17 	ldw	r2,-68(fp)
100110b0:	10000e26 	beq	r2,zero,100110ec <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100110b4:	e0bfef17 	ldw	r2,-68(fp)
100110b8:	10800017 	ldw	r2,0(r2)
100110bc:	10800817 	ldw	r2,32(r2)
100110c0:	1000021e 	bne	r2,zero,100110cc <isatty+0x64>
    {
      return 1;
100110c4:	00800044 	movi	r2,1
100110c8:	00000d06 	br	10011100 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100110cc:	e0bff004 	addi	r2,fp,-64
100110d0:	100b883a 	mov	r5,r2
100110d4:	e13fff17 	ldw	r4,-4(fp)
100110d8:	0010f740 	call	10010f74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100110dc:	e0bff117 	ldw	r2,-60(fp)
100110e0:	10880020 	cmpeqi	r2,r2,8192
100110e4:	10803fcc 	andi	r2,r2,255
100110e8:	00000506 	br	10011100 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100110ec:	001102c0 	call	1001102c <alt_get_errno>
100110f0:	1007883a 	mov	r3,r2
100110f4:	00801444 	movi	r2,81
100110f8:	18800015 	stw	r2,0(r3)
    return 0;
100110fc:	0005883a 	mov	r2,zero
  }
}
10011100:	e037883a 	mov	sp,fp
10011104:	dfc00117 	ldw	ra,4(sp)
10011108:	df000017 	ldw	fp,0(sp)
1001110c:	dec00204 	addi	sp,sp,8
10011110:	f800283a 	ret

10011114 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10011114:	defffc04 	addi	sp,sp,-16
10011118:	df000315 	stw	fp,12(sp)
1001111c:	df000304 	addi	fp,sp,12
10011120:	e13ffd15 	stw	r4,-12(fp)
10011124:	e17ffe15 	stw	r5,-8(fp)
10011128:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1001112c:	e0fffe17 	ldw	r3,-8(fp)
10011130:	e0bffd17 	ldw	r2,-12(fp)
10011134:	18800c26 	beq	r3,r2,10011168 <alt_load_section+0x54>
  {
    while( to != end )
10011138:	00000806 	br	1001115c <alt_load_section+0x48>
    {
      *to++ = *from++;
1001113c:	e0bffe17 	ldw	r2,-8(fp)
10011140:	10c00104 	addi	r3,r2,4
10011144:	e0fffe15 	stw	r3,-8(fp)
10011148:	e0fffd17 	ldw	r3,-12(fp)
1001114c:	19000104 	addi	r4,r3,4
10011150:	e13ffd15 	stw	r4,-12(fp)
10011154:	18c00017 	ldw	r3,0(r3)
10011158:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1001115c:	e0fffe17 	ldw	r3,-8(fp)
10011160:	e0bfff17 	ldw	r2,-4(fp)
10011164:	18bff51e 	bne	r3,r2,1001113c <__alt_data_end+0xf801113c>
    {
      *to++ = *from++;
    }
  }
}
10011168:	0001883a 	nop
1001116c:	e037883a 	mov	sp,fp
10011170:	df000017 	ldw	fp,0(sp)
10011174:	dec00104 	addi	sp,sp,4
10011178:	f800283a 	ret

1001117c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1001117c:	defffe04 	addi	sp,sp,-8
10011180:	dfc00115 	stw	ra,4(sp)
10011184:	df000015 	stw	fp,0(sp)
10011188:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1001118c:	01840074 	movhi	r6,4097
10011190:	3196d704 	addi	r6,r6,23388
10011194:	01440074 	movhi	r5,4097
10011198:	29501c04 	addi	r5,r5,16496
1001119c:	01040074 	movhi	r4,4097
100111a0:	2116d704 	addi	r4,r4,23388
100111a4:	00111140 	call	10011114 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100111a8:	01840034 	movhi	r6,4096
100111ac:	31808c04 	addi	r6,r6,560
100111b0:	01440034 	movhi	r5,4096
100111b4:	29400804 	addi	r5,r5,32
100111b8:	01040034 	movhi	r4,4096
100111bc:	21000804 	addi	r4,r4,32
100111c0:	00111140 	call	10011114 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100111c4:	01840074 	movhi	r6,4097
100111c8:	31901c04 	addi	r6,r6,16496
100111cc:	01440074 	movhi	r5,4097
100111d0:	294d8604 	addi	r5,r5,13848
100111d4:	01040074 	movhi	r4,4097
100111d8:	210d8604 	addi	r4,r4,13848
100111dc:	00111140 	call	10011114 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100111e0:	00125600 	call	10012560 <alt_dcache_flush_all>
  alt_icache_flush_all();
100111e4:	00127200 	call	10012720 <alt_icache_flush_all>
}
100111e8:	0001883a 	nop
100111ec:	e037883a 	mov	sp,fp
100111f0:	dfc00117 	ldw	ra,4(sp)
100111f4:	df000017 	ldw	fp,0(sp)
100111f8:	dec00204 	addi	sp,sp,8
100111fc:	f800283a 	ret

10011200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011200:	defffe04 	addi	sp,sp,-8
10011204:	dfc00115 	stw	ra,4(sp)
10011208:	df000015 	stw	fp,0(sp)
1001120c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011210:	d0a00b17 	ldw	r2,-32724(gp)
10011214:	10000326 	beq	r2,zero,10011224 <alt_get_errno+0x24>
10011218:	d0a00b17 	ldw	r2,-32724(gp)
1001121c:	103ee83a 	callr	r2
10011220:	00000106 	br	10011228 <alt_get_errno+0x28>
10011224:	d0a6d404 	addi	r2,gp,-25776
}
10011228:	e037883a 	mov	sp,fp
1001122c:	dfc00117 	ldw	ra,4(sp)
10011230:	df000017 	ldw	fp,0(sp)
10011234:	dec00204 	addi	sp,sp,8
10011238:	f800283a 	ret

1001123c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1001123c:	defff904 	addi	sp,sp,-28
10011240:	dfc00615 	stw	ra,24(sp)
10011244:	df000515 	stw	fp,20(sp)
10011248:	df000504 	addi	fp,sp,20
1001124c:	e13ffd15 	stw	r4,-12(fp)
10011250:	e17ffe15 	stw	r5,-8(fp)
10011254:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10011258:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001125c:	e0bffd17 	ldw	r2,-12(fp)
10011260:	10000816 	blt	r2,zero,10011284 <lseek+0x48>
10011264:	01400304 	movi	r5,12
10011268:	e13ffd17 	ldw	r4,-12(fp)
1001126c:	000e52c0 	call	1000e52c <__mulsi3>
10011270:	1007883a 	mov	r3,r2
10011274:	00840074 	movhi	r2,4097
10011278:	10924f04 	addi	r2,r2,18748
1001127c:	1885883a 	add	r2,r3,r2
10011280:	00000106 	br	10011288 <lseek+0x4c>
10011284:	0005883a 	mov	r2,zero
10011288:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1001128c:	e0bffc17 	ldw	r2,-16(fp)
10011290:	10001026 	beq	r2,zero,100112d4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10011294:	e0bffc17 	ldw	r2,-16(fp)
10011298:	10800017 	ldw	r2,0(r2)
1001129c:	10800717 	ldw	r2,28(r2)
100112a0:	10000926 	beq	r2,zero,100112c8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100112a4:	e0bffc17 	ldw	r2,-16(fp)
100112a8:	10800017 	ldw	r2,0(r2)
100112ac:	10800717 	ldw	r2,28(r2)
100112b0:	e1bfff17 	ldw	r6,-4(fp)
100112b4:	e17ffe17 	ldw	r5,-8(fp)
100112b8:	e13ffc17 	ldw	r4,-16(fp)
100112bc:	103ee83a 	callr	r2
100112c0:	e0bffb15 	stw	r2,-20(fp)
100112c4:	00000506 	br	100112dc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100112c8:	00bfde84 	movi	r2,-134
100112cc:	e0bffb15 	stw	r2,-20(fp)
100112d0:	00000206 	br	100112dc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100112d4:	00bfebc4 	movi	r2,-81
100112d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100112dc:	e0bffb17 	ldw	r2,-20(fp)
100112e0:	1000070e 	bge	r2,zero,10011300 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100112e4:	00112000 	call	10011200 <alt_get_errno>
100112e8:	1007883a 	mov	r3,r2
100112ec:	e0bffb17 	ldw	r2,-20(fp)
100112f0:	0085c83a 	sub	r2,zero,r2
100112f4:	18800015 	stw	r2,0(r3)
    rc = -1;
100112f8:	00bfffc4 	movi	r2,-1
100112fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10011300:	e0bffb17 	ldw	r2,-20(fp)
}
10011304:	e037883a 	mov	sp,fp
10011308:	dfc00117 	ldw	ra,4(sp)
1001130c:	df000017 	ldw	fp,0(sp)
10011310:	dec00204 	addi	sp,sp,8
10011314:	f800283a 	ret

10011318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011318:	defffd04 	addi	sp,sp,-12
1001131c:	dfc00215 	stw	ra,8(sp)
10011320:	df000115 	stw	fp,4(sp)
10011324:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011328:	0009883a 	mov	r4,zero
1001132c:	00117f00 	call	100117f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011330:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10011334:	00118280 	call	10011828 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011338:	01840074 	movhi	r6,4097
1001133c:	31901204 	addi	r6,r6,16456
10011340:	01440074 	movhi	r5,4097
10011344:	29501204 	addi	r5,r5,16456
10011348:	01040074 	movhi	r4,4097
1001134c:	21101204 	addi	r4,r4,16456
10011350:	0012ac40 	call	10012ac4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10011354:	00126600 	call	10012660 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10011358:	01040074 	movhi	r4,4097
1001135c:	2109b004 	addi	r4,r4,9920
10011360:	00132840 	call	10013284 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10011364:	d0a6d517 	ldw	r2,-25772(gp)
10011368:	d0e6d617 	ldw	r3,-25768(gp)
1001136c:	d126d717 	ldw	r4,-25764(gp)
10011370:	200d883a 	mov	r6,r4
10011374:	180b883a 	mov	r5,r3
10011378:	1009883a 	mov	r4,r2
1001137c:	0002cb40 	call	10002cb4 <main>
10011380:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10011384:	01000044 	movi	r4,1
10011388:	0010e340 	call	10010e34 <close>
  exit (result);
1001138c:	e13fff17 	ldw	r4,-4(fp)
10011390:	00132980 	call	10013298 <exit>

10011394 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10011394:	defffe04 	addi	sp,sp,-8
10011398:	df000115 	stw	fp,4(sp)
1001139c:	df000104 	addi	fp,sp,4
100113a0:	e13fff15 	stw	r4,-4(fp)
}
100113a4:	0001883a 	nop
100113a8:	e037883a 	mov	sp,fp
100113ac:	df000017 	ldw	fp,0(sp)
100113b0:	dec00104 	addi	sp,sp,4
100113b4:	f800283a 	ret

100113b8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100113b8:	defffe04 	addi	sp,sp,-8
100113bc:	df000115 	stw	fp,4(sp)
100113c0:	df000104 	addi	fp,sp,4
100113c4:	e13fff15 	stw	r4,-4(fp)
}
100113c8:	0001883a 	nop
100113cc:	e037883a 	mov	sp,fp
100113d0:	df000017 	ldw	fp,0(sp)
100113d4:	dec00104 	addi	sp,sp,4
100113d8:	f800283a 	ret

100113dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100113dc:	defffe04 	addi	sp,sp,-8
100113e0:	dfc00115 	stw	ra,4(sp)
100113e4:	df000015 	stw	fp,0(sp)
100113e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100113ec:	d0a00b17 	ldw	r2,-32724(gp)
100113f0:	10000326 	beq	r2,zero,10011400 <alt_get_errno+0x24>
100113f4:	d0a00b17 	ldw	r2,-32724(gp)
100113f8:	103ee83a 	callr	r2
100113fc:	00000106 	br	10011404 <alt_get_errno+0x28>
10011400:	d0a6d404 	addi	r2,gp,-25776
}
10011404:	e037883a 	mov	sp,fp
10011408:	dfc00117 	ldw	ra,4(sp)
1001140c:	df000017 	ldw	fp,0(sp)
10011410:	dec00204 	addi	sp,sp,8
10011414:	f800283a 	ret

10011418 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10011418:	defff904 	addi	sp,sp,-28
1001141c:	dfc00615 	stw	ra,24(sp)
10011420:	df000515 	stw	fp,20(sp)
10011424:	df000504 	addi	fp,sp,20
10011428:	e13ffd15 	stw	r4,-12(fp)
1001142c:	e17ffe15 	stw	r5,-8(fp)
10011430:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011434:	e0bffd17 	ldw	r2,-12(fp)
10011438:	10000816 	blt	r2,zero,1001145c <read+0x44>
1001143c:	01400304 	movi	r5,12
10011440:	e13ffd17 	ldw	r4,-12(fp)
10011444:	000e52c0 	call	1000e52c <__mulsi3>
10011448:	1007883a 	mov	r3,r2
1001144c:	00840074 	movhi	r2,4097
10011450:	10924f04 	addi	r2,r2,18748
10011454:	1885883a 	add	r2,r3,r2
10011458:	00000106 	br	10011460 <read+0x48>
1001145c:	0005883a 	mov	r2,zero
10011460:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011464:	e0bffb17 	ldw	r2,-20(fp)
10011468:	10002226 	beq	r2,zero,100114f4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001146c:	e0bffb17 	ldw	r2,-20(fp)
10011470:	10800217 	ldw	r2,8(r2)
10011474:	108000cc 	andi	r2,r2,3
10011478:	10800060 	cmpeqi	r2,r2,1
1001147c:	1000181e 	bne	r2,zero,100114e0 <read+0xc8>
        (fd->dev->read))
10011480:	e0bffb17 	ldw	r2,-20(fp)
10011484:	10800017 	ldw	r2,0(r2)
10011488:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001148c:	10001426 	beq	r2,zero,100114e0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10011490:	e0bffb17 	ldw	r2,-20(fp)
10011494:	10800017 	ldw	r2,0(r2)
10011498:	10800517 	ldw	r2,20(r2)
1001149c:	e0ffff17 	ldw	r3,-4(fp)
100114a0:	180d883a 	mov	r6,r3
100114a4:	e17ffe17 	ldw	r5,-8(fp)
100114a8:	e13ffb17 	ldw	r4,-20(fp)
100114ac:	103ee83a 	callr	r2
100114b0:	e0bffc15 	stw	r2,-16(fp)
100114b4:	e0bffc17 	ldw	r2,-16(fp)
100114b8:	1000070e 	bge	r2,zero,100114d8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100114bc:	00113dc0 	call	100113dc <alt_get_errno>
100114c0:	1007883a 	mov	r3,r2
100114c4:	e0bffc17 	ldw	r2,-16(fp)
100114c8:	0085c83a 	sub	r2,zero,r2
100114cc:	18800015 	stw	r2,0(r3)
          return -1;
100114d0:	00bfffc4 	movi	r2,-1
100114d4:	00000c06 	br	10011508 <read+0xf0>
        }
        return rval;
100114d8:	e0bffc17 	ldw	r2,-16(fp)
100114dc:	00000a06 	br	10011508 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100114e0:	00113dc0 	call	100113dc <alt_get_errno>
100114e4:	1007883a 	mov	r3,r2
100114e8:	00800344 	movi	r2,13
100114ec:	18800015 	stw	r2,0(r3)
100114f0:	00000406 	br	10011504 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100114f4:	00113dc0 	call	100113dc <alt_get_errno>
100114f8:	1007883a 	mov	r3,r2
100114fc:	00801444 	movi	r2,81
10011500:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011504:	00bfffc4 	movi	r2,-1
}
10011508:	e037883a 	mov	sp,fp
1001150c:	dfc00117 	ldw	ra,4(sp)
10011510:	df000017 	ldw	fp,0(sp)
10011514:	dec00204 	addi	sp,sp,8
10011518:	f800283a 	ret

1001151c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001151c:	defffc04 	addi	sp,sp,-16
10011520:	dfc00315 	stw	ra,12(sp)
10011524:	df000215 	stw	fp,8(sp)
10011528:	dc000115 	stw	r16,4(sp)
1001152c:	df000204 	addi	fp,sp,8
10011530:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10011534:	e0bffe17 	ldw	r2,-8(fp)
10011538:	108000d0 	cmplti	r2,r2,3
1001153c:	1000111e 	bne	r2,zero,10011584 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10011540:	04040074 	movhi	r16,4097
10011544:	84124f04 	addi	r16,r16,18748
10011548:	e0bffe17 	ldw	r2,-8(fp)
1001154c:	01400304 	movi	r5,12
10011550:	1009883a 	mov	r4,r2
10011554:	000e52c0 	call	1000e52c <__mulsi3>
10011558:	8085883a 	add	r2,r16,r2
1001155c:	10800204 	addi	r2,r2,8
10011560:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10011564:	04040074 	movhi	r16,4097
10011568:	84124f04 	addi	r16,r16,18748
1001156c:	e0bffe17 	ldw	r2,-8(fp)
10011570:	01400304 	movi	r5,12
10011574:	1009883a 	mov	r4,r2
10011578:	000e52c0 	call	1000e52c <__mulsi3>
1001157c:	8085883a 	add	r2,r16,r2
10011580:	10000015 	stw	zero,0(r2)
  }
}
10011584:	0001883a 	nop
10011588:	e6ffff04 	addi	sp,fp,-4
1001158c:	dfc00217 	ldw	ra,8(sp)
10011590:	df000117 	ldw	fp,4(sp)
10011594:	dc000017 	ldw	r16,0(sp)
10011598:	dec00304 	addi	sp,sp,12
1001159c:	f800283a 	ret

100115a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100115a0:	defff904 	addi	sp,sp,-28
100115a4:	df000615 	stw	fp,24(sp)
100115a8:	df000604 	addi	fp,sp,24
100115ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100115b0:	0005303a 	rdctl	r2,status
100115b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100115b8:	e0fffe17 	ldw	r3,-8(fp)
100115bc:	00bfff84 	movi	r2,-2
100115c0:	1884703a 	and	r2,r3,r2
100115c4:	1001703a 	wrctl	status,r2
  
  return context;
100115c8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100115cc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100115d0:	d0a00c17 	ldw	r2,-32720(gp)
100115d4:	10c000c4 	addi	r3,r2,3
100115d8:	00bfff04 	movi	r2,-4
100115dc:	1884703a 	and	r2,r3,r2
100115e0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100115e4:	d0e00c17 	ldw	r3,-32720(gp)
100115e8:	e0bfff17 	ldw	r2,-4(fp)
100115ec:	1887883a 	add	r3,r3,r2
100115f0:	00860034 	movhi	r2,6144
100115f4:	10800004 	addi	r2,r2,0
100115f8:	10c0062e 	bgeu	r2,r3,10011614 <sbrk+0x74>
100115fc:	e0bffb17 	ldw	r2,-20(fp)
10011600:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011604:	e0bffa17 	ldw	r2,-24(fp)
10011608:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001160c:	00bfffc4 	movi	r2,-1
10011610:	00000b06 	br	10011640 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10011614:	d0a00c17 	ldw	r2,-32720(gp)
10011618:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001161c:	d0e00c17 	ldw	r3,-32720(gp)
10011620:	e0bfff17 	ldw	r2,-4(fp)
10011624:	1885883a 	add	r2,r3,r2
10011628:	d0a00c15 	stw	r2,-32720(gp)
1001162c:	e0bffb17 	ldw	r2,-20(fp)
10011630:	e0bffc15 	stw	r2,-16(fp)
10011634:	e0bffc17 	ldw	r2,-16(fp)
10011638:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001163c:	e0bffd17 	ldw	r2,-12(fp)
} 
10011640:	e037883a 	mov	sp,fp
10011644:	df000017 	ldw	fp,0(sp)
10011648:	dec00104 	addi	sp,sp,4
1001164c:	f800283a 	ret

10011650 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10011650:	defffd04 	addi	sp,sp,-12
10011654:	dfc00215 	stw	ra,8(sp)
10011658:	df000115 	stw	fp,4(sp)
1001165c:	df000104 	addi	fp,sp,4
10011660:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10011664:	e13fff17 	ldw	r4,-4(fp)
10011668:	00124080 	call	10012408 <alt_busy_sleep>
}
1001166c:	e037883a 	mov	sp,fp
10011670:	dfc00117 	ldw	ra,4(sp)
10011674:	df000017 	ldw	fp,0(sp)
10011678:	dec00204 	addi	sp,sp,8
1001167c:	f800283a 	ret

10011680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011680:	defffe04 	addi	sp,sp,-8
10011684:	dfc00115 	stw	ra,4(sp)
10011688:	df000015 	stw	fp,0(sp)
1001168c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011690:	d0a00b17 	ldw	r2,-32724(gp)
10011694:	10000326 	beq	r2,zero,100116a4 <alt_get_errno+0x24>
10011698:	d0a00b17 	ldw	r2,-32724(gp)
1001169c:	103ee83a 	callr	r2
100116a0:	00000106 	br	100116a8 <alt_get_errno+0x28>
100116a4:	d0a6d404 	addi	r2,gp,-25776
}
100116a8:	e037883a 	mov	sp,fp
100116ac:	dfc00117 	ldw	ra,4(sp)
100116b0:	df000017 	ldw	fp,0(sp)
100116b4:	dec00204 	addi	sp,sp,8
100116b8:	f800283a 	ret

100116bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100116bc:	defff904 	addi	sp,sp,-28
100116c0:	dfc00615 	stw	ra,24(sp)
100116c4:	df000515 	stw	fp,20(sp)
100116c8:	df000504 	addi	fp,sp,20
100116cc:	e13ffd15 	stw	r4,-12(fp)
100116d0:	e17ffe15 	stw	r5,-8(fp)
100116d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100116d8:	e0bffd17 	ldw	r2,-12(fp)
100116dc:	10000816 	blt	r2,zero,10011700 <write+0x44>
100116e0:	01400304 	movi	r5,12
100116e4:	e13ffd17 	ldw	r4,-12(fp)
100116e8:	000e52c0 	call	1000e52c <__mulsi3>
100116ec:	1007883a 	mov	r3,r2
100116f0:	00840074 	movhi	r2,4097
100116f4:	10924f04 	addi	r2,r2,18748
100116f8:	1885883a 	add	r2,r3,r2
100116fc:	00000106 	br	10011704 <write+0x48>
10011700:	0005883a 	mov	r2,zero
10011704:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011708:	e0bffb17 	ldw	r2,-20(fp)
1001170c:	10002126 	beq	r2,zero,10011794 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10011710:	e0bffb17 	ldw	r2,-20(fp)
10011714:	10800217 	ldw	r2,8(r2)
10011718:	108000cc 	andi	r2,r2,3
1001171c:	10001826 	beq	r2,zero,10011780 <write+0xc4>
10011720:	e0bffb17 	ldw	r2,-20(fp)
10011724:	10800017 	ldw	r2,0(r2)
10011728:	10800617 	ldw	r2,24(r2)
1001172c:	10001426 	beq	r2,zero,10011780 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10011730:	e0bffb17 	ldw	r2,-20(fp)
10011734:	10800017 	ldw	r2,0(r2)
10011738:	10800617 	ldw	r2,24(r2)
1001173c:	e0ffff17 	ldw	r3,-4(fp)
10011740:	180d883a 	mov	r6,r3
10011744:	e17ffe17 	ldw	r5,-8(fp)
10011748:	e13ffb17 	ldw	r4,-20(fp)
1001174c:	103ee83a 	callr	r2
10011750:	e0bffc15 	stw	r2,-16(fp)
10011754:	e0bffc17 	ldw	r2,-16(fp)
10011758:	1000070e 	bge	r2,zero,10011778 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001175c:	00116800 	call	10011680 <alt_get_errno>
10011760:	1007883a 	mov	r3,r2
10011764:	e0bffc17 	ldw	r2,-16(fp)
10011768:	0085c83a 	sub	r2,zero,r2
1001176c:	18800015 	stw	r2,0(r3)
        return -1;
10011770:	00bfffc4 	movi	r2,-1
10011774:	00000c06 	br	100117a8 <write+0xec>
      }
      return rval;
10011778:	e0bffc17 	ldw	r2,-16(fp)
1001177c:	00000a06 	br	100117a8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10011780:	00116800 	call	10011680 <alt_get_errno>
10011784:	1007883a 	mov	r3,r2
10011788:	00800344 	movi	r2,13
1001178c:	18800015 	stw	r2,0(r3)
10011790:	00000406 	br	100117a4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10011794:	00116800 	call	10011680 <alt_get_errno>
10011798:	1007883a 	mov	r3,r2
1001179c:	00801444 	movi	r2,81
100117a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100117a4:	00bfffc4 	movi	r2,-1
}
100117a8:	e037883a 	mov	sp,fp
100117ac:	dfc00117 	ldw	ra,4(sp)
100117b0:	df000017 	ldw	fp,0(sp)
100117b4:	dec00204 	addi	sp,sp,8
100117b8:	f800283a 	ret

100117bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100117bc:	defffd04 	addi	sp,sp,-12
100117c0:	dfc00215 	stw	ra,8(sp)
100117c4:	df000115 	stw	fp,4(sp)
100117c8:	df000104 	addi	fp,sp,4
100117cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100117d0:	d1600804 	addi	r5,gp,-32736
100117d4:	e13fff17 	ldw	r4,-4(fp)
100117d8:	00125bc0 	call	100125bc <alt_dev_llist_insert>
}
100117dc:	e037883a 	mov	sp,fp
100117e0:	dfc00117 	ldw	ra,4(sp)
100117e4:	df000017 	ldw	fp,0(sp)
100117e8:	dec00204 	addi	sp,sp,8
100117ec:	f800283a 	ret

100117f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100117f0:	defffd04 	addi	sp,sp,-12
100117f4:	dfc00215 	stw	ra,8(sp)
100117f8:	df000115 	stw	fp,4(sp)
100117fc:	df000104 	addi	fp,sp,4
10011800:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10011804:	0012f680 	call	10012f68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10011808:	00800044 	movi	r2,1
1001180c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10011810:	0001883a 	nop
10011814:	e037883a 	mov	sp,fp
10011818:	dfc00117 	ldw	ra,4(sp)
1001181c:	df000017 	ldw	fp,0(sp)
10011820:	dec00204 	addi	sp,sp,8
10011824:	f800283a 	ret

10011828 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10011828:	defffe04 	addi	sp,sp,-8
1001182c:	dfc00115 	stw	ra,4(sp)
10011830:	df000015 	stw	fp,0(sp)
10011834:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10011838:	01800144 	movi	r6,5
1001183c:	000b883a 	mov	r5,zero
10011840:	01040074 	movhi	r4,4097
10011844:	2112b904 	addi	r4,r4,19172
10011848:	00119d80 	call	100119d8 <altera_avalon_jtag_uart_init>
1001184c:	01040074 	movhi	r4,4097
10011850:	2112af04 	addi	r4,r4,19132
10011854:	00117bc0 	call	100117bc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10011858:	0001883a 	nop
}
1001185c:	0001883a 	nop
10011860:	e037883a 	mov	sp,fp
10011864:	dfc00117 	ldw	ra,4(sp)
10011868:	df000017 	ldw	fp,0(sp)
1001186c:	dec00204 	addi	sp,sp,8
10011870:	f800283a 	ret

10011874 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10011874:	defffa04 	addi	sp,sp,-24
10011878:	dfc00515 	stw	ra,20(sp)
1001187c:	df000415 	stw	fp,16(sp)
10011880:	df000404 	addi	fp,sp,16
10011884:	e13ffd15 	stw	r4,-12(fp)
10011888:	e17ffe15 	stw	r5,-8(fp)
1001188c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011890:	e0bffd17 	ldw	r2,-12(fp)
10011894:	10800017 	ldw	r2,0(r2)
10011898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001189c:	e0bffc17 	ldw	r2,-16(fp)
100118a0:	10c00a04 	addi	r3,r2,40
100118a4:	e0bffd17 	ldw	r2,-12(fp)
100118a8:	10800217 	ldw	r2,8(r2)
100118ac:	100f883a 	mov	r7,r2
100118b0:	e1bfff17 	ldw	r6,-4(fp)
100118b4:	e17ffe17 	ldw	r5,-8(fp)
100118b8:	1809883a 	mov	r4,r3
100118bc:	0011e9c0 	call	10011e9c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100118c0:	e037883a 	mov	sp,fp
100118c4:	dfc00117 	ldw	ra,4(sp)
100118c8:	df000017 	ldw	fp,0(sp)
100118cc:	dec00204 	addi	sp,sp,8
100118d0:	f800283a 	ret

100118d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100118d4:	defffa04 	addi	sp,sp,-24
100118d8:	dfc00515 	stw	ra,20(sp)
100118dc:	df000415 	stw	fp,16(sp)
100118e0:	df000404 	addi	fp,sp,16
100118e4:	e13ffd15 	stw	r4,-12(fp)
100118e8:	e17ffe15 	stw	r5,-8(fp)
100118ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100118f0:	e0bffd17 	ldw	r2,-12(fp)
100118f4:	10800017 	ldw	r2,0(r2)
100118f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100118fc:	e0bffc17 	ldw	r2,-16(fp)
10011900:	10c00a04 	addi	r3,r2,40
10011904:	e0bffd17 	ldw	r2,-12(fp)
10011908:	10800217 	ldw	r2,8(r2)
1001190c:	100f883a 	mov	r7,r2
10011910:	e1bfff17 	ldw	r6,-4(fp)
10011914:	e17ffe17 	ldw	r5,-8(fp)
10011918:	1809883a 	mov	r4,r3
1001191c:	00120b80 	call	100120b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10011920:	e037883a 	mov	sp,fp
10011924:	dfc00117 	ldw	ra,4(sp)
10011928:	df000017 	ldw	fp,0(sp)
1001192c:	dec00204 	addi	sp,sp,8
10011930:	f800283a 	ret

10011934 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10011934:	defffc04 	addi	sp,sp,-16
10011938:	dfc00315 	stw	ra,12(sp)
1001193c:	df000215 	stw	fp,8(sp)
10011940:	df000204 	addi	fp,sp,8
10011944:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011948:	e0bfff17 	ldw	r2,-4(fp)
1001194c:	10800017 	ldw	r2,0(r2)
10011950:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10011954:	e0bffe17 	ldw	r2,-8(fp)
10011958:	10c00a04 	addi	r3,r2,40
1001195c:	e0bfff17 	ldw	r2,-4(fp)
10011960:	10800217 	ldw	r2,8(r2)
10011964:	100b883a 	mov	r5,r2
10011968:	1809883a 	mov	r4,r3
1001196c:	0011d440 	call	10011d44 <altera_avalon_jtag_uart_close>
}
10011970:	e037883a 	mov	sp,fp
10011974:	dfc00117 	ldw	ra,4(sp)
10011978:	df000017 	ldw	fp,0(sp)
1001197c:	dec00204 	addi	sp,sp,8
10011980:	f800283a 	ret

10011984 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10011984:	defffa04 	addi	sp,sp,-24
10011988:	dfc00515 	stw	ra,20(sp)
1001198c:	df000415 	stw	fp,16(sp)
10011990:	df000404 	addi	fp,sp,16
10011994:	e13ffd15 	stw	r4,-12(fp)
10011998:	e17ffe15 	stw	r5,-8(fp)
1001199c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100119a0:	e0bffd17 	ldw	r2,-12(fp)
100119a4:	10800017 	ldw	r2,0(r2)
100119a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100119ac:	e0bffc17 	ldw	r2,-16(fp)
100119b0:	10800a04 	addi	r2,r2,40
100119b4:	e1bfff17 	ldw	r6,-4(fp)
100119b8:	e17ffe17 	ldw	r5,-8(fp)
100119bc:	1009883a 	mov	r4,r2
100119c0:	0011dac0 	call	10011dac <altera_avalon_jtag_uart_ioctl>
}
100119c4:	e037883a 	mov	sp,fp
100119c8:	dfc00117 	ldw	ra,4(sp)
100119cc:	df000017 	ldw	fp,0(sp)
100119d0:	dec00204 	addi	sp,sp,8
100119d4:	f800283a 	ret

100119d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100119d8:	defffa04 	addi	sp,sp,-24
100119dc:	dfc00515 	stw	ra,20(sp)
100119e0:	df000415 	stw	fp,16(sp)
100119e4:	df000404 	addi	fp,sp,16
100119e8:	e13ffd15 	stw	r4,-12(fp)
100119ec:	e17ffe15 	stw	r5,-8(fp)
100119f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100119f4:	e0bffd17 	ldw	r2,-12(fp)
100119f8:	00c00044 	movi	r3,1
100119fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10011a00:	e0bffd17 	ldw	r2,-12(fp)
10011a04:	10800017 	ldw	r2,0(r2)
10011a08:	10800104 	addi	r2,r2,4
10011a0c:	1007883a 	mov	r3,r2
10011a10:	e0bffd17 	ldw	r2,-12(fp)
10011a14:	10800817 	ldw	r2,32(r2)
10011a18:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10011a1c:	e0bffe17 	ldw	r2,-8(fp)
10011a20:	e0ffff17 	ldw	r3,-4(fp)
10011a24:	d8000015 	stw	zero,0(sp)
10011a28:	e1fffd17 	ldw	r7,-12(fp)
10011a2c:	01840074 	movhi	r6,4097
10011a30:	3186a604 	addi	r6,r6,6808
10011a34:	180b883a 	mov	r5,r3
10011a38:	1009883a 	mov	r4,r2
10011a3c:	00127400 	call	10012740 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10011a40:	e0bffd17 	ldw	r2,-12(fp)
10011a44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10011a48:	e0bffd17 	ldw	r2,-12(fp)
10011a4c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10011a50:	d0e6d917 	ldw	r3,-25756(gp)
10011a54:	e1fffd17 	ldw	r7,-12(fp)
10011a58:	01840074 	movhi	r6,4097
10011a5c:	31872904 	addi	r6,r6,7332
10011a60:	180b883a 	mov	r5,r3
10011a64:	1009883a 	mov	r4,r2
10011a68:	00122dc0 	call	100122dc <alt_alarm_start>
10011a6c:	1000040e 	bge	r2,zero,10011a80 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10011a70:	e0fffd17 	ldw	r3,-12(fp)
10011a74:	00a00034 	movhi	r2,32768
10011a78:	10bfffc4 	addi	r2,r2,-1
10011a7c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10011a80:	0001883a 	nop
10011a84:	e037883a 	mov	sp,fp
10011a88:	dfc00117 	ldw	ra,4(sp)
10011a8c:	df000017 	ldw	fp,0(sp)
10011a90:	dec00204 	addi	sp,sp,8
10011a94:	f800283a 	ret

10011a98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10011a98:	defff804 	addi	sp,sp,-32
10011a9c:	df000715 	stw	fp,28(sp)
10011aa0:	df000704 	addi	fp,sp,28
10011aa4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10011aa8:	e0bfff17 	ldw	r2,-4(fp)
10011aac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10011ab0:	e0bffb17 	ldw	r2,-20(fp)
10011ab4:	10800017 	ldw	r2,0(r2)
10011ab8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011abc:	e0bffc17 	ldw	r2,-16(fp)
10011ac0:	10800104 	addi	r2,r2,4
10011ac4:	10800037 	ldwio	r2,0(r2)
10011ac8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10011acc:	e0bffd17 	ldw	r2,-12(fp)
10011ad0:	1080c00c 	andi	r2,r2,768
10011ad4:	10006d26 	beq	r2,zero,10011c8c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10011ad8:	e0bffd17 	ldw	r2,-12(fp)
10011adc:	1080400c 	andi	r2,r2,256
10011ae0:	10003526 	beq	r2,zero,10011bb8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10011ae4:	00800074 	movhi	r2,1
10011ae8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011aec:	e0bffb17 	ldw	r2,-20(fp)
10011af0:	10800a17 	ldw	r2,40(r2)
10011af4:	10800044 	addi	r2,r2,1
10011af8:	1081ffcc 	andi	r2,r2,2047
10011afc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10011b00:	e0bffb17 	ldw	r2,-20(fp)
10011b04:	10c00b17 	ldw	r3,44(r2)
10011b08:	e0bffe17 	ldw	r2,-8(fp)
10011b0c:	18801526 	beq	r3,r2,10011b64 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10011b10:	e0bffc17 	ldw	r2,-16(fp)
10011b14:	10800037 	ldwio	r2,0(r2)
10011b18:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10011b1c:	e0bff917 	ldw	r2,-28(fp)
10011b20:	10a0000c 	andi	r2,r2,32768
10011b24:	10001126 	beq	r2,zero,10011b6c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10011b28:	e0bffb17 	ldw	r2,-20(fp)
10011b2c:	10800a17 	ldw	r2,40(r2)
10011b30:	e0fff917 	ldw	r3,-28(fp)
10011b34:	1809883a 	mov	r4,r3
10011b38:	e0fffb17 	ldw	r3,-20(fp)
10011b3c:	1885883a 	add	r2,r3,r2
10011b40:	10800e04 	addi	r2,r2,56
10011b44:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011b48:	e0bffb17 	ldw	r2,-20(fp)
10011b4c:	10800a17 	ldw	r2,40(r2)
10011b50:	10800044 	addi	r2,r2,1
10011b54:	10c1ffcc 	andi	r3,r2,2047
10011b58:	e0bffb17 	ldw	r2,-20(fp)
10011b5c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10011b60:	003fe206 	br	10011aec <__alt_data_end+0xf8011aec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10011b64:	0001883a 	nop
10011b68:	00000106 	br	10011b70 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10011b6c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10011b70:	e0bff917 	ldw	r2,-28(fp)
10011b74:	10bfffec 	andhi	r2,r2,65535
10011b78:	10000f26 	beq	r2,zero,10011bb8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011b7c:	e0bffb17 	ldw	r2,-20(fp)
10011b80:	10c00817 	ldw	r3,32(r2)
10011b84:	00bfff84 	movi	r2,-2
10011b88:	1886703a 	and	r3,r3,r2
10011b8c:	e0bffb17 	ldw	r2,-20(fp)
10011b90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10011b94:	e0bffc17 	ldw	r2,-16(fp)
10011b98:	10800104 	addi	r2,r2,4
10011b9c:	1007883a 	mov	r3,r2
10011ba0:	e0bffb17 	ldw	r2,-20(fp)
10011ba4:	10800817 	ldw	r2,32(r2)
10011ba8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011bac:	e0bffc17 	ldw	r2,-16(fp)
10011bb0:	10800104 	addi	r2,r2,4
10011bb4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10011bb8:	e0bffd17 	ldw	r2,-12(fp)
10011bbc:	1080800c 	andi	r2,r2,512
10011bc0:	103fbe26 	beq	r2,zero,10011abc <__alt_data_end+0xf8011abc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10011bc4:	e0bffd17 	ldw	r2,-12(fp)
10011bc8:	1004d43a 	srli	r2,r2,16
10011bcc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10011bd0:	00001406 	br	10011c24 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10011bd4:	e0bffc17 	ldw	r2,-16(fp)
10011bd8:	e0fffb17 	ldw	r3,-20(fp)
10011bdc:	18c00d17 	ldw	r3,52(r3)
10011be0:	e13ffb17 	ldw	r4,-20(fp)
10011be4:	20c7883a 	add	r3,r4,r3
10011be8:	18c20e04 	addi	r3,r3,2104
10011bec:	18c00003 	ldbu	r3,0(r3)
10011bf0:	18c03fcc 	andi	r3,r3,255
10011bf4:	18c0201c 	xori	r3,r3,128
10011bf8:	18ffe004 	addi	r3,r3,-128
10011bfc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011c00:	e0bffb17 	ldw	r2,-20(fp)
10011c04:	10800d17 	ldw	r2,52(r2)
10011c08:	10800044 	addi	r2,r2,1
10011c0c:	10c1ffcc 	andi	r3,r2,2047
10011c10:	e0bffb17 	ldw	r2,-20(fp)
10011c14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10011c18:	e0bffa17 	ldw	r2,-24(fp)
10011c1c:	10bfffc4 	addi	r2,r2,-1
10011c20:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10011c24:	e0bffa17 	ldw	r2,-24(fp)
10011c28:	10000526 	beq	r2,zero,10011c40 <altera_avalon_jtag_uart_irq+0x1a8>
10011c2c:	e0bffb17 	ldw	r2,-20(fp)
10011c30:	10c00d17 	ldw	r3,52(r2)
10011c34:	e0bffb17 	ldw	r2,-20(fp)
10011c38:	10800c17 	ldw	r2,48(r2)
10011c3c:	18bfe51e 	bne	r3,r2,10011bd4 <__alt_data_end+0xf8011bd4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10011c40:	e0bffa17 	ldw	r2,-24(fp)
10011c44:	103f9d26 	beq	r2,zero,10011abc <__alt_data_end+0xf8011abc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011c48:	e0bffb17 	ldw	r2,-20(fp)
10011c4c:	10c00817 	ldw	r3,32(r2)
10011c50:	00bfff44 	movi	r2,-3
10011c54:	1886703a 	and	r3,r3,r2
10011c58:	e0bffb17 	ldw	r2,-20(fp)
10011c5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011c60:	e0bffb17 	ldw	r2,-20(fp)
10011c64:	10800017 	ldw	r2,0(r2)
10011c68:	10800104 	addi	r2,r2,4
10011c6c:	1007883a 	mov	r3,r2
10011c70:	e0bffb17 	ldw	r2,-20(fp)
10011c74:	10800817 	ldw	r2,32(r2)
10011c78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011c7c:	e0bffc17 	ldw	r2,-16(fp)
10011c80:	10800104 	addi	r2,r2,4
10011c84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10011c88:	003f8c06 	br	10011abc <__alt_data_end+0xf8011abc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10011c8c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10011c90:	0001883a 	nop
10011c94:	e037883a 	mov	sp,fp
10011c98:	df000017 	ldw	fp,0(sp)
10011c9c:	dec00104 	addi	sp,sp,4
10011ca0:	f800283a 	ret

10011ca4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10011ca4:	defff804 	addi	sp,sp,-32
10011ca8:	df000715 	stw	fp,28(sp)
10011cac:	df000704 	addi	fp,sp,28
10011cb0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10011cb4:	e0bffb17 	ldw	r2,-20(fp)
10011cb8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10011cbc:	e0bff917 	ldw	r2,-28(fp)
10011cc0:	10800017 	ldw	r2,0(r2)
10011cc4:	10800104 	addi	r2,r2,4
10011cc8:	10800037 	ldwio	r2,0(r2)
10011ccc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10011cd0:	e0bffa17 	ldw	r2,-24(fp)
10011cd4:	1081000c 	andi	r2,r2,1024
10011cd8:	10000b26 	beq	r2,zero,10011d08 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10011cdc:	e0bff917 	ldw	r2,-28(fp)
10011ce0:	10800017 	ldw	r2,0(r2)
10011ce4:	10800104 	addi	r2,r2,4
10011ce8:	1007883a 	mov	r3,r2
10011cec:	e0bff917 	ldw	r2,-28(fp)
10011cf0:	10800817 	ldw	r2,32(r2)
10011cf4:	10810014 	ori	r2,r2,1024
10011cf8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10011cfc:	e0bff917 	ldw	r2,-28(fp)
10011d00:	10000915 	stw	zero,36(r2)
10011d04:	00000a06 	br	10011d30 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10011d08:	e0bff917 	ldw	r2,-28(fp)
10011d0c:	10c00917 	ldw	r3,36(r2)
10011d10:	00a00034 	movhi	r2,32768
10011d14:	10bfff04 	addi	r2,r2,-4
10011d18:	10c00536 	bltu	r2,r3,10011d30 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10011d1c:	e0bff917 	ldw	r2,-28(fp)
10011d20:	10800917 	ldw	r2,36(r2)
10011d24:	10c00044 	addi	r3,r2,1
10011d28:	e0bff917 	ldw	r2,-28(fp)
10011d2c:	10c00915 	stw	r3,36(r2)
10011d30:	d0a6d917 	ldw	r2,-25756(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10011d34:	e037883a 	mov	sp,fp
10011d38:	df000017 	ldw	fp,0(sp)
10011d3c:	dec00104 	addi	sp,sp,4
10011d40:	f800283a 	ret

10011d44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10011d44:	defffd04 	addi	sp,sp,-12
10011d48:	df000215 	stw	fp,8(sp)
10011d4c:	df000204 	addi	fp,sp,8
10011d50:	e13ffe15 	stw	r4,-8(fp)
10011d54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011d58:	00000506 	br	10011d70 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10011d5c:	e0bfff17 	ldw	r2,-4(fp)
10011d60:	1090000c 	andi	r2,r2,16384
10011d64:	10000226 	beq	r2,zero,10011d70 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10011d68:	00bffd44 	movi	r2,-11
10011d6c:	00000b06 	br	10011d9c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011d70:	e0bffe17 	ldw	r2,-8(fp)
10011d74:	10c00d17 	ldw	r3,52(r2)
10011d78:	e0bffe17 	ldw	r2,-8(fp)
10011d7c:	10800c17 	ldw	r2,48(r2)
10011d80:	18800526 	beq	r3,r2,10011d98 <altera_avalon_jtag_uart_close+0x54>
10011d84:	e0bffe17 	ldw	r2,-8(fp)
10011d88:	10c00917 	ldw	r3,36(r2)
10011d8c:	e0bffe17 	ldw	r2,-8(fp)
10011d90:	10800117 	ldw	r2,4(r2)
10011d94:	18bff136 	bltu	r3,r2,10011d5c <__alt_data_end+0xf8011d5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10011d98:	0005883a 	mov	r2,zero
}
10011d9c:	e037883a 	mov	sp,fp
10011da0:	df000017 	ldw	fp,0(sp)
10011da4:	dec00104 	addi	sp,sp,4
10011da8:	f800283a 	ret

10011dac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10011dac:	defffa04 	addi	sp,sp,-24
10011db0:	df000515 	stw	fp,20(sp)
10011db4:	df000504 	addi	fp,sp,20
10011db8:	e13ffd15 	stw	r4,-12(fp)
10011dbc:	e17ffe15 	stw	r5,-8(fp)
10011dc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10011dc4:	00bff9c4 	movi	r2,-25
10011dc8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10011dcc:	e0bffe17 	ldw	r2,-8(fp)
10011dd0:	10da8060 	cmpeqi	r3,r2,27137
10011dd4:	1800031e 	bne	r3,zero,10011de4 <altera_avalon_jtag_uart_ioctl+0x38>
10011dd8:	109a80a0 	cmpeqi	r2,r2,27138
10011ddc:	1000181e 	bne	r2,zero,10011e40 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10011de0:	00002906 	br	10011e88 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011de4:	e0bffd17 	ldw	r2,-12(fp)
10011de8:	10c00117 	ldw	r3,4(r2)
10011dec:	00a00034 	movhi	r2,32768
10011df0:	10bfffc4 	addi	r2,r2,-1
10011df4:	18802126 	beq	r3,r2,10011e7c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10011df8:	e0bfff17 	ldw	r2,-4(fp)
10011dfc:	10800017 	ldw	r2,0(r2)
10011e00:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011e04:	e0bffc17 	ldw	r2,-16(fp)
10011e08:	10800090 	cmplti	r2,r2,2
10011e0c:	1000061e 	bne	r2,zero,10011e28 <altera_avalon_jtag_uart_ioctl+0x7c>
10011e10:	e0fffc17 	ldw	r3,-16(fp)
10011e14:	00a00034 	movhi	r2,32768
10011e18:	10bfffc4 	addi	r2,r2,-1
10011e1c:	18800226 	beq	r3,r2,10011e28 <altera_avalon_jtag_uart_ioctl+0x7c>
10011e20:	e0bffc17 	ldw	r2,-16(fp)
10011e24:	00000206 	br	10011e30 <altera_avalon_jtag_uart_ioctl+0x84>
10011e28:	00a00034 	movhi	r2,32768
10011e2c:	10bfff84 	addi	r2,r2,-2
10011e30:	e0fffd17 	ldw	r3,-12(fp)
10011e34:	18800115 	stw	r2,4(r3)
      rc = 0;
10011e38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011e3c:	00000f06 	br	10011e7c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10011e40:	e0bffd17 	ldw	r2,-12(fp)
10011e44:	10c00117 	ldw	r3,4(r2)
10011e48:	00a00034 	movhi	r2,32768
10011e4c:	10bfffc4 	addi	r2,r2,-1
10011e50:	18800c26 	beq	r3,r2,10011e84 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10011e54:	e0bffd17 	ldw	r2,-12(fp)
10011e58:	10c00917 	ldw	r3,36(r2)
10011e5c:	e0bffd17 	ldw	r2,-12(fp)
10011e60:	10800117 	ldw	r2,4(r2)
10011e64:	1885803a 	cmpltu	r2,r3,r2
10011e68:	10c03fcc 	andi	r3,r2,255
10011e6c:	e0bfff17 	ldw	r2,-4(fp)
10011e70:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011e74:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011e78:	00000206 	br	10011e84 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10011e7c:	0001883a 	nop
10011e80:	00000106 	br	10011e88 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10011e84:	0001883a 	nop

  default:
    break;
  }

  return rc;
10011e88:	e0bffb17 	ldw	r2,-20(fp)
}
10011e8c:	e037883a 	mov	sp,fp
10011e90:	df000017 	ldw	fp,0(sp)
10011e94:	dec00104 	addi	sp,sp,4
10011e98:	f800283a 	ret

10011e9c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10011e9c:	defff304 	addi	sp,sp,-52
10011ea0:	dfc00c15 	stw	ra,48(sp)
10011ea4:	df000b15 	stw	fp,44(sp)
10011ea8:	df000b04 	addi	fp,sp,44
10011eac:	e13ffc15 	stw	r4,-16(fp)
10011eb0:	e17ffd15 	stw	r5,-12(fp)
10011eb4:	e1bffe15 	stw	r6,-8(fp)
10011eb8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10011ebc:	e0bffd17 	ldw	r2,-12(fp)
10011ec0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011ec4:	00004706 	br	10011fe4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10011ec8:	e0bffc17 	ldw	r2,-16(fp)
10011ecc:	10800a17 	ldw	r2,40(r2)
10011ed0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10011ed4:	e0bffc17 	ldw	r2,-16(fp)
10011ed8:	10800b17 	ldw	r2,44(r2)
10011edc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10011ee0:	e0fff717 	ldw	r3,-36(fp)
10011ee4:	e0bff817 	ldw	r2,-32(fp)
10011ee8:	18800536 	bltu	r3,r2,10011f00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10011eec:	e0fff717 	ldw	r3,-36(fp)
10011ef0:	e0bff817 	ldw	r2,-32(fp)
10011ef4:	1885c83a 	sub	r2,r3,r2
10011ef8:	e0bff615 	stw	r2,-40(fp)
10011efc:	00000406 	br	10011f10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011f00:	00c20004 	movi	r3,2048
10011f04:	e0bff817 	ldw	r2,-32(fp)
10011f08:	1885c83a 	sub	r2,r3,r2
10011f0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011f10:	e0bff617 	ldw	r2,-40(fp)
10011f14:	10001e26 	beq	r2,zero,10011f90 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10011f18:	e0fffe17 	ldw	r3,-8(fp)
10011f1c:	e0bff617 	ldw	r2,-40(fp)
10011f20:	1880022e 	bgeu	r3,r2,10011f2c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10011f24:	e0bffe17 	ldw	r2,-8(fp)
10011f28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10011f2c:	e0bffc17 	ldw	r2,-16(fp)
10011f30:	10c00e04 	addi	r3,r2,56
10011f34:	e0bff817 	ldw	r2,-32(fp)
10011f38:	1885883a 	add	r2,r3,r2
10011f3c:	e1bff617 	ldw	r6,-40(fp)
10011f40:	100b883a 	mov	r5,r2
10011f44:	e13ff517 	ldw	r4,-44(fp)
10011f48:	0009d880 	call	10009d88 <memcpy>
      ptr   += n;
10011f4c:	e0fff517 	ldw	r3,-44(fp)
10011f50:	e0bff617 	ldw	r2,-40(fp)
10011f54:	1885883a 	add	r2,r3,r2
10011f58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10011f5c:	e0fffe17 	ldw	r3,-8(fp)
10011f60:	e0bff617 	ldw	r2,-40(fp)
10011f64:	1885c83a 	sub	r2,r3,r2
10011f68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011f6c:	e0fff817 	ldw	r3,-32(fp)
10011f70:	e0bff617 	ldw	r2,-40(fp)
10011f74:	1885883a 	add	r2,r3,r2
10011f78:	10c1ffcc 	andi	r3,r2,2047
10011f7c:	e0bffc17 	ldw	r2,-16(fp)
10011f80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011f84:	e0bffe17 	ldw	r2,-8(fp)
10011f88:	00bfcf16 	blt	zero,r2,10011ec8 <__alt_data_end+0xf8011ec8>
10011f8c:	00000106 	br	10011f94 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10011f90:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10011f94:	e0fff517 	ldw	r3,-44(fp)
10011f98:	e0bffd17 	ldw	r2,-12(fp)
10011f9c:	1880141e 	bne	r3,r2,10011ff0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10011fa0:	e0bfff17 	ldw	r2,-4(fp)
10011fa4:	1090000c 	andi	r2,r2,16384
10011fa8:	1000131e 	bne	r2,zero,10011ff8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10011fac:	0001883a 	nop
10011fb0:	e0bffc17 	ldw	r2,-16(fp)
10011fb4:	10c00a17 	ldw	r3,40(r2)
10011fb8:	e0bff717 	ldw	r2,-36(fp)
10011fbc:	1880051e 	bne	r3,r2,10011fd4 <altera_avalon_jtag_uart_read+0x138>
10011fc0:	e0bffc17 	ldw	r2,-16(fp)
10011fc4:	10c00917 	ldw	r3,36(r2)
10011fc8:	e0bffc17 	ldw	r2,-16(fp)
10011fcc:	10800117 	ldw	r2,4(r2)
10011fd0:	18bff736 	bltu	r3,r2,10011fb0 <__alt_data_end+0xf8011fb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011fd4:	e0bffc17 	ldw	r2,-16(fp)
10011fd8:	10c00a17 	ldw	r3,40(r2)
10011fdc:	e0bff717 	ldw	r2,-36(fp)
10011fe0:	18800726 	beq	r3,r2,10012000 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011fe4:	e0bffe17 	ldw	r2,-8(fp)
10011fe8:	00bfb716 	blt	zero,r2,10011ec8 <__alt_data_end+0xf8011ec8>
10011fec:	00000506 	br	10012004 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10011ff0:	0001883a 	nop
10011ff4:	00000306 	br	10012004 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10011ff8:	0001883a 	nop
10011ffc:	00000106 	br	10012004 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012000:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012004:	e0fff517 	ldw	r3,-44(fp)
10012008:	e0bffd17 	ldw	r2,-12(fp)
1001200c:	18801826 	beq	r3,r2,10012070 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012010:	0005303a 	rdctl	r2,status
10012014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012018:	e0fffb17 	ldw	r3,-20(fp)
1001201c:	00bfff84 	movi	r2,-2
10012020:	1884703a 	and	r2,r3,r2
10012024:	1001703a 	wrctl	status,r2
  
  return context;
10012028:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001202c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012030:	e0bffc17 	ldw	r2,-16(fp)
10012034:	10800817 	ldw	r2,32(r2)
10012038:	10c00054 	ori	r3,r2,1
1001203c:	e0bffc17 	ldw	r2,-16(fp)
10012040:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012044:	e0bffc17 	ldw	r2,-16(fp)
10012048:	10800017 	ldw	r2,0(r2)
1001204c:	10800104 	addi	r2,r2,4
10012050:	1007883a 	mov	r3,r2
10012054:	e0bffc17 	ldw	r2,-16(fp)
10012058:	10800817 	ldw	r2,32(r2)
1001205c:	18800035 	stwio	r2,0(r3)
10012060:	e0bffa17 	ldw	r2,-24(fp)
10012064:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012068:	e0bff917 	ldw	r2,-28(fp)
1001206c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012070:	e0fff517 	ldw	r3,-44(fp)
10012074:	e0bffd17 	ldw	r2,-12(fp)
10012078:	18800426 	beq	r3,r2,1001208c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1001207c:	e0fff517 	ldw	r3,-44(fp)
10012080:	e0bffd17 	ldw	r2,-12(fp)
10012084:	1885c83a 	sub	r2,r3,r2
10012088:	00000606 	br	100120a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1001208c:	e0bfff17 	ldw	r2,-4(fp)
10012090:	1090000c 	andi	r2,r2,16384
10012094:	10000226 	beq	r2,zero,100120a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012098:	00bffd44 	movi	r2,-11
1001209c:	00000106 	br	100120a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100120a0:	00bffec4 	movi	r2,-5
}
100120a4:	e037883a 	mov	sp,fp
100120a8:	dfc00117 	ldw	ra,4(sp)
100120ac:	df000017 	ldw	fp,0(sp)
100120b0:	dec00204 	addi	sp,sp,8
100120b4:	f800283a 	ret

100120b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100120b8:	defff304 	addi	sp,sp,-52
100120bc:	dfc00c15 	stw	ra,48(sp)
100120c0:	df000b15 	stw	fp,44(sp)
100120c4:	df000b04 	addi	fp,sp,44
100120c8:	e13ffc15 	stw	r4,-16(fp)
100120cc:	e17ffd15 	stw	r5,-12(fp)
100120d0:	e1bffe15 	stw	r6,-8(fp)
100120d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100120d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100120dc:	e0bffd17 	ldw	r2,-12(fp)
100120e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100120e4:	00003706 	br	100121c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100120e8:	e0bffc17 	ldw	r2,-16(fp)
100120ec:	10800c17 	ldw	r2,48(r2)
100120f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100120f4:	e0bffc17 	ldw	r2,-16(fp)
100120f8:	10800d17 	ldw	r2,52(r2)
100120fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10012100:	e0fff917 	ldw	r3,-28(fp)
10012104:	e0bff517 	ldw	r2,-44(fp)
10012108:	1880062e 	bgeu	r3,r2,10012124 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001210c:	e0fff517 	ldw	r3,-44(fp)
10012110:	e0bff917 	ldw	r2,-28(fp)
10012114:	1885c83a 	sub	r2,r3,r2
10012118:	10bfffc4 	addi	r2,r2,-1
1001211c:	e0bff615 	stw	r2,-40(fp)
10012120:	00000b06 	br	10012150 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10012124:	e0bff517 	ldw	r2,-44(fp)
10012128:	10000526 	beq	r2,zero,10012140 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001212c:	00c20004 	movi	r3,2048
10012130:	e0bff917 	ldw	r2,-28(fp)
10012134:	1885c83a 	sub	r2,r3,r2
10012138:	e0bff615 	stw	r2,-40(fp)
1001213c:	00000406 	br	10012150 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10012140:	00c1ffc4 	movi	r3,2047
10012144:	e0bff917 	ldw	r2,-28(fp)
10012148:	1885c83a 	sub	r2,r3,r2
1001214c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012150:	e0bff617 	ldw	r2,-40(fp)
10012154:	10001e26 	beq	r2,zero,100121d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012158:	e0fffe17 	ldw	r3,-8(fp)
1001215c:	e0bff617 	ldw	r2,-40(fp)
10012160:	1880022e 	bgeu	r3,r2,1001216c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10012164:	e0bffe17 	ldw	r2,-8(fp)
10012168:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1001216c:	e0bffc17 	ldw	r2,-16(fp)
10012170:	10c20e04 	addi	r3,r2,2104
10012174:	e0bff917 	ldw	r2,-28(fp)
10012178:	1885883a 	add	r2,r3,r2
1001217c:	e1bff617 	ldw	r6,-40(fp)
10012180:	e17ffd17 	ldw	r5,-12(fp)
10012184:	1009883a 	mov	r4,r2
10012188:	0009d880 	call	10009d88 <memcpy>
      ptr   += n;
1001218c:	e0fffd17 	ldw	r3,-12(fp)
10012190:	e0bff617 	ldw	r2,-40(fp)
10012194:	1885883a 	add	r2,r3,r2
10012198:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001219c:	e0fffe17 	ldw	r3,-8(fp)
100121a0:	e0bff617 	ldw	r2,-40(fp)
100121a4:	1885c83a 	sub	r2,r3,r2
100121a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100121ac:	e0fff917 	ldw	r3,-28(fp)
100121b0:	e0bff617 	ldw	r2,-40(fp)
100121b4:	1885883a 	add	r2,r3,r2
100121b8:	10c1ffcc 	andi	r3,r2,2047
100121bc:	e0bffc17 	ldw	r2,-16(fp)
100121c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100121c4:	e0bffe17 	ldw	r2,-8(fp)
100121c8:	00bfc716 	blt	zero,r2,100120e8 <__alt_data_end+0xf80120e8>
100121cc:	00000106 	br	100121d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100121d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100121d4:	0005303a 	rdctl	r2,status
100121d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100121dc:	e0fffb17 	ldw	r3,-20(fp)
100121e0:	00bfff84 	movi	r2,-2
100121e4:	1884703a 	and	r2,r3,r2
100121e8:	1001703a 	wrctl	status,r2
  
  return context;
100121ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100121f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100121f4:	e0bffc17 	ldw	r2,-16(fp)
100121f8:	10800817 	ldw	r2,32(r2)
100121fc:	10c00094 	ori	r3,r2,2
10012200:	e0bffc17 	ldw	r2,-16(fp)
10012204:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012208:	e0bffc17 	ldw	r2,-16(fp)
1001220c:	10800017 	ldw	r2,0(r2)
10012210:	10800104 	addi	r2,r2,4
10012214:	1007883a 	mov	r3,r2
10012218:	e0bffc17 	ldw	r2,-16(fp)
1001221c:	10800817 	ldw	r2,32(r2)
10012220:	18800035 	stwio	r2,0(r3)
10012224:	e0bffa17 	ldw	r2,-24(fp)
10012228:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001222c:	e0bff817 	ldw	r2,-32(fp)
10012230:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10012234:	e0bffe17 	ldw	r2,-8(fp)
10012238:	0080100e 	bge	zero,r2,1001227c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1001223c:	e0bfff17 	ldw	r2,-4(fp)
10012240:	1090000c 	andi	r2,r2,16384
10012244:	1000101e 	bne	r2,zero,10012288 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10012248:	0001883a 	nop
1001224c:	e0bffc17 	ldw	r2,-16(fp)
10012250:	10c00d17 	ldw	r3,52(r2)
10012254:	e0bff517 	ldw	r2,-44(fp)
10012258:	1880051e 	bne	r3,r2,10012270 <altera_avalon_jtag_uart_write+0x1b8>
1001225c:	e0bffc17 	ldw	r2,-16(fp)
10012260:	10c00917 	ldw	r3,36(r2)
10012264:	e0bffc17 	ldw	r2,-16(fp)
10012268:	10800117 	ldw	r2,4(r2)
1001226c:	18bff736 	bltu	r3,r2,1001224c <__alt_data_end+0xf801224c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012270:	e0bffc17 	ldw	r2,-16(fp)
10012274:	10800917 	ldw	r2,36(r2)
10012278:	1000051e 	bne	r2,zero,10012290 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1001227c:	e0bffe17 	ldw	r2,-8(fp)
10012280:	00bfd016 	blt	zero,r2,100121c4 <__alt_data_end+0xf80121c4>
10012284:	00000306 	br	10012294 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012288:	0001883a 	nop
1001228c:	00000106 	br	10012294 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012290:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012294:	e0fffd17 	ldw	r3,-12(fp)
10012298:	e0bff717 	ldw	r2,-36(fp)
1001229c:	18800426 	beq	r3,r2,100122b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100122a0:	e0fffd17 	ldw	r3,-12(fp)
100122a4:	e0bff717 	ldw	r2,-36(fp)
100122a8:	1885c83a 	sub	r2,r3,r2
100122ac:	00000606 	br	100122c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100122b0:	e0bfff17 	ldw	r2,-4(fp)
100122b4:	1090000c 	andi	r2,r2,16384
100122b8:	10000226 	beq	r2,zero,100122c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100122bc:	00bffd44 	movi	r2,-11
100122c0:	00000106 	br	100122c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100122c4:	00bffec4 	movi	r2,-5
}
100122c8:	e037883a 	mov	sp,fp
100122cc:	dfc00117 	ldw	ra,4(sp)
100122d0:	df000017 	ldw	fp,0(sp)
100122d4:	dec00204 	addi	sp,sp,8
100122d8:	f800283a 	ret

100122dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100122dc:	defff504 	addi	sp,sp,-44
100122e0:	df000a15 	stw	fp,40(sp)
100122e4:	df000a04 	addi	fp,sp,40
100122e8:	e13ffc15 	stw	r4,-16(fp)
100122ec:	e17ffd15 	stw	r5,-12(fp)
100122f0:	e1bffe15 	stw	r6,-8(fp)
100122f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100122f8:	e03ff615 	stw	zero,-40(fp)
100122fc:	d0a6d917 	ldw	r2,-25756(gp)
  
  if (alt_ticks_per_second ())
10012300:	10003c26 	beq	r2,zero,100123f4 <alt_alarm_start+0x118>
  {
    if (alarm)
10012304:	e0bffc17 	ldw	r2,-16(fp)
10012308:	10003826 	beq	r2,zero,100123ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1001230c:	e0bffc17 	ldw	r2,-16(fp)
10012310:	e0fffe17 	ldw	r3,-8(fp)
10012314:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012318:	e0bffc17 	ldw	r2,-16(fp)
1001231c:	e0ffff17 	ldw	r3,-4(fp)
10012320:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012324:	0005303a 	rdctl	r2,status
10012328:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001232c:	e0fff917 	ldw	r3,-28(fp)
10012330:	00bfff84 	movi	r2,-2
10012334:	1884703a 	and	r2,r3,r2
10012338:	1001703a 	wrctl	status,r2
  
  return context;
1001233c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012340:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10012344:	d0a6da17 	ldw	r2,-25752(gp)
      
      current_nticks = alt_nticks();
10012348:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001234c:	e0fffd17 	ldw	r3,-12(fp)
10012350:	e0bff617 	ldw	r2,-40(fp)
10012354:	1885883a 	add	r2,r3,r2
10012358:	10c00044 	addi	r3,r2,1
1001235c:	e0bffc17 	ldw	r2,-16(fp)
10012360:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10012364:	e0bffc17 	ldw	r2,-16(fp)
10012368:	10c00217 	ldw	r3,8(r2)
1001236c:	e0bff617 	ldw	r2,-40(fp)
10012370:	1880042e 	bgeu	r3,r2,10012384 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10012374:	e0bffc17 	ldw	r2,-16(fp)
10012378:	00c00044 	movi	r3,1
1001237c:	10c00405 	stb	r3,16(r2)
10012380:	00000206 	br	1001238c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10012384:	e0bffc17 	ldw	r2,-16(fp)
10012388:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1001238c:	e0bffc17 	ldw	r2,-16(fp)
10012390:	d0e00e04 	addi	r3,gp,-32712
10012394:	e0fffa15 	stw	r3,-24(fp)
10012398:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001239c:	e0bffb17 	ldw	r2,-20(fp)
100123a0:	e0fffa17 	ldw	r3,-24(fp)
100123a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100123a8:	e0bffa17 	ldw	r2,-24(fp)
100123ac:	10c00017 	ldw	r3,0(r2)
100123b0:	e0bffb17 	ldw	r2,-20(fp)
100123b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100123b8:	e0bffa17 	ldw	r2,-24(fp)
100123bc:	10800017 	ldw	r2,0(r2)
100123c0:	e0fffb17 	ldw	r3,-20(fp)
100123c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100123c8:	e0bffa17 	ldw	r2,-24(fp)
100123cc:	e0fffb17 	ldw	r3,-20(fp)
100123d0:	10c00015 	stw	r3,0(r2)
100123d4:	e0bff817 	ldw	r2,-32(fp)
100123d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100123dc:	e0bff717 	ldw	r2,-36(fp)
100123e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100123e4:	0005883a 	mov	r2,zero
100123e8:	00000306 	br	100123f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100123ec:	00bffa84 	movi	r2,-22
100123f0:	00000106 	br	100123f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100123f4:	00bfde84 	movi	r2,-134
  }
}
100123f8:	e037883a 	mov	sp,fp
100123fc:	df000017 	ldw	fp,0(sp)
10012400:	dec00104 	addi	sp,sp,4
10012404:	f800283a 	ret

10012408 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10012408:	defffa04 	addi	sp,sp,-24
1001240c:	dfc00515 	stw	ra,20(sp)
10012410:	df000415 	stw	fp,16(sp)
10012414:	df000404 	addi	fp,sp,16
10012418:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001241c:	00800244 	movi	r2,9
10012420:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10012424:	014003f4 	movhi	r5,15
10012428:	29509004 	addi	r5,r5,16960
1001242c:	e13ffd17 	ldw	r4,-12(fp)
10012430:	000e52c0 	call	1000e52c <__mulsi3>
10012434:	100b883a 	mov	r5,r2
10012438:	0100bef4 	movhi	r4,763
1001243c:	213c2004 	addi	r4,r4,-3968
10012440:	0003fb00 	call	10003fb0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10012444:	100b883a 	mov	r5,r2
10012448:	01200034 	movhi	r4,32768
1001244c:	213fffc4 	addi	r4,r4,-1
10012450:	0003fb00 	call	10003fb0 <__udivsi3>
10012454:	100b883a 	mov	r5,r2
10012458:	e13fff17 	ldw	r4,-4(fp)
1001245c:	0003fb00 	call	10003fb0 <__udivsi3>
10012460:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10012464:	e0bffe17 	ldw	r2,-8(fp)
10012468:	10002a26 	beq	r2,zero,10012514 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001246c:	e03ffc15 	stw	zero,-16(fp)
10012470:	00001706 	br	100124d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10012474:	00a00034 	movhi	r2,32768
10012478:	10bfffc4 	addi	r2,r2,-1
1001247c:	10bfffc4 	addi	r2,r2,-1
10012480:	103ffe1e 	bne	r2,zero,1001247c <__alt_data_end+0xf801247c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10012484:	014003f4 	movhi	r5,15
10012488:	29509004 	addi	r5,r5,16960
1001248c:	e13ffd17 	ldw	r4,-12(fp)
10012490:	000e52c0 	call	1000e52c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10012494:	100b883a 	mov	r5,r2
10012498:	0100bef4 	movhi	r4,763
1001249c:	213c2004 	addi	r4,r4,-3968
100124a0:	0003fb00 	call	10003fb0 <__udivsi3>
100124a4:	100b883a 	mov	r5,r2
100124a8:	01200034 	movhi	r4,32768
100124ac:	213fffc4 	addi	r4,r4,-1
100124b0:	0003fb00 	call	10003fb0 <__udivsi3>
100124b4:	1007883a 	mov	r3,r2
100124b8:	e0bfff17 	ldw	r2,-4(fp)
100124bc:	10c5c83a 	sub	r2,r2,r3
100124c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100124c4:	e0bffc17 	ldw	r2,-16(fp)
100124c8:	10800044 	addi	r2,r2,1
100124cc:	e0bffc15 	stw	r2,-16(fp)
100124d0:	e0fffc17 	ldw	r3,-16(fp)
100124d4:	e0bffe17 	ldw	r2,-8(fp)
100124d8:	18bfe616 	blt	r3,r2,10012474 <__alt_data_end+0xf8012474>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100124dc:	014003f4 	movhi	r5,15
100124e0:	29509004 	addi	r5,r5,16960
100124e4:	e13ffd17 	ldw	r4,-12(fp)
100124e8:	000e52c0 	call	1000e52c <__mulsi3>
100124ec:	100b883a 	mov	r5,r2
100124f0:	0100bef4 	movhi	r4,763
100124f4:	213c2004 	addi	r4,r4,-3968
100124f8:	0003fb00 	call	10003fb0 <__udivsi3>
100124fc:	e17fff17 	ldw	r5,-4(fp)
10012500:	1009883a 	mov	r4,r2
10012504:	000e52c0 	call	1000e52c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012508:	10bfffc4 	addi	r2,r2,-1
1001250c:	103ffe1e 	bne	r2,zero,10012508 <__alt_data_end+0xf8012508>
10012510:	00000d06 	br	10012548 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012514:	014003f4 	movhi	r5,15
10012518:	29509004 	addi	r5,r5,16960
1001251c:	e13ffd17 	ldw	r4,-12(fp)
10012520:	000e52c0 	call	1000e52c <__mulsi3>
10012524:	100b883a 	mov	r5,r2
10012528:	0100bef4 	movhi	r4,763
1001252c:	213c2004 	addi	r4,r4,-3968
10012530:	0003fb00 	call	10003fb0 <__udivsi3>
10012534:	e17fff17 	ldw	r5,-4(fp)
10012538:	1009883a 	mov	r4,r2
1001253c:	000e52c0 	call	1000e52c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012540:	10bfffc4 	addi	r2,r2,-1
10012544:	00bffe16 	blt	zero,r2,10012540 <__alt_data_end+0xf8012540>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10012548:	0005883a 	mov	r2,zero
}
1001254c:	e037883a 	mov	sp,fp
10012550:	dfc00117 	ldw	ra,4(sp)
10012554:	df000017 	ldw	fp,0(sp)
10012558:	dec00204 	addi	sp,sp,8
1001255c:	f800283a 	ret

10012560 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10012560:	deffff04 	addi	sp,sp,-4
10012564:	df000015 	stw	fp,0(sp)
10012568:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001256c:	0001883a 	nop
10012570:	e037883a 	mov	sp,fp
10012574:	df000017 	ldw	fp,0(sp)
10012578:	dec00104 	addi	sp,sp,4
1001257c:	f800283a 	ret

10012580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012580:	defffe04 	addi	sp,sp,-8
10012584:	dfc00115 	stw	ra,4(sp)
10012588:	df000015 	stw	fp,0(sp)
1001258c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012590:	d0a00b17 	ldw	r2,-32724(gp)
10012594:	10000326 	beq	r2,zero,100125a4 <alt_get_errno+0x24>
10012598:	d0a00b17 	ldw	r2,-32724(gp)
1001259c:	103ee83a 	callr	r2
100125a0:	00000106 	br	100125a8 <alt_get_errno+0x28>
100125a4:	d0a6d404 	addi	r2,gp,-25776
}
100125a8:	e037883a 	mov	sp,fp
100125ac:	dfc00117 	ldw	ra,4(sp)
100125b0:	df000017 	ldw	fp,0(sp)
100125b4:	dec00204 	addi	sp,sp,8
100125b8:	f800283a 	ret

100125bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100125bc:	defffa04 	addi	sp,sp,-24
100125c0:	dfc00515 	stw	ra,20(sp)
100125c4:	df000415 	stw	fp,16(sp)
100125c8:	df000404 	addi	fp,sp,16
100125cc:	e13ffe15 	stw	r4,-8(fp)
100125d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100125d4:	e0bffe17 	ldw	r2,-8(fp)
100125d8:	10000326 	beq	r2,zero,100125e8 <alt_dev_llist_insert+0x2c>
100125dc:	e0bffe17 	ldw	r2,-8(fp)
100125e0:	10800217 	ldw	r2,8(r2)
100125e4:	1000061e 	bne	r2,zero,10012600 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100125e8:	00125800 	call	10012580 <alt_get_errno>
100125ec:	1007883a 	mov	r3,r2
100125f0:	00800584 	movi	r2,22
100125f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100125f8:	00bffa84 	movi	r2,-22
100125fc:	00001306 	br	1001264c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10012600:	e0bffe17 	ldw	r2,-8(fp)
10012604:	e0ffff17 	ldw	r3,-4(fp)
10012608:	e0fffc15 	stw	r3,-16(fp)
1001260c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012610:	e0bffd17 	ldw	r2,-12(fp)
10012614:	e0fffc17 	ldw	r3,-16(fp)
10012618:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001261c:	e0bffc17 	ldw	r2,-16(fp)
10012620:	10c00017 	ldw	r3,0(r2)
10012624:	e0bffd17 	ldw	r2,-12(fp)
10012628:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001262c:	e0bffc17 	ldw	r2,-16(fp)
10012630:	10800017 	ldw	r2,0(r2)
10012634:	e0fffd17 	ldw	r3,-12(fp)
10012638:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001263c:	e0bffc17 	ldw	r2,-16(fp)
10012640:	e0fffd17 	ldw	r3,-12(fp)
10012644:	10c00015 	stw	r3,0(r2)

  return 0;  
10012648:	0005883a 	mov	r2,zero
}
1001264c:	e037883a 	mov	sp,fp
10012650:	dfc00117 	ldw	ra,4(sp)
10012654:	df000017 	ldw	fp,0(sp)
10012658:	dec00204 	addi	sp,sp,8
1001265c:	f800283a 	ret

10012660 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10012660:	defffd04 	addi	sp,sp,-12
10012664:	dfc00215 	stw	ra,8(sp)
10012668:	df000115 	stw	fp,4(sp)
1001266c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012670:	00840074 	movhi	r2,4097
10012674:	108d8504 	addi	r2,r2,13844
10012678:	e0bfff15 	stw	r2,-4(fp)
1001267c:	00000606 	br	10012698 <_do_ctors+0x38>
        (*ctor) (); 
10012680:	e0bfff17 	ldw	r2,-4(fp)
10012684:	10800017 	ldw	r2,0(r2)
10012688:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001268c:	e0bfff17 	ldw	r2,-4(fp)
10012690:	10bfff04 	addi	r2,r2,-4
10012694:	e0bfff15 	stw	r2,-4(fp)
10012698:	e0ffff17 	ldw	r3,-4(fp)
1001269c:	00840074 	movhi	r2,4097
100126a0:	108d8604 	addi	r2,r2,13848
100126a4:	18bff62e 	bgeu	r3,r2,10012680 <__alt_data_end+0xf8012680>
        (*ctor) (); 
}
100126a8:	0001883a 	nop
100126ac:	e037883a 	mov	sp,fp
100126b0:	dfc00117 	ldw	ra,4(sp)
100126b4:	df000017 	ldw	fp,0(sp)
100126b8:	dec00204 	addi	sp,sp,8
100126bc:	f800283a 	ret

100126c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100126c0:	defffd04 	addi	sp,sp,-12
100126c4:	dfc00215 	stw	ra,8(sp)
100126c8:	df000115 	stw	fp,4(sp)
100126cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100126d0:	00840074 	movhi	r2,4097
100126d4:	108d8504 	addi	r2,r2,13844
100126d8:	e0bfff15 	stw	r2,-4(fp)
100126dc:	00000606 	br	100126f8 <_do_dtors+0x38>
        (*dtor) (); 
100126e0:	e0bfff17 	ldw	r2,-4(fp)
100126e4:	10800017 	ldw	r2,0(r2)
100126e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100126ec:	e0bfff17 	ldw	r2,-4(fp)
100126f0:	10bfff04 	addi	r2,r2,-4
100126f4:	e0bfff15 	stw	r2,-4(fp)
100126f8:	e0ffff17 	ldw	r3,-4(fp)
100126fc:	00840074 	movhi	r2,4097
10012700:	108d8604 	addi	r2,r2,13848
10012704:	18bff62e 	bgeu	r3,r2,100126e0 <__alt_data_end+0xf80126e0>
        (*dtor) (); 
}
10012708:	0001883a 	nop
1001270c:	e037883a 	mov	sp,fp
10012710:	dfc00117 	ldw	ra,4(sp)
10012714:	df000017 	ldw	fp,0(sp)
10012718:	dec00204 	addi	sp,sp,8
1001271c:	f800283a 	ret

10012720 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10012720:	deffff04 	addi	sp,sp,-4
10012724:	df000015 	stw	fp,0(sp)
10012728:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001272c:	0001883a 	nop
10012730:	e037883a 	mov	sp,fp
10012734:	df000017 	ldw	fp,0(sp)
10012738:	dec00104 	addi	sp,sp,4
1001273c:	f800283a 	ret

10012740 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10012740:	defff904 	addi	sp,sp,-28
10012744:	dfc00615 	stw	ra,24(sp)
10012748:	df000515 	stw	fp,20(sp)
1001274c:	df000504 	addi	fp,sp,20
10012750:	e13ffc15 	stw	r4,-16(fp)
10012754:	e17ffd15 	stw	r5,-12(fp)
10012758:	e1bffe15 	stw	r6,-8(fp)
1001275c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10012760:	e0800217 	ldw	r2,8(fp)
10012764:	d8800015 	stw	r2,0(sp)
10012768:	e1ffff17 	ldw	r7,-4(fp)
1001276c:	e1bffe17 	ldw	r6,-8(fp)
10012770:	e17ffd17 	ldw	r5,-12(fp)
10012774:	e13ffc17 	ldw	r4,-16(fp)
10012778:	00128f00 	call	100128f0 <alt_iic_isr_register>
}  
1001277c:	e037883a 	mov	sp,fp
10012780:	dfc00117 	ldw	ra,4(sp)
10012784:	df000017 	ldw	fp,0(sp)
10012788:	dec00204 	addi	sp,sp,8
1001278c:	f800283a 	ret

10012790 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10012790:	defff904 	addi	sp,sp,-28
10012794:	df000615 	stw	fp,24(sp)
10012798:	df000604 	addi	fp,sp,24
1001279c:	e13ffe15 	stw	r4,-8(fp)
100127a0:	e17fff15 	stw	r5,-4(fp)
100127a4:	e0bfff17 	ldw	r2,-4(fp)
100127a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100127ac:	0005303a 	rdctl	r2,status
100127b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100127b4:	e0fffb17 	ldw	r3,-20(fp)
100127b8:	00bfff84 	movi	r2,-2
100127bc:	1884703a 	and	r2,r3,r2
100127c0:	1001703a 	wrctl	status,r2
  
  return context;
100127c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100127c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100127cc:	00c00044 	movi	r3,1
100127d0:	e0bffa17 	ldw	r2,-24(fp)
100127d4:	1884983a 	sll	r2,r3,r2
100127d8:	1007883a 	mov	r3,r2
100127dc:	d0a6d817 	ldw	r2,-25760(gp)
100127e0:	1884b03a 	or	r2,r3,r2
100127e4:	d0a6d815 	stw	r2,-25760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100127e8:	d0a6d817 	ldw	r2,-25760(gp)
100127ec:	100170fa 	wrctl	ienable,r2
100127f0:	e0bffc17 	ldw	r2,-16(fp)
100127f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100127f8:	e0bffd17 	ldw	r2,-12(fp)
100127fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012800:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10012804:	0001883a 	nop
}
10012808:	e037883a 	mov	sp,fp
1001280c:	df000017 	ldw	fp,0(sp)
10012810:	dec00104 	addi	sp,sp,4
10012814:	f800283a 	ret

10012818 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10012818:	defff904 	addi	sp,sp,-28
1001281c:	df000615 	stw	fp,24(sp)
10012820:	df000604 	addi	fp,sp,24
10012824:	e13ffe15 	stw	r4,-8(fp)
10012828:	e17fff15 	stw	r5,-4(fp)
1001282c:	e0bfff17 	ldw	r2,-4(fp)
10012830:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012834:	0005303a 	rdctl	r2,status
10012838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001283c:	e0fffb17 	ldw	r3,-20(fp)
10012840:	00bfff84 	movi	r2,-2
10012844:	1884703a 	and	r2,r3,r2
10012848:	1001703a 	wrctl	status,r2
  
  return context;
1001284c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012850:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10012854:	00c00044 	movi	r3,1
10012858:	e0bffa17 	ldw	r2,-24(fp)
1001285c:	1884983a 	sll	r2,r3,r2
10012860:	0084303a 	nor	r2,zero,r2
10012864:	1007883a 	mov	r3,r2
10012868:	d0a6d817 	ldw	r2,-25760(gp)
1001286c:	1884703a 	and	r2,r3,r2
10012870:	d0a6d815 	stw	r2,-25760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012874:	d0a6d817 	ldw	r2,-25760(gp)
10012878:	100170fa 	wrctl	ienable,r2
1001287c:	e0bffc17 	ldw	r2,-16(fp)
10012880:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012884:	e0bffd17 	ldw	r2,-12(fp)
10012888:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001288c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10012890:	0001883a 	nop
}
10012894:	e037883a 	mov	sp,fp
10012898:	df000017 	ldw	fp,0(sp)
1001289c:	dec00104 	addi	sp,sp,4
100128a0:	f800283a 	ret

100128a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100128a4:	defffc04 	addi	sp,sp,-16
100128a8:	df000315 	stw	fp,12(sp)
100128ac:	df000304 	addi	fp,sp,12
100128b0:	e13ffe15 	stw	r4,-8(fp)
100128b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100128b8:	000530fa 	rdctl	r2,ienable
100128bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100128c0:	00c00044 	movi	r3,1
100128c4:	e0bfff17 	ldw	r2,-4(fp)
100128c8:	1884983a 	sll	r2,r3,r2
100128cc:	1007883a 	mov	r3,r2
100128d0:	e0bffd17 	ldw	r2,-12(fp)
100128d4:	1884703a 	and	r2,r3,r2
100128d8:	1004c03a 	cmpne	r2,r2,zero
100128dc:	10803fcc 	andi	r2,r2,255
}
100128e0:	e037883a 	mov	sp,fp
100128e4:	df000017 	ldw	fp,0(sp)
100128e8:	dec00104 	addi	sp,sp,4
100128ec:	f800283a 	ret

100128f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100128f0:	defff504 	addi	sp,sp,-44
100128f4:	dfc00a15 	stw	ra,40(sp)
100128f8:	df000915 	stw	fp,36(sp)
100128fc:	df000904 	addi	fp,sp,36
10012900:	e13ffc15 	stw	r4,-16(fp)
10012904:	e17ffd15 	stw	r5,-12(fp)
10012908:	e1bffe15 	stw	r6,-8(fp)
1001290c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10012910:	00bffa84 	movi	r2,-22
10012914:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10012918:	e0bffd17 	ldw	r2,-12(fp)
1001291c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10012920:	e0bff817 	ldw	r2,-32(fp)
10012924:	10800808 	cmpgei	r2,r2,32
10012928:	1000271e 	bne	r2,zero,100129c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001292c:	0005303a 	rdctl	r2,status
10012930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012934:	e0fffb17 	ldw	r3,-20(fp)
10012938:	00bfff84 	movi	r2,-2
1001293c:	1884703a 	and	r2,r3,r2
10012940:	1001703a 	wrctl	status,r2
  
  return context;
10012944:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10012948:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1001294c:	00840074 	movhi	r2,4097
10012950:	109e8104 	addi	r2,r2,31236
10012954:	e0fff817 	ldw	r3,-32(fp)
10012958:	180690fa 	slli	r3,r3,3
1001295c:	10c5883a 	add	r2,r2,r3
10012960:	e0fffe17 	ldw	r3,-8(fp)
10012964:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10012968:	00840074 	movhi	r2,4097
1001296c:	109e8104 	addi	r2,r2,31236
10012970:	e0fff817 	ldw	r3,-32(fp)
10012974:	180690fa 	slli	r3,r3,3
10012978:	10c5883a 	add	r2,r2,r3
1001297c:	10800104 	addi	r2,r2,4
10012980:	e0ffff17 	ldw	r3,-4(fp)
10012984:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10012988:	e0bffe17 	ldw	r2,-8(fp)
1001298c:	10000526 	beq	r2,zero,100129a4 <alt_iic_isr_register+0xb4>
10012990:	e0bff817 	ldw	r2,-32(fp)
10012994:	100b883a 	mov	r5,r2
10012998:	e13ffc17 	ldw	r4,-16(fp)
1001299c:	00127900 	call	10012790 <alt_ic_irq_enable>
100129a0:	00000406 	br	100129b4 <alt_iic_isr_register+0xc4>
100129a4:	e0bff817 	ldw	r2,-32(fp)
100129a8:	100b883a 	mov	r5,r2
100129ac:	e13ffc17 	ldw	r4,-16(fp)
100129b0:	00128180 	call	10012818 <alt_ic_irq_disable>
100129b4:	e0bff715 	stw	r2,-36(fp)
100129b8:	e0bffa17 	ldw	r2,-24(fp)
100129bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100129c0:	e0bff917 	ldw	r2,-28(fp)
100129c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100129c8:	e0bff717 	ldw	r2,-36(fp)
}
100129cc:	e037883a 	mov	sp,fp
100129d0:	dfc00117 	ldw	ra,4(sp)
100129d4:	df000017 	ldw	fp,0(sp)
100129d8:	dec00204 	addi	sp,sp,8
100129dc:	f800283a 	ret

100129e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100129e0:	defff804 	addi	sp,sp,-32
100129e4:	dfc00715 	stw	ra,28(sp)
100129e8:	df000615 	stw	fp,24(sp)
100129ec:	dc000515 	stw	r16,20(sp)
100129f0:	df000604 	addi	fp,sp,24
100129f4:	e13ffb15 	stw	r4,-20(fp)
100129f8:	e17ffc15 	stw	r5,-16(fp)
100129fc:	e1bffd15 	stw	r6,-12(fp)
10012a00:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10012a04:	e1bffe17 	ldw	r6,-8(fp)
10012a08:	e17ffd17 	ldw	r5,-12(fp)
10012a0c:	e13ffc17 	ldw	r4,-16(fp)
10012a10:	0012c680 	call	10012c68 <open>
10012a14:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10012a18:	e0bffa17 	ldw	r2,-24(fp)
10012a1c:	10002216 	blt	r2,zero,10012aa8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10012a20:	04040074 	movhi	r16,4097
10012a24:	84124f04 	addi	r16,r16,18748
10012a28:	e0bffa17 	ldw	r2,-24(fp)
10012a2c:	01400304 	movi	r5,12
10012a30:	1009883a 	mov	r4,r2
10012a34:	000e52c0 	call	1000e52c <__mulsi3>
10012a38:	8085883a 	add	r2,r16,r2
10012a3c:	10c00017 	ldw	r3,0(r2)
10012a40:	e0bffb17 	ldw	r2,-20(fp)
10012a44:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10012a48:	04040074 	movhi	r16,4097
10012a4c:	84124f04 	addi	r16,r16,18748
10012a50:	e0bffa17 	ldw	r2,-24(fp)
10012a54:	01400304 	movi	r5,12
10012a58:	1009883a 	mov	r4,r2
10012a5c:	000e52c0 	call	1000e52c <__mulsi3>
10012a60:	8085883a 	add	r2,r16,r2
10012a64:	10800104 	addi	r2,r2,4
10012a68:	10c00017 	ldw	r3,0(r2)
10012a6c:	e0bffb17 	ldw	r2,-20(fp)
10012a70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10012a74:	04040074 	movhi	r16,4097
10012a78:	84124f04 	addi	r16,r16,18748
10012a7c:	e0bffa17 	ldw	r2,-24(fp)
10012a80:	01400304 	movi	r5,12
10012a84:	1009883a 	mov	r4,r2
10012a88:	000e52c0 	call	1000e52c <__mulsi3>
10012a8c:	8085883a 	add	r2,r16,r2
10012a90:	10800204 	addi	r2,r2,8
10012a94:	10c00017 	ldw	r3,0(r2)
10012a98:	e0bffb17 	ldw	r2,-20(fp)
10012a9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10012aa0:	e13ffa17 	ldw	r4,-24(fp)
10012aa4:	001151c0 	call	1001151c <alt_release_fd>
  }
} 
10012aa8:	0001883a 	nop
10012aac:	e6ffff04 	addi	sp,fp,-4
10012ab0:	dfc00217 	ldw	ra,8(sp)
10012ab4:	df000117 	ldw	fp,4(sp)
10012ab8:	dc000017 	ldw	r16,0(sp)
10012abc:	dec00304 	addi	sp,sp,12
10012ac0:	f800283a 	ret

10012ac4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10012ac4:	defffb04 	addi	sp,sp,-20
10012ac8:	dfc00415 	stw	ra,16(sp)
10012acc:	df000315 	stw	fp,12(sp)
10012ad0:	df000304 	addi	fp,sp,12
10012ad4:	e13ffd15 	stw	r4,-12(fp)
10012ad8:	e17ffe15 	stw	r5,-8(fp)
10012adc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10012ae0:	01c07fc4 	movi	r7,511
10012ae4:	01800044 	movi	r6,1
10012ae8:	e17ffd17 	ldw	r5,-12(fp)
10012aec:	01040074 	movhi	r4,4097
10012af0:	21125204 	addi	r4,r4,18760
10012af4:	00129e00 	call	100129e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10012af8:	01c07fc4 	movi	r7,511
10012afc:	000d883a 	mov	r6,zero
10012b00:	e17ffe17 	ldw	r5,-8(fp)
10012b04:	01040074 	movhi	r4,4097
10012b08:	21124f04 	addi	r4,r4,18748
10012b0c:	00129e00 	call	100129e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10012b10:	01c07fc4 	movi	r7,511
10012b14:	01800044 	movi	r6,1
10012b18:	e17fff17 	ldw	r5,-4(fp)
10012b1c:	01040074 	movhi	r4,4097
10012b20:	21125504 	addi	r4,r4,18772
10012b24:	00129e00 	call	100129e0 <alt_open_fd>
}  
10012b28:	0001883a 	nop
10012b2c:	e037883a 	mov	sp,fp
10012b30:	dfc00117 	ldw	ra,4(sp)
10012b34:	df000017 	ldw	fp,0(sp)
10012b38:	dec00204 	addi	sp,sp,8
10012b3c:	f800283a 	ret

10012b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012b40:	defffe04 	addi	sp,sp,-8
10012b44:	dfc00115 	stw	ra,4(sp)
10012b48:	df000015 	stw	fp,0(sp)
10012b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012b50:	d0a00b17 	ldw	r2,-32724(gp)
10012b54:	10000326 	beq	r2,zero,10012b64 <alt_get_errno+0x24>
10012b58:	d0a00b17 	ldw	r2,-32724(gp)
10012b5c:	103ee83a 	callr	r2
10012b60:	00000106 	br	10012b68 <alt_get_errno+0x28>
10012b64:	d0a6d404 	addi	r2,gp,-25776
}
10012b68:	e037883a 	mov	sp,fp
10012b6c:	dfc00117 	ldw	ra,4(sp)
10012b70:	df000017 	ldw	fp,0(sp)
10012b74:	dec00204 	addi	sp,sp,8
10012b78:	f800283a 	ret

10012b7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10012b7c:	defffb04 	addi	sp,sp,-20
10012b80:	dfc00415 	stw	ra,16(sp)
10012b84:	df000315 	stw	fp,12(sp)
10012b88:	dc000215 	stw	r16,8(sp)
10012b8c:	df000304 	addi	fp,sp,12
10012b90:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10012b94:	e0bffe17 	ldw	r2,-8(fp)
10012b98:	10800217 	ldw	r2,8(r2)
10012b9c:	10d00034 	orhi	r3,r2,16384
10012ba0:	e0bffe17 	ldw	r2,-8(fp)
10012ba4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012ba8:	e03ffd15 	stw	zero,-12(fp)
10012bac:	00002306 	br	10012c3c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012bb0:	04040074 	movhi	r16,4097
10012bb4:	84124f04 	addi	r16,r16,18748
10012bb8:	e0bffd17 	ldw	r2,-12(fp)
10012bbc:	01400304 	movi	r5,12
10012bc0:	1009883a 	mov	r4,r2
10012bc4:	000e52c0 	call	1000e52c <__mulsi3>
10012bc8:	8085883a 	add	r2,r16,r2
10012bcc:	10c00017 	ldw	r3,0(r2)
10012bd0:	e0bffe17 	ldw	r2,-8(fp)
10012bd4:	10800017 	ldw	r2,0(r2)
10012bd8:	1880151e 	bne	r3,r2,10012c30 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012bdc:	04040074 	movhi	r16,4097
10012be0:	84124f04 	addi	r16,r16,18748
10012be4:	e0bffd17 	ldw	r2,-12(fp)
10012be8:	01400304 	movi	r5,12
10012bec:	1009883a 	mov	r4,r2
10012bf0:	000e52c0 	call	1000e52c <__mulsi3>
10012bf4:	8085883a 	add	r2,r16,r2
10012bf8:	10800204 	addi	r2,r2,8
10012bfc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012c00:	10000b0e 	bge	r2,zero,10012c30 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10012c04:	01400304 	movi	r5,12
10012c08:	e13ffd17 	ldw	r4,-12(fp)
10012c0c:	000e52c0 	call	1000e52c <__mulsi3>
10012c10:	1007883a 	mov	r3,r2
10012c14:	00840074 	movhi	r2,4097
10012c18:	10924f04 	addi	r2,r2,18748
10012c1c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012c20:	e0bffe17 	ldw	r2,-8(fp)
10012c24:	18800226 	beq	r3,r2,10012c30 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10012c28:	00bffcc4 	movi	r2,-13
10012c2c:	00000806 	br	10012c50 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012c30:	e0bffd17 	ldw	r2,-12(fp)
10012c34:	10800044 	addi	r2,r2,1
10012c38:	e0bffd15 	stw	r2,-12(fp)
10012c3c:	d0a00a17 	ldw	r2,-32728(gp)
10012c40:	1007883a 	mov	r3,r2
10012c44:	e0bffd17 	ldw	r2,-12(fp)
10012c48:	18bfd92e 	bgeu	r3,r2,10012bb0 <__alt_data_end+0xf8012bb0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10012c4c:	0005883a 	mov	r2,zero
}
10012c50:	e6ffff04 	addi	sp,fp,-4
10012c54:	dfc00217 	ldw	ra,8(sp)
10012c58:	df000117 	ldw	fp,4(sp)
10012c5c:	dc000017 	ldw	r16,0(sp)
10012c60:	dec00304 	addi	sp,sp,12
10012c64:	f800283a 	ret

10012c68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10012c68:	defff604 	addi	sp,sp,-40
10012c6c:	dfc00915 	stw	ra,36(sp)
10012c70:	df000815 	stw	fp,32(sp)
10012c74:	df000804 	addi	fp,sp,32
10012c78:	e13ffd15 	stw	r4,-12(fp)
10012c7c:	e17ffe15 	stw	r5,-8(fp)
10012c80:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10012c84:	00bfffc4 	movi	r2,-1
10012c88:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10012c8c:	00bffb44 	movi	r2,-19
10012c90:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10012c94:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10012c98:	d1600804 	addi	r5,gp,-32736
10012c9c:	e13ffd17 	ldw	r4,-12(fp)
10012ca0:	0012f8c0 	call	10012f8c <alt_find_dev>
10012ca4:	e0bff815 	stw	r2,-32(fp)
10012ca8:	e0bff817 	ldw	r2,-32(fp)
10012cac:	1000051e 	bne	r2,zero,10012cc4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10012cb0:	e13ffd17 	ldw	r4,-12(fp)
10012cb4:	001301c0 	call	1001301c <alt_find_file>
10012cb8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10012cbc:	00800044 	movi	r2,1
10012cc0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10012cc4:	e0bff817 	ldw	r2,-32(fp)
10012cc8:	10002b26 	beq	r2,zero,10012d78 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10012ccc:	e13ff817 	ldw	r4,-32(fp)
10012cd0:	00131240 	call	10013124 <alt_get_fd>
10012cd4:	e0bff915 	stw	r2,-28(fp)
10012cd8:	e0bff917 	ldw	r2,-28(fp)
10012cdc:	1000030e 	bge	r2,zero,10012cec <open+0x84>
    {
      status = index;
10012ce0:	e0bff917 	ldw	r2,-28(fp)
10012ce4:	e0bffa15 	stw	r2,-24(fp)
10012ce8:	00002506 	br	10012d80 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10012cec:	01400304 	movi	r5,12
10012cf0:	e13ff917 	ldw	r4,-28(fp)
10012cf4:	000e52c0 	call	1000e52c <__mulsi3>
10012cf8:	1007883a 	mov	r3,r2
10012cfc:	00840074 	movhi	r2,4097
10012d00:	10924f04 	addi	r2,r2,18748
10012d04:	1885883a 	add	r2,r3,r2
10012d08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10012d0c:	e0fffe17 	ldw	r3,-8(fp)
10012d10:	00900034 	movhi	r2,16384
10012d14:	10bfffc4 	addi	r2,r2,-1
10012d18:	1886703a 	and	r3,r3,r2
10012d1c:	e0bffc17 	ldw	r2,-16(fp)
10012d20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10012d24:	e0bffb17 	ldw	r2,-20(fp)
10012d28:	1000051e 	bne	r2,zero,10012d40 <open+0xd8>
10012d2c:	e13ffc17 	ldw	r4,-16(fp)
10012d30:	0012b7c0 	call	10012b7c <alt_file_locked>
10012d34:	e0bffa15 	stw	r2,-24(fp)
10012d38:	e0bffa17 	ldw	r2,-24(fp)
10012d3c:	10001016 	blt	r2,zero,10012d80 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10012d40:	e0bff817 	ldw	r2,-32(fp)
10012d44:	10800317 	ldw	r2,12(r2)
10012d48:	10000826 	beq	r2,zero,10012d6c <open+0x104>
10012d4c:	e0bff817 	ldw	r2,-32(fp)
10012d50:	10800317 	ldw	r2,12(r2)
10012d54:	e1ffff17 	ldw	r7,-4(fp)
10012d58:	e1bffe17 	ldw	r6,-8(fp)
10012d5c:	e17ffd17 	ldw	r5,-12(fp)
10012d60:	e13ffc17 	ldw	r4,-16(fp)
10012d64:	103ee83a 	callr	r2
10012d68:	00000106 	br	10012d70 <open+0x108>
10012d6c:	0005883a 	mov	r2,zero
10012d70:	e0bffa15 	stw	r2,-24(fp)
10012d74:	00000206 	br	10012d80 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10012d78:	00bffb44 	movi	r2,-19
10012d7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10012d80:	e0bffa17 	ldw	r2,-24(fp)
10012d84:	1000090e 	bge	r2,zero,10012dac <open+0x144>
  {
    alt_release_fd (index);  
10012d88:	e13ff917 	ldw	r4,-28(fp)
10012d8c:	001151c0 	call	1001151c <alt_release_fd>
    ALT_ERRNO = -status;
10012d90:	0012b400 	call	10012b40 <alt_get_errno>
10012d94:	1007883a 	mov	r3,r2
10012d98:	e0bffa17 	ldw	r2,-24(fp)
10012d9c:	0085c83a 	sub	r2,zero,r2
10012da0:	18800015 	stw	r2,0(r3)
    return -1;
10012da4:	00bfffc4 	movi	r2,-1
10012da8:	00000106 	br	10012db0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10012dac:	e0bff917 	ldw	r2,-28(fp)
}
10012db0:	e037883a 	mov	sp,fp
10012db4:	dfc00117 	ldw	ra,4(sp)
10012db8:	df000017 	ldw	fp,0(sp)
10012dbc:	dec00204 	addi	sp,sp,8
10012dc0:	f800283a 	ret

10012dc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012dc4:	defffa04 	addi	sp,sp,-24
10012dc8:	df000515 	stw	fp,20(sp)
10012dcc:	df000504 	addi	fp,sp,20
10012dd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012dd4:	0005303a 	rdctl	r2,status
10012dd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012ddc:	e0fffc17 	ldw	r3,-16(fp)
10012de0:	00bfff84 	movi	r2,-2
10012de4:	1884703a 	and	r2,r3,r2
10012de8:	1001703a 	wrctl	status,r2
  
  return context;
10012dec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10012df0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10012df4:	e0bfff17 	ldw	r2,-4(fp)
10012df8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10012dfc:	e0bffd17 	ldw	r2,-12(fp)
10012e00:	10800017 	ldw	r2,0(r2)
10012e04:	e0fffd17 	ldw	r3,-12(fp)
10012e08:	18c00117 	ldw	r3,4(r3)
10012e0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10012e10:	e0bffd17 	ldw	r2,-12(fp)
10012e14:	10800117 	ldw	r2,4(r2)
10012e18:	e0fffd17 	ldw	r3,-12(fp)
10012e1c:	18c00017 	ldw	r3,0(r3)
10012e20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012e24:	e0bffd17 	ldw	r2,-12(fp)
10012e28:	e0fffd17 	ldw	r3,-12(fp)
10012e2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012e30:	e0bffd17 	ldw	r2,-12(fp)
10012e34:	e0fffd17 	ldw	r3,-12(fp)
10012e38:	10c00015 	stw	r3,0(r2)
10012e3c:	e0bffb17 	ldw	r2,-20(fp)
10012e40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012e44:	e0bffe17 	ldw	r2,-8(fp)
10012e48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012e4c:	0001883a 	nop
10012e50:	e037883a 	mov	sp,fp
10012e54:	df000017 	ldw	fp,0(sp)
10012e58:	dec00104 	addi	sp,sp,4
10012e5c:	f800283a 	ret

10012e60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012e60:	defffb04 	addi	sp,sp,-20
10012e64:	dfc00415 	stw	ra,16(sp)
10012e68:	df000315 	stw	fp,12(sp)
10012e6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012e70:	d0a00e17 	ldw	r2,-32712(gp)
10012e74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10012e78:	d0a6da17 	ldw	r2,-25752(gp)
10012e7c:	10800044 	addi	r2,r2,1
10012e80:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012e84:	00002e06 	br	10012f40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10012e88:	e0bffd17 	ldw	r2,-12(fp)
10012e8c:	10800017 	ldw	r2,0(r2)
10012e90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10012e94:	e0bffd17 	ldw	r2,-12(fp)
10012e98:	10800403 	ldbu	r2,16(r2)
10012e9c:	10803fcc 	andi	r2,r2,255
10012ea0:	10000426 	beq	r2,zero,10012eb4 <alt_tick+0x54>
10012ea4:	d0a6da17 	ldw	r2,-25752(gp)
10012ea8:	1000021e 	bne	r2,zero,10012eb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10012eac:	e0bffd17 	ldw	r2,-12(fp)
10012eb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10012eb4:	e0bffd17 	ldw	r2,-12(fp)
10012eb8:	10800217 	ldw	r2,8(r2)
10012ebc:	d0e6da17 	ldw	r3,-25752(gp)
10012ec0:	18801d36 	bltu	r3,r2,10012f38 <alt_tick+0xd8>
10012ec4:	e0bffd17 	ldw	r2,-12(fp)
10012ec8:	10800403 	ldbu	r2,16(r2)
10012ecc:	10803fcc 	andi	r2,r2,255
10012ed0:	1000191e 	bne	r2,zero,10012f38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10012ed4:	e0bffd17 	ldw	r2,-12(fp)
10012ed8:	10800317 	ldw	r2,12(r2)
10012edc:	e0fffd17 	ldw	r3,-12(fp)
10012ee0:	18c00517 	ldw	r3,20(r3)
10012ee4:	1809883a 	mov	r4,r3
10012ee8:	103ee83a 	callr	r2
10012eec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10012ef0:	e0bfff17 	ldw	r2,-4(fp)
10012ef4:	1000031e 	bne	r2,zero,10012f04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10012ef8:	e13ffd17 	ldw	r4,-12(fp)
10012efc:	0012dc40 	call	10012dc4 <alt_alarm_stop>
10012f00:	00000d06 	br	10012f38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10012f04:	e0bffd17 	ldw	r2,-12(fp)
10012f08:	10c00217 	ldw	r3,8(r2)
10012f0c:	e0bfff17 	ldw	r2,-4(fp)
10012f10:	1887883a 	add	r3,r3,r2
10012f14:	e0bffd17 	ldw	r2,-12(fp)
10012f18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10012f1c:	e0bffd17 	ldw	r2,-12(fp)
10012f20:	10c00217 	ldw	r3,8(r2)
10012f24:	d0a6da17 	ldw	r2,-25752(gp)
10012f28:	1880032e 	bgeu	r3,r2,10012f38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10012f2c:	e0bffd17 	ldw	r2,-12(fp)
10012f30:	00c00044 	movi	r3,1
10012f34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012f38:	e0bffe17 	ldw	r2,-8(fp)
10012f3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012f40:	e0fffd17 	ldw	r3,-12(fp)
10012f44:	d0a00e04 	addi	r2,gp,-32712
10012f48:	18bfcf1e 	bne	r3,r2,10012e88 <__alt_data_end+0xf8012e88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012f4c:	0001883a 	nop
}
10012f50:	0001883a 	nop
10012f54:	e037883a 	mov	sp,fp
10012f58:	dfc00117 	ldw	ra,4(sp)
10012f5c:	df000017 	ldw	fp,0(sp)
10012f60:	dec00204 	addi	sp,sp,8
10012f64:	f800283a 	ret

10012f68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10012f68:	deffff04 	addi	sp,sp,-4
10012f6c:	df000015 	stw	fp,0(sp)
10012f70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012f74:	000170fa 	wrctl	ienable,zero
}
10012f78:	0001883a 	nop
10012f7c:	e037883a 	mov	sp,fp
10012f80:	df000017 	ldw	fp,0(sp)
10012f84:	dec00104 	addi	sp,sp,4
10012f88:	f800283a 	ret

10012f8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10012f8c:	defffa04 	addi	sp,sp,-24
10012f90:	dfc00515 	stw	ra,20(sp)
10012f94:	df000415 	stw	fp,16(sp)
10012f98:	df000404 	addi	fp,sp,16
10012f9c:	e13ffe15 	stw	r4,-8(fp)
10012fa0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10012fa4:	e0bfff17 	ldw	r2,-4(fp)
10012fa8:	10800017 	ldw	r2,0(r2)
10012fac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10012fb0:	e13ffe17 	ldw	r4,-8(fp)
10012fb4:	00042d40 	call	100042d4 <strlen>
10012fb8:	10800044 	addi	r2,r2,1
10012fbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012fc0:	00000d06 	br	10012ff8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10012fc4:	e0bffc17 	ldw	r2,-16(fp)
10012fc8:	10800217 	ldw	r2,8(r2)
10012fcc:	e0fffd17 	ldw	r3,-12(fp)
10012fd0:	180d883a 	mov	r6,r3
10012fd4:	e17ffe17 	ldw	r5,-8(fp)
10012fd8:	1009883a 	mov	r4,r2
10012fdc:	00132d00 	call	100132d0 <memcmp>
10012fe0:	1000021e 	bne	r2,zero,10012fec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10012fe4:	e0bffc17 	ldw	r2,-16(fp)
10012fe8:	00000706 	br	10013008 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10012fec:	e0bffc17 	ldw	r2,-16(fp)
10012ff0:	10800017 	ldw	r2,0(r2)
10012ff4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012ff8:	e0fffc17 	ldw	r3,-16(fp)
10012ffc:	e0bfff17 	ldw	r2,-4(fp)
10013000:	18bff01e 	bne	r3,r2,10012fc4 <__alt_data_end+0xf8012fc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10013004:	0005883a 	mov	r2,zero
}
10013008:	e037883a 	mov	sp,fp
1001300c:	dfc00117 	ldw	ra,4(sp)
10013010:	df000017 	ldw	fp,0(sp)
10013014:	dec00204 	addi	sp,sp,8
10013018:	f800283a 	ret

1001301c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001301c:	defffb04 	addi	sp,sp,-20
10013020:	dfc00415 	stw	ra,16(sp)
10013024:	df000315 	stw	fp,12(sp)
10013028:	df000304 	addi	fp,sp,12
1001302c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013030:	d0a00617 	ldw	r2,-32744(gp)
10013034:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013038:	00003106 	br	10013100 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1001303c:	e0bffd17 	ldw	r2,-12(fp)
10013040:	10800217 	ldw	r2,8(r2)
10013044:	1009883a 	mov	r4,r2
10013048:	00042d40 	call	100042d4 <strlen>
1001304c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013050:	e0bffd17 	ldw	r2,-12(fp)
10013054:	10c00217 	ldw	r3,8(r2)
10013058:	e0bffe17 	ldw	r2,-8(fp)
1001305c:	10bfffc4 	addi	r2,r2,-1
10013060:	1885883a 	add	r2,r3,r2
10013064:	10800003 	ldbu	r2,0(r2)
10013068:	10803fcc 	andi	r2,r2,255
1001306c:	1080201c 	xori	r2,r2,128
10013070:	10bfe004 	addi	r2,r2,-128
10013074:	10800bd8 	cmpnei	r2,r2,47
10013078:	1000031e 	bne	r2,zero,10013088 <alt_find_file+0x6c>
    {
      len -= 1;
1001307c:	e0bffe17 	ldw	r2,-8(fp)
10013080:	10bfffc4 	addi	r2,r2,-1
10013084:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013088:	e0bffe17 	ldw	r2,-8(fp)
1001308c:	e0ffff17 	ldw	r3,-4(fp)
10013090:	1885883a 	add	r2,r3,r2
10013094:	10800003 	ldbu	r2,0(r2)
10013098:	10803fcc 	andi	r2,r2,255
1001309c:	1080201c 	xori	r2,r2,128
100130a0:	10bfe004 	addi	r2,r2,-128
100130a4:	10800be0 	cmpeqi	r2,r2,47
100130a8:	1000081e 	bne	r2,zero,100130cc <alt_find_file+0xb0>
100130ac:	e0bffe17 	ldw	r2,-8(fp)
100130b0:	e0ffff17 	ldw	r3,-4(fp)
100130b4:	1885883a 	add	r2,r3,r2
100130b8:	10800003 	ldbu	r2,0(r2)
100130bc:	10803fcc 	andi	r2,r2,255
100130c0:	1080201c 	xori	r2,r2,128
100130c4:	10bfe004 	addi	r2,r2,-128
100130c8:	10000a1e 	bne	r2,zero,100130f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100130cc:	e0bffd17 	ldw	r2,-12(fp)
100130d0:	10800217 	ldw	r2,8(r2)
100130d4:	e0fffe17 	ldw	r3,-8(fp)
100130d8:	180d883a 	mov	r6,r3
100130dc:	e17fff17 	ldw	r5,-4(fp)
100130e0:	1009883a 	mov	r4,r2
100130e4:	00132d00 	call	100132d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100130e8:	1000021e 	bne	r2,zero,100130f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100130ec:	e0bffd17 	ldw	r2,-12(fp)
100130f0:	00000706 	br	10013110 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100130f4:	e0bffd17 	ldw	r2,-12(fp)
100130f8:	10800017 	ldw	r2,0(r2)
100130fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013100:	e0fffd17 	ldw	r3,-12(fp)
10013104:	d0a00604 	addi	r2,gp,-32744
10013108:	18bfcc1e 	bne	r3,r2,1001303c <__alt_data_end+0xf801303c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1001310c:	0005883a 	mov	r2,zero
}
10013110:	e037883a 	mov	sp,fp
10013114:	dfc00117 	ldw	ra,4(sp)
10013118:	df000017 	ldw	fp,0(sp)
1001311c:	dec00204 	addi	sp,sp,8
10013120:	f800283a 	ret

10013124 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10013124:	defffa04 	addi	sp,sp,-24
10013128:	dfc00515 	stw	ra,20(sp)
1001312c:	df000415 	stw	fp,16(sp)
10013130:	dc000315 	stw	r16,12(sp)
10013134:	df000404 	addi	fp,sp,16
10013138:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1001313c:	00bffa04 	movi	r2,-24
10013140:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013144:	e03ffc15 	stw	zero,-16(fp)
10013148:	00001d06 	br	100131c0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1001314c:	04040074 	movhi	r16,4097
10013150:	84124f04 	addi	r16,r16,18748
10013154:	e0bffc17 	ldw	r2,-16(fp)
10013158:	01400304 	movi	r5,12
1001315c:	1009883a 	mov	r4,r2
10013160:	000e52c0 	call	1000e52c <__mulsi3>
10013164:	8085883a 	add	r2,r16,r2
10013168:	10800017 	ldw	r2,0(r2)
1001316c:	1000111e 	bne	r2,zero,100131b4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013170:	04040074 	movhi	r16,4097
10013174:	84124f04 	addi	r16,r16,18748
10013178:	e0bffc17 	ldw	r2,-16(fp)
1001317c:	01400304 	movi	r5,12
10013180:	1009883a 	mov	r4,r2
10013184:	000e52c0 	call	1000e52c <__mulsi3>
10013188:	8085883a 	add	r2,r16,r2
1001318c:	e0fffe17 	ldw	r3,-8(fp)
10013190:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10013194:	d0e00a17 	ldw	r3,-32728(gp)
10013198:	e0bffc17 	ldw	r2,-16(fp)
1001319c:	1880020e 	bge	r3,r2,100131a8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100131a0:	e0bffc17 	ldw	r2,-16(fp)
100131a4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
100131a8:	e0bffc17 	ldw	r2,-16(fp)
100131ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100131b0:	00000606 	br	100131cc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100131b4:	e0bffc17 	ldw	r2,-16(fp)
100131b8:	10800044 	addi	r2,r2,1
100131bc:	e0bffc15 	stw	r2,-16(fp)
100131c0:	e0bffc17 	ldw	r2,-16(fp)
100131c4:	10800810 	cmplti	r2,r2,32
100131c8:	103fe01e 	bne	r2,zero,1001314c <__alt_data_end+0xf801314c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100131cc:	e0bffd17 	ldw	r2,-12(fp)
}
100131d0:	e6ffff04 	addi	sp,fp,-4
100131d4:	dfc00217 	ldw	ra,8(sp)
100131d8:	df000117 	ldw	fp,4(sp)
100131dc:	dc000017 	ldw	r16,0(sp)
100131e0:	dec00304 	addi	sp,sp,12
100131e4:	f800283a 	ret

100131e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100131e8:	defffe04 	addi	sp,sp,-8
100131ec:	df000115 	stw	fp,4(sp)
100131f0:	df000104 	addi	fp,sp,4
100131f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100131f8:	e0bfff17 	ldw	r2,-4(fp)
100131fc:	10bffe84 	addi	r2,r2,-6
10013200:	10c00428 	cmpgeui	r3,r2,16
10013204:	18001a1e 	bne	r3,zero,10013270 <alt_exception_cause_generated_bad_addr+0x88>
10013208:	100690ba 	slli	r3,r2,2
1001320c:	00840074 	movhi	r2,4097
10013210:	108c8804 	addi	r2,r2,12832
10013214:	1885883a 	add	r2,r3,r2
10013218:	10800017 	ldw	r2,0(r2)
1001321c:	1000683a 	jmp	r2
10013220:	10013260 	cmpeqi	zero,r2,1225
10013224:	10013260 	cmpeqi	zero,r2,1225
10013228:	10013270 	cmpltui	zero,r2,1225
1001322c:	10013270 	cmpltui	zero,r2,1225
10013230:	10013270 	cmpltui	zero,r2,1225
10013234:	10013260 	cmpeqi	zero,r2,1225
10013238:	10013268 	cmpgeui	zero,r2,1225
1001323c:	10013270 	cmpltui	zero,r2,1225
10013240:	10013260 	cmpeqi	zero,r2,1225
10013244:	10013260 	cmpeqi	zero,r2,1225
10013248:	10013270 	cmpltui	zero,r2,1225
1001324c:	10013260 	cmpeqi	zero,r2,1225
10013250:	10013268 	cmpgeui	zero,r2,1225
10013254:	10013270 	cmpltui	zero,r2,1225
10013258:	10013270 	cmpltui	zero,r2,1225
1001325c:	10013260 	cmpeqi	zero,r2,1225
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013260:	00800044 	movi	r2,1
10013264:	00000306 	br	10013274 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013268:	0005883a 	mov	r2,zero
1001326c:	00000106 	br	10013274 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013270:	0005883a 	mov	r2,zero
  }
}
10013274:	e037883a 	mov	sp,fp
10013278:	df000017 	ldw	fp,0(sp)
1001327c:	dec00104 	addi	sp,sp,4
10013280:	f800283a 	ret

10013284 <atexit>:
10013284:	200b883a 	mov	r5,r4
10013288:	000f883a 	mov	r7,zero
1001328c:	000d883a 	mov	r6,zero
10013290:	0009883a 	mov	r4,zero
10013294:	001334c1 	jmpi	1001334c <__register_exitproc>

10013298 <exit>:
10013298:	defffe04 	addi	sp,sp,-8
1001329c:	000b883a 	mov	r5,zero
100132a0:	dc000015 	stw	r16,0(sp)
100132a4:	dfc00115 	stw	ra,4(sp)
100132a8:	2021883a 	mov	r16,r4
100132ac:	00134640 	call	10013464 <__call_exitprocs>
100132b0:	00840074 	movhi	r2,4097
100132b4:	1096c704 	addi	r2,r2,23324
100132b8:	11000017 	ldw	r4,0(r2)
100132bc:	20800f17 	ldw	r2,60(r4)
100132c0:	10000126 	beq	r2,zero,100132c8 <exit+0x30>
100132c4:	103ee83a 	callr	r2
100132c8:	8009883a 	mov	r4,r16
100132cc:	00135e40 	call	100135e4 <_exit>

100132d0 <memcmp>:
100132d0:	01c000c4 	movi	r7,3
100132d4:	3980192e 	bgeu	r7,r6,1001333c <memcmp+0x6c>
100132d8:	2144b03a 	or	r2,r4,r5
100132dc:	11c4703a 	and	r2,r2,r7
100132e0:	10000f26 	beq	r2,zero,10013320 <memcmp+0x50>
100132e4:	20800003 	ldbu	r2,0(r4)
100132e8:	28c00003 	ldbu	r3,0(r5)
100132ec:	10c0151e 	bne	r2,r3,10013344 <memcmp+0x74>
100132f0:	31bfff84 	addi	r6,r6,-2
100132f4:	01ffffc4 	movi	r7,-1
100132f8:	00000406 	br	1001330c <memcmp+0x3c>
100132fc:	20800003 	ldbu	r2,0(r4)
10013300:	28c00003 	ldbu	r3,0(r5)
10013304:	31bfffc4 	addi	r6,r6,-1
10013308:	10c00e1e 	bne	r2,r3,10013344 <memcmp+0x74>
1001330c:	21000044 	addi	r4,r4,1
10013310:	29400044 	addi	r5,r5,1
10013314:	31fff91e 	bne	r6,r7,100132fc <__alt_data_end+0xf80132fc>
10013318:	0005883a 	mov	r2,zero
1001331c:	f800283a 	ret
10013320:	20c00017 	ldw	r3,0(r4)
10013324:	28800017 	ldw	r2,0(r5)
10013328:	18bfee1e 	bne	r3,r2,100132e4 <__alt_data_end+0xf80132e4>
1001332c:	31bfff04 	addi	r6,r6,-4
10013330:	21000104 	addi	r4,r4,4
10013334:	29400104 	addi	r5,r5,4
10013338:	39bff936 	bltu	r7,r6,10013320 <__alt_data_end+0xf8013320>
1001333c:	303fe91e 	bne	r6,zero,100132e4 <__alt_data_end+0xf80132e4>
10013340:	003ff506 	br	10013318 <__alt_data_end+0xf8013318>
10013344:	10c5c83a 	sub	r2,r2,r3
10013348:	f800283a 	ret

1001334c <__register_exitproc>:
1001334c:	defffa04 	addi	sp,sp,-24
10013350:	dc000315 	stw	r16,12(sp)
10013354:	04040074 	movhi	r16,4097
10013358:	8416c704 	addi	r16,r16,23324
1001335c:	80c00017 	ldw	r3,0(r16)
10013360:	dc400415 	stw	r17,16(sp)
10013364:	dfc00515 	stw	ra,20(sp)
10013368:	18805217 	ldw	r2,328(r3)
1001336c:	2023883a 	mov	r17,r4
10013370:	10003726 	beq	r2,zero,10013450 <__register_exitproc+0x104>
10013374:	10c00117 	ldw	r3,4(r2)
10013378:	010007c4 	movi	r4,31
1001337c:	20c00e16 	blt	r4,r3,100133b8 <__register_exitproc+0x6c>
10013380:	1a000044 	addi	r8,r3,1
10013384:	8800221e 	bne	r17,zero,10013410 <__register_exitproc+0xc4>
10013388:	18c00084 	addi	r3,r3,2
1001338c:	18c7883a 	add	r3,r3,r3
10013390:	18c7883a 	add	r3,r3,r3
10013394:	12000115 	stw	r8,4(r2)
10013398:	10c7883a 	add	r3,r2,r3
1001339c:	19400015 	stw	r5,0(r3)
100133a0:	0005883a 	mov	r2,zero
100133a4:	dfc00517 	ldw	ra,20(sp)
100133a8:	dc400417 	ldw	r17,16(sp)
100133ac:	dc000317 	ldw	r16,12(sp)
100133b0:	dec00604 	addi	sp,sp,24
100133b4:	f800283a 	ret
100133b8:	00800034 	movhi	r2,0
100133bc:	10800004 	addi	r2,r2,0
100133c0:	10002626 	beq	r2,zero,1001345c <__register_exitproc+0x110>
100133c4:	01006404 	movi	r4,400
100133c8:	d9400015 	stw	r5,0(sp)
100133cc:	d9800115 	stw	r6,4(sp)
100133d0:	d9c00215 	stw	r7,8(sp)
100133d4:	00000000 	call	10000000 <__alt_mem_sdram>
100133d8:	d9400017 	ldw	r5,0(sp)
100133dc:	d9800117 	ldw	r6,4(sp)
100133e0:	d9c00217 	ldw	r7,8(sp)
100133e4:	10001d26 	beq	r2,zero,1001345c <__register_exitproc+0x110>
100133e8:	81000017 	ldw	r4,0(r16)
100133ec:	10000115 	stw	zero,4(r2)
100133f0:	02000044 	movi	r8,1
100133f4:	22405217 	ldw	r9,328(r4)
100133f8:	0007883a 	mov	r3,zero
100133fc:	12400015 	stw	r9,0(r2)
10013400:	20805215 	stw	r2,328(r4)
10013404:	10006215 	stw	zero,392(r2)
10013408:	10006315 	stw	zero,396(r2)
1001340c:	883fde26 	beq	r17,zero,10013388 <__alt_data_end+0xf8013388>
10013410:	18c9883a 	add	r4,r3,r3
10013414:	2109883a 	add	r4,r4,r4
10013418:	1109883a 	add	r4,r2,r4
1001341c:	21802215 	stw	r6,136(r4)
10013420:	01800044 	movi	r6,1
10013424:	12406217 	ldw	r9,392(r2)
10013428:	30cc983a 	sll	r6,r6,r3
1001342c:	4992b03a 	or	r9,r9,r6
10013430:	12406215 	stw	r9,392(r2)
10013434:	21c04215 	stw	r7,264(r4)
10013438:	01000084 	movi	r4,2
1001343c:	893fd21e 	bne	r17,r4,10013388 <__alt_data_end+0xf8013388>
10013440:	11006317 	ldw	r4,396(r2)
10013444:	218cb03a 	or	r6,r4,r6
10013448:	11806315 	stw	r6,396(r2)
1001344c:	003fce06 	br	10013388 <__alt_data_end+0xf8013388>
10013450:	18805304 	addi	r2,r3,332
10013454:	18805215 	stw	r2,328(r3)
10013458:	003fc606 	br	10013374 <__alt_data_end+0xf8013374>
1001345c:	00bfffc4 	movi	r2,-1
10013460:	003fd006 	br	100133a4 <__alt_data_end+0xf80133a4>

10013464 <__call_exitprocs>:
10013464:	defff504 	addi	sp,sp,-44
10013468:	df000915 	stw	fp,36(sp)
1001346c:	dd400615 	stw	r21,24(sp)
10013470:	dc800315 	stw	r18,12(sp)
10013474:	dfc00a15 	stw	ra,40(sp)
10013478:	ddc00815 	stw	r23,32(sp)
1001347c:	dd800715 	stw	r22,28(sp)
10013480:	dd000515 	stw	r20,20(sp)
10013484:	dcc00415 	stw	r19,16(sp)
10013488:	dc400215 	stw	r17,8(sp)
1001348c:	dc000115 	stw	r16,4(sp)
10013490:	d9000015 	stw	r4,0(sp)
10013494:	2839883a 	mov	fp,r5
10013498:	04800044 	movi	r18,1
1001349c:	057fffc4 	movi	r21,-1
100134a0:	00840074 	movhi	r2,4097
100134a4:	1096c704 	addi	r2,r2,23324
100134a8:	12000017 	ldw	r8,0(r2)
100134ac:	45005217 	ldw	r20,328(r8)
100134b0:	44c05204 	addi	r19,r8,328
100134b4:	a0001c26 	beq	r20,zero,10013528 <__call_exitprocs+0xc4>
100134b8:	a0800117 	ldw	r2,4(r20)
100134bc:	15ffffc4 	addi	r23,r2,-1
100134c0:	b8000d16 	blt	r23,zero,100134f8 <__call_exitprocs+0x94>
100134c4:	14000044 	addi	r16,r2,1
100134c8:	8421883a 	add	r16,r16,r16
100134cc:	8421883a 	add	r16,r16,r16
100134d0:	84402004 	addi	r17,r16,128
100134d4:	a463883a 	add	r17,r20,r17
100134d8:	a421883a 	add	r16,r20,r16
100134dc:	e0001e26 	beq	fp,zero,10013558 <__call_exitprocs+0xf4>
100134e0:	80804017 	ldw	r2,256(r16)
100134e4:	e0801c26 	beq	fp,r2,10013558 <__call_exitprocs+0xf4>
100134e8:	bdffffc4 	addi	r23,r23,-1
100134ec:	843fff04 	addi	r16,r16,-4
100134f0:	8c7fff04 	addi	r17,r17,-4
100134f4:	bd7ff91e 	bne	r23,r21,100134dc <__alt_data_end+0xf80134dc>
100134f8:	00800034 	movhi	r2,0
100134fc:	10800004 	addi	r2,r2,0
10013500:	10000926 	beq	r2,zero,10013528 <__call_exitprocs+0xc4>
10013504:	a0800117 	ldw	r2,4(r20)
10013508:	1000301e 	bne	r2,zero,100135cc <__call_exitprocs+0x168>
1001350c:	a0800017 	ldw	r2,0(r20)
10013510:	10003226 	beq	r2,zero,100135dc <__call_exitprocs+0x178>
10013514:	a009883a 	mov	r4,r20
10013518:	98800015 	stw	r2,0(r19)
1001351c:	00000000 	call	10000000 <__alt_mem_sdram>
10013520:	9d000017 	ldw	r20,0(r19)
10013524:	a03fe41e 	bne	r20,zero,100134b8 <__alt_data_end+0xf80134b8>
10013528:	dfc00a17 	ldw	ra,40(sp)
1001352c:	df000917 	ldw	fp,36(sp)
10013530:	ddc00817 	ldw	r23,32(sp)
10013534:	dd800717 	ldw	r22,28(sp)
10013538:	dd400617 	ldw	r21,24(sp)
1001353c:	dd000517 	ldw	r20,20(sp)
10013540:	dcc00417 	ldw	r19,16(sp)
10013544:	dc800317 	ldw	r18,12(sp)
10013548:	dc400217 	ldw	r17,8(sp)
1001354c:	dc000117 	ldw	r16,4(sp)
10013550:	dec00b04 	addi	sp,sp,44
10013554:	f800283a 	ret
10013558:	a0800117 	ldw	r2,4(r20)
1001355c:	80c00017 	ldw	r3,0(r16)
10013560:	10bfffc4 	addi	r2,r2,-1
10013564:	15c01426 	beq	r2,r23,100135b8 <__call_exitprocs+0x154>
10013568:	80000015 	stw	zero,0(r16)
1001356c:	183fde26 	beq	r3,zero,100134e8 <__alt_data_end+0xf80134e8>
10013570:	95c8983a 	sll	r4,r18,r23
10013574:	a0806217 	ldw	r2,392(r20)
10013578:	a5800117 	ldw	r22,4(r20)
1001357c:	2084703a 	and	r2,r4,r2
10013580:	10000b26 	beq	r2,zero,100135b0 <__call_exitprocs+0x14c>
10013584:	a0806317 	ldw	r2,396(r20)
10013588:	2088703a 	and	r4,r4,r2
1001358c:	20000c1e 	bne	r4,zero,100135c0 <__call_exitprocs+0x15c>
10013590:	89400017 	ldw	r5,0(r17)
10013594:	d9000017 	ldw	r4,0(sp)
10013598:	183ee83a 	callr	r3
1001359c:	a0800117 	ldw	r2,4(r20)
100135a0:	15bfbf1e 	bne	r2,r22,100134a0 <__alt_data_end+0xf80134a0>
100135a4:	98800017 	ldw	r2,0(r19)
100135a8:	153fcf26 	beq	r2,r20,100134e8 <__alt_data_end+0xf80134e8>
100135ac:	003fbc06 	br	100134a0 <__alt_data_end+0xf80134a0>
100135b0:	183ee83a 	callr	r3
100135b4:	003ff906 	br	1001359c <__alt_data_end+0xf801359c>
100135b8:	a5c00115 	stw	r23,4(r20)
100135bc:	003feb06 	br	1001356c <__alt_data_end+0xf801356c>
100135c0:	89000017 	ldw	r4,0(r17)
100135c4:	183ee83a 	callr	r3
100135c8:	003ff406 	br	1001359c <__alt_data_end+0xf801359c>
100135cc:	a0800017 	ldw	r2,0(r20)
100135d0:	a027883a 	mov	r19,r20
100135d4:	1029883a 	mov	r20,r2
100135d8:	003fb606 	br	100134b4 <__alt_data_end+0xf80134b4>
100135dc:	0005883a 	mov	r2,zero
100135e0:	003ffb06 	br	100135d0 <__alt_data_end+0xf80135d0>

100135e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100135e4:	defffd04 	addi	sp,sp,-12
100135e8:	df000215 	stw	fp,8(sp)
100135ec:	df000204 	addi	fp,sp,8
100135f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100135f4:	0001883a 	nop
100135f8:	e0bfff17 	ldw	r2,-4(fp)
100135fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10013600:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10013604:	10000226 	beq	r2,zero,10013610 <_exit+0x2c>
    ALT_SIM_FAIL();
10013608:	002af070 	cmpltui	zero,zero,43969
1001360c:	00000106 	br	10013614 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10013610:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10013614:	003fff06 	br	10013614 <__alt_data_end+0xf8013614>
