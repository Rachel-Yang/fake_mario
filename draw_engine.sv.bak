
module draw_engine(
    input logic Clk,
    input [1:0] we, re,
    input [15:0] SRAM_DATA,
    output [19:0] SRAM_ADDR,

    input [9:0] DrawX, DrawY,
    input [9:0] mario_pos_x, mario_pos_y,
    input [2:0] bg_index, mario_index

);

logic [19:0] bg_offset, mario_offset;
/*
.ram 
bg_offset [640*480] = 640*480 = 307200 = 0x4B000
mario_offset [72*64] = 4608
*/
logic [18:0] buffer_address;

/* get SRAM_DATA*/
//select the bg and sprites
always_comb 
begin
    case (bg_index)
        3'd0: bg_offset = 19'd0;
        3'd1: bg_offset = 19'd307200;
    endcase

    case (mario_offset)
        3'd0: mario_offset = 19'd614400;
        3'd1: mario_offset = 19'd619008;
    endcase

    //draw the background
    SRAM_ADDR = bg_offset + DrawY * 20'd640 + DrawX;
    
    //draw sprites
    if (mario_pos_x <= DrawX && 
        mario_pos_x + 20'd64 > DrawX &&
        mario_pos_y <= DrawY &&
        mario_pos_y + 20'd72 > DrawY)

        SRAM_ADDR = mario_offset + (DrawY-mario_pos_y) * 20'd64 + (DrawX-mario_pos_x);
end

//draw to frame_buffer
assign buffer_address = DrawY * 20'd640 + DrawX;

frame_buffer wr_frame(.Clk,
                      .data_In(SRAM_DATA[4:0]),
                      .write_address(buffer_address),
                      .read_address(19'd0),
                      .we(we),
                      .re(re)
                      /*.data_Out*/
                    );

endmodule
