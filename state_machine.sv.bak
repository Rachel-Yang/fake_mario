
module state_machine(
    input logic Clk, 
                Reset,
    input [9:0] DrawX, DrawY,

    output [1:0] we, re,
    output [9:0] mario_pos_x, mario_pos_y,
    output [2:0] bg_index, mario_index
);

enum logic [1:0] = {Start, W0R1, W1R0}, State, Next_state;

always_ff @ (posedge Clk)
begin
    if (Reset) 
        State <= Start;
    else 
        State <= Next_state;
end

always_comb
begin 
    // Default next state is staying at current state
    Next_state = State;

    // Default controls signal values
    bg_index = 3'd0;
    mario_index = 3'd0;
    we = 2'b10;
    re = 2'b01;
    mario_pos_x = 10'd60;
    mario_pos_y = 10'd350;


    // Assign next state
    unique case (State)
        Start:
            Next_state = W0R1;
        W0R1:
            if (DrawX == 10'd799 && DrawY == 10'd524)
                Next_state = W1R0;
        W1R0:
            if (DrawX == 10'd799 && DrawY == 10'd524)
                Next_state = W0R1;
        default : ;
	endcase

    // Assign control signals based on current state
    case (State)
        Start:
        W0R1:
        begin
            bg_index = 3'd0;
            mario_index = 3'd0;
            we = 2'b10;
            re = 2'b01;
            mario_pos_x = 10'd60;
            mario_pos_y = 10'd350;
        end
        W1R0:
        begin
            bg_index = 3'd0;
            mario_index = 3'd0;
            we = 2'b01;
            re = 2'b10;
            mario_pos_x = 10'd60;
            mario_pos_y = 10'd350;
        end
        default : ;
    endcase
end

endmodule
